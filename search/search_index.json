{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Flare Network Technical Documentation # New here? Start with What Is Flare? Flare Fundamentals Descriptions of Flare's key concepts, technology and tools. User Guides Step-by-step guides for tools like the Explorer or the different wallets. Infrastructure Guides Step-by-step guides to deploy your own Flare network components. Exchange Guides Advice for exchanges willing to support the Flare blockchain. Developer Docs Programming tutorials to help you build your app using Flare's tech. API Reference Guides API documentation and access RPC nodes. These pages are a Work In Progress . Use the contact buttons at the bottom of the page if there is anything you cannot find here! /*Special centered title for the Home page*/ h1 { text-align: center; } /*Remove the \"Last updated\" text at the bottom*/ .md-source-file { display: none; }","title":"Welcome to the Flare Network Technical Documentation"},{"location":"#welcome-to-the-flare-network-technical-documentation","text":"New here? Start with What Is Flare? Flare Fundamentals Descriptions of Flare's key concepts, technology and tools. User Guides Step-by-step guides for tools like the Explorer or the different wallets. Infrastructure Guides Step-by-step guides to deploy your own Flare network components. Exchange Guides Advice for exchanges willing to support the Flare blockchain. Developer Docs Programming tutorials to help you build your app using Flare's tech. API Reference Guides API documentation and access RPC nodes. These pages are a Work In Progress . Use the contact buttons at the bottom of the page if there is anything you cannot find here! /*Special centered title for the Home page*/ h1 { text-align: center; } /*Remove the \"Last updated\" text at the bottom*/ .md-source-file { display: none; }","title":"Welcome to the Flare Network Technical Documentation"},{"location":"apis/","text":"APIs # Select one of the topics below: Flare API Documentation # Smart Contracts API (Work in progress) External Documentation # web3.js API ethers.js API Access Nodes Public RPC nodes for Flare, Songbird and Coston. Public RPC nodes for connected chains Flare API Portal (private nodes)","title":"APIs"},{"location":"apis/#apis","text":"Select one of the topics below:","title":"APIs"},{"location":"apis/#flare-api-documentation","text":"Smart Contracts API (Work in progress)","title":"Flare API Documentation"},{"location":"apis/#external-documentation","text":"web3.js API ethers.js API Access Nodes Public RPC nodes for Flare, Songbird and Coston. Public RPC nodes for connected chains Flare API Portal (private nodes)","title":"External Documentation"},{"location":"apis/smart-contracts/","text":"Smart Contracts API # List of Flare smart contracts. Contracts # Name Description AddressUpdatable Abstract base class for contracts that depend on other contracts whose addresses can change. AddressUpdater Keeps track of the current address for all unique and special platform contracts. CheckPointable Check-Pointable ERC20 Behavior. ClaimSetupManager Manages automation of operations related to reward claiming. CleanupBlockNumberManager Token history cleanup manager. CloneFactory Simple clone contract factory. Delegatable Delegatable ERC20 behavior. FlareContractRegistry The Flare contract registry. FlareDaemon Flare Daemon contract. Ftso Flare Time Series Oracle contract. FtsoManager FTSO Manager contract. FtsoRegistry Handles registration of assets to the FTSO system . FtsoRewardManager Handles reward distribution and claiming related to the FTSO system. GovernanceSettings A special contract that holds the Flare governance address and its timelock. GovernanceVotePower Contract managing governance vote power and its delegation. Governed Defines behaviors for governed contracts that must have a governor set at construction-time. GovernedAndFlareDaemonized Base class for contracts that are governed and triggered from the FlareDaemon . GovernedAtGenesis Defines behaviors for governed contracts that have their governor set at genesis. GovernedBase Abstract base class that defines behaviors for governed contracts. Inflation Recognizes, authorizes, mints, and funds native tokens to Flare services that are rewardable through inflation. PriceSubmitter Receives prices from FTSO data providers . RevertErrorTracking Revert error tracking contract. VoterWhitelister Manager of the FTSO whitelist . VPContract Helper contract handling all the vote power and delegation functionality for an associated VPToken . VPToken Vote power token. WNat Wrapped native token. Interfaces # Name Description IClaimSetupManager Public interface for the ClaimSetupManager contract. IFlareContractRegistry Interface for the FlareContractRegistry . IFlareDaemonize Interface for contracts that receive triggers from the FlareDaemon contract. IFtso Interface for each of the FTSO contracts that handles an asset. IFtsoGenesis Portion of the IFtso interface that is available to contracts deployed at genesis. IFtsoManager Interface for the FtsoManager contract. IFtsoManagerGenesis Portion of the IFtsoManager interface that is available to contracts deployed at genesis. IFtsoRegistry Interface for the FtsoRegistry contract. IFtsoRegistryGenesis Portion of the IFtsoRegistry interface that is available to contracts deployed at genesis. IFtsoRewardManager Interface for the FtsoRewardManager contract. IGovernanceSettings Interface for the GovernanceSettings that hold the Flare governance address and its timelock. IGovernanceVotePower Interface for contracts delegating their governance vote power. IInflationGenesis Portion of the Inflation contract that is available to contracts deployed at genesis. IPriceSubmitter Interface for the PriceSubmitter contract. IVoterWhitelister Interface for managers of the FTSO whitelist . IVPContractEvents Events interface for vote-power related operations. IVPToken Vote power token interface. IWNat Wrapped native token interface. Internal Interfaces # For platform development, not application. Name Description IIAddressUpdatable Internal interface for contracts that depend on other contracts whose addresses can change. IIAddressUpdater Internal interface for AddressUpdater . IIClaimSetupManager Internal interface for the ClaimSetupManager contract. IICleanable Internal interface for entities that can have their block history cleaned. IIFtso Internal interface for each of the FTSO contracts that handles an asset. IIFtsoManager Internal interface for the FtsoManager contract. IIFtsoRegistry Internal interface for the FtsoRegistry contract. IIFtsoRewardManager Internal interface for the FtsoRewardManager . IIGovernanceVotePower Internal interface for contracts delegating their governance vote power. IIInflationReceiver Internal interface for contracts that can receive inflation. IIPriceSubmitter Internal interface for the PriceSubmitter contract. IITokenPool Internal interface for token pools. IIVoterWhitelister Internal interface for managers of the FTSO whitelist . IIVPContract Internal interface for helper contracts handling functionality for an associated VPToken . IIVPToken Vote power token internal interface. td:first-child {white-space: nowrap;}","title":"Smart Contracts API"},{"location":"apis/smart-contracts/#smart-contracts-api","text":"List of Flare smart contracts.","title":"Smart Contracts API"},{"location":"apis/smart-contracts/#contracts","text":"Name Description AddressUpdatable Abstract base class for contracts that depend on other contracts whose addresses can change. AddressUpdater Keeps track of the current address for all unique and special platform contracts. CheckPointable Check-Pointable ERC20 Behavior. ClaimSetupManager Manages automation of operations related to reward claiming. CleanupBlockNumberManager Token history cleanup manager. CloneFactory Simple clone contract factory. Delegatable Delegatable ERC20 behavior. FlareContractRegistry The Flare contract registry. FlareDaemon Flare Daemon contract. Ftso Flare Time Series Oracle contract. FtsoManager FTSO Manager contract. FtsoRegistry Handles registration of assets to the FTSO system . FtsoRewardManager Handles reward distribution and claiming related to the FTSO system. GovernanceSettings A special contract that holds the Flare governance address and its timelock. GovernanceVotePower Contract managing governance vote power and its delegation. Governed Defines behaviors for governed contracts that must have a governor set at construction-time. GovernedAndFlareDaemonized Base class for contracts that are governed and triggered from the FlareDaemon . GovernedAtGenesis Defines behaviors for governed contracts that have their governor set at genesis. GovernedBase Abstract base class that defines behaviors for governed contracts. Inflation Recognizes, authorizes, mints, and funds native tokens to Flare services that are rewardable through inflation. PriceSubmitter Receives prices from FTSO data providers . RevertErrorTracking Revert error tracking contract. VoterWhitelister Manager of the FTSO whitelist . VPContract Helper contract handling all the vote power and delegation functionality for an associated VPToken . VPToken Vote power token. WNat Wrapped native token.","title":"Contracts"},{"location":"apis/smart-contracts/#interfaces","text":"Name Description IClaimSetupManager Public interface for the ClaimSetupManager contract. IFlareContractRegistry Interface for the FlareContractRegistry . IFlareDaemonize Interface for contracts that receive triggers from the FlareDaemon contract. IFtso Interface for each of the FTSO contracts that handles an asset. IFtsoGenesis Portion of the IFtso interface that is available to contracts deployed at genesis. IFtsoManager Interface for the FtsoManager contract. IFtsoManagerGenesis Portion of the IFtsoManager interface that is available to contracts deployed at genesis. IFtsoRegistry Interface for the FtsoRegistry contract. IFtsoRegistryGenesis Portion of the IFtsoRegistry interface that is available to contracts deployed at genesis. IFtsoRewardManager Interface for the FtsoRewardManager contract. IGovernanceSettings Interface for the GovernanceSettings that hold the Flare governance address and its timelock. IGovernanceVotePower Interface for contracts delegating their governance vote power. IInflationGenesis Portion of the Inflation contract that is available to contracts deployed at genesis. IPriceSubmitter Interface for the PriceSubmitter contract. IVoterWhitelister Interface for managers of the FTSO whitelist . IVPContractEvents Events interface for vote-power related operations. IVPToken Vote power token interface. IWNat Wrapped native token interface.","title":"Interfaces"},{"location":"apis/smart-contracts/#internal-interfaces","text":"For platform development, not application. Name Description IIAddressUpdatable Internal interface for contracts that depend on other contracts whose addresses can change. IIAddressUpdater Internal interface for AddressUpdater . IIClaimSetupManager Internal interface for the ClaimSetupManager contract. IICleanable Internal interface for entities that can have their block history cleaned. IIFtso Internal interface for each of the FTSO contracts that handles an asset. IIFtsoManager Internal interface for the FtsoManager contract. IIFtsoRegistry Internal interface for the FtsoRegistry contract. IIFtsoRewardManager Internal interface for the FtsoRewardManager . IIGovernanceVotePower Internal interface for contracts delegating their governance vote power. IIInflationReceiver Internal interface for contracts that can receive inflation. IIPriceSubmitter Internal interface for the PriceSubmitter contract. IITokenPool Internal interface for token pools. IIVoterWhitelister Internal interface for managers of the FTSO whitelist . IIVPContract Internal interface for helper contracts handling functionality for an associated VPToken . IIVPToken Vote power token internal interface. td:first-child {white-space: nowrap;}","title":"Internal Interfaces"},{"location":"apis/smart-contracts/AddressUpdatable/","text":"AddressUpdatable # Source | Inherits from IIAddressUpdatable Abstract base class for contracts that depend on other contracts whose addresses can change. The AddressUpdater contract keeps a list of addresses for all unique and special platform contracts. By inheriting from AddressUpdatable a contract will receive updates if any of the platform contract addresses change. A contract's address changes when it is redeployed, so AddressUpdatable offers a way to keep up to date with the latest address for all dependencies. Functions # getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. Modifiers # onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. Variables #","title":"AddressUpdatable"},{"location":"apis/smart-contracts/AddressUpdatable/#ct_addressupdatable","text":"Source | Inherits from IIAddressUpdatable Abstract base class for contracts that depend on other contracts whose addresses can change. The AddressUpdater contract keeps a list of addresses for all unique and special platform contracts. By inheriting from AddressUpdatable a contract will receive updates if any of the platform contract addresses change. A contract's address changes when it is redeployed, so AddressUpdatable offers a way to keep up to date with the latest address for all dependencies.","title":"AddressUpdatable"},{"location":"apis/smart-contracts/AddressUpdatable/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/AddressUpdatable/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/AddressUpdatable/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/AddressUpdatable/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/AddressUpdatable/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/AddressUpdatable/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/AddressUpdater/","text":"AddressUpdater # Source | Inherits from IIAddressUpdater , Governed Keeps track of the current address for all unique and special platform contracts. This contract keeps a list of addresses that gets updated by governance every time any of the tracked contracts is redeployed. This list is then used by the FlareContractRegistry , and also by AddressUpdatable to inform all dependent contracts of any address change. Functions # addOrUpdateContractNamesAndAddresses # Defined in AddressUpdater ( Docs , Source ). function addOrUpdateContractNamesAndAddresses ( string [] _contractNames , address [] _contractAddresses ) external ; Add or update contract names and addresses that are later used in updateContractAddresses calls. Can only be called by governance . Parameters Type Description _contractNames string[] Contracts names. _contractAddresses address[] Addresses of corresponding contracts names. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in AddressUpdater ( Docs , Source ). constructor ( address _governance ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getContractAddress # Defined in AddressUpdater ( Docs , Source ). function getContractAddress ( string _name ) external view returns ( address ); Returns contract address for the given name, which might be address(0). Parameters Type Description _name string Name of the contract to query. Returns Type Description [0] address Current address for the queried contract. getContractAddressByHash # Defined in AddressUpdater ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns contract address for the given name hash, which might be address(0). Parameters Type Description _nameHash bytes32 Hash of the contract name: keccak256(abi.encode(name)) Returns Type Description [0] address Current address for the queried contract. getContractAddresses # Defined in AddressUpdater ( Docs , Source ). function getContractAddresses ( string [] _names ) external view returns ( address []); Returns contract addresses for the given names, which might be address(0). Parameters Type Description _names string[] Names of the contracts to query. Returns Type Description [0] address[] Current addresses for the queried contracts. getContractAddressesByHash # Defined in AddressUpdater ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns contract addresses for the given name hashes, which might be address(0). Parameters Type Description _nameHashes bytes32[] Hashes of the contract names: keccak256(abi.encode(name)) Returns Type Description [0] address[] Current addresses for the queried contracts. getContractNamesAndAddresses # Defined in AddressUpdater ( Docs , Source ). function getContractNamesAndAddresses ( ) external view returns ( string [] _contractNames , address [] _contractAddresses ); Returns all contract names and corresponding addresses currently being tracked. Returns Type Description _contractNames string[] Array of contract names. _contractAddresses address[] Array of contract addresses. governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. removeContracts # Defined in AddressUpdater ( Docs , Source ). function removeContracts ( string [] _contractNames ) external ; Remove contracts with given names. Can only be called by governance . Parameters Type Description _contractNames string[] Contract names. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . update # Defined in AddressUpdater ( Docs , Source ). function update ( string [] _contractNames , address [] _contractAddresses , contract IIAddressUpdatable [] _contractsToUpdate ) external ; Set or update contract names and addresses, and then apply changes to specific contracts. This is a combination of addOrUpdateContractNamesAndAddresses and updateContractAddresses . Can only be called by governance . Parameters Type Description _contractNames string[] Contracts names. _contractAddresses address[] Addresses of corresponding contracts names. _contractsToUpdate contract IIAddressUpdatable[] Contracts to be updated. updateContractAddresses # Defined in AddressUpdater ( Docs , Source ). function updateContractAddresses ( contract IIAddressUpdatable [] _contractsToUpdate ) external ; Updates contract addresses on specific contracts. Can only be called by governance . Parameters Type Description _contractsToUpdate contract IIAddressUpdatable[] Contracts to be updated, which must implement the IIAddressUpdatable interface. Variables # governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"AddressUpdater"},{"location":"apis/smart-contracts/AddressUpdater/#ct_addressupdater","text":"Source | Inherits from IIAddressUpdater , Governed Keeps track of the current address for all unique and special platform contracts. This contract keeps a list of addresses that gets updated by governance every time any of the tracked contracts is redeployed. This list is then used by the FlareContractRegistry , and also by AddressUpdatable to inform all dependent contracts of any address change.","title":"AddressUpdater"},{"location":"apis/smart-contracts/AddressUpdater/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/AddressUpdater/#fn_addorupdatecontractnamesandaddresses_8246e467","text":"Defined in AddressUpdater ( Docs , Source ). function addOrUpdateContractNamesAndAddresses ( string [] _contractNames , address [] _contractAddresses ) external ; Add or update contract names and addresses that are later used in updateContractAddresses calls. Can only be called by governance . Parameters Type Description _contractNames string[] Contracts names. _contractAddresses address[] Addresses of corresponding contracts names.","title":"addOrUpdateContractNamesAndAddresses"},{"location":"apis/smart-contracts/AddressUpdater/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/AddressUpdater/#fn_constructor_undefined","text":"Defined in AddressUpdater ( Docs , Source ). constructor ( address _governance ) public ;","title":"constructor"},{"location":"apis/smart-contracts/AddressUpdater/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/AddressUpdater/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/AddressUpdater/#fn_getcontractaddress_04433bbc","text":"Defined in AddressUpdater ( Docs , Source ). function getContractAddress ( string _name ) external view returns ( address ); Returns contract address for the given name, which might be address(0). Parameters Type Description _name string Name of the contract to query. Returns Type Description [0] address Current address for the queried contract.","title":"getContractAddress"},{"location":"apis/smart-contracts/AddressUpdater/#fn_getcontractaddressbyhash_159354a2","text":"Defined in AddressUpdater ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns contract address for the given name hash, which might be address(0). Parameters Type Description _nameHash bytes32 Hash of the contract name: keccak256(abi.encode(name)) Returns Type Description [0] address Current address for the queried contract.","title":"getContractAddressByHash"},{"location":"apis/smart-contracts/AddressUpdater/#fn_getcontractaddresses_ee6f63c3","text":"Defined in AddressUpdater ( Docs , Source ). function getContractAddresses ( string [] _names ) external view returns ( address []); Returns contract addresses for the given names, which might be address(0). Parameters Type Description _names string[] Names of the contracts to query. Returns Type Description [0] address[] Current addresses for the queried contracts.","title":"getContractAddresses"},{"location":"apis/smart-contracts/AddressUpdater/#fn_getcontractaddressesbyhash_5e11e2d1","text":"Defined in AddressUpdater ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns contract addresses for the given name hashes, which might be address(0). Parameters Type Description _nameHashes bytes32[] Hashes of the contract names: keccak256(abi.encode(name)) Returns Type Description [0] address[] Current addresses for the queried contracts.","title":"getContractAddressesByHash"},{"location":"apis/smart-contracts/AddressUpdater/#fn_getcontractnamesandaddresses_2f26c5c3","text":"Defined in AddressUpdater ( Docs , Source ). function getContractNamesAndAddresses ( ) external view returns ( string [] _contractNames , address [] _contractAddresses ); Returns all contract names and corresponding addresses currently being tracked. Returns Type Description _contractNames string[] Array of contract names. _contractAddresses address[] Array of contract addresses.","title":"getContractNamesAndAddresses"},{"location":"apis/smart-contracts/AddressUpdater/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/AddressUpdater/#fn_removecontracts_70d44f28","text":"Defined in AddressUpdater ( Docs , Source ). function removeContracts ( string [] _contractNames ) external ; Remove contracts with given names. Can only be called by governance . Parameters Type Description _contractNames string[] Contract names.","title":"removeContracts"},{"location":"apis/smart-contracts/AddressUpdater/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/AddressUpdater/#fn_update_9933dba6","text":"Defined in AddressUpdater ( Docs , Source ). function update ( string [] _contractNames , address [] _contractAddresses , contract IIAddressUpdatable [] _contractsToUpdate ) external ; Set or update contract names and addresses, and then apply changes to specific contracts. This is a combination of addOrUpdateContractNamesAndAddresses and updateContractAddresses . Can only be called by governance . Parameters Type Description _contractNames string[] Contracts names. _contractAddresses address[] Addresses of corresponding contracts names. _contractsToUpdate contract IIAddressUpdatable[] Contracts to be updated.","title":"update"},{"location":"apis/smart-contracts/AddressUpdater/#fn_updatecontractaddresses_1b0e2960","text":"Defined in AddressUpdater ( Docs , Source ). function updateContractAddresses ( contract IIAddressUpdatable [] _contractsToUpdate ) external ; Updates contract addresses on specific contracts. Can only be called by governance . Parameters Type Description _contractsToUpdate contract IIAddressUpdatable[] Contracts to be updated, which must implement the IIAddressUpdatable interface.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/AddressUpdater/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/AddressUpdater/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/AddressUpdater/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/AddressUpdater/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/CheckPointable/","text":"CheckPointable # Source Check-Pointable ERC20 Behavior. ERC20 behavior that adds balance check-point features. Events # CreatedTotalSupplyCache # Defined in CheckPointable ( Docs , Source ). event CreatedTotalSupplyCache ( uint256 _blockNumber ) Emitted when a total supply cache entry is created. Allows history cleaners to track total supply cache cleanup opportunities off-chain. Functions # balanceHistoryCleanup # Defined in CheckPointable ( Docs , Source ). function balanceHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete balance checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address balance owner account address _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted totalSupplyCacheCleanup # Defined in CheckPointable ( Docs , Source ). function totalSupplyCacheCleanup ( uint256 _blockNumber ) external returns ( uint256 ); Delete total supply cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _blockNumber uint256 the block number for which total supply value was cached Returns Type Description [0] uint256 the number of cache entries deleted (always 0 or 1) totalSupplyHistoryCleanup # Defined in CheckPointable ( Docs , Source ). function totalSupplyHistoryCleanup ( uint256 _count ) external returns ( uint256 ); Delete total supply checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted Modifiers # notBeforeCleanupBlock # Defined in CheckPointable ( Docs , Source ). modifier notBeforeCleanupBlock ( uint256 _blockNumber ) This method cannot be called for _blockNumber lower than the current cleanup block number. onlyCleaner # Defined in CheckPointable ( Docs , Source ). modifier onlyCleaner () Only the cleanerContract can call this method. Variables # cleanerContract # Defined in CheckPointable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning.","title":"CheckPointable"},{"location":"apis/smart-contracts/CheckPointable/#ct_checkpointable","text":"Source Check-Pointable ERC20 Behavior. ERC20 behavior that adds balance check-point features.","title":"CheckPointable"},{"location":"apis/smart-contracts/CheckPointable/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/CheckPointable/#ev_createdtotalsupplycache","text":"Defined in CheckPointable ( Docs , Source ). event CreatedTotalSupplyCache ( uint256 _blockNumber ) Emitted when a total supply cache entry is created. Allows history cleaners to track total supply cache cleanup opportunities off-chain.","title":"CreatedTotalSupplyCache"},{"location":"apis/smart-contracts/CheckPointable/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/CheckPointable/#fn_balancehistorycleanup_f0e292c9","text":"Defined in CheckPointable ( Docs , Source ). function balanceHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete balance checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address balance owner account address _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted","title":"balanceHistoryCleanup"},{"location":"apis/smart-contracts/CheckPointable/#fn_totalsupplycachecleanup_43ea370b","text":"Defined in CheckPointable ( Docs , Source ). function totalSupplyCacheCleanup ( uint256 _blockNumber ) external returns ( uint256 ); Delete total supply cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _blockNumber uint256 the block number for which total supply value was cached Returns Type Description [0] uint256 the number of cache entries deleted (always 0 or 1)","title":"totalSupplyCacheCleanup"},{"location":"apis/smart-contracts/CheckPointable/#fn_totalsupplyhistorycleanup_f62f8f3a","text":"Defined in CheckPointable ( Docs , Source ). function totalSupplyHistoryCleanup ( uint256 _count ) external returns ( uint256 ); Delete total supply checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted","title":"totalSupplyHistoryCleanup"},{"location":"apis/smart-contracts/CheckPointable/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/CheckPointable/#md_notbeforecleanupblock","text":"Defined in CheckPointable ( Docs , Source ). modifier notBeforeCleanupBlock ( uint256 _blockNumber ) This method cannot be called for _blockNumber lower than the current cleanup block number.","title":"notBeforeCleanupBlock"},{"location":"apis/smart-contracts/CheckPointable/#md_onlycleaner","text":"Defined in CheckPointable ( Docs , Source ). modifier onlyCleaner () Only the cleanerContract can call this method.","title":"onlyCleaner"},{"location":"apis/smart-contracts/CheckPointable/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/CheckPointable/#va_cleanercontract","text":"Defined in CheckPointable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning.","title":"cleanerContract"},{"location":"apis/smart-contracts/ClaimSetupManager/","text":"ClaimSetupManager # Source | Inherits from IIClaimSetupManager , Governed , AddressUpdatable , CloneFactory , ReentrancyGuard Manages automation of operations related to reward claiming. Rewards include FTSO rewards and airdrops . Managed operations include Automatic Claiming and Personal Delegation Accounts . Functions # accountToDelegationAccount # Defined in ClaimSetupManager ( Docs , Source ). function accountToDelegationAccount ( address _owner ) external view returns ( address ); Gets the PDA of an account. Parameters Type Description _owner address Account to query. Returns Type Description [0] address Address of its PDA or address(0) if it has not been created yet. allowedClaimRecipients # Defined in ClaimSetupManager ( Docs , Source ). function allowedClaimRecipients ( address _owner ) external view returns ( address []); Gets the addresses of recipients allowed to receive rewards on behalf of an account. Beside these, the owner of the rewards is always authorized. See setAllowedClaimRecipients . Parameters Type Description _owner address Returns Type Description [0] address[] Addresses of all set authorized recipients. batchDelegate # Defined in ClaimSetupManager ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegates all percentage delegations from the caller's PDA and then delegate to a list of accounts. See delegate . Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentage of voting power to be delegated to each delegatee, expressed in basis points (1/100 of one percent). Total of all _bips values must be lower than 10000. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. checkExecutorAndAllowedRecipient # Defined in ClaimSetupManager ( Docs , Source ). function checkExecutorAndAllowedRecipient ( address _executor , address _claimFor , address _recipient ) external view ; Checks if an executor can claim on behalf of a given account and send funds to a given recipient address. Reverts if claiming is not possible, does nothing otherwise. Parameters Type Description _executor address The executor to query. _claimFor address _recipient address The address where the reward would be sent. claimExecutors # Defined in ClaimSetupManager ( Docs , Source ). function claimExecutors ( address _owner ) external view returns ( address []); Gets the addresses of executors authorized to claim for an account. See setClaimExecutors . Parameters Type Description _owner address The account to query. Returns Type Description [0] address[] Addresses of all set executors. constructor # Defined in ClaimSetupManager ( Docs , Source ). constructor ( address _governance , address _addressUpdater , uint256 _feeValueUpdateOffset , uint256 _minFeeValueWei , uint256 _maxFeeValueWei , uint256 _registerExecutorFeeValueWei ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. delegate # Defined in ClaimSetupManager ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegates a percentage of the caller's PDA 's voting power to another address. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: Every call resets the delegation value. A value of 0 revokes delegation. delegateGovernance # Defined in ClaimSetupManager ( Docs , Source ). function delegateGovernance ( address _to ) external ; Delegates all the governance vote power of the caller's PDA to another account. Parameters Type Description _to address Address of the recipient of the delegation. disableDelegationAccount # Defined in ClaimSetupManager ( Docs , Source ). function disableDelegationAccount ( ) external ; Disables the Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the owner's account. Rewards accrued by the PDA will no longer be automatically claimed. Reverts if there is no PDA. enableDelegationAccount # Defined in ClaimSetupManager ( Docs , Source ). function enableDelegationAccount ( ) external returns ( contract IDelegationAccount ); Enables (or creates) a Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the PDA, and any rewards accrued by the PDA will be claimed too. Returns Type Description [0] contract IDelegationAccount Address of the delegation account contract. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getAutoClaimAddressesAndExecutorFee # Defined in ClaimSetupManager ( Docs , Source ). function getAutoClaimAddressesAndExecutorFee ( address _executor , address [] _owners ) external view returns ( address [] _recipients , uint256 _executorFeeValue ); Gets the Personal Delegation Account (PDA) for a list of accounts for which an executor is claiming. Returns owner address instead if the PDA is not created yet or not enabled. Parameters Type Description _executor address Executor to query. _owners address[] Array of reward owners which must have set _executor as their executor. Returns Type Description _recipients address[] Addresses which will receive the claimed rewards. Can be the reward owners or their PDAs. _executorFeeValue uint256 Executor's fee value, in wei. getDelegationAccountData # Defined in ClaimSetupManager ( Docs , Source ). function getDelegationAccountData ( address _owner ) external view returns ( contract IDelegationAccount _delegationAccount , bool _enabled ); Gets PDA data for an account. Parameters Type Description _owner address Account to query. Returns Type Description _delegationAccount contract IDelegationAccount Account's PDA address or address(0) if it has not been created yet. _enabled bool Whether the PDA is enabled. getExecutorCurrentFeeValue # Defined in ClaimSetupManager ( Docs , Source ). function getExecutorCurrentFeeValue ( address _executor ) public view returns ( uint256 ); Returns the current fee of a registered executor. Reverts if the executor is not registered. Parameters Type Description _executor address The executor to query. Returns Type Description [0] uint256 Fee in wei. getExecutorFeeValue # Defined in ClaimSetupManager ( Docs , Source ). function getExecutorFeeValue ( address _executor , uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the fee of an executor at a given reward epoch. Parameters Type Description _executor address The executor to query. _rewardEpoch uint256 Reward Epoch ID to query. Returns Type Description [0] uint256 Fee in wei at that reward epoch. getExecutorInfo # Defined in ClaimSetupManager ( Docs , Source ). function getExecutorInfo ( address _executor ) external view returns ( bool _registered , uint256 _currentFeeValue ); Returns information about an executor. Parameters Type Description _executor address The executor to query. Returns Type Description _registered bool Whether the executor is registered. _currentFeeValue uint256 Executor's current fee value, if registered. getExecutorScheduledFeeValueChanges # Defined in ClaimSetupManager ( Docs , Source ). function getExecutorScheduledFeeValueChanges ( address _executor ) external view returns ( uint256 [] _feeValue , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the currently scheduled fee changes of an executor. Parameters Type Description _executor address Executor to query. Returns Type Description _feeValue uint256[] Array of scheduled fees. _validFromEpoch uint256[] Array of reward epochs ID where the scheduled fees will become effective. _fixed bool[] Array of booleans indicating if an scheduled fee change is fixed or it might still be changed. getRegisteredExecutors # Defined in ClaimSetupManager ( Docs , Source ). function getRegisteredExecutors ( uint256 _start , uint256 _end ) external view returns ( address [] _registeredExecutors , uint256 _totalLength ); Returns the list of executors registered through registerExecutor . Supports paging. Parameters Type Description _start uint256 First executor to return. _end uint256 Last executor to return. Returns Type Description _registeredExecutors address[] Addresses of the registered executors. _totalLength uint256 Total amount of executors. governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. isClaimExecutor # Defined in ClaimSetupManager ( Docs , Source ). function isClaimExecutor ( address _owner , address _executor ) external view returns ( bool ); Returns whether an executor is authorized to claim on behalf of a reward owner. See setClaimExecutors . Parameters Type Description _owner address The reward owner to query. _executor address The executor to query. registerExecutor # Defined in ClaimSetupManager ( Docs , Source ). function registerExecutor ( uint256 _feeValue ) external payable returns ( uint256 ); Registers the caller as an executor and sets its initial fee value. If the executor was already registered, this method only updates the fee, which will take effect after feeValueUpdateOffset reward epochs have elapsed. Executor must pay a fee in order to register. See registerExecutorFeeValueWei . Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective. revokeDelegationAt # Defined in ClaimSetupManager ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revokes all delegation from the caller's PDA to a given account at a given block. Only affects the reads via votePowerOfAtCached() in the specified block. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate with percentage of 0 or undelegateAll . Parameters Type Description _who address The account to revoke. _blockNumber uint256 Block number where the revoking will take place. Must be in the past. setAllowedClaimRecipients # Defined in ClaimSetupManager ( Docs , Source ). function setAllowedClaimRecipients ( address [] _recipients ) external ; Set the addresses of allowed recipients. The reward owner is always an allowed recipient. Parameters Type Description _recipients address[] The new allowed recipients. All old recipients will be deleted and replaced by these. setAutoClaiming # Defined in ClaimSetupManager ( Docs , Source ). function setAutoClaiming ( address [] _executors , bool _enableDelegationAccount ) external payable ; Sets the addresses of executors and optionally enables (creates) a Personal Delegation Account (PDA). If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. _enableDelegationAccount bool Whether the PDA should be enabled. setClaimExecutors # Defined in ClaimSetupManager ( Docs , Source ). function setClaimExecutors ( address [] _executors ) external payable ; Sets the addresses of executors. If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. setLibraryAddress # Defined in ClaimSetupManager ( Docs , Source ). function setLibraryAddress ( address _libraryAddress ) external ; Sets new library address. Only governance can call this. setMaxFeeValueWei # Defined in ClaimSetupManager ( Docs , Source ). function setMaxFeeValueWei ( uint256 _maxFeeValueWei ) external ; Sets maximum fee allowed for executors, in wei. Only governance can call this. setMinFeeValueWei # Defined in ClaimSetupManager ( Docs , Source ). function setMinFeeValueWei ( uint256 _minFeeValueWei ) external ; Sets minimum fee allowed for executors, in wei. Only governance can call this. setRegisterExecutorFeeValueWei # Defined in ClaimSetupManager ( Docs , Source ). function setRegisterExecutorFeeValueWei ( uint256 _registerExecutorFeeValueWei ) external ; Sets the fee required to register an executor, which must be higher than 0. Only governance can call this. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . transferExternalToken # Defined in ClaimSetupManager ( Docs , Source ). function transferExternalToken ( contract IERC20 _token , uint256 _amount ) external ; Allows the caller to transfer ERC-20 tokens from their PDA to the owner account. The main use case is to move ERC-20 tokes received by mistake (by an airdrop, for example) out of the PDA and into the main account, where they can be more easily managed. Reverts if the target token is the WNat contract: use method withdraw for that. Parameters Type Description _token contract IERC20 Target token contract address. _amount uint256 Amount of tokens to transfer. undelegateAll # Defined in ClaimSetupManager ( Docs , Source ). function undelegateAll ( ) external ; Removes all delegations from the caller's PDA . undelegateGovernance # Defined in ClaimSetupManager ( Docs , Source ). function undelegateGovernance ( ) external ; Undelegates all governance vote power currently delegated by the caller's PDA . unregisterExecutor # Defined in ClaimSetupManager ( Docs , Source ). function unregisterExecutor ( ) external returns ( uint256 _validFromEpoch ); Unregisters the caller as an executor. Returns Type Description _validFromEpoch uint256 Reward epoch ID when the change becomes effective. updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. updateExecutorFeeValue # Defined in ClaimSetupManager ( Docs , Source ). function updateExecutorFeeValue ( uint256 _feeValue ) external returns ( uint256 ); Sets the caller's executor fee. The caller must be an executor registered through registerExecutor . When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective. wNat # Defined in IIClaimSetupManager ( Docs , Source ). function wNat ( ) external view returns ( contract WNat ); Returns the WNat contract. withdraw # Defined in ClaimSetupManager ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Allows the caller to transfer WNat wrapped tokens from their PDA to the owner account. Parameters Type Description _amount uint256 Amount of tokens to transfer, in wei. Modifiers # nonReentrant # Defined in ReentrancyGuard ( Source ). modifier nonReentrant () Prevents a contract from calling itself, directly or indirectly. Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to prevent this from happening by making the nonReentrant function external, and make it call a private function that does the actual work. onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () onlyOwnerOrExecutor # Defined in ClaimSetupManager ( Docs , Source ). modifier onlyOwnerOrExecutor ( address _executor , address [] _owners ) Structures # DelegationAccountData # Defined in ClaimSetupManager ( Docs , Source ). struct DelegationAccountData { contract IIDelegationAccount delegationAccount ; bool enabled ; } ExecutorFee # Defined in ClaimSetupManager ( Docs , Source ). struct ExecutorFee { uint256 value ; uint256 validFromEpoch ; } TimelockedCall # Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; } Variables # feeValueUpdateOffset # Defined in ClaimSetupManager ( Docs , Source ). uint256 feeValueUpdateOffset Number of reward epochs that must elapse before an executor's fee change takes effect. ftsoManager # Defined in ClaimSetupManager ( Docs , Source ). contract IFtsoManager ftsoManager The FtsoManager contract. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. governanceVP # Defined in ClaimSetupManager ( Docs , Source ). contract IGovernanceVotePower governanceVP The GovernanceVotePower contract. libraryAddress # Defined in ClaimSetupManager ( Docs , Source ). address libraryAddress maxFeeValueWei # Defined in ClaimSetupManager ( Docs , Source ). uint256 maxFeeValueWei Maximum allowed value for an executor's fee. minFeeValueWei # Defined in ClaimSetupManager ( Docs , Source ). uint256 minFeeValueWei Minimum allowed value for an executor's fee. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . registerExecutorFeeValueWei # Defined in ClaimSetupManager ( Docs , Source ). uint256 registerExecutorFeeValueWei Fee that must be paid to register an executor. timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls. wNat # Defined in ClaimSetupManager ( Docs , Source ). contract WNat wNat The WNat contract.","title":"ClaimSetupManager"},{"location":"apis/smart-contracts/ClaimSetupManager/#ct_claimsetupmanager","text":"Source | Inherits from IIClaimSetupManager , Governed , AddressUpdatable , CloneFactory , ReentrancyGuard Manages automation of operations related to reward claiming. Rewards include FTSO rewards and airdrops . Managed operations include Automatic Claiming and Personal Delegation Accounts .","title":"ClaimSetupManager"},{"location":"apis/smart-contracts/ClaimSetupManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_accounttodelegationaccount_69ea2387","text":"Defined in ClaimSetupManager ( Docs , Source ). function accountToDelegationAccount ( address _owner ) external view returns ( address ); Gets the PDA of an account. Parameters Type Description _owner address Account to query. Returns Type Description [0] address Address of its PDA or address(0) if it has not been created yet.","title":"accountToDelegationAccount"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_allowedclaimrecipients_dfd14c34","text":"Defined in ClaimSetupManager ( Docs , Source ). function allowedClaimRecipients ( address _owner ) external view returns ( address []); Gets the addresses of recipients allowed to receive rewards on behalf of an account. Beside these, the owner of the rewards is always authorized. See setAllowedClaimRecipients . Parameters Type Description _owner address Returns Type Description [0] address[] Addresses of all set authorized recipients.","title":"allowedClaimRecipients"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_batchdelegate_dc4fcda7","text":"Defined in ClaimSetupManager ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegates all percentage delegations from the caller's PDA and then delegate to a list of accounts. See delegate . Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentage of voting power to be delegated to each delegatee, expressed in basis points (1/100 of one percent). Total of all _bips values must be lower than 10000.","title":"batchDelegate"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_checkexecutorandallowedrecipient_ce2caa57","text":"Defined in ClaimSetupManager ( Docs , Source ). function checkExecutorAndAllowedRecipient ( address _executor , address _claimFor , address _recipient ) external view ; Checks if an executor can claim on behalf of a given account and send funds to a given recipient address. Reverts if claiming is not possible, does nothing otherwise. Parameters Type Description _executor address The executor to query. _claimFor address _recipient address The address where the reward would be sent.","title":"checkExecutorAndAllowedRecipient"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_claimexecutors_3f317fe1","text":"Defined in ClaimSetupManager ( Docs , Source ). function claimExecutors ( address _owner ) external view returns ( address []); Gets the addresses of executors authorized to claim for an account. See setClaimExecutors . Parameters Type Description _owner address The account to query. Returns Type Description [0] address[] Addresses of all set executors.","title":"claimExecutors"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_constructor_undefined","text":"Defined in ClaimSetupManager ( Docs , Source ). constructor ( address _governance , address _addressUpdater , uint256 _feeValueUpdateOffset , uint256 _minFeeValueWei , uint256 _maxFeeValueWei , uint256 _registerExecutorFeeValueWei ) public ;","title":"constructor"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_delegate_026e402b","text":"Defined in ClaimSetupManager ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegates a percentage of the caller's PDA 's voting power to another address. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: Every call resets the delegation value. A value of 0 revokes delegation.","title":"delegate"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_delegategovernance_7a68a508","text":"Defined in ClaimSetupManager ( Docs , Source ). function delegateGovernance ( address _to ) external ; Delegates all the governance vote power of the caller's PDA to another account. Parameters Type Description _to address Address of the recipient of the delegation.","title":"delegateGovernance"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_disabledelegationaccount_2394deb1","text":"Defined in ClaimSetupManager ( Docs , Source ). function disableDelegationAccount ( ) external ; Disables the Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the owner's account. Rewards accrued by the PDA will no longer be automatically claimed. Reverts if there is no PDA.","title":"disableDelegationAccount"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_enabledelegationaccount_f0977215","text":"Defined in ClaimSetupManager ( Docs , Source ). function enableDelegationAccount ( ) external returns ( contract IDelegationAccount ); Enables (or creates) a Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the PDA, and any rewards accrued by the PDA will be claimed too. Returns Type Description [0] contract IDelegationAccount Address of the delegation account contract.","title":"enableDelegationAccount"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getautoclaimaddressesandexecutorfee_e24883b2","text":"Defined in ClaimSetupManager ( Docs , Source ). function getAutoClaimAddressesAndExecutorFee ( address _executor , address [] _owners ) external view returns ( address [] _recipients , uint256 _executorFeeValue ); Gets the Personal Delegation Account (PDA) for a list of accounts for which an executor is claiming. Returns owner address instead if the PDA is not created yet or not enabled. Parameters Type Description _executor address Executor to query. _owners address[] Array of reward owners which must have set _executor as their executor. Returns Type Description _recipients address[] Addresses which will receive the claimed rewards. Can be the reward owners or their PDAs. _executorFeeValue uint256 Executor's fee value, in wei.","title":"getAutoClaimAddressesAndExecutorFee"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getdelegationaccountdata_17a1e3fc","text":"Defined in ClaimSetupManager ( Docs , Source ). function getDelegationAccountData ( address _owner ) external view returns ( contract IDelegationAccount _delegationAccount , bool _enabled ); Gets PDA data for an account. Parameters Type Description _owner address Account to query. Returns Type Description _delegationAccount contract IDelegationAccount Account's PDA address or address(0) if it has not been created yet. _enabled bool Whether the PDA is enabled.","title":"getDelegationAccountData"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getexecutorcurrentfeevalue_e25547f8","text":"Defined in ClaimSetupManager ( Docs , Source ). function getExecutorCurrentFeeValue ( address _executor ) public view returns ( uint256 ); Returns the current fee of a registered executor. Reverts if the executor is not registered. Parameters Type Description _executor address The executor to query. Returns Type Description [0] uint256 Fee in wei.","title":"getExecutorCurrentFeeValue"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getexecutorfeevalue_3f8f784c","text":"Defined in ClaimSetupManager ( Docs , Source ). function getExecutorFeeValue ( address _executor , uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the fee of an executor at a given reward epoch. Parameters Type Description _executor address The executor to query. _rewardEpoch uint256 Reward Epoch ID to query. Returns Type Description [0] uint256 Fee in wei at that reward epoch.","title":"getExecutorFeeValue"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getexecutorinfo_8e28b923","text":"Defined in ClaimSetupManager ( Docs , Source ). function getExecutorInfo ( address _executor ) external view returns ( bool _registered , uint256 _currentFeeValue ); Returns information about an executor. Parameters Type Description _executor address The executor to query. Returns Type Description _registered bool Whether the executor is registered. _currentFeeValue uint256 Executor's current fee value, if registered.","title":"getExecutorInfo"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getexecutorscheduledfeevaluechanges_950b028c","text":"Defined in ClaimSetupManager ( Docs , Source ). function getExecutorScheduledFeeValueChanges ( address _executor ) external view returns ( uint256 [] _feeValue , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the currently scheduled fee changes of an executor. Parameters Type Description _executor address Executor to query. Returns Type Description _feeValue uint256[] Array of scheduled fees. _validFromEpoch uint256[] Array of reward epochs ID where the scheduled fees will become effective. _fixed bool[] Array of booleans indicating if an scheduled fee change is fixed or it might still be changed.","title":"getExecutorScheduledFeeValueChanges"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_getregisteredexecutors_6e927e61","text":"Defined in ClaimSetupManager ( Docs , Source ). function getRegisteredExecutors ( uint256 _start , uint256 _end ) external view returns ( address [] _registeredExecutors , uint256 _totalLength ); Returns the list of executors registered through registerExecutor . Supports paging. Parameters Type Description _start uint256 First executor to return. _end uint256 Last executor to return. Returns Type Description _registeredExecutors address[] Addresses of the registered executors. _totalLength uint256 Total amount of executors.","title":"getRegisteredExecutors"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_isclaimexecutor_87962abe","text":"Defined in ClaimSetupManager ( Docs , Source ). function isClaimExecutor ( address _owner , address _executor ) external view returns ( bool ); Returns whether an executor is authorized to claim on behalf of a reward owner. See setClaimExecutors . Parameters Type Description _owner address The reward owner to query. _executor address The executor to query.","title":"isClaimExecutor"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_registerexecutor_ccce7e86","text":"Defined in ClaimSetupManager ( Docs , Source ). function registerExecutor ( uint256 _feeValue ) external payable returns ( uint256 ); Registers the caller as an executor and sets its initial fee value. If the executor was already registered, this method only updates the fee, which will take effect after feeValueUpdateOffset reward epochs have elapsed. Executor must pay a fee in order to register. See registerExecutorFeeValueWei . Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective.","title":"registerExecutor"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_revokedelegationat_bbd6fbf8","text":"Defined in ClaimSetupManager ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revokes all delegation from the caller's PDA to a given account at a given block. Only affects the reads via votePowerOfAtCached() in the specified block. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate with percentage of 0 or undelegateAll . Parameters Type Description _who address The account to revoke. _blockNumber uint256 Block number where the revoking will take place. Must be in the past.","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_setallowedclaimrecipients_d2a4ac61","text":"Defined in ClaimSetupManager ( Docs , Source ). function setAllowedClaimRecipients ( address [] _recipients ) external ; Set the addresses of allowed recipients. The reward owner is always an allowed recipient. Parameters Type Description _recipients address[] The new allowed recipients. All old recipients will be deleted and replaced by these.","title":"setAllowedClaimRecipients"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_setautoclaiming_e72dcdbb","text":"Defined in ClaimSetupManager ( Docs , Source ). function setAutoClaiming ( address [] _executors , bool _enableDelegationAccount ) external payable ; Sets the addresses of executors and optionally enables (creates) a Personal Delegation Account (PDA). If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. _enableDelegationAccount bool Whether the PDA should be enabled.","title":"setAutoClaiming"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_setclaimexecutors_9119c494","text":"Defined in ClaimSetupManager ( Docs , Source ). function setClaimExecutors ( address [] _executors ) external payable ; Sets the addresses of executors. If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these.","title":"setClaimExecutors"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_setlibraryaddress_4863ba17","text":"Defined in ClaimSetupManager ( Docs , Source ). function setLibraryAddress ( address _libraryAddress ) external ; Sets new library address. Only governance can call this.","title":"setLibraryAddress"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_setmaxfeevaluewei_2e9b6afa","text":"Defined in ClaimSetupManager ( Docs , Source ). function setMaxFeeValueWei ( uint256 _maxFeeValueWei ) external ; Sets maximum fee allowed for executors, in wei. Only governance can call this.","title":"setMaxFeeValueWei"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_setminfeevaluewei_d8343550","text":"Defined in ClaimSetupManager ( Docs , Source ). function setMinFeeValueWei ( uint256 _minFeeValueWei ) external ; Sets minimum fee allowed for executors, in wei. Only governance can call this.","title":"setMinFeeValueWei"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_setregisterexecutorfeevaluewei_869d90a5","text":"Defined in ClaimSetupManager ( Docs , Source ). function setRegisterExecutorFeeValueWei ( uint256 _registerExecutorFeeValueWei ) external ; Sets the fee required to register an executor, which must be higher than 0. Only governance can call this.","title":"setRegisterExecutorFeeValueWei"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_transferexternaltoken_489a8a47","text":"Defined in ClaimSetupManager ( Docs , Source ). function transferExternalToken ( contract IERC20 _token , uint256 _amount ) external ; Allows the caller to transfer ERC-20 tokens from their PDA to the owner account. The main use case is to move ERC-20 tokes received by mistake (by an airdrop, for example) out of the PDA and into the main account, where they can be more easily managed. Reverts if the target token is the WNat contract: use method withdraw for that. Parameters Type Description _token contract IERC20 Target token contract address. _amount uint256 Amount of tokens to transfer.","title":"transferExternalToken"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_undelegateall_b302f393","text":"Defined in ClaimSetupManager ( Docs , Source ). function undelegateAll ( ) external ; Removes all delegations from the caller's PDA .","title":"undelegateAll"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_undelegategovernance_87a2a0dc","text":"Defined in ClaimSetupManager ( Docs , Source ). function undelegateGovernance ( ) external ; Undelegates all governance vote power currently delegated by the caller's PDA .","title":"undelegateGovernance"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_unregisterexecutor_868a660f","text":"Defined in ClaimSetupManager ( Docs , Source ). function unregisterExecutor ( ) external returns ( uint256 _validFromEpoch ); Unregisters the caller as an executor. Returns Type Description _validFromEpoch uint256 Reward epoch ID when the change becomes effective.","title":"unregisterExecutor"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_updateexecutorfeevalue_831f16af","text":"Defined in ClaimSetupManager ( Docs , Source ). function updateExecutorFeeValue ( uint256 _feeValue ) external returns ( uint256 ); Sets the caller's executor fee. The caller must be an executor registered through registerExecutor . When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective.","title":"updateExecutorFeeValue"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_wnat_9edbf007","text":"Defined in IIClaimSetupManager ( Docs , Source ). function wNat ( ) external view returns ( contract WNat ); Returns the WNat contract.","title":"wNat"},{"location":"apis/smart-contracts/ClaimSetupManager/#fn_withdraw_2e1a7d4d","text":"Defined in ClaimSetupManager ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Allows the caller to transfer WNat wrapped tokens from their PDA to the owner account. Parameters Type Description _amount uint256 Amount of tokens to transfer, in wei.","title":"withdraw"},{"location":"apis/smart-contracts/ClaimSetupManager/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/ClaimSetupManager/#md_nonreentrant","text":"Defined in ReentrancyGuard ( Source ). modifier nonReentrant () Prevents a contract from calling itself, directly or indirectly. Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to prevent this from happening by making the nonReentrant function external, and make it call a private function that does the actual work.","title":"nonReentrant"},{"location":"apis/smart-contracts/ClaimSetupManager/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/ClaimSetupManager/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/ClaimSetupManager/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/ClaimSetupManager/#md_onlyownerorexecutor","text":"Defined in ClaimSetupManager ( Docs , Source ). modifier onlyOwnerOrExecutor ( address _executor , address [] _owners )","title":"onlyOwnerOrExecutor"},{"location":"apis/smart-contracts/ClaimSetupManager/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/ClaimSetupManager/#st_delegationaccountdata","text":"Defined in ClaimSetupManager ( Docs , Source ). struct DelegationAccountData { contract IIDelegationAccount delegationAccount ; bool enabled ; }","title":"DelegationAccountData"},{"location":"apis/smart-contracts/ClaimSetupManager/#st_executorfee","text":"Defined in ClaimSetupManager ( Docs , Source ). struct ExecutorFee { uint256 value ; uint256 validFromEpoch ; }","title":"ExecutorFee"},{"location":"apis/smart-contracts/ClaimSetupManager/#st_timelockedcall","text":"Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; }","title":"TimelockedCall"},{"location":"apis/smart-contracts/ClaimSetupManager/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_feevalueupdateoffset","text":"Defined in ClaimSetupManager ( Docs , Source ). uint256 feeValueUpdateOffset Number of reward epochs that must elapse before an executor's fee change takes effect.","title":"feeValueUpdateOffset"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_ftsomanager","text":"Defined in ClaimSetupManager ( Docs , Source ). contract IFtsoManager ftsoManager The FtsoManager contract.","title":"ftsoManager"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_governancevp","text":"Defined in ClaimSetupManager ( Docs , Source ). contract IGovernanceVotePower governanceVP The GovernanceVotePower contract.","title":"governanceVP"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_libraryaddress","text":"Defined in ClaimSetupManager ( Docs , Source ). address libraryAddress","title":"libraryAddress"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_maxfeevaluewei","text":"Defined in ClaimSetupManager ( Docs , Source ). uint256 maxFeeValueWei Maximum allowed value for an executor's fee.","title":"maxFeeValueWei"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_minfeevaluewei","text":"Defined in ClaimSetupManager ( Docs , Source ). uint256 minFeeValueWei Minimum allowed value for an executor's fee.","title":"minFeeValueWei"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_registerexecutorfeevaluewei","text":"Defined in ClaimSetupManager ( Docs , Source ). uint256 registerExecutorFeeValueWei Fee that must be paid to register an executor.","title":"registerExecutorFeeValueWei"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/ClaimSetupManager/#va_wnat","text":"Defined in ClaimSetupManager ( Docs , Source ). contract WNat wNat The WNat contract.","title":"wNat"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/","text":"CleanupBlockNumberManager # Source | Inherits from Governed , AddressUpdatable Token history cleanup manager. Maintains the list of cleanable tokens for which history cleanup can be collectively executed. Events # CleanupBlockNumberSet # Defined in CleanupBlockNumberManager ( Docs , Source ). event CleanupBlockNumberSet ( contract IICleanable theContract , uint256 blockNumber , bool success ) Emitted when an attempt has been made to set the cleanup block number. Parameters Type Description theContract contract IICleanable The token contract address. blockNumber uint256 The block number being set. success bool Whether it succeeded or not. GovernanceCallTimelocked # Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire. GovernanceInitialised # Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings . GovernedProductionModeEntered # Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork). RegistrationUpdated # Defined in CleanupBlockNumberManager ( Docs , Source ). event RegistrationUpdated ( contract IICleanable theContract , bool add ) Emitted when a new token has been registered to have its history managed by us, or an old one unregistered. Parameters Type Description theContract contract IICleanable The token contract address. add bool true is the token has been registered, false if unregistered. TimelockedGovernanceCallCanceled # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution. TimelockedGovernanceCallExecuted # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed. Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in CleanupBlockNumberManager ( Docs , Source ). constructor ( address _governance , address _addressUpdater , string _triggerContractName ) public ; Build a new instance. Parameters Type Description _governance address Contract address that can make governance calls. See Governed . _addressUpdater address Contract address that can update redeployable addresses. See AdressUpdatable . _triggerContractName string Contract name that can trigger history cleanups. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. registerToken # Defined in CleanupBlockNumberManager ( Docs , Source ). function registerToken ( contract IICleanable _cleanableToken ) external ; Register a token contract whose history cleanup index is to be managed. The registered contracts must allow calling setCleanupBlockNumber . Parameters Type Description _cleanableToken contract IICleanable The address of the contract to be managed. setCleanUpBlockNumber # Defined in CleanupBlockNumberManager ( Docs , Source ). function setCleanUpBlockNumber ( uint256 _blockNumber ) external ; Sets clean up block number on managed cleanable tokens. Parameters Type Description _blockNumber uint256 cleanup block number switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . unregisterToken # Defined in CleanupBlockNumberManager ( Docs , Source ). function unregisterToken ( contract IICleanable _cleanableToken ) external ; Unregister a token contract from history cleanup index management. Parameters Type Description _cleanableToken contract IICleanable The address of the contract to unregister. updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. Modifiers # onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () onlyTrigger # Defined in CleanupBlockNumberManager ( Docs , Source ). modifier onlyTrigger () Only the trigger contract can call this method. This contract is set at construction time and updated through AddressUpdatable . Variables # governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . registeredTokens # Defined in CleanupBlockNumberManager ( Docs , Source ). contract IICleanable [] registeredTokens Current list of token contracts being managed. timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls. triggerContract # Defined in CleanupBlockNumberManager ( Docs , Source ). address triggerContract Address of the contract that can trigger a cleanup. triggerContractName # Defined in CleanupBlockNumberManager ( Docs , Source ). string triggerContractName Name of the contract that can trigger a cleanup. Needed to update the trigger contract address through the AddressUpdater .","title":"CleanupBlockNumberManager"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ct_cleanupblocknumbermanager","text":"Source | Inherits from Governed , AddressUpdatable Token history cleanup manager. Maintains the list of cleanable tokens for which history cleanup can be collectively executed.","title":"CleanupBlockNumberManager"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ev_cleanupblocknumberset","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). event CleanupBlockNumberSet ( contract IICleanable theContract , uint256 blockNumber , bool success ) Emitted when an attempt has been made to set the cleanup block number. Parameters Type Description theContract contract IICleanable The token contract address. blockNumber uint256 The block number being set. success bool Whether it succeeded or not.","title":"CleanupBlockNumberSet"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ev_governancecalltimelocked","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire.","title":"GovernanceCallTimelocked"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ev_governanceinitialised","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings .","title":"GovernanceInitialised"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ev_governedproductionmodeentered","text":"Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork).","title":"GovernedProductionModeEntered"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ev_registrationupdated","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). event RegistrationUpdated ( contract IICleanable theContract , bool add ) Emitted when a new token has been registered to have its history managed by us, or an old one unregistered. Parameters Type Description theContract contract IICleanable The token contract address. add bool true is the token has been registered, false if unregistered.","title":"RegistrationUpdated"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ev_timelockedgovernancecallcanceled","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution.","title":"TimelockedGovernanceCallCanceled"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#ev_timelockedgovernancecallexecuted","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed.","title":"TimelockedGovernanceCallExecuted"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_constructor_undefined","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). constructor ( address _governance , address _addressUpdater , string _triggerContractName ) public ; Build a new instance. Parameters Type Description _governance address Contract address that can make governance calls. See Governed . _addressUpdater address Contract address that can update redeployable addresses. See AdressUpdatable . _triggerContractName string Contract name that can trigger history cleanups.","title":"constructor"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_registertoken_09824a80","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). function registerToken ( contract IICleanable _cleanableToken ) external ; Register a token contract whose history cleanup index is to be managed. The registered contracts must allow calling setCleanupBlockNumber . Parameters Type Description _cleanableToken contract IICleanable The address of the contract to be managed.","title":"registerToken"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_setcleanupblocknumber_cbc31cf7","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). function setCleanUpBlockNumber ( uint256 _blockNumber ) external ; Sets clean up block number on managed cleanable tokens. Parameters Type Description _blockNumber uint256 cleanup block number","title":"setCleanUpBlockNumber"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_unregistertoken_77860cdd","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). function unregisterToken ( contract IICleanable _cleanableToken ) external ; Unregister a token contract from history cleanup index management. Parameters Type Description _cleanableToken contract IICleanable The address of the contract to unregister.","title":"unregisterToken"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#md_onlytrigger","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). modifier onlyTrigger () Only the trigger contract can call this method. This contract is set at construction time and updated through AddressUpdatable .","title":"onlyTrigger"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#va_registeredtokens","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). contract IICleanable [] registeredTokens Current list of token contracts being managed.","title":"registeredTokens"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#va_triggercontract","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). address triggerContract Address of the contract that can trigger a cleanup.","title":"triggerContract"},{"location":"apis/smart-contracts/CleanupBlockNumberManager/#va_triggercontractname","text":"Defined in CleanupBlockNumberManager ( Docs , Source ). string triggerContractName Name of the contract that can trigger a cleanup. Needed to update the trigger contract address through the AddressUpdater .","title":"triggerContractName"},{"location":"apis/smart-contracts/CloneFactory/","text":"CloneFactory # Source Simple clone contract factory. This code (intended to be called from an implementor factory contract) will allow you to install a master copy of a contract, then easily (cheaply) create clones with separate state. The deployed bytecode just delegates all calls to the master contract address. Source attribution . Functions #","title":"CloneFactory"},{"location":"apis/smart-contracts/CloneFactory/#ct_clonefactory","text":"Source Simple clone contract factory. This code (intended to be called from an implementor factory contract) will allow you to install a master copy of a contract, then easily (cheaply) create clones with separate state. The deployed bytecode just delegates all calls to the master contract address. Source attribution .","title":"CloneFactory"},{"location":"apis/smart-contracts/CloneFactory/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/Delegatable/","text":"Delegatable # Source | Inherits from IVPContractEvents Delegatable ERC20 behavior. Adds delegation capabilities to tokens. This contract orchestrates interaction between managing a delegation and the vote power allocations that result. Enums # DelegationMode # Defined in Delegatable ( Docs , Source ). enum DelegationMode { NOTSET , PERCENTAGE , AMOUNT } Delegation mode of an account. Once set, it cannot be changed. NOTSET : Delegation mode not set yet. PERCENTAGE : Delegation by percentage. AMOUNT : Delegation by amount (explicit). Events # CreatedVotePowerCache # Defined in Delegatable ( Docs , Source ). event CreatedVotePowerCache ( address _owner , uint256 _blockNumber ) Emitted when a vote power cache entry is created. Allows history cleaners to track vote power cache cleanup opportunities off-chain. Parameters Type Description _owner address The address whose vote power has just been cached. _blockNumber uint256 The block number at which the vote power has been cached. Delegate # Defined in IVPContractEvents ( Docs , Source ). event Delegate ( address from , address to , uint256 priorVotePower , uint256 newVotePower ) Emitted when the amount of vote power delegated from one account to another changes. Note : This event is always emitted from VPToken 's writeVotePowerContract . Parameters Type Description from address The account that has changed the amount of vote power it is delegating. to address The account whose received vote power has changed. priorVotePower uint256 The vote power originally delegated. newVotePower uint256 The new vote power that triggered this event. It can be 0 if the delegation is completely canceled. Revoke # Defined in IVPContractEvents ( Docs , Source ). event Revoke ( address delegator , address delegatee , uint256 votePower , uint256 blockNumber ) Emitted when an account revokes its vote power delegation to another account for a single current or past block (typically the current vote block). Note : This event is always emitted from VPToken 's writeVotePowerContract or readVotePowerContract . See revokeDelegationAt in IVPToken . Parameters Type Description delegator address The account that revoked the delegation. delegatee address The account that has been revoked. votePower uint256 The revoked vote power. blockNumber uint256 The block number at which the delegation has been revoked. Functions # explicitDelegationHistoryCleanup # Defined in Delegatable ( Docs , Source ). function explicitDelegationHistoryCleanup ( address _from , address _to , uint256 _count ) external returns ( uint256 ); Delete explicit delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of checkpoints deleted. percentageDelegationHistoryCleanup # Defined in Delegatable ( Docs , Source ). function percentageDelegationHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete percentage delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Balance owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints. revocationCleanup # Defined in Delegatable ( Docs , Source ). function revocationCleanup ( address _from , address _to , uint256 _blockNumber ) external returns ( uint256 ); Delete revocation entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of revocation entries deleted (always 0 or 1). votePowerCacheCleanup # Defined in Delegatable ( Docs , Source ). function votePowerCacheCleanup ( address _owner , uint256 _blockNumber ) external returns ( uint256 ); Delete vote power cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of deleted cache entries (always 0 or 1). votePowerHistoryCleanup # Defined in Delegatable ( Docs , Source ). function votePowerHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete vote power checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints. Modifiers # notBeforeCleanupBlock # Defined in Delegatable ( Docs , Source ). modifier notBeforeCleanupBlock ( uint256 _blockNumber ) Reading from history is not allowed before cleanupBlockNumber , since data before that might have been deleted and is thus unreliable. Parameters Type Description _blockNumber uint256 The block number being checked for validity. onlyCleaner # Defined in Delegatable ( Docs , Source ). modifier onlyCleaner () History cleaning methods can be called only from cleanerContract . Variables # cleanerContract # Defined in Delegatable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning.","title":"Delegatable"},{"location":"apis/smart-contracts/Delegatable/#ct_delegatable","text":"Source | Inherits from IVPContractEvents Delegatable ERC20 behavior. Adds delegation capabilities to tokens. This contract orchestrates interaction between managing a delegation and the vote power allocations that result.","title":"Delegatable"},{"location":"apis/smart-contracts/Delegatable/#enums","text":"","title":"Enums"},{"location":"apis/smart-contracts/Delegatable/#en_delegationmode","text":"Defined in Delegatable ( Docs , Source ). enum DelegationMode { NOTSET , PERCENTAGE , AMOUNT } Delegation mode of an account. Once set, it cannot be changed. NOTSET : Delegation mode not set yet. PERCENTAGE : Delegation by percentage. AMOUNT : Delegation by amount (explicit).","title":"DelegationMode"},{"location":"apis/smart-contracts/Delegatable/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/Delegatable/#ev_createdvotepowercache","text":"Defined in Delegatable ( Docs , Source ). event CreatedVotePowerCache ( address _owner , uint256 _blockNumber ) Emitted when a vote power cache entry is created. Allows history cleaners to track vote power cache cleanup opportunities off-chain. Parameters Type Description _owner address The address whose vote power has just been cached. _blockNumber uint256 The block number at which the vote power has been cached.","title":"CreatedVotePowerCache"},{"location":"apis/smart-contracts/Delegatable/#ev_delegate","text":"Defined in IVPContractEvents ( Docs , Source ). event Delegate ( address from , address to , uint256 priorVotePower , uint256 newVotePower ) Emitted when the amount of vote power delegated from one account to another changes. Note : This event is always emitted from VPToken 's writeVotePowerContract . Parameters Type Description from address The account that has changed the amount of vote power it is delegating. to address The account whose received vote power has changed. priorVotePower uint256 The vote power originally delegated. newVotePower uint256 The new vote power that triggered this event. It can be 0 if the delegation is completely canceled.","title":"Delegate"},{"location":"apis/smart-contracts/Delegatable/#ev_revoke","text":"Defined in IVPContractEvents ( Docs , Source ). event Revoke ( address delegator , address delegatee , uint256 votePower , uint256 blockNumber ) Emitted when an account revokes its vote power delegation to another account for a single current or past block (typically the current vote block). Note : This event is always emitted from VPToken 's writeVotePowerContract or readVotePowerContract . See revokeDelegationAt in IVPToken . Parameters Type Description delegator address The account that revoked the delegation. delegatee address The account that has been revoked. votePower uint256 The revoked vote power. blockNumber uint256 The block number at which the delegation has been revoked.","title":"Revoke"},{"location":"apis/smart-contracts/Delegatable/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/Delegatable/#fn_explicitdelegationhistorycleanup_cabc4528","text":"Defined in Delegatable ( Docs , Source ). function explicitDelegationHistoryCleanup ( address _from , address _to , uint256 _count ) external returns ( uint256 ); Delete explicit delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of checkpoints deleted.","title":"explicitDelegationHistoryCleanup"},{"location":"apis/smart-contracts/Delegatable/#fn_percentagedelegationhistorycleanup_7f57d58f","text":"Defined in Delegatable ( Docs , Source ). function percentageDelegationHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete percentage delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Balance owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints.","title":"percentageDelegationHistoryCleanup"},{"location":"apis/smart-contracts/Delegatable/#fn_revocationcleanup_8c0b6b40","text":"Defined in Delegatable ( Docs , Source ). function revocationCleanup ( address _from , address _to , uint256 _blockNumber ) external returns ( uint256 ); Delete revocation entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of revocation entries deleted (always 0 or 1).","title":"revocationCleanup"},{"location":"apis/smart-contracts/Delegatable/#fn_votepowercachecleanup_891339a8","text":"Defined in Delegatable ( Docs , Source ). function votePowerCacheCleanup ( address _owner , uint256 _blockNumber ) external returns ( uint256 ); Delete vote power cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of deleted cache entries (always 0 or 1).","title":"votePowerCacheCleanup"},{"location":"apis/smart-contracts/Delegatable/#fn_votepowerhistorycleanup_1a05274c","text":"Defined in Delegatable ( Docs , Source ). function votePowerHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete vote power checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints.","title":"votePowerHistoryCleanup"},{"location":"apis/smart-contracts/Delegatable/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/Delegatable/#md_notbeforecleanupblock","text":"Defined in Delegatable ( Docs , Source ). modifier notBeforeCleanupBlock ( uint256 _blockNumber ) Reading from history is not allowed before cleanupBlockNumber , since data before that might have been deleted and is thus unreliable. Parameters Type Description _blockNumber uint256 The block number being checked for validity.","title":"notBeforeCleanupBlock"},{"location":"apis/smart-contracts/Delegatable/#md_onlycleaner","text":"Defined in Delegatable ( Docs , Source ). modifier onlyCleaner () History cleaning methods can be called only from cleanerContract .","title":"onlyCleaner"},{"location":"apis/smart-contracts/Delegatable/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/Delegatable/#va_cleanercontract","text":"Defined in Delegatable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning.","title":"cleanerContract"},{"location":"apis/smart-contracts/FlareContractRegistry/","text":"FlareContractRegistry # Source | Inherits from IFlareContractRegistry , AddressUpdatable The Flare contract registry. Entry point for all external dapps that need the latest contract addresses deployed by Flare. Functions # constructor # Defined in FlareContractRegistry ( Docs , Source ). constructor ( address _addressUpdater ) public ; getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getAllContracts # Defined in FlareContractRegistry ( Docs , Source ). function getAllContracts ( ) external view returns ( string [] _names , address [] _addresses ); Returns all contract names and their corresponding addresses. Returns Type Description _names string[] Array of contract names. _addresses address[] Array of corresponding contract addresses. getContractAddressByHash # Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns the address of a given contract hash. Parameters Type Description _nameHash bytes32 Hash of the contract name as: keccak256(abi.encode(name)) . Returns Type Description [0] address Address of the contract, or address(0) if not found. getContractAddressByName # Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressByName ( string _name ) external view returns ( address ); Returns the address of a given contract name. Parameters Type Description _name string Name of the contract. Returns Type Description [0] address Address of the contract, or address(0) if not found. getContractAddressesByHash # Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns the addresses of a list of contract hashes. Parameters Type Description _nameHashes bytes32[] Array of contract name hashes as: keccak256(abi.encode(name)) . Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found. getContractAddressesByName # Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressesByName ( string [] _names ) external view returns ( address []); Returns the addresses of a list of contract names. Parameters Type Description _names string[] Array of contract names. Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found. updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"FlareContractRegistry"},{"location":"apis/smart-contracts/FlareContractRegistry/#ct_flarecontractregistry","text":"Source | Inherits from IFlareContractRegistry , AddressUpdatable The Flare contract registry. Entry point for all external dapps that need the latest contract addresses deployed by Flare.","title":"FlareContractRegistry"},{"location":"apis/smart-contracts/FlareContractRegistry/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_constructor_undefined","text":"Defined in FlareContractRegistry ( Docs , Source ). constructor ( address _addressUpdater ) public ;","title":"constructor"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_getallcontracts_18d3ce96","text":"Defined in FlareContractRegistry ( Docs , Source ). function getAllContracts ( ) external view returns ( string [] _names , address [] _addresses ); Returns all contract names and their corresponding addresses. Returns Type Description _names string[] Array of contract names. _addresses address[] Array of corresponding contract addresses.","title":"getAllContracts"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_getcontractaddressbyhash_159354a2","text":"Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns the address of a given contract hash. Parameters Type Description _nameHash bytes32 Hash of the contract name as: keccak256(abi.encode(name)) . Returns Type Description [0] address Address of the contract, or address(0) if not found.","title":"getContractAddressByHash"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_getcontractaddressbyname_82760fca","text":"Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressByName ( string _name ) external view returns ( address ); Returns the address of a given contract name. Parameters Type Description _name string Name of the contract. Returns Type Description [0] address Address of the contract, or address(0) if not found.","title":"getContractAddressByName"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_getcontractaddressesbyhash_5e11e2d1","text":"Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns the addresses of a list of contract hashes. Parameters Type Description _nameHashes bytes32[] Array of contract name hashes as: keccak256(abi.encode(name)) . Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found.","title":"getContractAddressesByHash"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_getcontractaddressesbyname_76d2b1af","text":"Defined in FlareContractRegistry ( Docs , Source ). function getContractAddressesByName ( string [] _names ) external view returns ( address []); Returns the addresses of a list of contract names. Parameters Type Description _names string[] Array of contract names. Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found.","title":"getContractAddressesByName"},{"location":"apis/smart-contracts/FlareContractRegistry/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/FlareDaemon/","text":"FlareDaemon # Source | Inherits from GovernedAtGenesis , AddressUpdatable Flare Daemon contract. This contract exists to coordinate regular daemon-like polling of contracts that are registered to receive said polling. The trigger method is called by the validator right at the end of block state transition. Events # ContractDaemonizeErrored # Defined in FlareDaemon ( Docs , Source ). event ContractDaemonizeErrored ( address theContract , uint256 atBlock , string theMessage , uint256 gasConsumed ) ContractDaemonized # Defined in FlareDaemon ( Docs , Source ). event ContractDaemonized ( address theContract , uint256 gasConsumed ) ContractHeldOff # Defined in FlareDaemon ( Docs , Source ). event ContractHeldOff ( address theContract , uint256 blockHoldoffsRemaining ) ContractsSkippedOutOfGas # Defined in FlareDaemon ( Docs , Source ). event ContractsSkippedOutOfGas ( uint256 numberOfSkippedConstracts ) GovernanceCallTimelocked # Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire. GovernanceInitialised # Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings . GovernedProductionModeEntered # Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork). InflationSet # Defined in FlareDaemon ( Docs , Source ). event InflationSet ( contract IInflationGenesis theNewContract , contract IInflationGenesis theOldContract ) MintingReceived # Defined in FlareDaemon ( Docs , Source ). event MintingReceived ( uint256 amountWei ) MintingRequestReceived # Defined in FlareDaemon ( Docs , Source ). event MintingRequestReceived ( uint256 amountWei ) MintingRequestTriggered # Defined in FlareDaemon ( Docs , Source ). event MintingRequestTriggered ( uint256 amountWei ) MintingWithdrawn # Defined in FlareDaemon ( Docs , Source ). event MintingWithdrawn ( uint256 amountWei ) RegistrationUpdated # Defined in FlareDaemon ( Docs , Source ). event RegistrationUpdated ( contract IFlareDaemonize theContract , bool add ) SelfDestructReceived # Defined in FlareDaemon ( Docs , Source ). event SelfDestructReceived ( uint256 amountWei ) TimelockedGovernanceCallCanceled # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution. TimelockedGovernanceCallExecuted # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed. Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in FlareDaemon ( Docs , Source ). constructor ( ) public ; This constructor should contain no code as this contract is pre-loaded into the genesis block. The super constructor is called for testing convenience. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getDaemonizedContractsData # Defined in FlareDaemon ( Docs , Source ). function getDaemonizedContractsData ( ) external view returns ( contract IFlareDaemonize [] _daemonizeContracts , uint256 [] _gasLimits , uint256 [] _blockHoldoffsRemaining ); getNextMintRequestAllowedTs # Defined in FlareDaemon ( Docs , Source ). function getNextMintRequestAllowedTs ( ) external view returns ( uint256 ); governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. initialise # Defined in GovernedAtGenesis ( Docs , Source ). function initialise ( address _governance ) public pure ; Disallow initialise to be called. Parameters Type Description _governance address The governance address for initial claiming. initialiseFixedAddress # Defined in FlareDaemon ( Docs , Source ). function initialiseFixedAddress ( ) public returns ( address ); Set the governance address to a hard-coded known address. This should be done at contract deployment time. Returns Type Description [0] address The governance address. registerToDaemonize # Defined in FlareDaemon ( Docs , Source ). function registerToDaemonize ( struct FlareDaemon . Registration [] _registrations ) external ; Register contracts to be polled by the daemon process. A gas limit of zero will set no limit for the contract but the validator has an overall limit for the trigger method. If any registrations already exist, they will be unregistered. Contracts will be daemonized in the order in which presented via the _registrations array. Parameters Type Description _registrations struct FlareDaemon.Registration[] An array of Registration structures of IFlareDaemonize contracts to daemonize and gas limits for each contract. requestMinting # Defined in FlareDaemon ( Docs , Source ). function requestMinting ( uint256 _amountWei ) external ; Queue up a minting request to send to the validator at next trigger . Parameters Type Description _amountWei uint256 The amount to mint. setAddressUpdater # Defined in FlareDaemon ( Docs , Source ). function setAddressUpdater ( address _addressUpdater ) external ; Sets the address udpater contract. Parameters Type Description _addressUpdater address The address updater contract. setBlockHoldoff # Defined in FlareDaemon ( Docs , Source ). function setBlockHoldoff ( uint256 _blockHoldoff ) external ; Set number of blocks that must elapse before a daemonized contract exceeding gas limit can have its daemonize() method called again. Parameters Type Description _blockHoldoff uint256 The number of blocks to holdoff. setMaxMintingRequest # Defined in FlareDaemon ( Docs , Source ). function setMaxMintingRequest ( uint256 _maxMintingRequestWei ) external ; Set limit on how much can be minted per request. this number can't be udated too often Parameters Type Description _maxMintingRequestWei uint256 The request maximum in wei. showDaemonizedErrors # Defined in FlareDaemon ( Docs , Source ). function showDaemonizedErrors ( uint256 startIndex , uint256 numErrorTypesToShow ) public view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalDaemonizedErrors ); showLastDaemonizedError # Defined in FlareDaemon ( Docs , Source ). function showLastDaemonizedError ( ) external view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalDaemonizedErrors ); switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. Modifiers # inflationSet # Defined in FlareDaemon ( Docs , Source ). modifier inflationSet () As there is not a constructor , this modifier exists to make sure the inflation contract is set for methods that require it. onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () onlyInflation # Defined in FlareDaemon ( Docs , Source ). modifier onlyInflation ( address _inflation ) Access control to protect methods to allow only minters to call select methods (like transferring balance out). onlySystemTrigger # Defined in FlareDaemon ( Docs , Source ). modifier onlySystemTrigger () Access control to protect trigger method. Please note that the sender address is the same as deployed FlareDaemon address in this case. Structures # DaemonizedError # Defined in FlareDaemon ( Docs , Source ). struct DaemonizedError { uint192 lastErrorBlock ; uint64 numErrors ; address fromContract ; uint64 errorTypeIndex ; string errorMessage ; } LastErrorData # Defined in FlareDaemon ( Docs , Source ). struct LastErrorData { uint192 totalDaemonizedErrors ; uint64 lastErrorTypeIndex ; } Registration # Defined in FlareDaemon ( Docs , Source ). struct Registration { contract IFlareDaemonize daemonizedContract ; uint256 gasLimit ; } TimelockedCall # Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; } Variables # blockHoldoff # Defined in FlareDaemon ( Docs , Source ). uint256 blockHoldoff errorData # Defined in FlareDaemon ( Docs , Source ). struct FlareDaemon . LastErrorData errorData governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. inflation # Defined in FlareDaemon ( Docs , Source ). contract IInflationGenesis inflation lastMintRequestTs # Defined in FlareDaemon ( Docs , Source ). uint256 lastMintRequestTs lastUpdateMaxMintRequestTs # Defined in FlareDaemon ( Docs , Source ). uint256 lastUpdateMaxMintRequestTs maxMintingRequestWei # Defined in FlareDaemon ( Docs , Source ). uint256 maxMintingRequestWei productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . systemLastTriggeredAt # Defined in FlareDaemon ( Docs , Source ). uint256 systemLastTriggeredAt timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls. totalMintingReceivedWei # Defined in FlareDaemon ( Docs , Source ). uint256 totalMintingReceivedWei totalMintingRequestedWei # Defined in FlareDaemon ( Docs , Source ). uint256 totalMintingRequestedWei totalMintingWithdrawnWei # Defined in FlareDaemon ( Docs , Source ). uint256 totalMintingWithdrawnWei totalSelfDestructReceivedWei # Defined in FlareDaemon ( Docs , Source ). uint256 totalSelfDestructReceivedWei","title":"FlareDaemon"},{"location":"apis/smart-contracts/FlareDaemon/#ct_flaredaemon","text":"Source | Inherits from GovernedAtGenesis , AddressUpdatable Flare Daemon contract. This contract exists to coordinate regular daemon-like polling of contracts that are registered to receive said polling. The trigger method is called by the validator right at the end of block state transition.","title":"FlareDaemon"},{"location":"apis/smart-contracts/FlareDaemon/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/FlareDaemon/#ev_contractdaemonizeerrored","text":"Defined in FlareDaemon ( Docs , Source ). event ContractDaemonizeErrored ( address theContract , uint256 atBlock , string theMessage , uint256 gasConsumed )","title":"ContractDaemonizeErrored"},{"location":"apis/smart-contracts/FlareDaemon/#ev_contractdaemonized","text":"Defined in FlareDaemon ( Docs , Source ). event ContractDaemonized ( address theContract , uint256 gasConsumed )","title":"ContractDaemonized"},{"location":"apis/smart-contracts/FlareDaemon/#ev_contractheldoff","text":"Defined in FlareDaemon ( Docs , Source ). event ContractHeldOff ( address theContract , uint256 blockHoldoffsRemaining )","title":"ContractHeldOff"},{"location":"apis/smart-contracts/FlareDaemon/#ev_contractsskippedoutofgas","text":"Defined in FlareDaemon ( Docs , Source ). event ContractsSkippedOutOfGas ( uint256 numberOfSkippedConstracts )","title":"ContractsSkippedOutOfGas"},{"location":"apis/smart-contracts/FlareDaemon/#ev_governancecalltimelocked","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire.","title":"GovernanceCallTimelocked"},{"location":"apis/smart-contracts/FlareDaemon/#ev_governanceinitialised","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings .","title":"GovernanceInitialised"},{"location":"apis/smart-contracts/FlareDaemon/#ev_governedproductionmodeentered","text":"Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork).","title":"GovernedProductionModeEntered"},{"location":"apis/smart-contracts/FlareDaemon/#ev_inflationset","text":"Defined in FlareDaemon ( Docs , Source ). event InflationSet ( contract IInflationGenesis theNewContract , contract IInflationGenesis theOldContract )","title":"InflationSet"},{"location":"apis/smart-contracts/FlareDaemon/#ev_mintingreceived","text":"Defined in FlareDaemon ( Docs , Source ). event MintingReceived ( uint256 amountWei )","title":"MintingReceived"},{"location":"apis/smart-contracts/FlareDaemon/#ev_mintingrequestreceived","text":"Defined in FlareDaemon ( Docs , Source ). event MintingRequestReceived ( uint256 amountWei )","title":"MintingRequestReceived"},{"location":"apis/smart-contracts/FlareDaemon/#ev_mintingrequesttriggered","text":"Defined in FlareDaemon ( Docs , Source ). event MintingRequestTriggered ( uint256 amountWei )","title":"MintingRequestTriggered"},{"location":"apis/smart-contracts/FlareDaemon/#ev_mintingwithdrawn","text":"Defined in FlareDaemon ( Docs , Source ). event MintingWithdrawn ( uint256 amountWei )","title":"MintingWithdrawn"},{"location":"apis/smart-contracts/FlareDaemon/#ev_registrationupdated","text":"Defined in FlareDaemon ( Docs , Source ). event RegistrationUpdated ( contract IFlareDaemonize theContract , bool add )","title":"RegistrationUpdated"},{"location":"apis/smart-contracts/FlareDaemon/#ev_selfdestructreceived","text":"Defined in FlareDaemon ( Docs , Source ). event SelfDestructReceived ( uint256 amountWei )","title":"SelfDestructReceived"},{"location":"apis/smart-contracts/FlareDaemon/#ev_timelockedgovernancecallcanceled","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution.","title":"TimelockedGovernanceCallCanceled"},{"location":"apis/smart-contracts/FlareDaemon/#ev_timelockedgovernancecallexecuted","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed.","title":"TimelockedGovernanceCallExecuted"},{"location":"apis/smart-contracts/FlareDaemon/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/FlareDaemon/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/FlareDaemon/#fn_constructor_undefined","text":"Defined in FlareDaemon ( Docs , Source ). constructor ( ) public ; This constructor should contain no code as this contract is pre-loaded into the genesis block. The super constructor is called for testing convenience.","title":"constructor"},{"location":"apis/smart-contracts/FlareDaemon/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/FlareDaemon/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/FlareDaemon/#fn_getdaemonizedcontractsdata_ed21b6e4","text":"Defined in FlareDaemon ( Docs , Source ). function getDaemonizedContractsData ( ) external view returns ( contract IFlareDaemonize [] _daemonizeContracts , uint256 [] _gasLimits , uint256 [] _blockHoldoffsRemaining );","title":"getDaemonizedContractsData"},{"location":"apis/smart-contracts/FlareDaemon/#fn_getnextmintrequestallowedts_63903143","text":"Defined in FlareDaemon ( Docs , Source ). function getNextMintRequestAllowedTs ( ) external view returns ( uint256 );","title":"getNextMintRequestAllowedTs"},{"location":"apis/smart-contracts/FlareDaemon/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/FlareDaemon/#fn_initialise_9d6a890f","text":"Defined in GovernedAtGenesis ( Docs , Source ). function initialise ( address _governance ) public pure ; Disallow initialise to be called. Parameters Type Description _governance address The governance address for initial claiming.","title":"initialise"},{"location":"apis/smart-contracts/FlareDaemon/#fn_initialisefixedaddress_c9f960eb","text":"Defined in FlareDaemon ( Docs , Source ). function initialiseFixedAddress ( ) public returns ( address ); Set the governance address to a hard-coded known address. This should be done at contract deployment time. Returns Type Description [0] address The governance address.","title":"initialiseFixedAddress"},{"location":"apis/smart-contracts/FlareDaemon/#fn_registertodaemonize_689c4999","text":"Defined in FlareDaemon ( Docs , Source ). function registerToDaemonize ( struct FlareDaemon . Registration [] _registrations ) external ; Register contracts to be polled by the daemon process. A gas limit of zero will set no limit for the contract but the validator has an overall limit for the trigger method. If any registrations already exist, they will be unregistered. Contracts will be daemonized in the order in which presented via the _registrations array. Parameters Type Description _registrations struct FlareDaemon.Registration[] An array of Registration structures of IFlareDaemonize contracts to daemonize and gas limits for each contract.","title":"registerToDaemonize"},{"location":"apis/smart-contracts/FlareDaemon/#fn_requestminting_e9de7d60","text":"Defined in FlareDaemon ( Docs , Source ). function requestMinting ( uint256 _amountWei ) external ; Queue up a minting request to send to the validator at next trigger . Parameters Type Description _amountWei uint256 The amount to mint.","title":"requestMinting"},{"location":"apis/smart-contracts/FlareDaemon/#fn_setaddressupdater_aea36b53","text":"Defined in FlareDaemon ( Docs , Source ). function setAddressUpdater ( address _addressUpdater ) external ; Sets the address udpater contract. Parameters Type Description _addressUpdater address The address updater contract.","title":"setAddressUpdater"},{"location":"apis/smart-contracts/FlareDaemon/#fn_setblockholdoff_5042916c","text":"Defined in FlareDaemon ( Docs , Source ). function setBlockHoldoff ( uint256 _blockHoldoff ) external ; Set number of blocks that must elapse before a daemonized contract exceeding gas limit can have its daemonize() method called again. Parameters Type Description _blockHoldoff uint256 The number of blocks to holdoff.","title":"setBlockHoldoff"},{"location":"apis/smart-contracts/FlareDaemon/#fn_setmaxmintingrequest_870196b8","text":"Defined in FlareDaemon ( Docs , Source ). function setMaxMintingRequest ( uint256 _maxMintingRequestWei ) external ; Set limit on how much can be minted per request. this number can't be udated too often Parameters Type Description _maxMintingRequestWei uint256 The request maximum in wei.","title":"setMaxMintingRequest"},{"location":"apis/smart-contracts/FlareDaemon/#fn_showdaemonizederrors_ecdda0dd","text":"Defined in FlareDaemon ( Docs , Source ). function showDaemonizedErrors ( uint256 startIndex , uint256 numErrorTypesToShow ) public view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalDaemonizedErrors );","title":"showDaemonizedErrors"},{"location":"apis/smart-contracts/FlareDaemon/#fn_showlastdaemonizederror_63d4a53a","text":"Defined in FlareDaemon ( Docs , Source ). function showLastDaemonizedError ( ) external view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalDaemonizedErrors );","title":"showLastDaemonizedError"},{"location":"apis/smart-contracts/FlareDaemon/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/FlareDaemon/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/FlareDaemon/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/FlareDaemon/#md_inflationset","text":"Defined in FlareDaemon ( Docs , Source ). modifier inflationSet () As there is not a constructor , this modifier exists to make sure the inflation contract is set for methods that require it.","title":"inflationSet"},{"location":"apis/smart-contracts/FlareDaemon/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/FlareDaemon/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/FlareDaemon/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/FlareDaemon/#md_onlyinflation","text":"Defined in FlareDaemon ( Docs , Source ). modifier onlyInflation ( address _inflation ) Access control to protect methods to allow only minters to call select methods (like transferring balance out).","title":"onlyInflation"},{"location":"apis/smart-contracts/FlareDaemon/#md_onlysystemtrigger","text":"Defined in FlareDaemon ( Docs , Source ). modifier onlySystemTrigger () Access control to protect trigger method. Please note that the sender address is the same as deployed FlareDaemon address in this case.","title":"onlySystemTrigger"},{"location":"apis/smart-contracts/FlareDaemon/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/FlareDaemon/#st_daemonizederror","text":"Defined in FlareDaemon ( Docs , Source ). struct DaemonizedError { uint192 lastErrorBlock ; uint64 numErrors ; address fromContract ; uint64 errorTypeIndex ; string errorMessage ; }","title":"DaemonizedError"},{"location":"apis/smart-contracts/FlareDaemon/#st_lasterrordata","text":"Defined in FlareDaemon ( Docs , Source ). struct LastErrorData { uint192 totalDaemonizedErrors ; uint64 lastErrorTypeIndex ; }","title":"LastErrorData"},{"location":"apis/smart-contracts/FlareDaemon/#st_registration","text":"Defined in FlareDaemon ( Docs , Source ). struct Registration { contract IFlareDaemonize daemonizedContract ; uint256 gasLimit ; }","title":"Registration"},{"location":"apis/smart-contracts/FlareDaemon/#st_timelockedcall","text":"Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; }","title":"TimelockedCall"},{"location":"apis/smart-contracts/FlareDaemon/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/FlareDaemon/#va_blockholdoff","text":"Defined in FlareDaemon ( Docs , Source ). uint256 blockHoldoff","title":"blockHoldoff"},{"location":"apis/smart-contracts/FlareDaemon/#va_errordata","text":"Defined in FlareDaemon ( Docs , Source ). struct FlareDaemon . LastErrorData errorData","title":"errorData"},{"location":"apis/smart-contracts/FlareDaemon/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/FlareDaemon/#va_inflation","text":"Defined in FlareDaemon ( Docs , Source ). contract IInflationGenesis inflation","title":"inflation"},{"location":"apis/smart-contracts/FlareDaemon/#va_lastmintrequestts","text":"Defined in FlareDaemon ( Docs , Source ). uint256 lastMintRequestTs","title":"lastMintRequestTs"},{"location":"apis/smart-contracts/FlareDaemon/#va_lastupdatemaxmintrequestts","text":"Defined in FlareDaemon ( Docs , Source ). uint256 lastUpdateMaxMintRequestTs","title":"lastUpdateMaxMintRequestTs"},{"location":"apis/smart-contracts/FlareDaemon/#va_maxmintingrequestwei","text":"Defined in FlareDaemon ( Docs , Source ). uint256 maxMintingRequestWei","title":"maxMintingRequestWei"},{"location":"apis/smart-contracts/FlareDaemon/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/FlareDaemon/#va_systemlasttriggeredat","text":"Defined in FlareDaemon ( Docs , Source ). uint256 systemLastTriggeredAt","title":"systemLastTriggeredAt"},{"location":"apis/smart-contracts/FlareDaemon/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/FlareDaemon/#va_totalmintingreceivedwei","text":"Defined in FlareDaemon ( Docs , Source ). uint256 totalMintingReceivedWei","title":"totalMintingReceivedWei"},{"location":"apis/smart-contracts/FlareDaemon/#va_totalmintingrequestedwei","text":"Defined in FlareDaemon ( Docs , Source ). uint256 totalMintingRequestedWei","title":"totalMintingRequestedWei"},{"location":"apis/smart-contracts/FlareDaemon/#va_totalmintingwithdrawnwei","text":"Defined in FlareDaemon ( Docs , Source ). uint256 totalMintingWithdrawnWei","title":"totalMintingWithdrawnWei"},{"location":"apis/smart-contracts/FlareDaemon/#va_totalselfdestructreceivedwei","text":"Defined in FlareDaemon ( Docs , Source ). uint256 totalSelfDestructReceivedWei","title":"totalSelfDestructReceivedWei"},{"location":"apis/smart-contracts/Ftso/","text":"Ftso # Source | Inherits from IIFtso Flare Time Series Oracle contract. An instance of this contract is created for each tracked asset, and typically accessed through the FtsoRegistry . Data providers do not access the Ftso instances directly either, and use the PriceSubmitter contract instead. Functions # activateFtso # Defined in Ftso ( Docs , Source ). function activateFtso ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ) external ; Initializes FTSO immutable settings and activates the contract. Can only be called by the ftsoManager . Parameters Type Description _firstEpochStartTs uint256 Timestamp of the first epoch in seconds from UNIX epoch. _submitPeriodSeconds uint256 Duration of epoch submission window in seconds. _revealPeriodSeconds uint256 Duration of epoch reveal window in seconds. active # Defined in IFtso ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether FTSO is active or not. configureEpochs # Defined in Ftso ( Docs , Source ). function configureEpochs ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ) external ; Sets configurable settings related to epochs. Can only be called by the ftsoManager . Should never revert if called from ftsoManager . Parameters Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected. constructor # Defined in Ftso ( Docs , Source ). constructor ( string _symbol , uint256 _decimals , contract IPriceSubmitter _priceSubmitter , contract IIVPToken _wNat , address _ftsoManager , uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds , uint128 _initialPriceUSD , uint256 _priceDeviationThresholdBIPS , uint256 _cyclicBufferSize ) public ; deactivateFtso # Defined in Ftso ( Docs , Source ). function deactivateFtso ( ) external ; Deactivates the contract. Can only be called by the ftsoManager . epochsConfiguration # Defined in Ftso ( Docs , Source ). function epochsConfiguration ( ) external view returns ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ); Returns current configuration of epoch state. Returns Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected. fallbackFinalizePriceEpoch # Defined in Ftso ( Docs , Source ). function fallbackFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch, calculating the median price from trusted addresses only. Used as a fallback method, for example, due to an unexpected error during normal epoch finalization or because the ftsoManager enabled the fallback mode. Can only be called by the ftsoManager . Parameters Type Description _epochId uint256 ID of the epoch to finalize. finalizePriceEpoch # Defined in Ftso ( Docs , Source ). function finalizePriceEpoch ( uint256 _epochId , bool _returnRewardData ) external returns ( address [] _eligibleAddresses , uint256 [] _natWeights , uint256 _natWeightsSum ); Computes epoch price based on gathered votes. If the price reveal window for the epoch has ended, finalize the epoch. Iterate list of price submissions. Find weighted median. Find adjacent 50% of price submissions. Allocate rewards for price submissions. Can only be called by the ftsoManager , and only at the correct time. Parameters Type Description _epochId uint256 ID of the epoch to finalize. _returnRewardData bool Parameter that determines if the reward data is returned. Returns Type Description _eligibleAddresses address[] List of addresses eligible for reward. _natWeights uint256[] List of native token weights corresponding to the eligible addresses. _natWeightsSum uint256 forceFinalizePriceEpoch # Defined in Ftso ( Docs , Source ). function forceFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch by copying the price from the previous epoch. Used as a fallback method if fallbackFinalizePriceEpoch fails due to an exception. Can only be called by the ftsoManager . Parameters Type Description _epochId uint256 ID of the epoch to finalize. ftsoManager # Defined in IIFtso ( Docs , Source ). function ftsoManager ( ) external view returns ( address ); Returns the FTSO manager's address. Returns Type Description [0] address Address of the FTSO manager contract. getAsset # Defined in Ftso ( Docs , Source ). function getAsset ( ) external view returns ( contract IIVPToken ); Returns the FTSO asset. Returns Type Description [0] contract IIVPToken Address of the IIVPToken tracked by this FTSO. null in case of multi-asset FTSO. getAssetFtsos # Defined in Ftso ( Docs , Source ). function getAssetFtsos ( ) external view returns ( contract IIFtso []); Returns the asset FTSOs. Returns Type Description [0] contract IIFtso[] Array of IIFtso contract addresses. null in case of single-asset FTSO. getCurrentEpochId # Defined in Ftso ( Docs , Source ). function getCurrentEpochId ( ) public view returns ( uint256 ); Returns the current epoch ID. It never reverts. Returns Type Description [0] uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero. getCurrentPrice # Defined in Ftso ( Docs , Source ). function getCurrentPrice ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns the current asset price. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. getCurrentPriceDetails # Defined in Ftso ( Docs , Source ). function getCurrentPriceDetails ( ) external view returns ( uint256 _price , uint256 _priceTimestamp , enum IFtso . PriceFinalizationType _priceFinalizationType , uint256 _lastPriceEpochFinalizationTimestamp , enum IFtso . PriceFinalizationType _lastPriceEpochFinalizationType ); Returns asset's current price details. All timestamps are in seconds from UNIX epoch. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _priceTimestamp uint256 Time when price was updated for the last time. _priceFinalizationType enum IFtso.PriceFinalizationType Finalization type when price was updated for the last time. _lastPriceEpochFinalizationTimestamp uint256 Time when last price epoch was finalized. _lastPriceEpochFinalizationType enum IFtso.PriceFinalizationType Finalization type of last finalized price epoch. getCurrentPriceFromTrustedProviders # Defined in Ftso ( Docs , Source ). function getCurrentPriceFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns current asset price calculated only using input from trusted providers. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. getCurrentPriceWithDecimals # Defined in Ftso ( Docs , Source ). function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price. getCurrentPriceWithDecimalsFromTrustedProviders # Defined in Ftso ( Docs , Source ). function getCurrentPriceWithDecimalsFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price calculated only using input from trusted providers and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price. getCurrentRandom # Defined in Ftso ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous price epoch, obtained from the random numbers provided by all data providers along with their data submissions. It never reverts. getEpochId # Defined in Ftso ( Docs , Source ). function getEpochId ( uint256 _timestamp ) external view returns ( uint256 ); Returns the ID of the epoch that was opened for price submission at the specified timestamp. It never reverts. Parameters Type Description _timestamp uint256 Queried timestamp in seconds from UNIX epoch. Returns Type Description [0] uint256 Epoch ID corresponding to that timestamp. IDs are consecutive numbers starting from zero. getEpochPrice # Defined in Ftso ( Docs , Source ). function getEpochPrice ( uint256 _epochId ) external view returns ( uint256 ); Returns agreed asset price in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch. Only the last 200 epochs can be queried. Out-of-bounds queries revert. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . getEpochPriceForVoter # Defined in Ftso ( Docs , Source ). function getEpochPriceForVoter ( uint256 _epochId , address _voter ) external view returns ( uint256 ); Returns asset price submitted by a voter in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch being queried. Only the last 200 epochs can be queried. Out-of-bounds queries revert. _voter address Address of the voter being queried. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . getPriceEpochConfiguration # Defined in Ftso ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ); Returns current epoch's configuration. Returns Type Description _firstEpochStartTs uint256 First epoch start timestamp in seconds from UNIX epoch. _submitPeriodSeconds uint256 Submit period in seconds. _revealPeriodSeconds uint256 Reveal period in seconds. getPriceEpochData # Defined in Ftso ( Docs , Source ). function getPriceEpochData ( ) external view returns ( uint256 _epochId , uint256 _epochSubmitEndTime , uint256 _epochRevealEndTime , uint256 _votePowerBlock , bool _fallbackMode ); Returns current epoch data. Intervals are open on the right: End times are not included. Returns Type Description _epochId uint256 Current epoch ID. _epochSubmitEndTime uint256 End time of the price submission window in seconds from UNIX epoch. _epochRevealEndTime uint256 End time of the price reveal window in seconds from UNIX epoch. _votePowerBlock uint256 Vote power block for the current epoch. _fallbackMode bool Whether the current epoch is in fallback mode. Only votes from trusted addresses are used in this mode. getRandom # Defined in Ftso ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch. getVoteWeightingParameters # Defined in IIFtso ( Docs , Source ). function getVoteWeightingParameters ( ) external view returns ( contract IIVPToken [] _assets , uint256 [] _assetMultipliers , uint256 _totalVotePowerNat , uint256 _totalVotePowerAsset , uint256 _assetWeightRatio , uint256 _votePowerBlock ); Returns parameters necessary for replicating vote weighting (used in VoterWhitelister ). Returns Type Description _assets contract IIVPToken[] The list of assets that are accounted in vote. _assetMultipliers uint256[] Weight multiplier of each asset in (multiasset) FTSO. _totalVotePowerNat uint256 Total native token vote power at block. _totalVotePowerAsset uint256 Total combined asset vote power at block. _assetWeightRatio uint256 Ratio of combined asset vote power vs. native token vp (in BIPS). _votePowerBlock uint256 Vote power block for the epoch. initializeCurrentEpochStateForReveal # Defined in Ftso ( Docs , Source ). function initializeCurrentEpochStateForReveal ( uint256 _circulatingSupplyNat , bool _fallbackMode ) external ; Initializes current epoch instance for reveal. Can only be called by the ftsoManager . Parameters Type Description _circulatingSupplyNat uint256 Epoch native token circulating supply. _fallbackMode bool Whether the current epoch is in fallback mode. revealPriceSubmitter # Defined in Ftso ( Docs , Source ). function revealPriceSubmitter ( address _voter , uint256 _epochId , uint256 _price , uint256 _voterWNatVP ) external ; Reveals the price submitted by a voter on a specific epoch. The hash of _price and _random must be equal to the submitted hash Emits a PriceRevealed event. Can only be called by the priceSubmitter . Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. _price uint256 Submitted price. _voterWNatVP uint256 Voter's vote power in WNat units. setAsset # Defined in Ftso ( Docs , Source ). function setAsset ( contract IIVPToken _asset ) external ; Sets asset for FTSO to operate as single-asset oracle. Can only be called by the ftsoManager . Parameters Type Description _asset contract IIVPToken Address of the IIVPToken contract that will be the asset tracked by this FTSO. setAssetFtsos # Defined in Ftso ( Docs , Source ). function setAssetFtsos ( contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs for FTSO to operate as multi-asset oracle. FTSOs implicitly determine the FTSO assets . Can only be called by the ftsoManager . Parameters Type Description _assetFtsos contract IIFtso[] Array of FTSOs. setVotePowerBlock # Defined in Ftso ( Docs , Source ). function setVotePowerBlock ( uint256 _votePowerBlock ) external ; Sets the current vote power block. Current vote power block will update per reward epoch. The FTSO doesn't have notion of reward epochs. Can only be called by the ftsoManager . Parameters Type Description _votePowerBlock uint256 symbol # Defined in IFtso ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the FTSO symbol . updateInitialPrice # Defined in Ftso ( Docs , Source ). function updateInitialPrice ( uint256 _initialPriceUSD , uint256 _initialPriceTimestamp ) external ; Updates initial asset price when the contract is not active yet. Can only be called by the ftsoManager . wNat # Defined in IIFtso ( Docs , Source ). function wNat ( ) external view returns ( contract IIVPToken ); Address of the WNat contract. Returns Type Description [0] contract IIVPToken Address of the WNat contract. wNatVotePowerCached # Defined in Ftso ( Docs , Source ). function wNatVotePowerCached ( address _owner , uint256 _epochId ) public returns ( uint256 ); Get and cache the vote power of a voter on a specific epoch, in WNat units. Parameters Type Description _owner address _epochId uint256 ID of the epoch in which the price hash was submitted. Returns Type Description [0] uint256 Voter's vote power in WNat units. Modifiers # onlyFtsoManager # Defined in Ftso ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method. onlyPriceSubmitter # Defined in Ftso ( Docs , Source ). modifier onlyPriceSubmitter () Only the priceSubmitter can call this method. whenActive # Defined in Ftso ( Docs , Source ). modifier whenActive () This method can only be called when the FTSO is active . Structures # RewardData # Defined in Ftso ( Docs , Source ). struct RewardData { uint256 [] weightIQR ; uint256 [] weightElasticBand ; uint256 weightsIQRSum ; uint256 weightsElasticBandSum ; uint256 numberOfVotes ; uint256 elasticBandRewardBIPS ; } Variables # ASSET_PRICE_USD_DECIMALS # Defined in Ftso ( Docs , Source ). uint256 ASSET_PRICE_USD_DECIMALS Number of decimal places in an asset's USD price. Actual USD price is the integer value divided by 10^ ASSET_PRICE_USD_DECIMALS active # Defined in Ftso ( Docs , Source ). bool active Activation status of this FTSO. assetFtsos # Defined in Ftso ( Docs , Source ). contract IIFtso [] assetFtsos Array of addresses of other Ftso contracts tracked by this multi-asset FTSO. assets # Defined in Ftso ( Docs , Source ). contract IIVPToken [] assets Array of addresses of the tracked assets . ftsoManager # Defined in Ftso ( Docs , Source ). address ftsoManager Address of the FtsoManager contract. priceDeviationThresholdBIPS # Defined in Ftso ( Docs , Source ). uint256 priceDeviationThresholdBIPS Threshold for price deviation between consecutive epochs. priceEpochCyclicBufferSize # Defined in Ftso ( Docs , Source ). uint256 priceEpochCyclicBufferSize Amount of stored prices for past epochs, set at construction time. priceSubmitter # Defined in Ftso ( Docs , Source ). contract IPriceSubmitter priceSubmitter Address of the PriceSubmitter contract. symbol # Defined in Ftso ( Docs , Source ). string symbol Asset symbol that identifies this FTSO. wNat # Defined in Ftso ( Docs , Source ). contract IIVPToken wNat Address of the wrapped native token ( WNat ) contract.","title":"Ftso"},{"location":"apis/smart-contracts/Ftso/#ct_ftso","text":"Source | Inherits from IIFtso Flare Time Series Oracle contract. An instance of this contract is created for each tracked asset, and typically accessed through the FtsoRegistry . Data providers do not access the Ftso instances directly either, and use the PriceSubmitter contract instead.","title":"Ftso"},{"location":"apis/smart-contracts/Ftso/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/Ftso/#fn_activateftso_2f0a6f3c","text":"Defined in Ftso ( Docs , Source ). function activateFtso ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ) external ; Initializes FTSO immutable settings and activates the contract. Can only be called by the ftsoManager . Parameters Type Description _firstEpochStartTs uint256 Timestamp of the first epoch in seconds from UNIX epoch. _submitPeriodSeconds uint256 Duration of epoch submission window in seconds. _revealPeriodSeconds uint256 Duration of epoch reveal window in seconds.","title":"activateFtso"},{"location":"apis/smart-contracts/Ftso/#fn_active_02fb0c5e","text":"Defined in IFtso ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether FTSO is active or not.","title":"active"},{"location":"apis/smart-contracts/Ftso/#fn_configureepochs_5a3c9d8e","text":"Defined in Ftso ( Docs , Source ). function configureEpochs ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ) external ; Sets configurable settings related to epochs. Can only be called by the ftsoManager . Should never revert if called from ftsoManager . Parameters Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected.","title":"configureEpochs"},{"location":"apis/smart-contracts/Ftso/#fn_constructor_undefined","text":"Defined in Ftso ( Docs , Source ). constructor ( string _symbol , uint256 _decimals , contract IPriceSubmitter _priceSubmitter , contract IIVPToken _wNat , address _ftsoManager , uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds , uint128 _initialPriceUSD , uint256 _priceDeviationThresholdBIPS , uint256 _cyclicBufferSize ) public ;","title":"constructor"},{"location":"apis/smart-contracts/Ftso/#fn_deactivateftso_555989da","text":"Defined in Ftso ( Docs , Source ). function deactivateFtso ( ) external ; Deactivates the contract. Can only be called by the ftsoManager .","title":"deactivateFtso"},{"location":"apis/smart-contracts/Ftso/#fn_epochsconfiguration_e3749e0c","text":"Defined in Ftso ( Docs , Source ). function epochsConfiguration ( ) external view returns ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ); Returns current configuration of epoch state. Returns Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected.","title":"epochsConfiguration"},{"location":"apis/smart-contracts/Ftso/#fn_fallbackfinalizepriceepoch_4afd5102","text":"Defined in Ftso ( Docs , Source ). function fallbackFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch, calculating the median price from trusted addresses only. Used as a fallback method, for example, due to an unexpected error during normal epoch finalization or because the ftsoManager enabled the fallback mode. Can only be called by the ftsoManager . Parameters Type Description _epochId uint256 ID of the epoch to finalize.","title":"fallbackFinalizePriceEpoch"},{"location":"apis/smart-contracts/Ftso/#fn_finalizepriceepoch_40462a2d","text":"Defined in Ftso ( Docs , Source ). function finalizePriceEpoch ( uint256 _epochId , bool _returnRewardData ) external returns ( address [] _eligibleAddresses , uint256 [] _natWeights , uint256 _natWeightsSum ); Computes epoch price based on gathered votes. If the price reveal window for the epoch has ended, finalize the epoch. Iterate list of price submissions. Find weighted median. Find adjacent 50% of price submissions. Allocate rewards for price submissions. Can only be called by the ftsoManager , and only at the correct time. Parameters Type Description _epochId uint256 ID of the epoch to finalize. _returnRewardData bool Parameter that determines if the reward data is returned. Returns Type Description _eligibleAddresses address[] List of addresses eligible for reward. _natWeights uint256[] List of native token weights corresponding to the eligible addresses. _natWeightsSum uint256","title":"finalizePriceEpoch"},{"location":"apis/smart-contracts/Ftso/#fn_forcefinalizepriceepoch_974d7a6b","text":"Defined in Ftso ( Docs , Source ). function forceFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch by copying the price from the previous epoch. Used as a fallback method if fallbackFinalizePriceEpoch fails due to an exception. Can only be called by the ftsoManager . Parameters Type Description _epochId uint256 ID of the epoch to finalize.","title":"forceFinalizePriceEpoch"},{"location":"apis/smart-contracts/Ftso/#fn_ftsomanager_11a7aaaa","text":"Defined in IIFtso ( Docs , Source ). function ftsoManager ( ) external view returns ( address ); Returns the FTSO manager's address. Returns Type Description [0] address Address of the FTSO manager contract.","title":"ftsoManager"},{"location":"apis/smart-contracts/Ftso/#fn_getasset_5c222bad","text":"Defined in Ftso ( Docs , Source ). function getAsset ( ) external view returns ( contract IIVPToken ); Returns the FTSO asset. Returns Type Description [0] contract IIVPToken Address of the IIVPToken tracked by this FTSO. null in case of multi-asset FTSO.","title":"getAsset"},{"location":"apis/smart-contracts/Ftso/#fn_getassetftsos_18931c35","text":"Defined in Ftso ( Docs , Source ). function getAssetFtsos ( ) external view returns ( contract IIFtso []); Returns the asset FTSOs. Returns Type Description [0] contract IIFtso[] Array of IIFtso contract addresses. null in case of single-asset FTSO.","title":"getAssetFtsos"},{"location":"apis/smart-contracts/Ftso/#fn_getcurrentepochid_a29a839f","text":"Defined in Ftso ( Docs , Source ). function getCurrentEpochId ( ) public view returns ( uint256 ); Returns the current epoch ID. It never reverts. Returns Type Description [0] uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"getCurrentEpochId"},{"location":"apis/smart-contracts/Ftso/#fn_getcurrentprice_eb91d37e","text":"Defined in Ftso ( Docs , Source ). function getCurrentPrice ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns the current asset price. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/Ftso/#fn_getcurrentpricedetails_040d73b8","text":"Defined in Ftso ( Docs , Source ). function getCurrentPriceDetails ( ) external view returns ( uint256 _price , uint256 _priceTimestamp , enum IFtso . PriceFinalizationType _priceFinalizationType , uint256 _lastPriceEpochFinalizationTimestamp , enum IFtso . PriceFinalizationType _lastPriceEpochFinalizationType ); Returns asset's current price details. All timestamps are in seconds from UNIX epoch. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _priceTimestamp uint256 Time when price was updated for the last time. _priceFinalizationType enum IFtso.PriceFinalizationType Finalization type when price was updated for the last time. _lastPriceEpochFinalizationTimestamp uint256 Time when last price epoch was finalized. _lastPriceEpochFinalizationType enum IFtso.PriceFinalizationType Finalization type of last finalized price epoch.","title":"getCurrentPriceDetails"},{"location":"apis/smart-contracts/Ftso/#fn_getcurrentpricefromtrustedproviders_af52df08","text":"Defined in Ftso ( Docs , Source ). function getCurrentPriceFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns current asset price calculated only using input from trusted providers. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch.","title":"getCurrentPriceFromTrustedProviders"},{"location":"apis/smart-contracts/Ftso/#fn_getcurrentpricewithdecimals_65f5cd86","text":"Defined in Ftso ( Docs , Source ). function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price.","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/Ftso/#fn_getcurrentpricewithdecimalsfromtrustedproviders_3cacb3ae","text":"Defined in Ftso ( Docs , Source ). function getCurrentPriceWithDecimalsFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price calculated only using input from trusted providers and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price.","title":"getCurrentPriceWithDecimalsFromTrustedProviders"},{"location":"apis/smart-contracts/Ftso/#fn_getcurrentrandom_d89601fd","text":"Defined in Ftso ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous price epoch, obtained from the random numbers provided by all data providers along with their data submissions. It never reverts.","title":"getCurrentRandom"},{"location":"apis/smart-contracts/Ftso/#fn_getepochid_5303548b","text":"Defined in Ftso ( Docs , Source ). function getEpochId ( uint256 _timestamp ) external view returns ( uint256 ); Returns the ID of the epoch that was opened for price submission at the specified timestamp. It never reverts. Parameters Type Description _timestamp uint256 Queried timestamp in seconds from UNIX epoch. Returns Type Description [0] uint256 Epoch ID corresponding to that timestamp. IDs are consecutive numbers starting from zero.","title":"getEpochId"},{"location":"apis/smart-contracts/Ftso/#fn_getepochprice_7d1d6f12","text":"Defined in Ftso ( Docs , Source ). function getEpochPrice ( uint256 _epochId ) external view returns ( uint256 ); Returns agreed asset price in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch. Only the last 200 epochs can be queried. Out-of-bounds queries revert. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS .","title":"getEpochPrice"},{"location":"apis/smart-contracts/Ftso/#fn_getepochpriceforvoter_c5d8b9e7","text":"Defined in Ftso ( Docs , Source ). function getEpochPriceForVoter ( uint256 _epochId , address _voter ) external view returns ( uint256 ); Returns asset price submitted by a voter in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch being queried. Only the last 200 epochs can be queried. Out-of-bounds queries revert. _voter address Address of the voter being queried. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS .","title":"getEpochPriceForVoter"},{"location":"apis/smart-contracts/Ftso/#fn_getpriceepochconfiguration_144e1591","text":"Defined in Ftso ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ); Returns current epoch's configuration. Returns Type Description _firstEpochStartTs uint256 First epoch start timestamp in seconds from UNIX epoch. _submitPeriodSeconds uint256 Submit period in seconds. _revealPeriodSeconds uint256 Reveal period in seconds.","title":"getPriceEpochConfiguration"},{"location":"apis/smart-contracts/Ftso/#fn_getpriceepochdata_e3b3a3b3","text":"Defined in Ftso ( Docs , Source ). function getPriceEpochData ( ) external view returns ( uint256 _epochId , uint256 _epochSubmitEndTime , uint256 _epochRevealEndTime , uint256 _votePowerBlock , bool _fallbackMode ); Returns current epoch data. Intervals are open on the right: End times are not included. Returns Type Description _epochId uint256 Current epoch ID. _epochSubmitEndTime uint256 End time of the price submission window in seconds from UNIX epoch. _epochRevealEndTime uint256 End time of the price reveal window in seconds from UNIX epoch. _votePowerBlock uint256 Vote power block for the current epoch. _fallbackMode bool Whether the current epoch is in fallback mode. Only votes from trusted addresses are used in this mode.","title":"getPriceEpochData"},{"location":"apis/smart-contracts/Ftso/#fn_getrandom_cd4b6914","text":"Defined in Ftso ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch.","title":"getRandom"},{"location":"apis/smart-contracts/Ftso/#fn_getvoteweightingparameters_8357d08c","text":"Defined in IIFtso ( Docs , Source ). function getVoteWeightingParameters ( ) external view returns ( contract IIVPToken [] _assets , uint256 [] _assetMultipliers , uint256 _totalVotePowerNat , uint256 _totalVotePowerAsset , uint256 _assetWeightRatio , uint256 _votePowerBlock ); Returns parameters necessary for replicating vote weighting (used in VoterWhitelister ). Returns Type Description _assets contract IIVPToken[] The list of assets that are accounted in vote. _assetMultipliers uint256[] Weight multiplier of each asset in (multiasset) FTSO. _totalVotePowerNat uint256 Total native token vote power at block. _totalVotePowerAsset uint256 Total combined asset vote power at block. _assetWeightRatio uint256 Ratio of combined asset vote power vs. native token vp (in BIPS). _votePowerBlock uint256 Vote power block for the epoch.","title":"getVoteWeightingParameters"},{"location":"apis/smart-contracts/Ftso/#fn_initializecurrentepochstateforreveal_f670ebe3","text":"Defined in Ftso ( Docs , Source ). function initializeCurrentEpochStateForReveal ( uint256 _circulatingSupplyNat , bool _fallbackMode ) external ; Initializes current epoch instance for reveal. Can only be called by the ftsoManager . Parameters Type Description _circulatingSupplyNat uint256 Epoch native token circulating supply. _fallbackMode bool Whether the current epoch is in fallback mode.","title":"initializeCurrentEpochStateForReveal"},{"location":"apis/smart-contracts/Ftso/#fn_revealpricesubmitter_c1f6c36e","text":"Defined in Ftso ( Docs , Source ). function revealPriceSubmitter ( address _voter , uint256 _epochId , uint256 _price , uint256 _voterWNatVP ) external ; Reveals the price submitted by a voter on a specific epoch. The hash of _price and _random must be equal to the submitted hash Emits a PriceRevealed event. Can only be called by the priceSubmitter . Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. _price uint256 Submitted price. _voterWNatVP uint256 Voter's vote power in WNat units.","title":"revealPriceSubmitter"},{"location":"apis/smart-contracts/Ftso/#fn_setasset_d0d552dd","text":"Defined in Ftso ( Docs , Source ). function setAsset ( contract IIVPToken _asset ) external ; Sets asset for FTSO to operate as single-asset oracle. Can only be called by the ftsoManager . Parameters Type Description _asset contract IIVPToken Address of the IIVPToken contract that will be the asset tracked by this FTSO.","title":"setAsset"},{"location":"apis/smart-contracts/Ftso/#fn_setassetftsos_131fdee2","text":"Defined in Ftso ( Docs , Source ). function setAssetFtsos ( contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs for FTSO to operate as multi-asset oracle. FTSOs implicitly determine the FTSO assets . Can only be called by the ftsoManager . Parameters Type Description _assetFtsos contract IIFtso[] Array of FTSOs.","title":"setAssetFtsos"},{"location":"apis/smart-contracts/Ftso/#fn_setvotepowerblock_e536f396","text":"Defined in Ftso ( Docs , Source ). function setVotePowerBlock ( uint256 _votePowerBlock ) external ; Sets the current vote power block. Current vote power block will update per reward epoch. The FTSO doesn't have notion of reward epochs. Can only be called by the ftsoManager . Parameters Type Description _votePowerBlock uint256","title":"setVotePowerBlock"},{"location":"apis/smart-contracts/Ftso/#fn_symbol_95d89b41","text":"Defined in IFtso ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the FTSO symbol .","title":"symbol"},{"location":"apis/smart-contracts/Ftso/#fn_updateinitialprice_306ba253","text":"Defined in Ftso ( Docs , Source ). function updateInitialPrice ( uint256 _initialPriceUSD , uint256 _initialPriceTimestamp ) external ; Updates initial asset price when the contract is not active yet. Can only be called by the ftsoManager .","title":"updateInitialPrice"},{"location":"apis/smart-contracts/Ftso/#fn_wnat_9edbf007","text":"Defined in IIFtso ( Docs , Source ). function wNat ( ) external view returns ( contract IIVPToken ); Address of the WNat contract. Returns Type Description [0] contract IIVPToken Address of the WNat contract.","title":"wNat"},{"location":"apis/smart-contracts/Ftso/#fn_wnatvotepowercached_f72cab28","text":"Defined in Ftso ( Docs , Source ). function wNatVotePowerCached ( address _owner , uint256 _epochId ) public returns ( uint256 ); Get and cache the vote power of a voter on a specific epoch, in WNat units. Parameters Type Description _owner address _epochId uint256 ID of the epoch in which the price hash was submitted. Returns Type Description [0] uint256 Voter's vote power in WNat units.","title":"wNatVotePowerCached"},{"location":"apis/smart-contracts/Ftso/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/Ftso/#md_onlyftsomanager","text":"Defined in Ftso ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method.","title":"onlyFtsoManager"},{"location":"apis/smart-contracts/Ftso/#md_onlypricesubmitter","text":"Defined in Ftso ( Docs , Source ). modifier onlyPriceSubmitter () Only the priceSubmitter can call this method.","title":"onlyPriceSubmitter"},{"location":"apis/smart-contracts/Ftso/#md_whenactive","text":"Defined in Ftso ( Docs , Source ). modifier whenActive () This method can only be called when the FTSO is active .","title":"whenActive"},{"location":"apis/smart-contracts/Ftso/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/Ftso/#st_rewarddata","text":"Defined in Ftso ( Docs , Source ). struct RewardData { uint256 [] weightIQR ; uint256 [] weightElasticBand ; uint256 weightsIQRSum ; uint256 weightsElasticBandSum ; uint256 numberOfVotes ; uint256 elasticBandRewardBIPS ; }","title":"RewardData"},{"location":"apis/smart-contracts/Ftso/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/Ftso/#va_asset_price_usd_decimals","text":"Defined in Ftso ( Docs , Source ). uint256 ASSET_PRICE_USD_DECIMALS Number of decimal places in an asset's USD price. Actual USD price is the integer value divided by 10^ ASSET_PRICE_USD_DECIMALS","title":"ASSET_PRICE_USD_DECIMALS"},{"location":"apis/smart-contracts/Ftso/#va_active","text":"Defined in Ftso ( Docs , Source ). bool active Activation status of this FTSO.","title":"active"},{"location":"apis/smart-contracts/Ftso/#va_assetftsos","text":"Defined in Ftso ( Docs , Source ). contract IIFtso [] assetFtsos Array of addresses of other Ftso contracts tracked by this multi-asset FTSO.","title":"assetFtsos"},{"location":"apis/smart-contracts/Ftso/#va_assets","text":"Defined in Ftso ( Docs , Source ). contract IIVPToken [] assets Array of addresses of the tracked assets .","title":"assets"},{"location":"apis/smart-contracts/Ftso/#va_ftsomanager","text":"Defined in Ftso ( Docs , Source ). address ftsoManager Address of the FtsoManager contract.","title":"ftsoManager"},{"location":"apis/smart-contracts/Ftso/#va_pricedeviationthresholdbips","text":"Defined in Ftso ( Docs , Source ). uint256 priceDeviationThresholdBIPS Threshold for price deviation between consecutive epochs.","title":"priceDeviationThresholdBIPS"},{"location":"apis/smart-contracts/Ftso/#va_priceepochcyclicbuffersize","text":"Defined in Ftso ( Docs , Source ). uint256 priceEpochCyclicBufferSize Amount of stored prices for past epochs, set at construction time.","title":"priceEpochCyclicBufferSize"},{"location":"apis/smart-contracts/Ftso/#va_pricesubmitter","text":"Defined in Ftso ( Docs , Source ). contract IPriceSubmitter priceSubmitter Address of the PriceSubmitter contract.","title":"priceSubmitter"},{"location":"apis/smart-contracts/Ftso/#va_symbol","text":"Defined in Ftso ( Docs , Source ). string symbol Asset symbol that identifies this FTSO.","title":"symbol"},{"location":"apis/smart-contracts/Ftso/#va_wnat","text":"Defined in Ftso ( Docs , Source ). contract IIVPToken wNat Address of the wrapped native token ( WNat ) contract.","title":"wNat"},{"location":"apis/smart-contracts/FtsoManager/","text":"FtsoManager # Source | Inherits from IIFtsoManager , GovernedAndFlareDaemonized , AddressUpdatable , RevertErrorTracking FTSO Manager contract. It is in charge of: Defining reward epochs (few days). Choosing a single block each reward epoch that represents vote power of this epoch. Keeping track of all FTSO contracts. Every price epoch (few minutes): Randomly choose one FTSO for rewarding calculations. Trigger finalize price reveal epoch. Determine addresses and reward weights and triggers reward distribution. Functions # activate # Defined in FtsoManager ( Docs , Source ). function activate ( ) external ; Activates FTSO manager ( daemonize will run jobs). Only governance can call this method. active # Defined in IFtsoManager ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether the FTSO Manager is active or not. Returns Type Description [0] bool bool Active status. addFtso # Defined in FtsoManager ( Docs , Source ). function addFtso ( contract IIFtso _ftso ) external ; Adds FTSO to the list of managed FTSOs, to support a new price pair. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Only governance can call this method. Parameters Type Description _ftso contract IIFtso FTSO contract address to add. addFtsosBulk # Defined in FtsoManager ( Docs , Source ). function addFtsosBulk ( contract IIFtso [] _ftsos ) external ; Adds a list of FTSOs to the list of managed FTSOs, to support new price pairs. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Only governance can call this method. Parameters Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses to add. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in FtsoManager ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon , address _addressUpdater , contract IIFtsoManagerV1 _oldFtsoManager , uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds , uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds , uint256 _votePowerIntervalFraction ) public ; constructor # Defined in GovernedAndFlareDaemonized ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. currentRewardEpochEnds # Defined in IIFtsoManager ( Docs , Source ). function currentRewardEpochEnds ( ) external view returns ( uint256 ); Returns when the current reward epoch finishes. Returns Type Description [0] uint256 uint256 Time in seconds since the UNIX epoch when the current reward epoch will finish. daemonize # Defined in FtsoManager ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Only flareDaemon can call this method. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused. deactivateFtsos # Defined in FtsoManager ( Docs , Source ). function deactivateFtsos ( contract IIFtso [] _ftsos ) external ; Deactivates FTSOs that are no longer used on FTSO registry. Only governance can call this method. Parameters Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses to deactivate. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). ftsoRegistry # Defined in FtsoManager ( Docs , Source ). function ftsoRegistry ( ) external view returns ( contract IIFtsoRegistry ); Returns the FtsoRegistry contract address. getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getContractName # Defined in FtsoManager ( Docs , Source ). function getContractName ( ) external pure returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name. getCurrentPriceEpochData # Defined in FtsoManager ( Docs , Source ). function getCurrentPriceEpochData ( ) external view returns ( uint256 _priceEpochId , uint256 _priceEpochStartTimestamp , uint256 _priceEpochEndTimestamp , uint256 _priceEpochRevealEndTimestamp , uint256 _currentTimestamp ); Returns timing information for the current price epoch. All intervals are half-closed: end time is not included. All timestamps are in seconds since UNIX epoch. See the FTSO page for information about the different submission phases. Returns Type Description _priceEpochId uint256 Price epoch ID. _priceEpochStartTimestamp uint256 Beginning of the commit phase. _priceEpochEndTimestamp uint256 End of the commit phase. _priceEpochRevealEndTimestamp uint256 End of the reveal phase. _currentTimestamp uint256 Current time. getCurrentPriceEpochId # Defined in FtsoManager ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero. getCurrentRewardEpoch # Defined in FtsoManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns current reward epoch ID (the one currently running). Returns Type Description [0] uint256 Reward epoch ID. A monotonically increasing integer. getElasticBandWidthPPMFtso # Defined in FtsoManager ( Docs , Source ). function getElasticBandWidthPPMFtso ( contract IIFtso _ftso ) external view returns ( uint256 ); Returns the secondary band's width in PPM (parts-per-million) of the median value, for a given FTSO. Parameters Type Description _ftso contract IIFtso The queried FTSO contract address. Returns Type Description [0] uint256 uint256 Secondary band width in PPM. To obtain the actual band width, divide this number by 10^6 and multiply by the price median value. getFallbackMode # Defined in FtsoManager ( Docs , Source ). function getFallbackMode ( ) external view returns ( bool _fallbackMode , contract IIFtso [] _ftsos , bool [] _ftsoInFallbackMode ); Returns whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Returns Type Description _fallbackMode bool True if fallback mode is enabled for the manager. _ftsos contract IIFtso[] Array of all currently active FTSO assets. _ftsoInFallbackMode bool[] Boolean array indicating which FTSO assets are in fallback mode. If the FTSO Manager is in fallback mode then ALL FTSOs are in fallback mode. getFtsos # Defined in FtsoManager ( Docs , Source ). function getFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Returns the list of currently active FTSOs. Returns Type Description _ftsos contract IIFtso[] Array of contract addresses for the FTSOs. getGovernanceParameters # Defined in FtsoManager ( Docs , Source ). function getGovernanceParameters ( ) external view returns ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _rewardExpiryOffsetSeconds , address [] _trustedAddresses , bool _initialized , bool _changed ); Returns governance parameters for FTSOs. Returns Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Secondary reward band, where _elasticBandRewardBIPS goes to the secondary band and 10000 - _elasticBandRewardBIPS to the primary (IQR) band. _rewardExpiryOffsetSeconds uint256 Reward epochs closed earlier than block.timestamp - _rewardExpiryOffsetSeconds expire. _trustedAddresses address[] Trusted addresses will be used as a fallback mechanism for setting the price. _initialized bool _changed bool getLastUnprocessedPriceEpochData # Defined in FtsoManager ( Docs , Source ). function getLastUnprocessedPriceEpochData ( ) external view returns ( uint256 _lastUnprocessedPriceEpoch , uint256 _lastUnprocessedPriceEpochRevealEnds , bool _lastUnprocessedPriceEpochInitialized ); Returns information regarding the currently unprocessed price epoch. This epoch is not necessarily the last one, in case the network halts for some time due to validator node problems, for example. Returns Type Description _lastUnprocessedPriceEpoch uint256 ID of the price epoch that is currently waiting finalization. _lastUnprocessedPriceEpochRevealEnds uint256 When that price epoch can be finalized, in seconds since UNIX epoch. _lastUnprocessedPriceEpochInitialized bool Whether this price epoch has been already initialized and therefore it must be finalized before the corresponding reward epoch can be finalized. getPriceEpochConfiguration # Defined in FtsoManager ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds ); Returns the current values for price epoch timing configuration. See the FTSO page for information about the different submission phases. Returns Type Description _firstPriceEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first price epoch. _priceEpochDurationSeconds uint256 Duration in seconds of the commit phase. _revealEpochDurationSeconds uint256 Duration in seconds of the reveal phase. getPriceSubmitter # Defined in FtsoManager ( Docs , Source ). function getPriceSubmitter ( ) external view returns ( contract IIPriceSubmitter ); Returns the PriceSubmitter contract. getRewardEpochConfiguration # Defined in FtsoManager ( Docs , Source ). function getRewardEpochConfiguration ( ) external view returns ( uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds ); Returns the current values for reward epoch timing configuration. See the Reward epochs box. Returns Type Description _firstRewardEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first reward epoch. _rewardEpochDurationSeconds uint256 Duration in seconds of the reward epochs. getRewardEpochData # Defined in FtsoManager ( Docs , Source ). function getRewardEpochData ( uint256 _rewardEpochId ) public view returns ( struct IIFtsoManager . RewardEpochData ); Returns data regarding a specific reward epoch ID. Parameters Type Description _rewardEpochId uint256 Epoch ID. Returns Type Description [0] struct IIFtsoManager.RewardEpochData RewardEpochData Its associated data. getRewardEpochToExpireNext # Defined in FtsoManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Return reward epoch that will expire next, when a new reward epoch is initialized. Reward epochs older than 90 days expire, and any unclaimed rewards in them become inaccessible. Returns Type Description [0] uint256 uint256 Reward epoch ID. getRewardEpochVotePowerBlock # Defined in FtsoManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 _votepowerBlock ); Returns the vote power block that was used for a past reward epoch. Parameters Type Description _rewardEpoch uint256 The queried reward epoch ID. Returns Type Description _votepowerBlock uint256 uint256 The block number of that reward epoch's vote power block. getRewardExpiryOffsetSeconds # Defined in FtsoManager ( Docs , Source ). function getRewardExpiryOffsetSeconds ( ) external view returns ( uint256 ); Returns the currently configured reward expiration time. Returns Type Description [0] uint256 uint256 Unclaimed rewards accrued in reward epochs more than this amount of seconds in the past expire and become inaccessible. getUpdateGovernanceParametersTs # Defined in FtsoManager ( Docs , Source ). function getUpdateGovernanceParametersTs ( ) external view returns ( uint256 ); Returns the timestamp, in seconds since UNIX epoch, when the scheduled new settings will take effect. getVotePowerIntervalFraction # Defined in FtsoManager ( Docs , Source ). function getVotePowerIntervalFraction ( ) external view returns ( uint256 ); governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. notInitializedFtsos # Defined in FtsoManager ( Docs , Source ). function notInitializedFtsos ( contract IIFtso _ftso ) external view returns ( bool ); Returns whether an FTSO has been initialized. Returns Type Description [0] bool bool Initialization state. removeFtso # Defined in FtsoManager ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes an FTSO from the list of managed FTSOs. Reverts if FTSO is used in a multi-asset FTSO. Deactivates the _ftso . Only governance can call this method. Parameters Type Description _ftso contract IIFtso FTSO contract address to remove. replaceFtso # Defined in FtsoManager ( Docs , Source ). function replaceFtso ( contract IIFtso _ftsoToAdd , bool _copyCurrentPrice , bool _copyAssetOrAssetFtsos ) external ; Replaces one FTSO with another with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSO. Only governance can call this method. Parameters Type Description _ftsoToAdd contract IIFtso FTSO contract address to add. An existing FTSO with the same symbol will be removed. _copyCurrentPrice bool _copyAssetOrAssetFtsos bool replaceFtsosBulk # Defined in FtsoManager ( Docs , Source ). function replaceFtsosBulk ( contract IIFtso [] _ftsosToAdd , bool _copyCurrentPrice , bool _copyAssetOrAssetFtsos ) external ; Replaces a list of FTSOs with other FTSOs with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSOs. Only governance can call this method. Parameters Type Description _ftsosToAdd contract IIFtso[] Array of FTSO contract addresses to add. Every existing FTSO with the same symbols will be removed. _copyCurrentPrice bool _copyAssetOrAssetFtsos bool rewardEpochDurationSeconds # Defined in IIFtsoManager ( Docs , Source ). function rewardEpochDurationSeconds ( ) external view returns ( uint256 ); Currently configured reward epoch duration. Returns Type Description [0] uint256 uint256 Reward epoch duration, in seconds. rewardEpochs # Defined in FtsoManager ( Docs , Source ). function rewardEpochs ( uint256 _rewardEpochId ) external view returns ( uint256 _votepowerBlock , uint256 _startBlock , uint256 _startTimestamp ); Returns information about a reward epoch. Parameters Type Description _rewardEpochId uint256 The epoch ID to query. Returns Type Description _votepowerBlock uint256 The vote power block of the epoch. _startBlock uint256 The first block of the epoch. _startTimestamp uint256 Timestamp of the epoch start, in seconds since UNIX epoch. rewardEpochsStartTs # Defined in IIFtsoManager ( Docs , Source ). function rewardEpochsStartTs ( ) external view returns ( uint256 ); Time when the current reward epoch started. Returns Type Description [0] uint256 uint256 Timestamp, in seconds since UNIX epoch. setElasticBandWidthPPMFtsos # Defined in FtsoManager ( Docs , Source ). function setElasticBandWidthPPMFtsos ( uint256 _updateTs , contract IIFtso [] _ftsos , uint256 [] _widths ) external ; Sets elastic band widths in PPM (parts-per-million) for given FTSOs. Only governance can call this method. Parameters Type Description _updateTs uint256 Timestamp when the changes will take effect, in seconds from UNIX epoch. _ftsos contract IIFtso[] Array of FTSO contract addresses to update. _widths uint256[] Array of secondary band widths in PPM. To obtain the actual band width, this number is divided by 10^6 and multiplied by the price median value. setFallbackMode # Defined in FtsoManager ( Docs , Source ). function setFallbackMode ( bool _fallbackMode ) external ; Sets whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Only governance can call this method. Parameters Type Description _fallbackMode bool True if fallback mode is enabled. setFtsoAsset # Defined in FtsoManager ( Docs , Source ). function setFtsoAsset ( contract IIFtso _ftso , contract IIVPToken _asset ) external ; Sets the asset tracked by an FTSO. Only governance can call this method. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _asset contract IIVPToken The VPToken contract address of the asset to track. setFtsoAssetFtsos # Defined in FtsoManager ( Docs , Source ). function setFtsoAssetFtsos ( contract IIFtso _ftso , contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs to be tracked by a multi-asset FTSO. FTSOs implicitly determine the FTSO assets. Only governance can call this method. Parameters Type Description _ftso contract IIFtso The multi-asset FTSO contract address. _assetFtsos contract IIFtso[] Array of FTSOs to be tracked. setFtsoFallbackMode # Defined in FtsoManager ( Docs , Source ). function setFtsoFallbackMode ( contract IIFtso _ftso , bool _fallbackMode ) external ; Sets whether an FTSO is currently in fallback mode. In this mode only submissions from trusted providers are used. Only governance can call this method. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _fallbackMode bool Fallback mode. setGovernanceParameters # Defined in FtsoManager ( Docs , Source ). function setGovernanceParameters ( uint256 _updateTs , uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _rewardExpiryOffsetSeconds , address [] _trustedAddresses ) external ; Sets governance parameters for FTSOs Only governance can call this method. Parameters Type Description _updateTs uint256 Time, in seconds since UNIX epoch, when updated settings should be pushed to FTSOs. _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Secondary reward band, where _elasticBandRewardBIPS goes to the secondary band and 10000 - _elasticBandRewardBIPS to the primary (IQR) band. _rewardExpiryOffsetSeconds uint256 Reward epochs closed earlier than block.timestamp - _rewardExpiryOffsetSeconds expire. _trustedAddresses address[] Trusted addresses will be used as a fallback mechanism for setting the price. setInitialRewardData # Defined in FtsoManager ( Docs , Source ). function setInitialRewardData ( uint256 _nextRewardEpochToExpire , uint256 _rewardEpochsLength , uint256 _currentRewardEpochEnds ) external ; Set reward data to values from old ftso manager. Can only be called before activation. Only governance can call this method. Parameters Type Description _nextRewardEpochToExpire uint256 See getRewardEpochToExpireNext . _rewardEpochsLength uint256 See getRewardEpochConfiguration . _currentRewardEpochEnds uint256 See getCurrentRewardEpoch . setRewardEpochDurationSeconds # Defined in FtsoManager ( Docs , Source ). function setRewardEpochDurationSeconds ( uint256 _rewardEpochDurationSeconds ) external ; Sets the reward epoch duration. Only governance can call this method. If the reward epoch is very short and the expiry offset is very long, the list of reward epochs to be checked becomes very long. Therefore reward epoch time has to be capped to expiry offset. setUpdateOnRewardEpochSwitchover # Defined in FtsoManager ( Docs , Source ). function setUpdateOnRewardEpochSwitchover ( contract IUpdateValidators _updateValidators ) external ; Unused. setUseGoodRandom # Defined in FtsoManager ( Docs , Source ). function setUseGoodRandom ( bool _useGoodRandom , uint256 _maxWaitForGoodRandomSeconds ) external ; Allow governance to switch to good random numbers only. Only governance can call this method. See IFtsoManager . UseGoodRandomSet . Parameters Type Description _useGoodRandom bool Whether good random numbers should be used or not. _maxWaitForGoodRandomSeconds uint256 Max time in seconds to wait for the good random. If there is none after given time, reward epoch finalization should proceed anyway. setVotePowerIntervalFraction # Defined in FtsoManager ( Docs , Source ). function setVotePowerIntervalFraction ( uint256 _votePowerIntervalFraction ) external ; showLastRevertedError # Defined in RevertErrorTracking ( Docs , Source ). function showLastRevertedError ( ) external view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest error information. All arrays will contain only one entry. Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts. showRevertedErrors # Defined in RevertErrorTracking ( Docs , Source ). function showRevertedErrors ( uint256 startIndex , uint256 numErrorTypesToShow ) public view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest errors. Parameters Type Description startIndex uint256 Starting index in the error list array. numErrorTypesToShow uint256 Number of errors to show. The total amount can be found in errorData . Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts. switchToFallbackMode # Defined in FtsoManager ( Docs , Source ). function switchToFallbackMode ( ) external returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Only flareDaemon can call this method. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. voterWhitelister # Defined in FtsoManager ( Docs , Source ). function voterWhitelister ( ) external view returns ( contract IIVoterWhitelister ); Returns the VoterWhitelister contract address. Variables # MAX_TRUSTED_ADDRESSES_LENGTH # Defined in FtsoManager ( Docs , Source ). uint256 MAX_TRUSTED_ADDRESSES_LENGTH Maximum number of trusted addresses allowed. active # Defined in FtsoManager ( Docs , Source ). bool active Whether the FTSO Manager is active or not. cleanupBlockNumberManager # Defined in FtsoManager ( Docs , Source ). contract CleanupBlockNumberManager cleanupBlockNumberManager Address of the CleanupBlockNumberManager contract. currentRewardEpochEnds # Defined in FtsoManager ( Docs , Source ). uint256 currentRewardEpochEnds Timestamp when the current reward epoch finishes, in seconds since UNIX epoch. errorData # Defined in RevertErrorTracking ( Docs , Source ). struct RevertErrorTracking . LastErrorData errorData Most recent error information. flareDaemon # Defined in GovernedAndFlareDaemonized ( Docs , Source ). contract FlareDaemon flareDaemon The FlareDaemon contract, set at construction time. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. lastRewardedFtsoAddress # Defined in FtsoManager ( Docs , Source ). address lastRewardedFtsoAddress Address of the FTSO contract that was last chosen for reward calculations. maxWaitForGoodRandomSeconds # Defined in FtsoManager ( Docs , Source ). uint256 maxWaitForGoodRandomSeconds Used only when useGoodRandom flag is set. oldFtsoManager # Defined in FtsoManager ( Docs , Source ). contract IIFtsoManagerV1 oldFtsoManager Previous FTSO Manager, in case of a redeployment. priceSubmitter # Defined in FtsoManager ( Docs , Source ). contract IIPriceSubmitter priceSubmitter Address of the PriceSubmitter contract. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . rewardEpochDurationSeconds # Defined in FtsoManager ( Docs , Source ). uint256 rewardEpochDurationSeconds Duration of reward epochs, in seconds. rewardEpochsStartTs # Defined in FtsoManager ( Docs , Source ). uint256 rewardEpochsStartTs Timestamp when the first reward epoch started, in seconds since UNIX epoch. rewardManager # Defined in FtsoManager ( Docs , Source ). contract IIFtsoRewardManager rewardManager Address of the RewardManager contract. supply # Defined in FtsoManager ( Docs , Source ). contract IISupply supply timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls. updateOnRewardEpochSwitchover # Defined in FtsoManager ( Docs , Source ). contract IUpdateValidators updateOnRewardEpochSwitchover Unused. useGoodRandom # Defined in FtsoManager ( Docs , Source ). bool useGoodRandom Whether use of good random numbers is enforced. See IFtsoManager . UseGoodRandomSet . waitingForGoodRandomSinceTs # Defined in FtsoManager ( Docs , Source ). uint256 waitingForGoodRandomSinceTs Used only when useGoodRandom flag is set.","title":"FtsoManager"},{"location":"apis/smart-contracts/FtsoManager/#ct_ftsomanager","text":"Source | Inherits from IIFtsoManager , GovernedAndFlareDaemonized , AddressUpdatable , RevertErrorTracking FTSO Manager contract. It is in charge of: Defining reward epochs (few days). Choosing a single block each reward epoch that represents vote power of this epoch. Keeping track of all FTSO contracts. Every price epoch (few minutes): Randomly choose one FTSO for rewarding calculations. Trigger finalize price reveal epoch. Determine addresses and reward weights and triggers reward distribution.","title":"FtsoManager"},{"location":"apis/smart-contracts/FtsoManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/FtsoManager/#fn_activate_0f15f4c0","text":"Defined in FtsoManager ( Docs , Source ). function activate ( ) external ; Activates FTSO manager ( daemonize will run jobs). Only governance can call this method.","title":"activate"},{"location":"apis/smart-contracts/FtsoManager/#fn_active_02fb0c5e","text":"Defined in IFtsoManager ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether the FTSO Manager is active or not. Returns Type Description [0] bool bool Active status.","title":"active"},{"location":"apis/smart-contracts/FtsoManager/#fn_addftso_2663f1b4","text":"Defined in FtsoManager ( Docs , Source ). function addFtso ( contract IIFtso _ftso ) external ; Adds FTSO to the list of managed FTSOs, to support a new price pair. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Only governance can call this method. Parameters Type Description _ftso contract IIFtso FTSO contract address to add.","title":"addFtso"},{"location":"apis/smart-contracts/FtsoManager/#fn_addftsosbulk_d429cfe5","text":"Defined in FtsoManager ( Docs , Source ). function addFtsosBulk ( contract IIFtso [] _ftsos ) external ; Adds a list of FTSOs to the list of managed FTSOs, to support new price pairs. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Only governance can call this method. Parameters Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses to add.","title":"addFtsosBulk"},{"location":"apis/smart-contracts/FtsoManager/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/FtsoManager/#fn_constructor_undefined","text":"Defined in FtsoManager ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon , address _addressUpdater , contract IIFtsoManagerV1 _oldFtsoManager , uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds , uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds , uint256 _votePowerIntervalFraction ) public ;","title":"constructor"},{"location":"apis/smart-contracts/FtsoManager/#fn_constructor_undefined","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon ) public ;","title":"constructor"},{"location":"apis/smart-contracts/FtsoManager/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/FtsoManager/#fn_currentrewardepochends_d89c39e6","text":"Defined in IIFtsoManager ( Docs , Source ). function currentRewardEpochEnds ( ) external view returns ( uint256 ); Returns when the current reward epoch finishes. Returns Type Description [0] uint256 uint256 Time in seconds since the UNIX epoch when the current reward epoch will finish.","title":"currentRewardEpochEnds"},{"location":"apis/smart-contracts/FtsoManager/#fn_daemonize_6d0e8c34","text":"Defined in FtsoManager ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Only flareDaemon can call this method. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused.","title":"daemonize"},{"location":"apis/smart-contracts/FtsoManager/#fn_deactivateftsos_8de306b1","text":"Defined in FtsoManager ( Docs , Source ). function deactivateFtsos ( contract IIFtso [] _ftsos ) external ; Deactivates FTSOs that are no longer used on FTSO registry. Only governance can call this method. Parameters Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses to deactivate.","title":"deactivateFtsos"},{"location":"apis/smart-contracts/FtsoManager/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/FtsoManager/#fn_ftsoregistry_38b5f869","text":"Defined in FtsoManager ( Docs , Source ). function ftsoRegistry ( ) external view returns ( contract IIFtsoRegistry ); Returns the FtsoRegistry contract address.","title":"ftsoRegistry"},{"location":"apis/smart-contracts/FtsoManager/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/FtsoManager/#fn_getcontractname_f5f5ba72","text":"Defined in FtsoManager ( Docs , Source ). function getContractName ( ) external pure returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name.","title":"getContractName"},{"location":"apis/smart-contracts/FtsoManager/#fn_getcurrentpriceepochdata_93a79025","text":"Defined in FtsoManager ( Docs , Source ). function getCurrentPriceEpochData ( ) external view returns ( uint256 _priceEpochId , uint256 _priceEpochStartTimestamp , uint256 _priceEpochEndTimestamp , uint256 _priceEpochRevealEndTimestamp , uint256 _currentTimestamp ); Returns timing information for the current price epoch. All intervals are half-closed: end time is not included. All timestamps are in seconds since UNIX epoch. See the FTSO page for information about the different submission phases. Returns Type Description _priceEpochId uint256 Price epoch ID. _priceEpochStartTimestamp uint256 Beginning of the commit phase. _priceEpochEndTimestamp uint256 End of the commit phase. _priceEpochRevealEndTimestamp uint256 End of the reveal phase. _currentTimestamp uint256 Current time.","title":"getCurrentPriceEpochData"},{"location":"apis/smart-contracts/FtsoManager/#fn_getcurrentpriceepochid_08a7f402","text":"Defined in FtsoManager ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"getCurrentPriceEpochId"},{"location":"apis/smart-contracts/FtsoManager/#fn_getcurrentrewardepoch_e7c830d4","text":"Defined in FtsoManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns current reward epoch ID (the one currently running). Returns Type Description [0] uint256 Reward epoch ID. A monotonically increasing integer.","title":"getCurrentRewardEpoch"},{"location":"apis/smart-contracts/FtsoManager/#fn_getelasticbandwidthppmftso_5bb44e9a","text":"Defined in FtsoManager ( Docs , Source ). function getElasticBandWidthPPMFtso ( contract IIFtso _ftso ) external view returns ( uint256 ); Returns the secondary band's width in PPM (parts-per-million) of the median value, for a given FTSO. Parameters Type Description _ftso contract IIFtso The queried FTSO contract address. Returns Type Description [0] uint256 uint256 Secondary band width in PPM. To obtain the actual band width, divide this number by 10^6 and multiply by the price median value.","title":"getElasticBandWidthPPMFtso"},{"location":"apis/smart-contracts/FtsoManager/#fn_getfallbackmode_4b48dd5e","text":"Defined in FtsoManager ( Docs , Source ). function getFallbackMode ( ) external view returns ( bool _fallbackMode , contract IIFtso [] _ftsos , bool [] _ftsoInFallbackMode ); Returns whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Returns Type Description _fallbackMode bool True if fallback mode is enabled for the manager. _ftsos contract IIFtso[] Array of all currently active FTSO assets. _ftsoInFallbackMode bool[] Boolean array indicating which FTSO assets are in fallback mode. If the FTSO Manager is in fallback mode then ALL FTSOs are in fallback mode.","title":"getFallbackMode"},{"location":"apis/smart-contracts/FtsoManager/#fn_getftsos_ce69f833","text":"Defined in FtsoManager ( Docs , Source ). function getFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Returns the list of currently active FTSOs. Returns Type Description _ftsos contract IIFtso[] Array of contract addresses for the FTSOs.","title":"getFtsos"},{"location":"apis/smart-contracts/FtsoManager/#fn_getgovernanceparameters_5835cf30","text":"Defined in FtsoManager ( Docs , Source ). function getGovernanceParameters ( ) external view returns ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _rewardExpiryOffsetSeconds , address [] _trustedAddresses , bool _initialized , bool _changed ); Returns governance parameters for FTSOs. Returns Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Secondary reward band, where _elasticBandRewardBIPS goes to the secondary band and 10000 - _elasticBandRewardBIPS to the primary (IQR) band. _rewardExpiryOffsetSeconds uint256 Reward epochs closed earlier than block.timestamp - _rewardExpiryOffsetSeconds expire. _trustedAddresses address[] Trusted addresses will be used as a fallback mechanism for setting the price. _initialized bool _changed bool","title":"getGovernanceParameters"},{"location":"apis/smart-contracts/FtsoManager/#fn_getlastunprocessedpriceepochdata_6ca051e6","text":"Defined in FtsoManager ( Docs , Source ). function getLastUnprocessedPriceEpochData ( ) external view returns ( uint256 _lastUnprocessedPriceEpoch , uint256 _lastUnprocessedPriceEpochRevealEnds , bool _lastUnprocessedPriceEpochInitialized ); Returns information regarding the currently unprocessed price epoch. This epoch is not necessarily the last one, in case the network halts for some time due to validator node problems, for example. Returns Type Description _lastUnprocessedPriceEpoch uint256 ID of the price epoch that is currently waiting finalization. _lastUnprocessedPriceEpochRevealEnds uint256 When that price epoch can be finalized, in seconds since UNIX epoch. _lastUnprocessedPriceEpochInitialized bool Whether this price epoch has been already initialized and therefore it must be finalized before the corresponding reward epoch can be finalized.","title":"getLastUnprocessedPriceEpochData"},{"location":"apis/smart-contracts/FtsoManager/#fn_getpriceepochconfiguration_144e1591","text":"Defined in FtsoManager ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds ); Returns the current values for price epoch timing configuration. See the FTSO page for information about the different submission phases. Returns Type Description _firstPriceEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first price epoch. _priceEpochDurationSeconds uint256 Duration in seconds of the commit phase. _revealEpochDurationSeconds uint256 Duration in seconds of the reveal phase.","title":"getPriceEpochConfiguration"},{"location":"apis/smart-contracts/FtsoManager/#fn_getpricesubmitter_0e063d7d","text":"Defined in FtsoManager ( Docs , Source ). function getPriceSubmitter ( ) external view returns ( contract IIPriceSubmitter ); Returns the PriceSubmitter contract.","title":"getPriceSubmitter"},{"location":"apis/smart-contracts/FtsoManager/#fn_getrewardepochconfiguration_1cb513f7","text":"Defined in FtsoManager ( Docs , Source ). function getRewardEpochConfiguration ( ) external view returns ( uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds ); Returns the current values for reward epoch timing configuration. See the Reward epochs box. Returns Type Description _firstRewardEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first reward epoch. _rewardEpochDurationSeconds uint256 Duration in seconds of the reward epochs.","title":"getRewardEpochConfiguration"},{"location":"apis/smart-contracts/FtsoManager/#fn_getrewardepochdata_e5399da3","text":"Defined in FtsoManager ( Docs , Source ). function getRewardEpochData ( uint256 _rewardEpochId ) public view returns ( struct IIFtsoManager . RewardEpochData ); Returns data regarding a specific reward epoch ID. Parameters Type Description _rewardEpochId uint256 Epoch ID. Returns Type Description [0] struct IIFtsoManager.RewardEpochData RewardEpochData Its associated data.","title":"getRewardEpochData"},{"location":"apis/smart-contracts/FtsoManager/#fn_getrewardepochtoexpirenext_3e7ff857","text":"Defined in FtsoManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Return reward epoch that will expire next, when a new reward epoch is initialized. Reward epochs older than 90 days expire, and any unclaimed rewards in them become inaccessible. Returns Type Description [0] uint256 uint256 Reward epoch ID.","title":"getRewardEpochToExpireNext"},{"location":"apis/smart-contracts/FtsoManager/#fn_getrewardepochvotepowerblock_f2edab5a","text":"Defined in FtsoManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 _votepowerBlock ); Returns the vote power block that was used for a past reward epoch. Parameters Type Description _rewardEpoch uint256 The queried reward epoch ID. Returns Type Description _votepowerBlock uint256 uint256 The block number of that reward epoch's vote power block.","title":"getRewardEpochVotePowerBlock"},{"location":"apis/smart-contracts/FtsoManager/#fn_getrewardexpiryoffsetseconds_ec31db0c","text":"Defined in FtsoManager ( Docs , Source ). function getRewardExpiryOffsetSeconds ( ) external view returns ( uint256 ); Returns the currently configured reward expiration time. Returns Type Description [0] uint256 uint256 Unclaimed rewards accrued in reward epochs more than this amount of seconds in the past expire and become inaccessible.","title":"getRewardExpiryOffsetSeconds"},{"location":"apis/smart-contracts/FtsoManager/#fn_getupdategovernanceparametersts_a157713b","text":"Defined in FtsoManager ( Docs , Source ). function getUpdateGovernanceParametersTs ( ) external view returns ( uint256 ); Returns the timestamp, in seconds since UNIX epoch, when the scheduled new settings will take effect.","title":"getUpdateGovernanceParametersTs"},{"location":"apis/smart-contracts/FtsoManager/#fn_getvotepowerintervalfraction_60f2c5b2","text":"Defined in FtsoManager ( Docs , Source ). function getVotePowerIntervalFraction ( ) external view returns ( uint256 );","title":"getVotePowerIntervalFraction"},{"location":"apis/smart-contracts/FtsoManager/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/FtsoManager/#fn_notinitializedftsos_823033a9","text":"Defined in FtsoManager ( Docs , Source ). function notInitializedFtsos ( contract IIFtso _ftso ) external view returns ( bool ); Returns whether an FTSO has been initialized. Returns Type Description [0] bool bool Initialization state.","title":"notInitializedFtsos"},{"location":"apis/smart-contracts/FtsoManager/#fn_removeftso_a670ff87","text":"Defined in FtsoManager ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes an FTSO from the list of managed FTSOs. Reverts if FTSO is used in a multi-asset FTSO. Deactivates the _ftso . Only governance can call this method. Parameters Type Description _ftso contract IIFtso FTSO contract address to remove.","title":"removeFtso"},{"location":"apis/smart-contracts/FtsoManager/#fn_replaceftso_3758e679","text":"Defined in FtsoManager ( Docs , Source ). function replaceFtso ( contract IIFtso _ftsoToAdd , bool _copyCurrentPrice , bool _copyAssetOrAssetFtsos ) external ; Replaces one FTSO with another with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSO. Only governance can call this method. Parameters Type Description _ftsoToAdd contract IIFtso FTSO contract address to add. An existing FTSO with the same symbol will be removed. _copyCurrentPrice bool _copyAssetOrAssetFtsos bool","title":"replaceFtso"},{"location":"apis/smart-contracts/FtsoManager/#fn_replaceftsosbulk_758ff1da","text":"Defined in FtsoManager ( Docs , Source ). function replaceFtsosBulk ( contract IIFtso [] _ftsosToAdd , bool _copyCurrentPrice , bool _copyAssetOrAssetFtsos ) external ; Replaces a list of FTSOs with other FTSOs with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSOs. Only governance can call this method. Parameters Type Description _ftsosToAdd contract IIFtso[] Array of FTSO contract addresses to add. Every existing FTSO with the same symbols will be removed. _copyCurrentPrice bool _copyAssetOrAssetFtsos bool","title":"replaceFtsosBulk"},{"location":"apis/smart-contracts/FtsoManager/#fn_rewardepochdurationseconds_85f3c9c9","text":"Defined in IIFtsoManager ( Docs , Source ). function rewardEpochDurationSeconds ( ) external view returns ( uint256 ); Currently configured reward epoch duration. Returns Type Description [0] uint256 uint256 Reward epoch duration, in seconds.","title":"rewardEpochDurationSeconds"},{"location":"apis/smart-contracts/FtsoManager/#fn_rewardepochs_a795f409","text":"Defined in FtsoManager ( Docs , Source ). function rewardEpochs ( uint256 _rewardEpochId ) external view returns ( uint256 _votepowerBlock , uint256 _startBlock , uint256 _startTimestamp ); Returns information about a reward epoch. Parameters Type Description _rewardEpochId uint256 The epoch ID to query. Returns Type Description _votepowerBlock uint256 The vote power block of the epoch. _startBlock uint256 The first block of the epoch. _startTimestamp uint256 Timestamp of the epoch start, in seconds since UNIX epoch.","title":"rewardEpochs"},{"location":"apis/smart-contracts/FtsoManager/#fn_rewardepochsstartts_a578f55b","text":"Defined in IIFtsoManager ( Docs , Source ). function rewardEpochsStartTs ( ) external view returns ( uint256 ); Time when the current reward epoch started. Returns Type Description [0] uint256 uint256 Timestamp, in seconds since UNIX epoch.","title":"rewardEpochsStartTs"},{"location":"apis/smart-contracts/FtsoManager/#fn_setelasticbandwidthppmftsos_882376c3","text":"Defined in FtsoManager ( Docs , Source ). function setElasticBandWidthPPMFtsos ( uint256 _updateTs , contract IIFtso [] _ftsos , uint256 [] _widths ) external ; Sets elastic band widths in PPM (parts-per-million) for given FTSOs. Only governance can call this method. Parameters Type Description _updateTs uint256 Timestamp when the changes will take effect, in seconds from UNIX epoch. _ftsos contract IIFtso[] Array of FTSO contract addresses to update. _widths uint256[] Array of secondary band widths in PPM. To obtain the actual band width, this number is divided by 10^6 and multiplied by the price median value.","title":"setElasticBandWidthPPMFtsos"},{"location":"apis/smart-contracts/FtsoManager/#fn_setfallbackmode_ff882fbb","text":"Defined in FtsoManager ( Docs , Source ). function setFallbackMode ( bool _fallbackMode ) external ; Sets whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Only governance can call this method. Parameters Type Description _fallbackMode bool True if fallback mode is enabled.","title":"setFallbackMode"},{"location":"apis/smart-contracts/FtsoManager/#fn_setftsoasset_6b65cc34","text":"Defined in FtsoManager ( Docs , Source ). function setFtsoAsset ( contract IIFtso _ftso , contract IIVPToken _asset ) external ; Sets the asset tracked by an FTSO. Only governance can call this method. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _asset contract IIVPToken The VPToken contract address of the asset to track.","title":"setFtsoAsset"},{"location":"apis/smart-contracts/FtsoManager/#fn_setftsoassetftsos_a93a6f42","text":"Defined in FtsoManager ( Docs , Source ). function setFtsoAssetFtsos ( contract IIFtso _ftso , contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs to be tracked by a multi-asset FTSO. FTSOs implicitly determine the FTSO assets. Only governance can call this method. Parameters Type Description _ftso contract IIFtso The multi-asset FTSO contract address. _assetFtsos contract IIFtso[] Array of FTSOs to be tracked.","title":"setFtsoAssetFtsos"},{"location":"apis/smart-contracts/FtsoManager/#fn_setftsofallbackmode_af946af7","text":"Defined in FtsoManager ( Docs , Source ). function setFtsoFallbackMode ( contract IIFtso _ftso , bool _fallbackMode ) external ; Sets whether an FTSO is currently in fallback mode. In this mode only submissions from trusted providers are used. Only governance can call this method. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _fallbackMode bool Fallback mode.","title":"setFtsoFallbackMode"},{"location":"apis/smart-contracts/FtsoManager/#fn_setgovernanceparameters_13226793","text":"Defined in FtsoManager ( Docs , Source ). function setGovernanceParameters ( uint256 _updateTs , uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _rewardExpiryOffsetSeconds , address [] _trustedAddresses ) external ; Sets governance parameters for FTSOs Only governance can call this method. Parameters Type Description _updateTs uint256 Time, in seconds since UNIX epoch, when updated settings should be pushed to FTSOs. _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Secondary reward band, where _elasticBandRewardBIPS goes to the secondary band and 10000 - _elasticBandRewardBIPS to the primary (IQR) band. _rewardExpiryOffsetSeconds uint256 Reward epochs closed earlier than block.timestamp - _rewardExpiryOffsetSeconds expire. _trustedAddresses address[] Trusted addresses will be used as a fallback mechanism for setting the price.","title":"setGovernanceParameters"},{"location":"apis/smart-contracts/FtsoManager/#fn_setinitialrewarddata_e080a970","text":"Defined in FtsoManager ( Docs , Source ). function setInitialRewardData ( uint256 _nextRewardEpochToExpire , uint256 _rewardEpochsLength , uint256 _currentRewardEpochEnds ) external ; Set reward data to values from old ftso manager. Can only be called before activation. Only governance can call this method. Parameters Type Description _nextRewardEpochToExpire uint256 See getRewardEpochToExpireNext . _rewardEpochsLength uint256 See getRewardEpochConfiguration . _currentRewardEpochEnds uint256 See getCurrentRewardEpoch .","title":"setInitialRewardData"},{"location":"apis/smart-contracts/FtsoManager/#fn_setrewardepochdurationseconds_132c7e1f","text":"Defined in FtsoManager ( Docs , Source ). function setRewardEpochDurationSeconds ( uint256 _rewardEpochDurationSeconds ) external ; Sets the reward epoch duration. Only governance can call this method. If the reward epoch is very short and the expiry offset is very long, the list of reward epochs to be checked becomes very long. Therefore reward epoch time has to be capped to expiry offset.","title":"setRewardEpochDurationSeconds"},{"location":"apis/smart-contracts/FtsoManager/#fn_setupdateonrewardepochswitchover_3fdeb7e1","text":"Defined in FtsoManager ( Docs , Source ). function setUpdateOnRewardEpochSwitchover ( contract IUpdateValidators _updateValidators ) external ; Unused.","title":"setUpdateOnRewardEpochSwitchover"},{"location":"apis/smart-contracts/FtsoManager/#fn_setusegoodrandom_a90a38e1","text":"Defined in FtsoManager ( Docs , Source ). function setUseGoodRandom ( bool _useGoodRandom , uint256 _maxWaitForGoodRandomSeconds ) external ; Allow governance to switch to good random numbers only. Only governance can call this method. See IFtsoManager . UseGoodRandomSet . Parameters Type Description _useGoodRandom bool Whether good random numbers should be used or not. _maxWaitForGoodRandomSeconds uint256 Max time in seconds to wait for the good random. If there is none after given time, reward epoch finalization should proceed anyway.","title":"setUseGoodRandom"},{"location":"apis/smart-contracts/FtsoManager/#fn_setvotepowerintervalfraction_361b5459","text":"Defined in FtsoManager ( Docs , Source ). function setVotePowerIntervalFraction ( uint256 _votePowerIntervalFraction ) external ;","title":"setVotePowerIntervalFraction"},{"location":"apis/smart-contracts/FtsoManager/#fn_showlastrevertederror_2b3c41a4","text":"Defined in RevertErrorTracking ( Docs , Source ). function showLastRevertedError ( ) external view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest error information. All arrays will contain only one entry. Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts.","title":"showLastRevertedError"},{"location":"apis/smart-contracts/FtsoManager/#fn_showrevertederrors_6ea0aa31","text":"Defined in RevertErrorTracking ( Docs , Source ). function showRevertedErrors ( uint256 startIndex , uint256 numErrorTypesToShow ) public view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest errors. Parameters Type Description startIndex uint256 Starting index in the error list array. numErrorTypesToShow uint256 Number of errors to show. The total amount can be found in errorData . Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts.","title":"showRevertedErrors"},{"location":"apis/smart-contracts/FtsoManager/#fn_switchtofallbackmode_e22fdece","text":"Defined in FtsoManager ( Docs , Source ). function switchToFallbackMode ( ) external returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Only flareDaemon can call this method. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported.","title":"switchToFallbackMode"},{"location":"apis/smart-contracts/FtsoManager/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/FtsoManager/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/FtsoManager/#fn_voterwhitelister_c2b0d47b","text":"Defined in FtsoManager ( Docs , Source ). function voterWhitelister ( ) external view returns ( contract IIVoterWhitelister ); Returns the VoterWhitelister contract address.","title":"voterWhitelister"},{"location":"apis/smart-contracts/FtsoManager/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/FtsoManager/#va_max_trusted_addresses_length","text":"Defined in FtsoManager ( Docs , Source ). uint256 MAX_TRUSTED_ADDRESSES_LENGTH Maximum number of trusted addresses allowed.","title":"MAX_TRUSTED_ADDRESSES_LENGTH"},{"location":"apis/smart-contracts/FtsoManager/#va_active","text":"Defined in FtsoManager ( Docs , Source ). bool active Whether the FTSO Manager is active or not.","title":"active"},{"location":"apis/smart-contracts/FtsoManager/#va_cleanupblocknumbermanager","text":"Defined in FtsoManager ( Docs , Source ). contract CleanupBlockNumberManager cleanupBlockNumberManager Address of the CleanupBlockNumberManager contract.","title":"cleanupBlockNumberManager"},{"location":"apis/smart-contracts/FtsoManager/#va_currentrewardepochends","text":"Defined in FtsoManager ( Docs , Source ). uint256 currentRewardEpochEnds Timestamp when the current reward epoch finishes, in seconds since UNIX epoch.","title":"currentRewardEpochEnds"},{"location":"apis/smart-contracts/FtsoManager/#va_errordata","text":"Defined in RevertErrorTracking ( Docs , Source ). struct RevertErrorTracking . LastErrorData errorData Most recent error information.","title":"errorData"},{"location":"apis/smart-contracts/FtsoManager/#va_flaredaemon","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). contract FlareDaemon flareDaemon The FlareDaemon contract, set at construction time.","title":"flareDaemon"},{"location":"apis/smart-contracts/FtsoManager/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/FtsoManager/#va_lastrewardedftsoaddress","text":"Defined in FtsoManager ( Docs , Source ). address lastRewardedFtsoAddress Address of the FTSO contract that was last chosen for reward calculations.","title":"lastRewardedFtsoAddress"},{"location":"apis/smart-contracts/FtsoManager/#va_maxwaitforgoodrandomseconds","text":"Defined in FtsoManager ( Docs , Source ). uint256 maxWaitForGoodRandomSeconds Used only when useGoodRandom flag is set.","title":"maxWaitForGoodRandomSeconds"},{"location":"apis/smart-contracts/FtsoManager/#va_oldftsomanager","text":"Defined in FtsoManager ( Docs , Source ). contract IIFtsoManagerV1 oldFtsoManager Previous FTSO Manager, in case of a redeployment.","title":"oldFtsoManager"},{"location":"apis/smart-contracts/FtsoManager/#va_pricesubmitter","text":"Defined in FtsoManager ( Docs , Source ). contract IIPriceSubmitter priceSubmitter Address of the PriceSubmitter contract.","title":"priceSubmitter"},{"location":"apis/smart-contracts/FtsoManager/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/FtsoManager/#va_rewardepochdurationseconds","text":"Defined in FtsoManager ( Docs , Source ). uint256 rewardEpochDurationSeconds Duration of reward epochs, in seconds.","title":"rewardEpochDurationSeconds"},{"location":"apis/smart-contracts/FtsoManager/#va_rewardepochsstartts","text":"Defined in FtsoManager ( Docs , Source ). uint256 rewardEpochsStartTs Timestamp when the first reward epoch started, in seconds since UNIX epoch.","title":"rewardEpochsStartTs"},{"location":"apis/smart-contracts/FtsoManager/#va_rewardmanager","text":"Defined in FtsoManager ( Docs , Source ). contract IIFtsoRewardManager rewardManager Address of the RewardManager contract.","title":"rewardManager"},{"location":"apis/smart-contracts/FtsoManager/#va_supply","text":"Defined in FtsoManager ( Docs , Source ). contract IISupply supply","title":"supply"},{"location":"apis/smart-contracts/FtsoManager/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/FtsoManager/#va_updateonrewardepochswitchover","text":"Defined in FtsoManager ( Docs , Source ). contract IUpdateValidators updateOnRewardEpochSwitchover Unused.","title":"updateOnRewardEpochSwitchover"},{"location":"apis/smart-contracts/FtsoManager/#va_usegoodrandom","text":"Defined in FtsoManager ( Docs , Source ). bool useGoodRandom Whether use of good random numbers is enforced. See IFtsoManager . UseGoodRandomSet .","title":"useGoodRandom"},{"location":"apis/smart-contracts/FtsoManager/#va_waitingforgoodrandomsincets","text":"Defined in FtsoManager ( Docs , Source ). uint256 waitingForGoodRandomSinceTs Used only when useGoodRandom flag is set.","title":"waitingForGoodRandomSinceTs"},{"location":"apis/smart-contracts/FtsoRegistry/","text":"FtsoRegistry # Source | Inherits from IIFtsoRegistry , AddressUpdatable , GovernedBase Handles registration of assets to the FTSO system . Functions # addFtso # Defined in FtsoRegistry ( Docs , Source ). function addFtso ( contract IIFtso _ftsoContract ) external returns ( uint256 _assetIndex ); Add a new FTSO contract to the registry. Only the ftsoManager can call this method. Parameters Type Description _ftsoContract contract IIFtso New target FTSO contract. Returns Type Description _assetIndex uint256 The FTSO index assigned to the new asset. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in FtsoRegistry ( Docs , Source ). constructor ( ) public ; executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getAllCurrentPrices # Defined in FtsoRegistry ( Docs , Source ). function getAllCurrentPrices ( ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of all supported assets. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getAllFtsos # Defined in FtsoRegistry ( Docs , Source ). function getAllFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Return all currently supported FTSO contracts. Returns Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses. getCurrentPrice # Defined in FtsoRegistry ( Docs , Source ). function getCurrentPrice ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. getCurrentPrice # Defined in FtsoRegistry ( Docs , Source ). function getCurrentPrice ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. getCurrentPriceWithDecimals # Defined in FtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price . getCurrentPriceWithDecimals # Defined in FtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price . getCurrentPricesByIndices # Defined in FtsoRegistry ( Docs , Source ). function getCurrentPricesByIndices ( uint256 [] _indices ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of indices. Reverts if any of the indices is not supported. Parameters Type Description _indices uint256[] Array of indices to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getCurrentPricesBySymbols # Defined in FtsoRegistry ( Docs , Source ). function getCurrentPricesBySymbols ( string [] _symbols ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of asset symbols. Reverts if any of the symbols is not supported. Parameters Type Description _symbols string[] Array of symbols to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getFtso # Defined in FtsoRegistry ( Docs , Source ). function getFtso ( uint256 _assetIndex ) external view returns ( contract IIFtso _activeFtso ); Returns the address of the FTSO contract for a given index. Reverts if unsupported index is passed. Parameters Type Description _assetIndex uint256 Returns Type Description _activeFtso contract IIFtso getFtsoBySymbol # Defined in FtsoRegistry ( Docs , Source ). function getFtsoBySymbol ( string _symbol ) external view returns ( contract IIFtso _activeFtso ); Returns the address of the FTSO contract for a given symbol. Reverts if unsupported symbol is passed. Parameters Type Description _symbol string The queried symbol. Returns Type Description _activeFtso contract IIFtso getFtsoHistory # Defined in FtsoRegistry ( Docs , Source ). function getFtsoHistory ( uint256 _assetIndex ) external view returns ( contract IIFtso [ 5 ] _ftsoAddressHistory ); Get the history of FTSOs for given index. If there are less then MAX_HISTORY_LENGTH the remaining addresses will be 0 addresses. Reverts if index is not supported. Parameters Type Description _assetIndex uint256 Asset index to query. Returns Type Description _ftsoAddressHistory contract IIFtso[5] History of FTSOs contract for provided index. getFtsoIndex # Defined in FtsoRegistry ( Docs , Source ). function getFtsoIndex ( string _symbol ) external view returns ( uint256 _assetIndex ); Returns the FTSO index corresponding to a given asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _assetIndex uint256 The corresponding asset index. getFtsoSymbol # Defined in FtsoRegistry ( Docs , Source ). function getFtsoSymbol ( uint256 _assetIndex ) external view returns ( string _symbol ); Returns the asset symbol corresponding to a given FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Returns Type Description _symbol string The corresponding asset symbol. getFtsos # Defined in FtsoRegistry ( Docs , Source ). function getFtsos ( uint256 [] _assetIndices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _assetIndices uint256[] Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses. getSupportedFtsos # Defined in FtsoRegistry ( Docs , Source ). function getSupportedFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Get array of all FTSO contracts for all supported asset indices. The index of FTSO in returned array does not necessarily correspond to the asset's index. Due to deletion, some indices might be unsupported. Use getSupportedIndicesAndFtsos to retrieve pairs of correct indices and FTSOs, where possible \"null\" holes are readily apparent. Returns Type Description _ftsos contract IIFtso[] Array of all supported FTSOs. getSupportedIndices # Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndices ( ) external view returns ( uint256 [] _supportedIndices ); Returns the indices of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all active FTSO indices in increasing order. getSupportedIndicesAndFtsos # Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndicesAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , contract IIFtso [] _ftsos ); Get all supported indices and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _ftsos contract IIFtso[] Array of all supported FTSO addresses. getSupportedIndicesAndSymbols # Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndicesAndSymbols ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols ); Get all supported indices and corresponding symbols. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. getSupportedIndicesSymbolsAndFtsos # Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndicesSymbolsAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported indices, symbols, and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses. getSupportedSymbols # Defined in FtsoRegistry ( Docs , Source ). function getSupportedSymbols ( ) external view returns ( string [] _supportedSymbols ); Returns the symbols of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all active FTSO symbols in increasing order. getSupportedSymbolsAndFtsos # Defined in FtsoRegistry ( Docs , Source ). function getSupportedSymbolsAndFtsos ( ) external view returns ( string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported symbols and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses. governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. initialiseRegistry # Defined in FtsoRegistry ( Docs , Source ). function initialiseRegistry ( address _addressUpdater ) external ; removeFtso # Defined in FtsoRegistry ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes the FTSO and keeps part of the history. Reverts if the provided address is not supported. From now on, the index this asset was using is \"reserved\" and cannot be used again. It will not be returned in any list of currently supported assets. Only the ftsoManager can call this method. Parameters Type Description _ftso contract IIFtso Address of the FTSO contract to remove. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. Modifiers # onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyFtsoManager # Defined in FtsoRegistry ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () Variables # ftsoManager # Defined in FtsoRegistry ( Docs , Source ). contract IIFtsoManager ftsoManager FtsoManager contract that can add and remove assets to the registry. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"FtsoRegistry"},{"location":"apis/smart-contracts/FtsoRegistry/#ct_ftsoregistry","text":"Source | Inherits from IIFtsoRegistry , AddressUpdatable , GovernedBase Handles registration of assets to the FTSO system .","title":"FtsoRegistry"},{"location":"apis/smart-contracts/FtsoRegistry/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_addftso_2663f1b4","text":"Defined in FtsoRegistry ( Docs , Source ). function addFtso ( contract IIFtso _ftsoContract ) external returns ( uint256 _assetIndex ); Add a new FTSO contract to the registry. Only the ftsoManager can call this method. Parameters Type Description _ftsoContract contract IIFtso New target FTSO contract. Returns Type Description _assetIndex uint256 The FTSO index assigned to the new asset.","title":"addFtso"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_constructor_undefined","text":"Defined in FtsoRegistry ( Docs , Source ). constructor ( ) public ;","title":"constructor"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getallcurrentprices_58f9296f","text":"Defined in FtsoRegistry ( Docs , Source ). function getAllCurrentPrices ( ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of all supported assets. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getAllCurrentPrices"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getallftsos_2bcdd6ab","text":"Defined in FtsoRegistry ( Docs , Source ). function getAllFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Return all currently supported FTSO contracts. Returns Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses.","title":"getAllFtsos"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getcurrentprice_c55d0f56","text":"Defined in FtsoRegistry ( Docs , Source ). function getCurrentPrice ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getcurrentprice_42a0f243","text":"Defined in FtsoRegistry ( Docs , Source ). function getCurrentPrice ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getcurrentpricewithdecimals_257cbd3a","text":"Defined in FtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price .","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getcurrentpricewithdecimals_a69afdc6","text":"Defined in FtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price .","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getcurrentpricesbyindices_6ba31fa1","text":"Defined in FtsoRegistry ( Docs , Source ). function getCurrentPricesByIndices ( uint256 [] _indices ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of indices. Reverts if any of the indices is not supported. Parameters Type Description _indices uint256[] Array of indices to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getCurrentPricesByIndices"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getcurrentpricesbysymbols_79d5ea4b","text":"Defined in FtsoRegistry ( Docs , Source ). function getCurrentPricesBySymbols ( string [] _symbols ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of asset symbols. Reverts if any of the symbols is not supported. Parameters Type Description _symbols string[] Array of symbols to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getCurrentPricesBySymbols"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getftso_d75f6d81","text":"Defined in FtsoRegistry ( Docs , Source ). function getFtso ( uint256 _assetIndex ) external view returns ( contract IIFtso _activeFtso ); Returns the address of the FTSO contract for a given index. Reverts if unsupported index is passed. Parameters Type Description _assetIndex uint256 Returns Type Description _activeFtso contract IIFtso","title":"getFtso"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getftsobysymbol_97da6af4","text":"Defined in FtsoRegistry ( Docs , Source ). function getFtsoBySymbol ( string _symbol ) external view returns ( contract IIFtso _activeFtso ); Returns the address of the FTSO contract for a given symbol. Reverts if unsupported symbol is passed. Parameters Type Description _symbol string The queried symbol. Returns Type Description _activeFtso contract IIFtso","title":"getFtsoBySymbol"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getftsohistory_c71a1b20","text":"Defined in FtsoRegistry ( Docs , Source ). function getFtsoHistory ( uint256 _assetIndex ) external view returns ( contract IIFtso [ 5 ] _ftsoAddressHistory ); Get the history of FTSOs for given index. If there are less then MAX_HISTORY_LENGTH the remaining addresses will be 0 addresses. Reverts if index is not supported. Parameters Type Description _assetIndex uint256 Asset index to query. Returns Type Description _ftsoAddressHistory contract IIFtso[5] History of FTSOs contract for provided index.","title":"getFtsoHistory"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getftsoindex_e848da30","text":"Defined in FtsoRegistry ( Docs , Source ). function getFtsoIndex ( string _symbol ) external view returns ( uint256 _assetIndex ); Returns the FTSO index corresponding to a given asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _assetIndex uint256 The corresponding asset index.","title":"getFtsoIndex"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getftsosymbol_136d3f64","text":"Defined in FtsoRegistry ( Docs , Source ). function getFtsoSymbol ( uint256 _assetIndex ) external view returns ( string _symbol ); Returns the asset symbol corresponding to a given FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Returns Type Description _symbol string The corresponding asset symbol.","title":"getFtsoSymbol"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getftsos_9cb47538","text":"Defined in FtsoRegistry ( Docs , Source ). function getFtsos ( uint256 [] _assetIndices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _assetIndices uint256[] Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses.","title":"getFtsos"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getsupportedftsos_a40060ba","text":"Defined in FtsoRegistry ( Docs , Source ). function getSupportedFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Get array of all FTSO contracts for all supported asset indices. The index of FTSO in returned array does not necessarily correspond to the asset's index. Due to deletion, some indices might be unsupported. Use getSupportedIndicesAndFtsos to retrieve pairs of correct indices and FTSOs, where possible \"null\" holes are readily apparent. Returns Type Description _ftsos contract IIFtso[] Array of all supported FTSOs.","title":"getSupportedFtsos"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getsupportedindices_798aac5b","text":"Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndices ( ) external view returns ( uint256 [] _supportedIndices ); Returns the indices of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all active FTSO indices in increasing order.","title":"getSupportedIndices"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getsupportedindicesandftsos_06a2ba29","text":"Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndicesAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , contract IIFtso [] _ftsos ); Get all supported indices and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedIndicesAndFtsos"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getsupportedindicesandsymbols_e68f283b","text":"Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndicesAndSymbols ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols ); Get all supported indices and corresponding symbols. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols.","title":"getSupportedIndicesAndSymbols"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getsupportedindicessymbolsandftsos_7687542c","text":"Defined in FtsoRegistry ( Docs , Source ). function getSupportedIndicesSymbolsAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported indices, symbols, and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedIndicesSymbolsAndFtsos"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getsupportedsymbols_ce1c0e4d","text":"Defined in FtsoRegistry ( Docs , Source ). function getSupportedSymbols ( ) external view returns ( string [] _supportedSymbols ); Returns the symbols of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all active FTSO symbols in increasing order.","title":"getSupportedSymbols"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_getsupportedsymbolsandftsos_0cf48497","text":"Defined in FtsoRegistry ( Docs , Source ). function getSupportedSymbolsAndFtsos ( ) external view returns ( string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported symbols and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedSymbolsAndFtsos"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_initialiseregistry_ffc880fd","text":"Defined in FtsoRegistry ( Docs , Source ). function initialiseRegistry ( address _addressUpdater ) external ;","title":"initialiseRegistry"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_removeftso_a670ff87","text":"Defined in FtsoRegistry ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes the FTSO and keeps part of the history. Reverts if the provided address is not supported. From now on, the index this asset was using is \"reserved\" and cannot be used again. It will not be returned in any list of currently supported assets. Only the ftsoManager can call this method. Parameters Type Description _ftso contract IIFtso Address of the FTSO contract to remove.","title":"removeFtso"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/FtsoRegistry/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/FtsoRegistry/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/FtsoRegistry/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/FtsoRegistry/#md_onlyftsomanager","text":"Defined in FtsoRegistry ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method.","title":"onlyFtsoManager"},{"location":"apis/smart-contracts/FtsoRegistry/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/FtsoRegistry/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/FtsoRegistry/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/FtsoRegistry/#va_ftsomanager","text":"Defined in FtsoRegistry ( Docs , Source ). contract IIFtsoManager ftsoManager FtsoManager contract that can add and remove assets to the registry.","title":"ftsoManager"},{"location":"apis/smart-contracts/FtsoRegistry/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/FtsoRegistry/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/FtsoRegistry/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/FtsoRewardManager/","text":"FtsoRewardManager # Source | Inherits from IIFtsoRewardManager , Governed , ReentrancyGuard, AddressUpdatable Handles reward distribution and claiming related to the FTSO system. More specifically, this contract: Distributes rewards according to instructions from the FtsoManager . Allows data providers, delegators and executors to claim rewards. Functions # accrueUnearnedRewards # Defined in FtsoRewardManager ( Docs , Source ). function accrueUnearnedRewards ( uint256 _epochId , uint256 _priceEpochDurationSeconds , uint256 _priceEpochEndTime ) external ; Accrue unearned rewards for a given price epoch. Typically done when the FTSO is in fallback mode or because of insufficient vote power. Simply accrue them so they will not be distributed and will be burned later. The amount of rewards that will be burned is calculated in the same way as in distributeRewards . Only the FTSO Manager can call this method. Parameters Type Description _epochId uint256 _priceEpochDurationSeconds uint256 _priceEpochEndTime uint256 activate # Defined in FtsoRewardManager ( Docs , Source ). function activate ( ) external ; Activates reward manager (allows claiming rewards). Only governance can call this method. active # Defined in IFtsoRewardManager ( Docs , Source ). function active ( ) external view returns ( bool ); Whether rewards can be claimed from this reward manager. autoClaim # Defined in FtsoRewardManager ( Docs , Source ). function autoClaim ( address [] _rewardOwners , uint256 _rewardEpoch ) external ; Allows claiming rewards simultaneously for a list of reward owners and all unclaimed epochs before the specified one. This is meant as a convenience all-in-one reward claiming method to be used both by reward owners and registered executors . It performs a series of operations, besides claiming rewards: If a reward owner has enabled its Personal Delegation Account , rewards are also claimed for the PDA and the total claimed amount is sent to that PDA. Otherwise, the claimed amount is sent to the reward owner's account. Claimed amount is automatically wrapped through the WNat contract. If the caller is a registered executor with a non-zero fee, the fee is paid to the executor for each claimed address. Parameters Type Description _rewardOwners address[] List of reward owners to claim for. _rewardEpoch uint256 Last reward epoch ID to claim for. All previous epochs with pending rewards will be claimed too. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. claim # Defined in FtsoRewardManager ( Docs , Source ). function claim ( address _rewardOwner , address payable _recipient , uint256 _rewardEpoch , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by percentage. Reverts if msg.sender is delegating by amount. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpoch uint256 Last reward epoch to claim for. All previous epochs with pending rewards will be claimed too. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). claimFromDataProviders # Defined in FtsoRewardManager ( Docs , Source ). function claimFromDataProviders ( address _rewardOwner , address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner from specific data providers. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by amount (explicit delegation). Reverts if msg.sender is delegating by percentage. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpochs uint256[] Array of reward epoch IDs to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). claimReward # Defined in FtsoRewardManager ( Docs , Source ). function claimReward ( address payable _recipient , uint256 [] _rewardEpochs ) external returns ( uint256 _rewardAmount ); Allows a percentage delegator to claim rewards. This function is intended to be used to claim rewards in case of delegation by percentage. This function is deprecated : use claim instead. Reverts if msg.sender is delegating by amount. Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'. Retained for backward compatibility. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. Returns Type Description _rewardAmount uint256 Amount of total claimed rewards (wei). claimRewardFromDataProviders # Defined in FtsoRewardManager ( Docs , Source ). function claimRewardFromDataProviders ( address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards from specific data providers. This function is intended to be used to claim rewards in case of delegation by amount. This function is deprecated : use claimFromDataProviders instead. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). closeExpiredRewardEpoch # Defined in FtsoRewardManager ( Docs , Source ). function closeExpiredRewardEpoch ( uint256 _rewardEpoch ) external ; Collects funds from expired reward epoch and calculates totals. Triggered by ftsoManager on finalization of a reward epoch. Operation is irreversible: when some reward epoch is closed according to current settings, it cannot be reopened even if new parameters would allow it, because nextRewardEpochToExpire in ftsoManager never decreases. Parameters Type Description _rewardEpoch uint256 constructor # Defined in FtsoRewardManager ( Docs , Source ). constructor ( address _governance , address _addressUpdater , address _oldFtsoRewardManager , uint256 _feePercentageUpdateOffset , uint256 _defaultFeePercentage ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. deactivate # Defined in FtsoRewardManager ( Docs , Source ). function deactivate ( ) external ; Deactivates reward manager (prevents claiming rewards). Only governance can call this method. defaultFeePercentage # Defined in FtsoRewardManager ( Docs , Source ). function defaultFeePercentage ( ) external view returns ( uint256 ); Returns the configured default fee percentage. distributeRewards # Defined in FtsoRewardManager ( Docs , Source ). function distributeRewards ( address [] _addresses , uint256 [] _weights , uint256 _totalWeight , uint256 _epochId , address _ftso , uint256 _priceEpochDurationSeconds , uint256 _currentRewardEpoch , uint256 _priceEpochEndTime , uint256 _votePowerBlock ) external ; Distributes price epoch rewards to data provider accounts, according to input parameters. Must be called with totalWeight > 0 and addresses.length > 0. The amount of rewards for a given price epoch ID are calculated in FtsoRewardManager from priceEpochDurationSeconds , priceEpochEndTime and inflation authorization data (see _getTotalPriceEpochRewardWei in FtsoRewardManager . Then each data provider address is given a portion of this amount according to corresponding weight and total sum of weights. Parameters epochId and ftso are only needed so they can be passed onto the emitted event. Only the ftsoManager can call this method. Parameters Type Description _addresses address[] _weights uint256[] _totalWeight uint256 _epochId uint256 _ftso address _priceEpochDurationSeconds uint256 _currentRewardEpoch uint256 _priceEpochEndTime uint256 _votePowerBlock uint256 enableClaims # Defined in FtsoRewardManager ( Docs , Source ). function enableClaims ( ) external ; Enable claiming for current and all future reward epochs. Only governance can call this method. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). feePercentageUpdateOffset # Defined in FtsoRewardManager ( Docs , Source ). function feePercentageUpdateOffset ( ) external view returns ( uint256 ); Returns the amount of reward epoch that need to ellapse before a fee change takes effect. firstClaimableRewardEpoch # Defined in IIFtsoRewardManager ( Docs , Source ). function firstClaimableRewardEpoch ( ) external view returns ( uint256 ); Epochs before the token distribution event at Flare launch were not be claimable. Use this method to know the first reward epoch that was claimable. Returns Type Description [0] uint256 uint256 The first reward epoch that can be claimed. getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getClaimedReward # Defined in FtsoRewardManager ( Docs , Source ). function getClaimedReward ( uint256 _rewardEpoch , address _dataProvider , address _claimer ) external view returns ( bool _claimed , uint256 _amount ); Returns information on the rewards accrued by a reward owner from a specific data provider at a specific reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID to query. _dataProvider address Address of the data provider to query. _claimer address Address of the reward owner to query. Returns Type Description _claimed bool Whether the reward has been claimed or not. _amount uint256 Accrued amount in wei. getContractName # Defined in FtsoRewardManager ( Docs , Source ). function getContractName ( ) external pure returns ( string ); Implement this function to allow updating inflation receiver contracts through AddressUpdater . Returns Type Description [0] string Contract name. getCurrentRewardEpoch # Defined in FtsoRewardManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns the current reward epoch ID. getDataProviderCurrentFeePercentage # Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 ); Returns the current fee percentage of a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description [0] uint256 getDataProviderFeePercentage # Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderFeePercentage ( address _dataProvider , uint256 _rewardEpoch ) external view returns ( uint256 _feePercentageBIPS ); Returns the fee percentage of a data provider at a given reward epoch. Parameters Type Description _dataProvider address Address of the queried data provider. _rewardEpoch uint256 Reward epoch ID. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. getDataProviderPerformanceInfo # Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderPerformanceInfo ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _rewardAmount , uint256 _votePowerIgnoringRevocation ); Returns information on rewards and vote power of a data provider at a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. _dataProvider address Address of the data provider to query. Returns Type Description _rewardAmount uint256 Amount of rewards (wei). _votePowerIgnoringRevocation uint256 Vote power, not including revocations. getDataProviderScheduledFeePercentageChanges # Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] _feePercentageBIPS , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the scheduled fee percentage changes for a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256[] Array of fee percentages in BIPS. _validFromEpoch uint256[] Array of block numbers from which the fee settings are effective. _fixed bool[] Array of boolean values indicating whether settings are subject to change or not. getEpochReward # Defined in FtsoRewardManager ( Docs , Source ). function getEpochReward ( uint256 _rewardEpoch ) external view returns ( uint256 _totalReward , uint256 _claimedReward ); Returns information on an epoch's rewards. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. Returns Type Description _totalReward uint256 Total amount of rewards accrued on that epoch, in wei. _claimedReward uint256 Total amount of rewards that have already been claimed, in wei. getEpochsWithClaimableRewards # Defined in FtsoRewardManager ( Docs , Source ). function getEpochsWithClaimableRewards ( ) external view returns ( uint256 _startEpochId , uint256 _endEpochId ); Returns the reward epoch range for which rewards can be claimed. Rewards outside this range are unclaimable, either because they have expired or because the reward epoch is still ongoing. Returns Type Description _startEpochId uint256 The oldest epoch ID that allows reward claiming. _endEpochId uint256 The newest epoch ID that allows reward claiming. getEpochsWithUnclaimedRewards # Defined in FtsoRewardManager ( Docs , Source ). function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view returns ( uint256 [] _epochIds ); Returns the array of claimable epoch IDs for which the rewards of a reward owner have not yet been claimed. Parameters Type Description _beneficiary address Address of the reward owner to query. Reverts if it uses delegation by amount. Returns Type Description _epochIds uint256[] Array of epoch IDs. getExpectedBalance # Defined in FtsoRewardManager ( Docs , Source ). function getExpectedBalance ( ) external view returns ( uint256 ); Returns the contract's expected balance (actual balance may be higher due to self-destruct funds). Returns Type Description [0] uint256 Expected native token balance. getInflationAddress # Defined in FtsoRewardManager ( Docs , Source ). function getInflationAddress ( ) external view returns ( address ); Returns the address of the Inflation contract. getInitialRewardEpoch # Defined in FtsoRewardManager ( Docs , Source ). function getInitialRewardEpoch ( ) external view returns ( uint256 _initialRewardEpoch ); Returns the initial reward epoch ID for this reward manager contract. This corresponds to the oldest reward epoch with claimable rewards in the previous reward manager when this one took over. Set by governance through setInitialRewardData . getRewardEpochToExpireNext # Defined in FtsoRewardManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Returns the reward epoch that will expire next once a new reward epoch starts. getRewardEpochVotePowerBlock # Defined in FtsoRewardManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block of a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. getStateOfRewards # Defined in FtsoRewardManager ( Docs , Source ). function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] _dataProviders , uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address at a specific reward epoch. Parameters Type Description _beneficiary address Address of the beneficiary to query. It can be a data provider or a delegator, for example. Reverts if the queried address is delegating by amount. _rewardEpoch uint256 Reward epoch ID to query. Returns Type Description _dataProviders address[] Array of addresses of data providers. _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not. getStateOfRewardsFromDataProviders # Defined in FtsoRewardManager ( Docs , Source ). function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] _dataProviders ) external view returns ( uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address coming from a specific set of data providers, at a specific reward epoch. Parameters Type Description _beneficiary address Address of beneficiary to query. _rewardEpoch uint256 Reward epoch ID to query. _dataProviders address[] Array of addresses of the data providers to query. Returns Type Description _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not. getTokenPoolSupplyData # Defined in FtsoRewardManager ( Docs , Source ). function getTokenPoolSupplyData ( ) external view returns ( uint256 _lockedFundsWei , uint256 _totalInflationAuthorizedWei , uint256 _totalClaimedWei ); Returns token pool supply data. Returns Type Description _lockedFundsWei uint256 Total amount of funds ever locked in the token pool (wei). _lockedFundsWei - _totalClaimedWei is the amount currently locked and outside the circulating supply. _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalClaimedWei uint256 Total claimed amount (wei). getTotals # Defined in FtsoRewardManager ( Docs , Source ). function getTotals ( ) external view returns ( uint256 _totalAwardedWei , uint256 _totalClaimedWei , uint256 _totalExpiredWei , uint256 _totalUnearnedWei , uint256 _totalBurnedWei , uint256 _totalInflationAuthorizedWei , uint256 _totalInflationReceivedWei , uint256 _lastInflationAuthorizationReceivedTs , uint256 _dailyAuthorizedInflation ); Returns statistics regarding rewards, accumulated over the whole lifespan of the reward manager contract. Returns Type Description _totalAwardedWei uint256 Rewards that were distributed (wei). _totalClaimedWei uint256 Distributed rewards that were claimed in time (wei). _totalExpiredWei uint256 Distributed rewards that were not claimed in time and expired (wei). _totalUnearnedWei uint256 Rewards that were unearned (due to FTSO being in fallback mode) and thus were not distributed (wei). _totalBurnedWei uint256 Rewards that were unearned or expired and thus burned (wei). _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalInflationReceivedWei uint256 Total inflation received amount (wei). _lastInflationAuthorizationReceivedTs uint256 UNIX timestamp of the last inflation authorization. _dailyAuthorizedInflation uint256 Inflation authorized amount (wei) at the time of last authorization. getUnclaimedReward # Defined in FtsoRewardManager ( Docs , Source ). function getUnclaimedReward ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _amount , uint256 _weight ); Returns information on unclaimed rewards for a given data provider and epoch. Parameters Type Description _rewardEpoch uint256 Queried reward epoch ID. _dataProvider address Address of the queried data provider. Returns Type Description _amount uint256 Amount available to be claimed, in wei. _weight uint256 Portion of total vote power used in this reward epoch that has not yet claimed its reward, in BIPS. It decreases to 0 when all data providers have claimed their rewards. governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. nextClaimableRewardEpoch # Defined in FtsoRewardManager ( Docs , Source ). function nextClaimableRewardEpoch ( address _rewardOwner ) external view returns ( uint256 ); Returns the next claimable reward epoch for a reward owner. Parameters Type Description _rewardOwner address Address of the reward owner to query. receiveInflation # Defined in FtsoRewardManager ( Docs , Source ). function receiveInflation ( ) external payable ; Receive native tokens from inflation. Only the inflation contract can call this method. setDailyAuthorizedInflation # Defined in FtsoRewardManager ( Docs , Source ). function setDailyAuthorizedInflation ( uint256 _toAuthorizeWei ) external ; Notify the receiver that it is entitled to receive a new inflation amount. Only the inflation contract can call this method. Parameters Type Description _toAuthorizeWei uint256 The amount of inflation that can be awarded in the coming day, in wei. setDataProviderFeePercentage # Defined in FtsoRewardManager ( Docs , Source ). function setDataProviderFeePercentage ( uint256 _feePercentageBIPS ) external returns ( uint256 ); Sets the fee a data provider keeps from all delegations. Takes effect after feeValueUpdateOffset reward epochs have elapsed. When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. Returns Type Description [0] uint256 setInitialRewardData # Defined in FtsoRewardManager ( Docs , Source ). function setInitialRewardData ( ) external ; Copy initial reward data from oldFtsoRewardManager before starting up this new reward manager. Should be called at the time of switching to the new reward manager, can be called only once, and only by governance . setNewFtsoRewardManager # Defined in FtsoRewardManager ( Docs , Source ). function setNewFtsoRewardManager ( address _newFtsoRewardManager ) external ; Sets new ftso reward manager which will take over closing expired reward epochs Should be called at the time of switching to the new reward manager, can be called only once, and only by governance . switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. Modifiers # mustBalance # Defined in FtsoRewardManager ( Docs , Source ). modifier mustBalance () nonReentrant # Defined in ReentrancyGuard ( Source ). modifier nonReentrant () Prevents a contract from calling itself, directly or indirectly. Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to prevent this from happening by making the nonReentrant function external, and make it call a private function that does the actual work. onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyExecutorAndAllowedRecipient # Defined in FtsoRewardManager ( Docs , Source ). modifier onlyExecutorAndAllowedRecipient ( address _rewardOwner , address _recipient ) Only the reward owner and its authorized executors can call this method. Executors can only send rewards to authorized recipients. See ClaimSetupManager . onlyFtsoManager # Defined in FtsoRewardManager ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager contract can call this method. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyIfActive # Defined in FtsoRewardManager ( Docs , Source ). modifier onlyIfActive () This method can only be called if the contract is active . onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () onlyInflation # Defined in FtsoRewardManager ( Docs , Source ). modifier onlyInflation () Only the Inflation contract can call this method. Structures # RewardClaim # Defined in FtsoRewardManager ( Docs , Source ). struct RewardClaim { bool claimed ; uint128 amount ; } RewardState # Defined in FtsoRewardManager ( Docs , Source ). struct RewardState { address [] dataProviders ; uint256 [] weights ; uint256 [] amounts ; bool [] claimed ; } TimelockedCall # Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; } UnclaimedRewardState # Defined in FtsoRewardManager ( Docs , Source ). struct UnclaimedRewardState { uint128 amount ; uint128 weight ; } Variables # active # Defined in FtsoRewardManager ( Docs , Source ). bool active Whether rewards can be claimed from this reward manager. claimSetupManager # Defined in FtsoRewardManager ( Docs , Source ). contract IIClaimSetupManager claimSetupManager The ClaimSetupManager contract that helps automate reward claiming. firstClaimableRewardEpoch # Defined in FtsoRewardManager ( Docs , Source ). uint256 firstClaimableRewardEpoch Epochs before the token distribution event at Flare launch were not be claimable. This variable holds the first reward epoch that was claimable. ftsoManager # Defined in FtsoRewardManager ( Docs , Source ). contract IIFtsoManager ftsoManager The FtsoManager contract that controls reward distribution. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. newFtsoRewardManager # Defined in FtsoRewardManager ( Docs , Source ). address newFtsoRewardManager Address of the new FtsoRewardManager that replaced this one. oldFtsoRewardManager # Defined in FtsoRewardManager ( Docs , Source ). address oldFtsoRewardManager Address of the old FtsoRewardManager , replaced by this one. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls. wNat # Defined in FtsoRewardManager ( Docs , Source ). contract WNat wNat Address of the wrapped native token ( WNat ) contract.","title":"FtsoRewardManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#ct_ftsorewardmanager","text":"Source | Inherits from IIFtsoRewardManager , Governed , ReentrancyGuard, AddressUpdatable Handles reward distribution and claiming related to the FTSO system. More specifically, this contract: Distributes rewards according to instructions from the FtsoManager . Allows data providers, delegators and executors to claim rewards.","title":"FtsoRewardManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_accrueunearnedrewards_67dcac53","text":"Defined in FtsoRewardManager ( Docs , Source ). function accrueUnearnedRewards ( uint256 _epochId , uint256 _priceEpochDurationSeconds , uint256 _priceEpochEndTime ) external ; Accrue unearned rewards for a given price epoch. Typically done when the FTSO is in fallback mode or because of insufficient vote power. Simply accrue them so they will not be distributed and will be burned later. The amount of rewards that will be burned is calculated in the same way as in distributeRewards . Only the FTSO Manager can call this method. Parameters Type Description _epochId uint256 _priceEpochDurationSeconds uint256 _priceEpochEndTime uint256","title":"accrueUnearnedRewards"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_activate_0f15f4c0","text":"Defined in FtsoRewardManager ( Docs , Source ). function activate ( ) external ; Activates reward manager (allows claiming rewards). Only governance can call this method.","title":"activate"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_active_02fb0c5e","text":"Defined in IFtsoRewardManager ( Docs , Source ). function active ( ) external view returns ( bool ); Whether rewards can be claimed from this reward manager.","title":"active"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_autoclaim_8dc305fa","text":"Defined in FtsoRewardManager ( Docs , Source ). function autoClaim ( address [] _rewardOwners , uint256 _rewardEpoch ) external ; Allows claiming rewards simultaneously for a list of reward owners and all unclaimed epochs before the specified one. This is meant as a convenience all-in-one reward claiming method to be used both by reward owners and registered executors . It performs a series of operations, besides claiming rewards: If a reward owner has enabled its Personal Delegation Account , rewards are also claimed for the PDA and the total claimed amount is sent to that PDA. Otherwise, the claimed amount is sent to the reward owner's account. Claimed amount is automatically wrapped through the WNat contract. If the caller is a registered executor with a non-zero fee, the fee is paid to the executor for each claimed address. Parameters Type Description _rewardOwners address[] List of reward owners to claim for. _rewardEpoch uint256 Last reward epoch ID to claim for. All previous epochs with pending rewards will be claimed too.","title":"autoClaim"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_claim_b2c12192","text":"Defined in FtsoRewardManager ( Docs , Source ). function claim ( address _rewardOwner , address payable _recipient , uint256 _rewardEpoch , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by percentage. Reverts if msg.sender is delegating by amount. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpoch uint256 Last reward epoch to claim for. All previous epochs with pending rewards will be claimed too. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claim"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_claimfromdataproviders_21bb25af","text":"Defined in FtsoRewardManager ( Docs , Source ). function claimFromDataProviders ( address _rewardOwner , address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner from specific data providers. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by amount (explicit delegation). Reverts if msg.sender is delegating by percentage. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpochs uint256[] Array of reward epoch IDs to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claimFromDataProviders"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_claimreward_b2af870a","text":"Defined in FtsoRewardManager ( Docs , Source ). function claimReward ( address payable _recipient , uint256 [] _rewardEpochs ) external returns ( uint256 _rewardAmount ); Allows a percentage delegator to claim rewards. This function is intended to be used to claim rewards in case of delegation by percentage. This function is deprecated : use claim instead. Reverts if msg.sender is delegating by amount. Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'. Retained for backward compatibility. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. Returns Type Description _rewardAmount uint256 Amount of total claimed rewards (wei).","title":"claimReward"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_claimrewardfromdataproviders_d20bb542","text":"Defined in FtsoRewardManager ( Docs , Source ). function claimRewardFromDataProviders ( address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards from specific data providers. This function is intended to be used to claim rewards in case of delegation by amount. This function is deprecated : use claimFromDataProviders instead. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claimRewardFromDataProviders"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_closeexpiredrewardepoch_d6c1dbee","text":"Defined in FtsoRewardManager ( Docs , Source ). function closeExpiredRewardEpoch ( uint256 _rewardEpoch ) external ; Collects funds from expired reward epoch and calculates totals. Triggered by ftsoManager on finalization of a reward epoch. Operation is irreversible: when some reward epoch is closed according to current settings, it cannot be reopened even if new parameters would allow it, because nextRewardEpochToExpire in ftsoManager never decreases. Parameters Type Description _rewardEpoch uint256","title":"closeExpiredRewardEpoch"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_constructor_undefined","text":"Defined in FtsoRewardManager ( Docs , Source ). constructor ( address _governance , address _addressUpdater , address _oldFtsoRewardManager , uint256 _feePercentageUpdateOffset , uint256 _defaultFeePercentage ) public ;","title":"constructor"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_deactivate_51b42b00","text":"Defined in FtsoRewardManager ( Docs , Source ). function deactivate ( ) external ; Deactivates reward manager (prevents claiming rewards). Only governance can call this method.","title":"deactivate"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_defaultfeepercentage_b4824034","text":"Defined in FtsoRewardManager ( Docs , Source ). function defaultFeePercentage ( ) external view returns ( uint256 ); Returns the configured default fee percentage.","title":"defaultFeePercentage"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_distributerewards_a9b79e17","text":"Defined in FtsoRewardManager ( Docs , Source ). function distributeRewards ( address [] _addresses , uint256 [] _weights , uint256 _totalWeight , uint256 _epochId , address _ftso , uint256 _priceEpochDurationSeconds , uint256 _currentRewardEpoch , uint256 _priceEpochEndTime , uint256 _votePowerBlock ) external ; Distributes price epoch rewards to data provider accounts, according to input parameters. Must be called with totalWeight > 0 and addresses.length > 0. The amount of rewards for a given price epoch ID are calculated in FtsoRewardManager from priceEpochDurationSeconds , priceEpochEndTime and inflation authorization data (see _getTotalPriceEpochRewardWei in FtsoRewardManager . Then each data provider address is given a portion of this amount according to corresponding weight and total sum of weights. Parameters epochId and ftso are only needed so they can be passed onto the emitted event. Only the ftsoManager can call this method. Parameters Type Description _addresses address[] _weights uint256[] _totalWeight uint256 _epochId uint256 _ftso address _priceEpochDurationSeconds uint256 _currentRewardEpoch uint256 _priceEpochEndTime uint256 _votePowerBlock uint256","title":"distributeRewards"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_enableclaims_ea28edad","text":"Defined in FtsoRewardManager ( Docs , Source ). function enableClaims ( ) external ; Enable claiming for current and all future reward epochs. Only governance can call this method.","title":"enableClaims"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_feepercentageupdateoffset_16fe49c7","text":"Defined in FtsoRewardManager ( Docs , Source ). function feePercentageUpdateOffset ( ) external view returns ( uint256 ); Returns the amount of reward epoch that need to ellapse before a fee change takes effect.","title":"feePercentageUpdateOffset"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_firstclaimablerewardepoch_7b6b2c0a","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function firstClaimableRewardEpoch ( ) external view returns ( uint256 ); Epochs before the token distribution event at Flare launch were not be claimable. Use this method to know the first reward epoch that was claimable. Returns Type Description [0] uint256 uint256 The first reward epoch that can be claimed.","title":"firstClaimableRewardEpoch"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getclaimedreward_85b4c538","text":"Defined in FtsoRewardManager ( Docs , Source ). function getClaimedReward ( uint256 _rewardEpoch , address _dataProvider , address _claimer ) external view returns ( bool _claimed , uint256 _amount ); Returns information on the rewards accrued by a reward owner from a specific data provider at a specific reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID to query. _dataProvider address Address of the data provider to query. _claimer address Address of the reward owner to query. Returns Type Description _claimed bool Whether the reward has been claimed or not. _amount uint256 Accrued amount in wei.","title":"getClaimedReward"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getcontractname_f5f5ba72","text":"Defined in FtsoRewardManager ( Docs , Source ). function getContractName ( ) external pure returns ( string ); Implement this function to allow updating inflation receiver contracts through AddressUpdater . Returns Type Description [0] string Contract name.","title":"getContractName"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getcurrentrewardepoch_e7c830d4","text":"Defined in FtsoRewardManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns the current reward epoch ID.","title":"getCurrentRewardEpoch"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getdataprovidercurrentfeepercentage_cfbcd25f","text":"Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 ); Returns the current fee percentage of a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description [0] uint256","title":"getDataProviderCurrentFeePercentage"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getdataproviderfeepercentage_961c00ed","text":"Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderFeePercentage ( address _dataProvider , uint256 _rewardEpoch ) external view returns ( uint256 _feePercentageBIPS ); Returns the fee percentage of a data provider at a given reward epoch. Parameters Type Description _dataProvider address Address of the queried data provider. _rewardEpoch uint256 Reward epoch ID. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS.","title":"getDataProviderFeePercentage"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getdataproviderperformanceinfo_eb82dd7f","text":"Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderPerformanceInfo ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _rewardAmount , uint256 _votePowerIgnoringRevocation ); Returns information on rewards and vote power of a data provider at a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. _dataProvider address Address of the data provider to query. Returns Type Description _rewardAmount uint256 Amount of rewards (wei). _votePowerIgnoringRevocation uint256 Vote power, not including revocations.","title":"getDataProviderPerformanceInfo"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getdataproviderscheduledfeepercentagechanges_33b7971e","text":"Defined in FtsoRewardManager ( Docs , Source ). function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] _feePercentageBIPS , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the scheduled fee percentage changes for a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256[] Array of fee percentages in BIPS. _validFromEpoch uint256[] Array of block numbers from which the fee settings are effective. _fixed bool[] Array of boolean values indicating whether settings are subject to change or not.","title":"getDataProviderScheduledFeePercentageChanges"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getepochreward_d418634a","text":"Defined in FtsoRewardManager ( Docs , Source ). function getEpochReward ( uint256 _rewardEpoch ) external view returns ( uint256 _totalReward , uint256 _claimedReward ); Returns information on an epoch's rewards. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. Returns Type Description _totalReward uint256 Total amount of rewards accrued on that epoch, in wei. _claimedReward uint256 Total amount of rewards that have already been claimed, in wei.","title":"getEpochReward"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getepochswithclaimablerewards_0441218e","text":"Defined in FtsoRewardManager ( Docs , Source ). function getEpochsWithClaimableRewards ( ) external view returns ( uint256 _startEpochId , uint256 _endEpochId ); Returns the reward epoch range for which rewards can be claimed. Rewards outside this range are unclaimable, either because they have expired or because the reward epoch is still ongoing. Returns Type Description _startEpochId uint256 The oldest epoch ID that allows reward claiming. _endEpochId uint256 The newest epoch ID that allows reward claiming.","title":"getEpochsWithClaimableRewards"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getepochswithunclaimedrewards_b4a2043d","text":"Defined in FtsoRewardManager ( Docs , Source ). function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view returns ( uint256 [] _epochIds ); Returns the array of claimable epoch IDs for which the rewards of a reward owner have not yet been claimed. Parameters Type Description _beneficiary address Address of the reward owner to query. Reverts if it uses delegation by amount. Returns Type Description _epochIds uint256[] Array of epoch IDs.","title":"getEpochsWithUnclaimedRewards"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getexpectedbalance_af04cd3b","text":"Defined in FtsoRewardManager ( Docs , Source ). function getExpectedBalance ( ) external view returns ( uint256 ); Returns the contract's expected balance (actual balance may be higher due to self-destruct funds). Returns Type Description [0] uint256 Expected native token balance.","title":"getExpectedBalance"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getinflationaddress_ed39d3f8","text":"Defined in FtsoRewardManager ( Docs , Source ). function getInflationAddress ( ) external view returns ( address ); Returns the address of the Inflation contract.","title":"getInflationAddress"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getinitialrewardepoch_3123b7d8","text":"Defined in FtsoRewardManager ( Docs , Source ). function getInitialRewardEpoch ( ) external view returns ( uint256 _initialRewardEpoch ); Returns the initial reward epoch ID for this reward manager contract. This corresponds to the oldest reward epoch with claimable rewards in the previous reward manager when this one took over. Set by governance through setInitialRewardData .","title":"getInitialRewardEpoch"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getrewardepochtoexpirenext_3e7ff857","text":"Defined in FtsoRewardManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Returns the reward epoch that will expire next once a new reward epoch starts.","title":"getRewardEpochToExpireNext"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getrewardepochvotepowerblock_f2edab5a","text":"Defined in FtsoRewardManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block of a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID.","title":"getRewardEpochVotePowerBlock"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getstateofrewards_a4472c10","text":"Defined in FtsoRewardManager ( Docs , Source ). function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] _dataProviders , uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address at a specific reward epoch. Parameters Type Description _beneficiary address Address of the beneficiary to query. It can be a data provider or a delegator, for example. Reverts if the queried address is delegating by amount. _rewardEpoch uint256 Reward epoch ID to query. Returns Type Description _dataProviders address[] Array of addresses of data providers. _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not.","title":"getStateOfRewards"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getstateofrewardsfromdataproviders_e416b7e1","text":"Defined in FtsoRewardManager ( Docs , Source ). function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] _dataProviders ) external view returns ( uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address coming from a specific set of data providers, at a specific reward epoch. Parameters Type Description _beneficiary address Address of beneficiary to query. _rewardEpoch uint256 Reward epoch ID to query. _dataProviders address[] Array of addresses of the data providers to query. Returns Type Description _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not.","title":"getStateOfRewardsFromDataProviders"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_gettokenpoolsupplydata_2dafdbbf","text":"Defined in FtsoRewardManager ( Docs , Source ). function getTokenPoolSupplyData ( ) external view returns ( uint256 _lockedFundsWei , uint256 _totalInflationAuthorizedWei , uint256 _totalClaimedWei ); Returns token pool supply data. Returns Type Description _lockedFundsWei uint256 Total amount of funds ever locked in the token pool (wei). _lockedFundsWei - _totalClaimedWei is the amount currently locked and outside the circulating supply. _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalClaimedWei uint256 Total claimed amount (wei).","title":"getTokenPoolSupplyData"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_gettotals_84e10a90","text":"Defined in FtsoRewardManager ( Docs , Source ). function getTotals ( ) external view returns ( uint256 _totalAwardedWei , uint256 _totalClaimedWei , uint256 _totalExpiredWei , uint256 _totalUnearnedWei , uint256 _totalBurnedWei , uint256 _totalInflationAuthorizedWei , uint256 _totalInflationReceivedWei , uint256 _lastInflationAuthorizationReceivedTs , uint256 _dailyAuthorizedInflation ); Returns statistics regarding rewards, accumulated over the whole lifespan of the reward manager contract. Returns Type Description _totalAwardedWei uint256 Rewards that were distributed (wei). _totalClaimedWei uint256 Distributed rewards that were claimed in time (wei). _totalExpiredWei uint256 Distributed rewards that were not claimed in time and expired (wei). _totalUnearnedWei uint256 Rewards that were unearned (due to FTSO being in fallback mode) and thus were not distributed (wei). _totalBurnedWei uint256 Rewards that were unearned or expired and thus burned (wei). _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalInflationReceivedWei uint256 Total inflation received amount (wei). _lastInflationAuthorizationReceivedTs uint256 UNIX timestamp of the last inflation authorization. _dailyAuthorizedInflation uint256 Inflation authorized amount (wei) at the time of last authorization.","title":"getTotals"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_getunclaimedreward_657d9695","text":"Defined in FtsoRewardManager ( Docs , Source ). function getUnclaimedReward ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _amount , uint256 _weight ); Returns information on unclaimed rewards for a given data provider and epoch. Parameters Type Description _rewardEpoch uint256 Queried reward epoch ID. _dataProvider address Address of the queried data provider. Returns Type Description _amount uint256 Amount available to be claimed, in wei. _weight uint256 Portion of total vote power used in this reward epoch that has not yet claimed its reward, in BIPS. It decreases to 0 when all data providers have claimed their rewards.","title":"getUnclaimedReward"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_nextclaimablerewardepoch_69b91b59","text":"Defined in FtsoRewardManager ( Docs , Source ). function nextClaimableRewardEpoch ( address _rewardOwner ) external view returns ( uint256 ); Returns the next claimable reward epoch for a reward owner. Parameters Type Description _rewardOwner address Address of the reward owner to query.","title":"nextClaimableRewardEpoch"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_receiveinflation_06201f1d","text":"Defined in FtsoRewardManager ( Docs , Source ). function receiveInflation ( ) external payable ; Receive native tokens from inflation. Only the inflation contract can call this method.","title":"receiveInflation"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_setdailyauthorizedinflation_e2739563","text":"Defined in FtsoRewardManager ( Docs , Source ). function setDailyAuthorizedInflation ( uint256 _toAuthorizeWei ) external ; Notify the receiver that it is entitled to receive a new inflation amount. Only the inflation contract can call this method. Parameters Type Description _toAuthorizeWei uint256 The amount of inflation that can be awarded in the coming day, in wei.","title":"setDailyAuthorizedInflation"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_setdataproviderfeepercentage_16e69328","text":"Defined in FtsoRewardManager ( Docs , Source ). function setDataProviderFeePercentage ( uint256 _feePercentageBIPS ) external returns ( uint256 ); Sets the fee a data provider keeps from all delegations. Takes effect after feeValueUpdateOffset reward epochs have elapsed. When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. Returns Type Description [0] uint256","title":"setDataProviderFeePercentage"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_setinitialrewarddata_1de56098","text":"Defined in FtsoRewardManager ( Docs , Source ). function setInitialRewardData ( ) external ; Copy initial reward data from oldFtsoRewardManager before starting up this new reward manager. Should be called at the time of switching to the new reward manager, can be called only once, and only by governance .","title":"setInitialRewardData"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_setnewftsorewardmanager_82a2b905","text":"Defined in FtsoRewardManager ( Docs , Source ). function setNewFtsoRewardManager ( address _newFtsoRewardManager ) external ; Sets new ftso reward manager which will take over closing expired reward epochs Should be called at the time of switching to the new reward manager, can be called only once, and only by governance .","title":"setNewFtsoRewardManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/FtsoRewardManager/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/FtsoRewardManager/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_mustbalance","text":"Defined in FtsoRewardManager ( Docs , Source ). modifier mustBalance ()","title":"mustBalance"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_nonreentrant","text":"Defined in ReentrancyGuard ( Source ). modifier nonReentrant () Prevents a contract from calling itself, directly or indirectly. Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to prevent this from happening by making the nonReentrant function external, and make it call a private function that does the actual work.","title":"nonReentrant"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_onlyexecutorandallowedrecipient","text":"Defined in FtsoRewardManager ( Docs , Source ). modifier onlyExecutorAndAllowedRecipient ( address _rewardOwner , address _recipient ) Only the reward owner and its authorized executors can call this method. Executors can only send rewards to authorized recipients. See ClaimSetupManager .","title":"onlyExecutorAndAllowedRecipient"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_onlyftsomanager","text":"Defined in FtsoRewardManager ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager contract can call this method.","title":"onlyFtsoManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_onlyifactive","text":"Defined in FtsoRewardManager ( Docs , Source ). modifier onlyIfActive () This method can only be called if the contract is active .","title":"onlyIfActive"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/FtsoRewardManager/#md_onlyinflation","text":"Defined in FtsoRewardManager ( Docs , Source ). modifier onlyInflation () Only the Inflation contract can call this method.","title":"onlyInflation"},{"location":"apis/smart-contracts/FtsoRewardManager/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/FtsoRewardManager/#st_rewardclaim","text":"Defined in FtsoRewardManager ( Docs , Source ). struct RewardClaim { bool claimed ; uint128 amount ; }","title":"RewardClaim"},{"location":"apis/smart-contracts/FtsoRewardManager/#st_rewardstate","text":"Defined in FtsoRewardManager ( Docs , Source ). struct RewardState { address [] dataProviders ; uint256 [] weights ; uint256 [] amounts ; bool [] claimed ; }","title":"RewardState"},{"location":"apis/smart-contracts/FtsoRewardManager/#st_timelockedcall","text":"Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; }","title":"TimelockedCall"},{"location":"apis/smart-contracts/FtsoRewardManager/#st_unclaimedrewardstate","text":"Defined in FtsoRewardManager ( Docs , Source ). struct UnclaimedRewardState { uint128 amount ; uint128 weight ; }","title":"UnclaimedRewardState"},{"location":"apis/smart-contracts/FtsoRewardManager/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_active","text":"Defined in FtsoRewardManager ( Docs , Source ). bool active Whether rewards can be claimed from this reward manager.","title":"active"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_claimsetupmanager","text":"Defined in FtsoRewardManager ( Docs , Source ). contract IIClaimSetupManager claimSetupManager The ClaimSetupManager contract that helps automate reward claiming.","title":"claimSetupManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_firstclaimablerewardepoch","text":"Defined in FtsoRewardManager ( Docs , Source ). uint256 firstClaimableRewardEpoch Epochs before the token distribution event at Flare launch were not be claimable. This variable holds the first reward epoch that was claimable.","title":"firstClaimableRewardEpoch"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_ftsomanager","text":"Defined in FtsoRewardManager ( Docs , Source ). contract IIFtsoManager ftsoManager The FtsoManager contract that controls reward distribution.","title":"ftsoManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_newftsorewardmanager","text":"Defined in FtsoRewardManager ( Docs , Source ). address newFtsoRewardManager Address of the new FtsoRewardManager that replaced this one.","title":"newFtsoRewardManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_oldftsorewardmanager","text":"Defined in FtsoRewardManager ( Docs , Source ). address oldFtsoRewardManager Address of the old FtsoRewardManager , replaced by this one.","title":"oldFtsoRewardManager"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/FtsoRewardManager/#va_wnat","text":"Defined in FtsoRewardManager ( Docs , Source ). contract WNat wNat Address of the wrapped native token ( WNat ) contract.","title":"wNat"},{"location":"apis/smart-contracts/GovernanceSettings/","text":"GovernanceSettings # Source | Inherits from IGovernanceSettings A special contract that holds the Flare governance address and its timelock. All governance calls are delayed by the timelock specified in this contract. This contract enables updating governance address and timelock only by hard-forking the network, this is, only by updating validator code. Events # GovernanceAddressUpdated # Defined in GovernanceSettings ( Docs , Source ). event GovernanceAddressUpdated ( uint256 timestamp , address oldGovernanceAddress , address newGovernanceAddress ) Emitted when the governance address has been changed. Parameters Type Description timestamp uint256 Timestamp of the block where the change happened, in seconds from UNIX epoch. oldGovernanceAddress address Governance address before the change. newGovernanceAddress address Governance address after the change. GovernanceExecutorsUpdated # Defined in GovernanceSettings ( Docs , Source ). event GovernanceExecutorsUpdated ( uint256 timestamp , address [] oldExecutors , address [] newExecutors ) The list of addresses that are allowed to perform governance calls has been changed. Parameters Type Description timestamp uint256 Timestamp of the block where the change happened, in seconds from UNIX epoch. oldExecutors address[] Array of executor addresses before the change. newExecutors address[] Array of executor addresses after the change. GovernanceTimelockUpdated # Defined in GovernanceSettings ( Docs , Source ). event GovernanceTimelockUpdated ( uint256 timestamp , uint256 oldTimelock , uint256 newTimelock ) Emitted when the timelock has been changed. Parameters Type Description timestamp uint256 Timestamp of the block where the change happened, in seconds from UNIX epoch. oldTimelock uint256 Timelock before the change (in seconds). newTimelock uint256 Timelock after the change (in seconds). Functions # getExecutors # Defined in GovernanceSettings ( Docs , Source ). function getExecutors ( ) external view returns ( address []); Gets the addresses of the accounts that are allowed to execute the timelocked governance calls, once the timelock period expires. Executors can be changed without a hard fork, via a normal governance call. Returns Type Description [0] address[] getGovernanceAddress # Defined in GovernanceSettings ( Docs , Source ). function getGovernanceAddress ( ) external view returns ( address ); Gets the governance account address. The governance address can only be changed by a hard fork. Returns Type Description [0] address getTimelock # Defined in GovernanceSettings ( Docs , Source ). function getTimelock ( ) external view returns ( uint256 ); Gets the time in seconds that must pass between a governance call and its execution. The timelock value can only be changed by a hard fork. Returns Type Description [0] uint256 initialise # Defined in GovernanceSettings ( Docs , Source ). function initialise ( address _governanceAddress , uint256 _timelock , address [] _executors ) external ; Perform initialization, which cannot be done in constructor, since this is a genesis contract. Can only be called once. Parameters Type Description _governanceAddress address Initial governance address. _timelock uint256 Initial timelock value, in seconds. _executors address[] Initial list of addresses allowed to perform governance calls. isExecutor # Defined in GovernanceSettings ( Docs , Source ). function isExecutor ( address _address ) external view returns ( bool ); Checks whether an address is one of the allowed executors. See getExecutors . Parameters Type Description _address address The address to check. Returns Type Description [0] bool True if _address is in the executors list. setExecutors # Defined in GovernanceSettings ( Docs , Source ). function setExecutors ( address [] _newExecutors ) external ; Set the addresses of the accounts that are allowed to execute the timelocked governance calls once the timelock period expires. It isn't very dangerous to allow for anyone to execute timelocked calls, but we reserve the right to make sure the timing of the execution is under control. Can only be called by the governance. Parameters Type Description _newExecutors address[] New list of allowed executors. The previous list is replaced. setGovernanceAddress # Defined in GovernanceSettings ( Docs , Source ). function setGovernanceAddress ( address _newGovernance ) external ; Change the governance address. Can only be called by validators via fork. Parameters Type Description _newGovernance address New governance address. setTimelock # Defined in GovernanceSettings ( Docs , Source ). function setTimelock ( uint256 _newTimelock ) external ; Change the timelock, this is, the amount of time between a governance call and its execution. Can only be called by validators via fork. Parameters Type Description _newTimelock uint256 New timelock value, in seconds. Variables # SIGNAL_COINBASE # Defined in GovernanceSettings ( Docs , Source ). address SIGNAL_COINBASE","title":"GovernanceSettings"},{"location":"apis/smart-contracts/GovernanceSettings/#ct_governancesettings","text":"Source | Inherits from IGovernanceSettings A special contract that holds the Flare governance address and its timelock. All governance calls are delayed by the timelock specified in this contract. This contract enables updating governance address and timelock only by hard-forking the network, this is, only by updating validator code.","title":"GovernanceSettings"},{"location":"apis/smart-contracts/GovernanceSettings/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/GovernanceSettings/#ev_governanceaddressupdated","text":"Defined in GovernanceSettings ( Docs , Source ). event GovernanceAddressUpdated ( uint256 timestamp , address oldGovernanceAddress , address newGovernanceAddress ) Emitted when the governance address has been changed. Parameters Type Description timestamp uint256 Timestamp of the block where the change happened, in seconds from UNIX epoch. oldGovernanceAddress address Governance address before the change. newGovernanceAddress address Governance address after the change.","title":"GovernanceAddressUpdated"},{"location":"apis/smart-contracts/GovernanceSettings/#ev_governanceexecutorsupdated","text":"Defined in GovernanceSettings ( Docs , Source ). event GovernanceExecutorsUpdated ( uint256 timestamp , address [] oldExecutors , address [] newExecutors ) The list of addresses that are allowed to perform governance calls has been changed. Parameters Type Description timestamp uint256 Timestamp of the block where the change happened, in seconds from UNIX epoch. oldExecutors address[] Array of executor addresses before the change. newExecutors address[] Array of executor addresses after the change.","title":"GovernanceExecutorsUpdated"},{"location":"apis/smart-contracts/GovernanceSettings/#ev_governancetimelockupdated","text":"Defined in GovernanceSettings ( Docs , Source ). event GovernanceTimelockUpdated ( uint256 timestamp , uint256 oldTimelock , uint256 newTimelock ) Emitted when the timelock has been changed. Parameters Type Description timestamp uint256 Timestamp of the block where the change happened, in seconds from UNIX epoch. oldTimelock uint256 Timelock before the change (in seconds). newTimelock uint256 Timelock after the change (in seconds).","title":"GovernanceTimelockUpdated"},{"location":"apis/smart-contracts/GovernanceSettings/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_getexecutors_ef09e78f","text":"Defined in GovernanceSettings ( Docs , Source ). function getExecutors ( ) external view returns ( address []); Gets the addresses of the accounts that are allowed to execute the timelocked governance calls, once the timelock period expires. Executors can be changed without a hard fork, via a normal governance call. Returns Type Description [0] address[]","title":"getExecutors"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_getgovernanceaddress_73252494","text":"Defined in GovernanceSettings ( Docs , Source ). function getGovernanceAddress ( ) external view returns ( address ); Gets the governance account address. The governance address can only be changed by a hard fork. Returns Type Description [0] address","title":"getGovernanceAddress"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_gettimelock_6221a54b","text":"Defined in GovernanceSettings ( Docs , Source ). function getTimelock ( ) external view returns ( uint256 ); Gets the time in seconds that must pass between a governance call and its execution. The timelock value can only be changed by a hard fork. Returns Type Description [0] uint256","title":"getTimelock"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_initialise_cf0ea268","text":"Defined in GovernanceSettings ( Docs , Source ). function initialise ( address _governanceAddress , uint256 _timelock , address [] _executors ) external ; Perform initialization, which cannot be done in constructor, since this is a genesis contract. Can only be called once. Parameters Type Description _governanceAddress address Initial governance address. _timelock uint256 Initial timelock value, in seconds. _executors address[] Initial list of addresses allowed to perform governance calls.","title":"initialise"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_isexecutor_debfda30","text":"Defined in GovernanceSettings ( Docs , Source ). function isExecutor ( address _address ) external view returns ( bool ); Checks whether an address is one of the allowed executors. See getExecutors . Parameters Type Description _address address The address to check. Returns Type Description [0] bool True if _address is in the executors list.","title":"isExecutor"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_setexecutors_1d452e46","text":"Defined in GovernanceSettings ( Docs , Source ). function setExecutors ( address [] _newExecutors ) external ; Set the addresses of the accounts that are allowed to execute the timelocked governance calls once the timelock period expires. It isn't very dangerous to allow for anyone to execute timelocked calls, but we reserve the right to make sure the timing of the execution is under control. Can only be called by the governance. Parameters Type Description _newExecutors address[] New list of allowed executors. The previous list is replaced.","title":"setExecutors"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_setgovernanceaddress_cfc16254","text":"Defined in GovernanceSettings ( Docs , Source ). function setGovernanceAddress ( address _newGovernance ) external ; Change the governance address. Can only be called by validators via fork. Parameters Type Description _newGovernance address New governance address.","title":"setGovernanceAddress"},{"location":"apis/smart-contracts/GovernanceSettings/#fn_settimelock_1e891c0a","text":"Defined in GovernanceSettings ( Docs , Source ). function setTimelock ( uint256 _newTimelock ) external ; Change the timelock, this is, the amount of time between a governance call and its execution. Can only be called by validators via fork. Parameters Type Description _newTimelock uint256 New timelock value, in seconds.","title":"setTimelock"},{"location":"apis/smart-contracts/GovernanceSettings/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/GovernanceSettings/#va_signal_coinbase","text":"Defined in GovernanceSettings ( Docs , Source ). address SIGNAL_COINBASE","title":"SIGNAL_COINBASE"},{"location":"apis/smart-contracts/GovernanceVotePower/","text":"GovernanceVotePower # Source | Inherits from IIGovernanceVotePower Contract managing governance vote power and its delegation. Functions # constructor # Defined in GovernanceVotePower ( Docs , Source ). constructor ( contract IVPToken _ownerToken ) public ; Construct GovernanceVotePower for given VPToken . delegate # Defined in GovernanceVotePower ( Docs , Source ). function delegate ( address _to ) public ; Delegates all governance vote power of msg.sender to address _to . Parameters Type Description _to address The address of the recipient. delegatedGovernanceVotePowerHistoryCleanup # Defined in GovernanceVotePower ( Docs , Source ). function delegatedGovernanceVotePowerHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete governance vote power checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 The number of deleted checkpoints. delegatesHistoryCleanup # Defined in GovernanceVotePower ( Docs , Source ). function delegatesHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete delegates checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 The number of deleted checkpoints. getCleanupBlockNumber # Defined in GovernanceVotePower ( Docs , Source ). function getCleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. getDelegateOfAt # Defined in GovernanceVotePower ( Docs , Source ). function getDelegateOfAt ( address _who , uint256 _blockNumber ) public view returns ( address ); Gets the address an account is delegating its governance vote power to, at a given block number. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the address. Returns Type Description [0] address Address where _who was delegating its governance vote power at block _blockNumber . getDelegateOfAtNow # Defined in GovernanceVotePower ( Docs , Source ). function getDelegateOfAtNow ( address _who ) public view returns ( address ); Gets the address an account is delegating its governance vote power to, at the latest block number. Parameters Type Description _who address The address being queried. Returns Type Description [0] address Address where _who is currently delegating its governance vote power. getVotes # Defined in GovernanceVotePower ( Docs , Source ). function getVotes ( address _who ) public view returns ( uint256 ); Gets the governance vote power of an address at the latest block, including all delegations made to it. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Governance vote power of account at the lastest block. ownerToken # Defined in IIGovernanceVotePower ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); Get the token that this governance vote power contract belongs to. Returns Type Description [0] contract IVPToken The IVPToken interface owning this contract. setCleanerContract # Defined in GovernanceVotePower ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. This method can be called by the ownerToken only. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in GovernanceVotePower ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. This method can be called by the ownerToken only. Parameters Type Description _blockNumber uint256 The new cleanup block number. undelegate # Defined in GovernanceVotePower ( Docs , Source ). function undelegate ( ) public ; Undelegates all governance vote power of msg.sender . updateAtTokenTransfer # Defined in GovernanceVotePower ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 , uint256 , uint256 _amount ) external ; Update governance vote power of all involved delegates after tokens are transferred. This function MUST be called after each governance token transfer for the delegates to reflect the correct balance. Parameters Type Description _from address Source address of the transfer. _to address Destination address of the transfer. `` uint256 `` uint256 _amount uint256 Amount being transferred. votePowerOfAt # Defined in GovernanceVotePower ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) public view returns ( uint256 ); Gets the governance vote power of an address at a given block number, including all delegations made to it. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the vote power. Returns Type Description [0] uint256 Governance vote power of _who at _blockNumber . Modifiers # onlyCleaner # Defined in GovernanceVotePower ( Docs , Source ). modifier onlyCleaner () History cleaning methods can be called only from the cleaner address. onlyOwnerToken # Defined in GovernanceVotePower ( Docs , Source ). modifier onlyOwnerToken () All external methods in GovernanceVotePower can only be executed by the owner token. Variables # cleanerContract # Defined in GovernanceVotePower ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning. Set with setCleanerContract . ownerToken # Defined in GovernanceVotePower ( Docs , Source ). contract IVPToken ownerToken The VPToken (or some other contract) that owns this GovernanceVotePower . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling GovernanceVotePower methods.","title":"GovernanceVotePower"},{"location":"apis/smart-contracts/GovernanceVotePower/#ct_governancevotepower","text":"Source | Inherits from IIGovernanceVotePower Contract managing governance vote power and its delegation.","title":"GovernanceVotePower"},{"location":"apis/smart-contracts/GovernanceVotePower/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_constructor_undefined","text":"Defined in GovernanceVotePower ( Docs , Source ). constructor ( contract IVPToken _ownerToken ) public ; Construct GovernanceVotePower for given VPToken .","title":"constructor"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_delegate_5c19a95c","text":"Defined in GovernanceVotePower ( Docs , Source ). function delegate ( address _to ) public ; Delegates all governance vote power of msg.sender to address _to . Parameters Type Description _to address The address of the recipient.","title":"delegate"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_delegatedgovernancevotepowerhistorycleanup_29a59ff2","text":"Defined in GovernanceVotePower ( Docs , Source ). function delegatedGovernanceVotePowerHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete governance vote power checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 The number of deleted checkpoints.","title":"delegatedGovernanceVotePowerHistoryCleanup"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_delegateshistorycleanup_f7ce0ddf","text":"Defined in GovernanceVotePower ( Docs , Source ). function delegatesHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete delegates checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 The number of deleted checkpoints.","title":"delegatesHistoryCleanup"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_getcleanupblocknumber_a72ec4b6","text":"Defined in GovernanceVotePower ( Docs , Source ). function getCleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"getCleanupBlockNumber"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_getdelegateofat_3c028e9d","text":"Defined in GovernanceVotePower ( Docs , Source ). function getDelegateOfAt ( address _who , uint256 _blockNumber ) public view returns ( address ); Gets the address an account is delegating its governance vote power to, at a given block number. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the address. Returns Type Description [0] address Address where _who was delegating its governance vote power at block _blockNumber .","title":"getDelegateOfAt"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_getdelegateofatnow_b3e871ee","text":"Defined in GovernanceVotePower ( Docs , Source ). function getDelegateOfAtNow ( address _who ) public view returns ( address ); Gets the address an account is delegating its governance vote power to, at the latest block number. Parameters Type Description _who address The address being queried. Returns Type Description [0] address Address where _who is currently delegating its governance vote power.","title":"getDelegateOfAtNow"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_getvotes_9ab24eb0","text":"Defined in GovernanceVotePower ( Docs , Source ). function getVotes ( address _who ) public view returns ( uint256 ); Gets the governance vote power of an address at the latest block, including all delegations made to it. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Governance vote power of account at the lastest block.","title":"getVotes"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_ownertoken_65371883","text":"Defined in IIGovernanceVotePower ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); Get the token that this governance vote power contract belongs to. Returns Type Description [0] contract IVPToken The IVPToken interface owning this contract.","title":"ownerToken"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_setcleanercontract_f6a494af","text":"Defined in GovernanceVotePower ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. This method can be called by the ownerToken only. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_setcleanupblocknumber_13de97f5","text":"Defined in GovernanceVotePower ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. This method can be called by the ownerToken only. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_undelegate_92ab89bb","text":"Defined in GovernanceVotePower ( Docs , Source ). function undelegate ( ) public ; Undelegates all governance vote power of msg.sender .","title":"undelegate"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_updateattokentransfer_eadb4362","text":"Defined in GovernanceVotePower ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 , uint256 , uint256 _amount ) external ; Update governance vote power of all involved delegates after tokens are transferred. This function MUST be called after each governance token transfer for the delegates to reflect the correct balance. Parameters Type Description _from address Source address of the transfer. _to address Destination address of the transfer. `` uint256 `` uint256 _amount uint256 Amount being transferred.","title":"updateAtTokenTransfer"},{"location":"apis/smart-contracts/GovernanceVotePower/#fn_votepowerofat_92bfe6d8","text":"Defined in GovernanceVotePower ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) public view returns ( uint256 ); Gets the governance vote power of an address at a given block number, including all delegations made to it. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the vote power. Returns Type Description [0] uint256 Governance vote power of _who at _blockNumber .","title":"votePowerOfAt"},{"location":"apis/smart-contracts/GovernanceVotePower/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/GovernanceVotePower/#md_onlycleaner","text":"Defined in GovernanceVotePower ( Docs , Source ). modifier onlyCleaner () History cleaning methods can be called only from the cleaner address.","title":"onlyCleaner"},{"location":"apis/smart-contracts/GovernanceVotePower/#md_onlyownertoken","text":"Defined in GovernanceVotePower ( Docs , Source ). modifier onlyOwnerToken () All external methods in GovernanceVotePower can only be executed by the owner token.","title":"onlyOwnerToken"},{"location":"apis/smart-contracts/GovernanceVotePower/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/GovernanceVotePower/#va_cleanercontract","text":"Defined in GovernanceVotePower ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning. Set with setCleanerContract .","title":"cleanerContract"},{"location":"apis/smart-contracts/GovernanceVotePower/#va_ownertoken","text":"Defined in GovernanceVotePower ( Docs , Source ). contract IVPToken ownerToken The VPToken (or some other contract) that owns this GovernanceVotePower . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling GovernanceVotePower methods.","title":"ownerToken"},{"location":"apis/smart-contracts/Governed/","text":"Governed # Source | Inherits from GovernedBase Defines behaviors for governed contracts that must have a governor set at construction-time. Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"Governed"},{"location":"apis/smart-contracts/Governed/#ct_governed","text":"Source | Inherits from GovernedBase Defines behaviors for governed contracts that must have a governor set at construction-time.","title":"Governed"},{"location":"apis/smart-contracts/Governed/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/Governed/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/Governed/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/Governed/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/Governed/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/Governed/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/","text":"GovernedAndFlareDaemonized # Source | Inherits from Governed Base class for contracts that are governed and triggered from the FlareDaemon . See Governed and IFlareDaemonize . Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in GovernedAndFlareDaemonized ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . Modifiers # onlyFlareDaemon # Defined in GovernedAndFlareDaemonized ( Docs , Source ). modifier onlyFlareDaemon () Only the flareDaemon can call this method. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () Variables # flareDaemon # Defined in GovernedAndFlareDaemonized ( Docs , Source ). contract FlareDaemon flareDaemon The FlareDaemon contract, set at construction time. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"GovernedAndFlareDaemonized"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#ct_governedandflaredaemonized","text":"Source | Inherits from Governed Base class for contracts that are governed and triggered from the FlareDaemon . See Governed and IFlareDaemonize .","title":"GovernedAndFlareDaemonized"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#fn_constructor_undefined","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon ) public ;","title":"constructor"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#md_onlyflaredaemon","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). modifier onlyFlareDaemon () Only the flareDaemon can call this method.","title":"onlyFlareDaemon"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#va_flaredaemon","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). contract FlareDaemon flareDaemon The FlareDaemon contract, set at construction time.","title":"flareDaemon"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/GovernedAndFlareDaemonized/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/GovernedAtGenesis/","text":"GovernedAtGenesis # Source | Inherits from GovernedBase Defines behaviors for governed contracts that have their governor set at genesis. This contract enforces a fixed governance address when the constructor is not executed on a contract (for instance when directly loaded to the genesis block). This is required to fix governance on a contract when the network starts, at such point where theoretically no accounts yet exist, and leaving it ungoverned could result in a race to claim governance by an unauthorized address. Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in GovernedAtGenesis ( Docs , Source ). constructor ( address _governance ) public ; executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. initialise # Defined in GovernedAtGenesis ( Docs , Source ). function initialise ( address _governance ) public pure ; Disallow initialise to be called. Parameters Type Description _governance address The governance address for initial claiming. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"GovernedAtGenesis"},{"location":"apis/smart-contracts/GovernedAtGenesis/#ct_governedatgenesis","text":"Source | Inherits from GovernedBase Defines behaviors for governed contracts that have their governor set at genesis. This contract enforces a fixed governance address when the constructor is not executed on a contract (for instance when directly loaded to the genesis block). This is required to fix governance on a contract when the network starts, at such point where theoretically no accounts yet exist, and leaving it ungoverned could result in a race to claim governance by an unauthorized address.","title":"GovernedAtGenesis"},{"location":"apis/smart-contracts/GovernedAtGenesis/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/GovernedAtGenesis/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/GovernedAtGenesis/#fn_constructor_undefined","text":"Defined in GovernedAtGenesis ( Docs , Source ). constructor ( address _governance ) public ;","title":"constructor"},{"location":"apis/smart-contracts/GovernedAtGenesis/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/GovernedAtGenesis/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/GovernedAtGenesis/#fn_initialise_9d6a890f","text":"Defined in GovernedAtGenesis ( Docs , Source ). function initialise ( address _governance ) public pure ; Disallow initialise to be called. Parameters Type Description _governance address The governance address for initial claiming.","title":"initialise"},{"location":"apis/smart-contracts/GovernedAtGenesis/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/GovernedBase/","text":"GovernedBase # Source Abstract base class that defines behaviors for governed contracts. This class is abstract so that specific behaviors can be defined for the constructor. Contracts should not be left ungoverned, but not all contract will have a constructor (for example those pre-defined in genesis). Events # GovernanceCallTimelocked # Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire. GovernanceInitialised # Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings . GovernedProductionModeEntered # Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork). TimelockedGovernanceCallCanceled # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution. TimelockedGovernanceCallExecuted # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed. Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . Modifiers # onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () Structures # TimelockedCall # Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; } Variables # governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"GovernedBase"},{"location":"apis/smart-contracts/GovernedBase/#ct_governedbase","text":"Source Abstract base class that defines behaviors for governed contracts. This class is abstract so that specific behaviors can be defined for the constructor. Contracts should not be left ungoverned, but not all contract will have a constructor (for example those pre-defined in genesis).","title":"GovernedBase"},{"location":"apis/smart-contracts/GovernedBase/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/GovernedBase/#ev_governancecalltimelocked","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire.","title":"GovernanceCallTimelocked"},{"location":"apis/smart-contracts/GovernedBase/#ev_governanceinitialised","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings .","title":"GovernanceInitialised"},{"location":"apis/smart-contracts/GovernedBase/#ev_governedproductionmodeentered","text":"Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork).","title":"GovernedProductionModeEntered"},{"location":"apis/smart-contracts/GovernedBase/#ev_timelockedgovernancecallcanceled","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution.","title":"TimelockedGovernanceCallCanceled"},{"location":"apis/smart-contracts/GovernedBase/#ev_timelockedgovernancecallexecuted","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed.","title":"TimelockedGovernanceCallExecuted"},{"location":"apis/smart-contracts/GovernedBase/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/GovernedBase/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/GovernedBase/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/GovernedBase/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/GovernedBase/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/GovernedBase/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/GovernedBase/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/GovernedBase/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/GovernedBase/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/GovernedBase/#st_timelockedcall","text":"Defined in GovernedBase ( Docs , Source ). struct TimelockedCall { uint256 allowedAfterTimestamp ; bytes encodedCall ; }","title":"TimelockedCall"},{"location":"apis/smart-contracts/GovernedBase/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/GovernedBase/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/GovernedBase/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/GovernedBase/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/IClaimSetupManager/","text":"IClaimSetupManager # Source Public interface for the ClaimSetupManager contract. Events # AllowedClaimRecipientsChanged # Defined in IClaimSetupManager ( Docs , Source ). event AllowedClaimRecipientsChanged ( address owner , address [] recipients ) ClaimExecutorFeeValueChanged # Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorFeeValueChanged ( address executor , uint256 validFromRewardEpoch , uint256 feeValueWei ) ClaimExecutorsChanged # Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorsChanged ( address owner , address [] executors ) DelegationAccountCreated # Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountCreated ( address owner , contract IDelegationAccount delegationAccount ) DelegationAccountUpdated # Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountUpdated ( address owner , contract IDelegationAccount delegationAccount , bool enabled ) ExecutorRegistered # Defined in IClaimSetupManager ( Docs , Source ). event ExecutorRegistered ( address executor ) ExecutorUnregistered # Defined in IClaimSetupManager ( Docs , Source ). event ExecutorUnregistered ( address executor , uint256 validFromRewardEpoch ) MaxFeeSet # Defined in IClaimSetupManager ( Docs , Source ). event MaxFeeSet ( uint256 maxFeeValueWei ) MinFeeSet # Defined in IClaimSetupManager ( Docs , Source ). event MinFeeSet ( uint256 minFeeValueWei ) RegisterExecutorFeeSet # Defined in IClaimSetupManager ( Docs , Source ). event RegisterExecutorFeeSet ( uint256 registerExecutorFeeValueWei ) SetExecutorsExcessAmountRefunded # Defined in IClaimSetupManager ( Docs , Source ). event SetExecutorsExcessAmountRefunded ( address owner , uint256 excessAmount ) Functions # accountToDelegationAccount # Defined in IClaimSetupManager ( Docs , Source ). function accountToDelegationAccount ( address _owner ) external view returns ( address ); Gets the PDA of an account. Parameters Type Description _owner address Account to query. Returns Type Description [0] address Address of its PDA or address(0) if it has not been created yet. allowedClaimRecipients # Defined in IClaimSetupManager ( Docs , Source ). function allowedClaimRecipients ( address _rewardOwner ) external view returns ( address []); Gets the addresses of recipients allowed to receive rewards on behalf of an account. Beside these, the owner of the rewards is always authorized. See setAllowedClaimRecipients . Parameters Type Description _rewardOwner address The account to query. Returns Type Description [0] address[] Addresses of all set authorized recipients. batchDelegate # Defined in IClaimSetupManager ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegates all percentage delegations from the caller's PDA and then delegate to a list of accounts. See delegate . Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentage of voting power to be delegated to each delegatee, expressed in basis points (1/100 of one percent). Total of all _bips values must be lower than 10000. claimExecutors # Defined in IClaimSetupManager ( Docs , Source ). function claimExecutors ( address _owner ) external view returns ( address []); Gets the addresses of executors authorized to claim for an account. See setClaimExecutors . Parameters Type Description _owner address The account to query. Returns Type Description [0] address[] Addresses of all set executors. delegate # Defined in IClaimSetupManager ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegates a percentage of the caller's PDA 's voting power to another address. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: Every call resets the delegation value. A value of 0 revokes delegation. delegateGovernance # Defined in IClaimSetupManager ( Docs , Source ). function delegateGovernance ( address _to ) external ; Delegates all the governance vote power of the caller's PDA to another account. Parameters Type Description _to address Address of the recipient of the delegation. disableDelegationAccount # Defined in IClaimSetupManager ( Docs , Source ). function disableDelegationAccount ( ) external ; Disables the Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the owner's account. Rewards accrued by the PDA will no longer be automatically claimed. Reverts if there is no PDA. enableDelegationAccount # Defined in IClaimSetupManager ( Docs , Source ). function enableDelegationAccount ( ) external returns ( contract IDelegationAccount ); Enables (or creates) a Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the PDA, and any rewards accrued by the PDA will be claimed too. Returns Type Description [0] contract IDelegationAccount Address of the delegation account contract. getDelegationAccountData # Defined in IClaimSetupManager ( Docs , Source ). function getDelegationAccountData ( address _owner ) external view returns ( contract IDelegationAccount _delegationAccount , bool _enabled ); Gets PDA data for an account. Parameters Type Description _owner address Account to query. Returns Type Description _delegationAccount contract IDelegationAccount Account's PDA address or address(0) if it has not been created yet. _enabled bool Whether the PDA is enabled. getExecutorCurrentFeeValue # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorCurrentFeeValue ( address _executor ) external view returns ( uint256 ); Returns the current fee of a registered executor. Reverts if the executor is not registered. Parameters Type Description _executor address The executor to query. Returns Type Description [0] uint256 Fee in wei. getExecutorFeeValue # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorFeeValue ( address _executor , uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the fee of an executor at a given reward epoch. Parameters Type Description _executor address The executor to query. _rewardEpoch uint256 Reward Epoch ID to query. Returns Type Description [0] uint256 Fee in wei at that reward epoch. getExecutorInfo # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorInfo ( address _executor ) external view returns ( bool _registered , uint256 _currentFeeValue ); Returns information about an executor. Parameters Type Description _executor address The executor to query. Returns Type Description _registered bool Whether the executor is registered. _currentFeeValue uint256 Executor's current fee value, if registered. getExecutorScheduledFeeValueChanges # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorScheduledFeeValueChanges ( address _executor ) external view returns ( uint256 [] _feeValue , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the currently scheduled fee changes of an executor. Parameters Type Description _executor address Executor to query. Returns Type Description _feeValue uint256[] Array of scheduled fees. _validFromEpoch uint256[] Array of reward epochs ID where the scheduled fees will become effective. _fixed bool[] Array of booleans indicating if an scheduled fee change is fixed or it might still be changed. getRegisteredExecutors # Defined in IClaimSetupManager ( Docs , Source ). function getRegisteredExecutors ( uint256 _start , uint256 _end ) external view returns ( address [] _registeredExecutors , uint256 _totalLength ); Returns the list of executors registered through registerExecutor . Supports paging. Parameters Type Description _start uint256 First executor to return. _end uint256 Last executor to return. Returns Type Description _registeredExecutors address[] Addresses of the registered executors. _totalLength uint256 Total amount of executors. isClaimExecutor # Defined in IClaimSetupManager ( Docs , Source ). function isClaimExecutor ( address _owner , address _executor ) external view returns ( bool ); Returns whether an executor is authorized to claim on behalf of a reward owner. See setClaimExecutors . Parameters Type Description _owner address The reward owner to query. _executor address The executor to query. registerExecutor # Defined in IClaimSetupManager ( Docs , Source ). function registerExecutor ( uint256 _feeValue ) external payable returns ( uint256 ); Registers the caller as an executor and sets its initial fee value. If the executor was already registered, this method only updates the fee, which will take effect after feeValueUpdateOffset reward epochs have elapsed. Executor must pay a fee in order to register. See registerExecutorFeeValueWei . Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective. revokeDelegationAt # Defined in IClaimSetupManager ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revokes all delegation from the caller's PDA to a given account at a given block. Only affects the reads via votePowerOfAtCached() in the specified block. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate with percentage of 0 or undelegateAll . Parameters Type Description _who address The account to revoke. _blockNumber uint256 Block number where the revoking will take place. Must be in the past. setAllowedClaimRecipients # Defined in IClaimSetupManager ( Docs , Source ). function setAllowedClaimRecipients ( address [] _recipients ) external ; Set the addresses of allowed recipients. The reward owner is always an allowed recipient. Parameters Type Description _recipients address[] The new allowed recipients. All old recipients will be deleted and replaced by these. setAutoClaiming # Defined in IClaimSetupManager ( Docs , Source ). function setAutoClaiming ( address [] _executors , bool _enableDelegationAccount ) external payable ; Sets the addresses of executors and optionally enables (creates) a Personal Delegation Account (PDA). If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. _enableDelegationAccount bool Whether the PDA should be enabled. setClaimExecutors # Defined in IClaimSetupManager ( Docs , Source ). function setClaimExecutors ( address [] _executors ) external payable ; Sets the addresses of executors. If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. transferExternalToken # Defined in IClaimSetupManager ( Docs , Source ). function transferExternalToken ( contract IERC20 _token , uint256 _amount ) external ; Allows the caller to transfer ERC-20 tokens from their PDA to the owner account. The main use case is to move ERC-20 tokes received by mistake (by an airdrop, for example) out of the PDA and into the main account, where they can be more easily managed. Reverts if the target token is the WNat contract: use method withdraw for that. Parameters Type Description _token contract IERC20 Target token contract address. _amount uint256 Amount of tokens to transfer. undelegateAll # Defined in IClaimSetupManager ( Docs , Source ). function undelegateAll ( ) external ; Removes all delegations from the caller's PDA . undelegateGovernance # Defined in IClaimSetupManager ( Docs , Source ). function undelegateGovernance ( ) external ; Undelegates all governance vote power currently delegated by the caller's PDA . unregisterExecutor # Defined in IClaimSetupManager ( Docs , Source ). function unregisterExecutor ( ) external returns ( uint256 ); Unregisters the caller as an executor. Returns Type Description [0] uint256 Reward epoch ID when the change becomes effective. updateExecutorFeeValue # Defined in IClaimSetupManager ( Docs , Source ). function updateExecutorFeeValue ( uint256 _feeValue ) external returns ( uint256 ); Sets the caller's executor fee. The caller must be an executor registered through registerExecutor . When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective. withdraw # Defined in IClaimSetupManager ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Allows the caller to transfer WNat wrapped tokens from their PDA to the owner account. Parameters Type Description _amount uint256 Amount of tokens to transfer, in wei.","title":"IClaimSetupManager"},{"location":"apis/smart-contracts/IClaimSetupManager/#ct_iclaimsetupmanager","text":"Source Public interface for the ClaimSetupManager contract.","title":"IClaimSetupManager"},{"location":"apis/smart-contracts/IClaimSetupManager/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_allowedclaimrecipientschanged","text":"Defined in IClaimSetupManager ( Docs , Source ). event AllowedClaimRecipientsChanged ( address owner , address [] recipients )","title":"AllowedClaimRecipientsChanged"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_claimexecutorfeevaluechanged","text":"Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorFeeValueChanged ( address executor , uint256 validFromRewardEpoch , uint256 feeValueWei )","title":"ClaimExecutorFeeValueChanged"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_claimexecutorschanged","text":"Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorsChanged ( address owner , address [] executors )","title":"ClaimExecutorsChanged"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_delegationaccountcreated","text":"Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountCreated ( address owner , contract IDelegationAccount delegationAccount )","title":"DelegationAccountCreated"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_delegationaccountupdated","text":"Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountUpdated ( address owner , contract IDelegationAccount delegationAccount , bool enabled )","title":"DelegationAccountUpdated"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_executorregistered","text":"Defined in IClaimSetupManager ( Docs , Source ). event ExecutorRegistered ( address executor )","title":"ExecutorRegistered"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_executorunregistered","text":"Defined in IClaimSetupManager ( Docs , Source ). event ExecutorUnregistered ( address executor , uint256 validFromRewardEpoch )","title":"ExecutorUnregistered"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_maxfeeset","text":"Defined in IClaimSetupManager ( Docs , Source ). event MaxFeeSet ( uint256 maxFeeValueWei )","title":"MaxFeeSet"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_minfeeset","text":"Defined in IClaimSetupManager ( Docs , Source ). event MinFeeSet ( uint256 minFeeValueWei )","title":"MinFeeSet"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_registerexecutorfeeset","text":"Defined in IClaimSetupManager ( Docs , Source ). event RegisterExecutorFeeSet ( uint256 registerExecutorFeeValueWei )","title":"RegisterExecutorFeeSet"},{"location":"apis/smart-contracts/IClaimSetupManager/#ev_setexecutorsexcessamountrefunded","text":"Defined in IClaimSetupManager ( Docs , Source ). event SetExecutorsExcessAmountRefunded ( address owner , uint256 excessAmount )","title":"SetExecutorsExcessAmountRefunded"},{"location":"apis/smart-contracts/IClaimSetupManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_accounttodelegationaccount_69ea2387","text":"Defined in IClaimSetupManager ( Docs , Source ). function accountToDelegationAccount ( address _owner ) external view returns ( address ); Gets the PDA of an account. Parameters Type Description _owner address Account to query. Returns Type Description [0] address Address of its PDA or address(0) if it has not been created yet.","title":"accountToDelegationAccount"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_allowedclaimrecipients_dfd14c34","text":"Defined in IClaimSetupManager ( Docs , Source ). function allowedClaimRecipients ( address _rewardOwner ) external view returns ( address []); Gets the addresses of recipients allowed to receive rewards on behalf of an account. Beside these, the owner of the rewards is always authorized. See setAllowedClaimRecipients . Parameters Type Description _rewardOwner address The account to query. Returns Type Description [0] address[] Addresses of all set authorized recipients.","title":"allowedClaimRecipients"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_batchdelegate_dc4fcda7","text":"Defined in IClaimSetupManager ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegates all percentage delegations from the caller's PDA and then delegate to a list of accounts. See delegate . Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentage of voting power to be delegated to each delegatee, expressed in basis points (1/100 of one percent). Total of all _bips values must be lower than 10000.","title":"batchDelegate"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_claimexecutors_3f317fe1","text":"Defined in IClaimSetupManager ( Docs , Source ). function claimExecutors ( address _owner ) external view returns ( address []); Gets the addresses of executors authorized to claim for an account. See setClaimExecutors . Parameters Type Description _owner address The account to query. Returns Type Description [0] address[] Addresses of all set executors.","title":"claimExecutors"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_delegate_026e402b","text":"Defined in IClaimSetupManager ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegates a percentage of the caller's PDA 's voting power to another address. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: Every call resets the delegation value. A value of 0 revokes delegation.","title":"delegate"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_delegategovernance_7a68a508","text":"Defined in IClaimSetupManager ( Docs , Source ). function delegateGovernance ( address _to ) external ; Delegates all the governance vote power of the caller's PDA to another account. Parameters Type Description _to address Address of the recipient of the delegation.","title":"delegateGovernance"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_disabledelegationaccount_2394deb1","text":"Defined in IClaimSetupManager ( Docs , Source ). function disableDelegationAccount ( ) external ; Disables the Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the owner's account. Rewards accrued by the PDA will no longer be automatically claimed. Reverts if there is no PDA.","title":"disableDelegationAccount"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_enabledelegationaccount_f0977215","text":"Defined in IClaimSetupManager ( Docs , Source ). function enableDelegationAccount ( ) external returns ( contract IDelegationAccount ); Enables (or creates) a Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the PDA, and any rewards accrued by the PDA will be claimed too. Returns Type Description [0] contract IDelegationAccount Address of the delegation account contract.","title":"enableDelegationAccount"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_getdelegationaccountdata_17a1e3fc","text":"Defined in IClaimSetupManager ( Docs , Source ). function getDelegationAccountData ( address _owner ) external view returns ( contract IDelegationAccount _delegationAccount , bool _enabled ); Gets PDA data for an account. Parameters Type Description _owner address Account to query. Returns Type Description _delegationAccount contract IDelegationAccount Account's PDA address or address(0) if it has not been created yet. _enabled bool Whether the PDA is enabled.","title":"getDelegationAccountData"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_getexecutorcurrentfeevalue_e25547f8","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorCurrentFeeValue ( address _executor ) external view returns ( uint256 ); Returns the current fee of a registered executor. Reverts if the executor is not registered. Parameters Type Description _executor address The executor to query. Returns Type Description [0] uint256 Fee in wei.","title":"getExecutorCurrentFeeValue"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_getexecutorfeevalue_3f8f784c","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorFeeValue ( address _executor , uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the fee of an executor at a given reward epoch. Parameters Type Description _executor address The executor to query. _rewardEpoch uint256 Reward Epoch ID to query. Returns Type Description [0] uint256 Fee in wei at that reward epoch.","title":"getExecutorFeeValue"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_getexecutorinfo_8e28b923","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorInfo ( address _executor ) external view returns ( bool _registered , uint256 _currentFeeValue ); Returns information about an executor. Parameters Type Description _executor address The executor to query. Returns Type Description _registered bool Whether the executor is registered. _currentFeeValue uint256 Executor's current fee value, if registered.","title":"getExecutorInfo"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_getexecutorscheduledfeevaluechanges_950b028c","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorScheduledFeeValueChanges ( address _executor ) external view returns ( uint256 [] _feeValue , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the currently scheduled fee changes of an executor. Parameters Type Description _executor address Executor to query. Returns Type Description _feeValue uint256[] Array of scheduled fees. _validFromEpoch uint256[] Array of reward epochs ID where the scheduled fees will become effective. _fixed bool[] Array of booleans indicating if an scheduled fee change is fixed or it might still be changed.","title":"getExecutorScheduledFeeValueChanges"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_getregisteredexecutors_6e927e61","text":"Defined in IClaimSetupManager ( Docs , Source ). function getRegisteredExecutors ( uint256 _start , uint256 _end ) external view returns ( address [] _registeredExecutors , uint256 _totalLength ); Returns the list of executors registered through registerExecutor . Supports paging. Parameters Type Description _start uint256 First executor to return. _end uint256 Last executor to return. Returns Type Description _registeredExecutors address[] Addresses of the registered executors. _totalLength uint256 Total amount of executors.","title":"getRegisteredExecutors"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_isclaimexecutor_87962abe","text":"Defined in IClaimSetupManager ( Docs , Source ). function isClaimExecutor ( address _owner , address _executor ) external view returns ( bool ); Returns whether an executor is authorized to claim on behalf of a reward owner. See setClaimExecutors . Parameters Type Description _owner address The reward owner to query. _executor address The executor to query.","title":"isClaimExecutor"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_registerexecutor_ccce7e86","text":"Defined in IClaimSetupManager ( Docs , Source ). function registerExecutor ( uint256 _feeValue ) external payable returns ( uint256 ); Registers the caller as an executor and sets its initial fee value. If the executor was already registered, this method only updates the fee, which will take effect after feeValueUpdateOffset reward epochs have elapsed. Executor must pay a fee in order to register. See registerExecutorFeeValueWei . Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective.","title":"registerExecutor"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_revokedelegationat_bbd6fbf8","text":"Defined in IClaimSetupManager ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revokes all delegation from the caller's PDA to a given account at a given block. Only affects the reads via votePowerOfAtCached() in the specified block. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate with percentage of 0 or undelegateAll . Parameters Type Description _who address The account to revoke. _blockNumber uint256 Block number where the revoking will take place. Must be in the past.","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_setallowedclaimrecipients_d2a4ac61","text":"Defined in IClaimSetupManager ( Docs , Source ). function setAllowedClaimRecipients ( address [] _recipients ) external ; Set the addresses of allowed recipients. The reward owner is always an allowed recipient. Parameters Type Description _recipients address[] The new allowed recipients. All old recipients will be deleted and replaced by these.","title":"setAllowedClaimRecipients"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_setautoclaiming_e72dcdbb","text":"Defined in IClaimSetupManager ( Docs , Source ). function setAutoClaiming ( address [] _executors , bool _enableDelegationAccount ) external payable ; Sets the addresses of executors and optionally enables (creates) a Personal Delegation Account (PDA). If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. _enableDelegationAccount bool Whether the PDA should be enabled.","title":"setAutoClaiming"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_setclaimexecutors_9119c494","text":"Defined in IClaimSetupManager ( Docs , Source ). function setClaimExecutors ( address [] _executors ) external payable ; Sets the addresses of executors. If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these.","title":"setClaimExecutors"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_transferexternaltoken_489a8a47","text":"Defined in IClaimSetupManager ( Docs , Source ). function transferExternalToken ( contract IERC20 _token , uint256 _amount ) external ; Allows the caller to transfer ERC-20 tokens from their PDA to the owner account. The main use case is to move ERC-20 tokes received by mistake (by an airdrop, for example) out of the PDA and into the main account, where they can be more easily managed. Reverts if the target token is the WNat contract: use method withdraw for that. Parameters Type Description _token contract IERC20 Target token contract address. _amount uint256 Amount of tokens to transfer.","title":"transferExternalToken"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_undelegateall_b302f393","text":"Defined in IClaimSetupManager ( Docs , Source ). function undelegateAll ( ) external ; Removes all delegations from the caller's PDA .","title":"undelegateAll"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_undelegategovernance_87a2a0dc","text":"Defined in IClaimSetupManager ( Docs , Source ). function undelegateGovernance ( ) external ; Undelegates all governance vote power currently delegated by the caller's PDA .","title":"undelegateGovernance"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_unregisterexecutor_868a660f","text":"Defined in IClaimSetupManager ( Docs , Source ). function unregisterExecutor ( ) external returns ( uint256 ); Unregisters the caller as an executor. Returns Type Description [0] uint256 Reward epoch ID when the change becomes effective.","title":"unregisterExecutor"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_updateexecutorfeevalue_831f16af","text":"Defined in IClaimSetupManager ( Docs , Source ). function updateExecutorFeeValue ( uint256 _feeValue ) external returns ( uint256 ); Sets the caller's executor fee. The caller must be an executor registered through registerExecutor . When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective.","title":"updateExecutorFeeValue"},{"location":"apis/smart-contracts/IClaimSetupManager/#fn_withdraw_2e1a7d4d","text":"Defined in IClaimSetupManager ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Allows the caller to transfer WNat wrapped tokens from their PDA to the owner account. Parameters Type Description _amount uint256 Amount of tokens to transfer, in wei.","title":"withdraw"},{"location":"apis/smart-contracts/IFlareContractRegistry/","text":"IFlareContractRegistry # Source Interface for the FlareContractRegistry . Entry point for all external dapps that need the latest contract addresses deployed by Flare. Functions # getAllContracts # Defined in IFlareContractRegistry ( Docs , Source ). function getAllContracts ( ) external view returns ( string [] _names , address [] _addresses ); Returns all contract names and their corresponding addresses. Returns Type Description _names string[] Array of contract names. _addresses address[] Array of corresponding contract addresses. getContractAddressByHash # Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns the address of a given contract hash. Parameters Type Description _nameHash bytes32 Hash of the contract name as: keccak256(abi.encode(name)) . Returns Type Description [0] address Address of the contract, or address(0) if not found. getContractAddressByName # Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressByName ( string _name ) external view returns ( address ); Returns the address of a given contract name. Parameters Type Description _name string Name of the contract. Returns Type Description [0] address Address of the contract, or address(0) if not found. getContractAddressesByHash # Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns the addresses of a list of contract hashes. Parameters Type Description _nameHashes bytes32[] Array of contract name hashes as: keccak256(abi.encode(name)) . Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found. getContractAddressesByName # Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressesByName ( string [] _names ) external view returns ( address []); Returns the addresses of a list of contract names. Parameters Type Description _names string[] Array of contract names. Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found.","title":"IFlareContractRegistry"},{"location":"apis/smart-contracts/IFlareContractRegistry/#ct_iflarecontractregistry","text":"Source Interface for the FlareContractRegistry . Entry point for all external dapps that need the latest contract addresses deployed by Flare.","title":"IFlareContractRegistry"},{"location":"apis/smart-contracts/IFlareContractRegistry/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFlareContractRegistry/#fn_getallcontracts_18d3ce96","text":"Defined in IFlareContractRegistry ( Docs , Source ). function getAllContracts ( ) external view returns ( string [] _names , address [] _addresses ); Returns all contract names and their corresponding addresses. Returns Type Description _names string[] Array of contract names. _addresses address[] Array of corresponding contract addresses.","title":"getAllContracts"},{"location":"apis/smart-contracts/IFlareContractRegistry/#fn_getcontractaddressbyhash_159354a2","text":"Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns the address of a given contract hash. Parameters Type Description _nameHash bytes32 Hash of the contract name as: keccak256(abi.encode(name)) . Returns Type Description [0] address Address of the contract, or address(0) if not found.","title":"getContractAddressByHash"},{"location":"apis/smart-contracts/IFlareContractRegistry/#fn_getcontractaddressbyname_82760fca","text":"Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressByName ( string _name ) external view returns ( address ); Returns the address of a given contract name. Parameters Type Description _name string Name of the contract. Returns Type Description [0] address Address of the contract, or address(0) if not found.","title":"getContractAddressByName"},{"location":"apis/smart-contracts/IFlareContractRegistry/#fn_getcontractaddressesbyhash_5e11e2d1","text":"Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns the addresses of a list of contract hashes. Parameters Type Description _nameHashes bytes32[] Array of contract name hashes as: keccak256(abi.encode(name)) . Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found.","title":"getContractAddressesByHash"},{"location":"apis/smart-contracts/IFlareContractRegistry/#fn_getcontractaddressesbyname_76d2b1af","text":"Defined in IFlareContractRegistry ( Docs , Source ). function getContractAddressesByName ( string [] _names ) external view returns ( address []); Returns the addresses of a list of contract names. Parameters Type Description _names string[] Array of contract names. Returns Type Description [0] address[] Array of addresses of the contracts. Any of them might be address(0) if not found.","title":"getContractAddressesByName"},{"location":"apis/smart-contracts/IFlareDaemonize/","text":"IFlareDaemonize # Source Interface for contracts that receive triggers from the FlareDaemon contract. Functions # daemonize # Defined in IFlareDaemonize ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused. getContractName # Defined in IFlareDaemonize ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name. switchToFallbackMode # Defined in IFlareDaemonize ( Docs , Source ). function switchToFallbackMode ( ) external returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported.","title":"IFlareDaemonize"},{"location":"apis/smart-contracts/IFlareDaemonize/#ct_iflaredaemonize","text":"Source Interface for contracts that receive triggers from the FlareDaemon contract.","title":"IFlareDaemonize"},{"location":"apis/smart-contracts/IFlareDaemonize/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFlareDaemonize/#fn_daemonize_6d0e8c34","text":"Defined in IFlareDaemonize ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused.","title":"daemonize"},{"location":"apis/smart-contracts/IFlareDaemonize/#fn_getcontractname_f5f5ba72","text":"Defined in IFlareDaemonize ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name.","title":"getContractName"},{"location":"apis/smart-contracts/IFlareDaemonize/#fn_switchtofallbackmode_e22fdece","text":"Defined in IFlareDaemonize ( Docs , Source ). function switchToFallbackMode ( ) external returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported.","title":"switchToFallbackMode"},{"location":"apis/smart-contracts/IFtso/","text":"IFtso # Source Interface for each of the FTSO contracts that handles an asset. Read the FTSO documentation page for general information about the FTSO system. Enums # PriceFinalizationType # Defined in IFtso ( Docs , Source ). enum PriceFinalizationType { NOT_FINALIZED , WEIGHTED_MEDIAN , TRUSTED_ADDRESSES , PREVIOUS_PRICE_COPIED , TRUSTED_ADDRESSES_EXCEPTION , PREVIOUS_PRICE_COPIED_EXCEPTION } How did a price epoch finalize. NOT_FINALIZED : The epoch has not been finalized yet. This is the initial state. WEIGHTED_MEDIAN : The median was used to calculate the final price. This is the most common state in normal operation. TRUSTED_ADDRESSES : Due to low turnout, the final price was calculated using only the median of trusted addresses. PREVIOUS_PRICE_COPIED : Due to low turnout and absence of votes from trusted addresses, the final price was copied from the previous epoch. TRUSTED_ADDRESSES_EXCEPTION : Due to an exception, the final price was calculated using only the median of trusted addresses. PREVIOUS_PRICE_COPIED_EXCEPTION : Due to an exception, the final price was copied from the previous epoch. Events # LowTurnout # Defined in IFtso ( Docs , Source ). event LowTurnout ( uint256 epochId , uint256 natTurnout , uint256 lowNatTurnoutThresholdBIPS , uint256 timestamp ) Not enough votes were received for this asset during a price epoch that has just ended. Parameters Type Description epochId uint256 The ID of the epoch. natTurnout uint256 Total received vote power, as a percentage of the circulating supply in BIPS. lowNatTurnoutThresholdBIPS uint256 Minimum required vote power, as a percentage of the circulating supply in BIPS. The fact that this number is higher than natTurnout is what triggered this event. timestamp uint256 Timestamp of the block where the price epoch ended. PriceEpochInitializedOnFtso # Defined in IFtso ( Docs , Source ). event PriceEpochInitializedOnFtso ( uint256 epochId , uint256 endTime , uint256 timestamp ) All necessary parameters have been set for an epoch and prices can start being revealed . Note that prices can already be submitted immediately after the previous price epoch submit end time is over. This event is not emitted in fallback mode (see getPriceEpochData ). Parameters Type Description epochId uint256 The ID of the epoch that has just started. endTime uint256 Deadline to submit prices, in seconds since UNIX epoch. timestamp uint256 Current on-chain timestamp. PriceFinalized # Defined in IFtso ( Docs , Source ). event PriceFinalized ( uint256 epochId , uint256 price , bool rewardedFtso , uint256 lowIQRRewardPrice , uint256 highIQRRewardPrice , uint256 lowElasticBandRewardPrice , uint256 highElasticBandRewardPrice , enum IFtso . PriceFinalizationType finalizationType , uint256 timestamp ) An epoch has ended and the asset price is available. Parameters Type Description epochId uint256 The ID of the epoch that has just ended. price uint256 The asset's price for that epoch. rewardedFtso bool Whether the next 4 parameters contain data. lowIQRRewardPrice uint256 Lowest price in the primary (inter-quartile) reward band. highIQRRewardPrice uint256 Highest price in the primary (inter-quartile) reward band. lowElasticBandRewardPrice uint256 Lowest price in the secondary (elastic) reward band. highElasticBandRewardPrice uint256 Highest price in the secondary (elastic) reward band. finalizationType enum IFtso.PriceFinalizationType Reason for the finalization of the epoch. timestamp uint256 Timestamp of the block where the price has been finalized. PriceRevealed # Defined in IFtso ( Docs , Source ). event PriceRevealed ( address voter , uint256 epochId , uint256 price , uint256 timestamp , uint256 votePowerNat , uint256 votePowerAsset ) A voter has revealed its price. Parameters Type Description voter address The voter. epochId uint256 The ID of the epoch for which the price has been revealed. price uint256 The revealed price. timestamp uint256 Timestamp of the block where the reveal happened. votePowerNat uint256 Vote power of the voter in this epoch. This includes the vote power derived from its WNat holdings and the delegations. votePowerAsset uint256 Unused . Functions # active # Defined in IFtso ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether FTSO is active or not. getCurrentEpochId # Defined in IFtso ( Docs , Source ). function getCurrentEpochId ( ) external view returns ( uint256 ); Returns the current epoch ID. Returns Type Description [0] uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero. getCurrentPrice # Defined in IFtso ( Docs , Source ). function getCurrentPrice ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns the current asset price. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. getCurrentPriceDetails # Defined in IFtso ( Docs , Source ). function getCurrentPriceDetails ( ) external view returns ( uint256 _price , uint256 _priceTimestamp , enum IFtso . PriceFinalizationType _priceFinalizationType , uint256 _lastPriceEpochFinalizationTimestamp , enum IFtso . PriceFinalizationType _lastPriceEpochFinalizationType ); Returns asset's current price details. All timestamps are in seconds from UNIX epoch. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _priceTimestamp uint256 Time when price was updated for the last time. _priceFinalizationType enum IFtso.PriceFinalizationType Finalization type when price was updated for the last time. _lastPriceEpochFinalizationTimestamp uint256 Time when last price epoch was finalized. _lastPriceEpochFinalizationType enum IFtso.PriceFinalizationType Finalization type of last finalized price epoch. getCurrentPriceFromTrustedProviders # Defined in IFtso ( Docs , Source ). function getCurrentPriceFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns current asset price calculated only using input from trusted providers. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. getCurrentPriceWithDecimals # Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price. getCurrentPriceWithDecimalsFromTrustedProviders # Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimalsFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price calculated only using input from trusted providers and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price. getCurrentRandom # Defined in IFtso ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous price epoch, obtained from the random numbers provided by all data providers along with their data submissions. getEpochId # Defined in IFtso ( Docs , Source ). function getEpochId ( uint256 _timestamp ) external view returns ( uint256 ); Returns the ID of the epoch that was opened for price submission at the specified timestamp. Parameters Type Description _timestamp uint256 Queried timestamp in seconds from UNIX epoch. Returns Type Description [0] uint256 Epoch ID corresponding to that timestamp. IDs are consecutive numbers starting from zero. getEpochPrice # Defined in IFtso ( Docs , Source ). function getEpochPrice ( uint256 _epochId ) external view returns ( uint256 ); Returns agreed asset price in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch. Only the last 200 epochs can be queried. Out-of-bounds queries revert. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . getEpochPriceForVoter # Defined in IFtso ( Docs , Source ). function getEpochPriceForVoter ( uint256 _epochId , address _voter ) external view returns ( uint256 ); Returns asset price submitted by a voter in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch being queried. Only the last 200 epochs can be queried. Out-of-bounds queries revert. _voter address Address of the voter being queried. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . getPriceEpochConfiguration # Defined in IFtso ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ); Returns current epoch's configuration. Returns Type Description _firstEpochStartTs uint256 First epoch start timestamp in seconds from UNIX epoch. _submitPeriodSeconds uint256 Submit period in seconds. _revealPeriodSeconds uint256 Reveal period in seconds. getPriceEpochData # Defined in IFtso ( Docs , Source ). function getPriceEpochData ( ) external view returns ( uint256 _epochId , uint256 _epochSubmitEndTime , uint256 _epochRevealEndTime , uint256 _votePowerBlock , bool _fallbackMode ); Returns current epoch data. Intervals are open on the right: End times are not included. Returns Type Description _epochId uint256 Current epoch ID. _epochSubmitEndTime uint256 End time of the price submission window in seconds from UNIX epoch. _epochRevealEndTime uint256 End time of the price reveal window in seconds from UNIX epoch. _votePowerBlock uint256 Vote power block for the current epoch. _fallbackMode bool Whether the current epoch is in fallback mode. Only votes from trusted addresses are used in this mode. getRandom # Defined in IFtso ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch. symbol # Defined in IFtso ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the FTSO symbol .","title":"IFtso"},{"location":"apis/smart-contracts/IFtso/#ct_iftso","text":"Source Interface for each of the FTSO contracts that handles an asset. Read the FTSO documentation page for general information about the FTSO system.","title":"IFtso"},{"location":"apis/smart-contracts/IFtso/#enums","text":"","title":"Enums"},{"location":"apis/smart-contracts/IFtso/#en_pricefinalizationtype","text":"Defined in IFtso ( Docs , Source ). enum PriceFinalizationType { NOT_FINALIZED , WEIGHTED_MEDIAN , TRUSTED_ADDRESSES , PREVIOUS_PRICE_COPIED , TRUSTED_ADDRESSES_EXCEPTION , PREVIOUS_PRICE_COPIED_EXCEPTION } How did a price epoch finalize. NOT_FINALIZED : The epoch has not been finalized yet. This is the initial state. WEIGHTED_MEDIAN : The median was used to calculate the final price. This is the most common state in normal operation. TRUSTED_ADDRESSES : Due to low turnout, the final price was calculated using only the median of trusted addresses. PREVIOUS_PRICE_COPIED : Due to low turnout and absence of votes from trusted addresses, the final price was copied from the previous epoch. TRUSTED_ADDRESSES_EXCEPTION : Due to an exception, the final price was calculated using only the median of trusted addresses. PREVIOUS_PRICE_COPIED_EXCEPTION : Due to an exception, the final price was copied from the previous epoch.","title":"PriceFinalizationType"},{"location":"apis/smart-contracts/IFtso/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IFtso/#ev_lowturnout","text":"Defined in IFtso ( Docs , Source ). event LowTurnout ( uint256 epochId , uint256 natTurnout , uint256 lowNatTurnoutThresholdBIPS , uint256 timestamp ) Not enough votes were received for this asset during a price epoch that has just ended. Parameters Type Description epochId uint256 The ID of the epoch. natTurnout uint256 Total received vote power, as a percentage of the circulating supply in BIPS. lowNatTurnoutThresholdBIPS uint256 Minimum required vote power, as a percentage of the circulating supply in BIPS. The fact that this number is higher than natTurnout is what triggered this event. timestamp uint256 Timestamp of the block where the price epoch ended.","title":"LowTurnout"},{"location":"apis/smart-contracts/IFtso/#ev_priceepochinitializedonftso","text":"Defined in IFtso ( Docs , Source ). event PriceEpochInitializedOnFtso ( uint256 epochId , uint256 endTime , uint256 timestamp ) All necessary parameters have been set for an epoch and prices can start being revealed . Note that prices can already be submitted immediately after the previous price epoch submit end time is over. This event is not emitted in fallback mode (see getPriceEpochData ). Parameters Type Description epochId uint256 The ID of the epoch that has just started. endTime uint256 Deadline to submit prices, in seconds since UNIX epoch. timestamp uint256 Current on-chain timestamp.","title":"PriceEpochInitializedOnFtso"},{"location":"apis/smart-contracts/IFtso/#ev_pricefinalized","text":"Defined in IFtso ( Docs , Source ). event PriceFinalized ( uint256 epochId , uint256 price , bool rewardedFtso , uint256 lowIQRRewardPrice , uint256 highIQRRewardPrice , uint256 lowElasticBandRewardPrice , uint256 highElasticBandRewardPrice , enum IFtso . PriceFinalizationType finalizationType , uint256 timestamp ) An epoch has ended and the asset price is available. Parameters Type Description epochId uint256 The ID of the epoch that has just ended. price uint256 The asset's price for that epoch. rewardedFtso bool Whether the next 4 parameters contain data. lowIQRRewardPrice uint256 Lowest price in the primary (inter-quartile) reward band. highIQRRewardPrice uint256 Highest price in the primary (inter-quartile) reward band. lowElasticBandRewardPrice uint256 Lowest price in the secondary (elastic) reward band. highElasticBandRewardPrice uint256 Highest price in the secondary (elastic) reward band. finalizationType enum IFtso.PriceFinalizationType Reason for the finalization of the epoch. timestamp uint256 Timestamp of the block where the price has been finalized.","title":"PriceFinalized"},{"location":"apis/smart-contracts/IFtso/#ev_pricerevealed","text":"Defined in IFtso ( Docs , Source ). event PriceRevealed ( address voter , uint256 epochId , uint256 price , uint256 timestamp , uint256 votePowerNat , uint256 votePowerAsset ) A voter has revealed its price. Parameters Type Description voter address The voter. epochId uint256 The ID of the epoch for which the price has been revealed. price uint256 The revealed price. timestamp uint256 Timestamp of the block where the reveal happened. votePowerNat uint256 Vote power of the voter in this epoch. This includes the vote power derived from its WNat holdings and the delegations. votePowerAsset uint256 Unused .","title":"PriceRevealed"},{"location":"apis/smart-contracts/IFtso/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFtso/#fn_active_02fb0c5e","text":"Defined in IFtso ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether FTSO is active or not.","title":"active"},{"location":"apis/smart-contracts/IFtso/#fn_getcurrentepochid_a29a839f","text":"Defined in IFtso ( Docs , Source ). function getCurrentEpochId ( ) external view returns ( uint256 ); Returns the current epoch ID. Returns Type Description [0] uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"getCurrentEpochId"},{"location":"apis/smart-contracts/IFtso/#fn_getcurrentprice_eb91d37e","text":"Defined in IFtso ( Docs , Source ). function getCurrentPrice ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns the current asset price. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/IFtso/#fn_getcurrentpricedetails_040d73b8","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceDetails ( ) external view returns ( uint256 _price , uint256 _priceTimestamp , enum IFtso . PriceFinalizationType _priceFinalizationType , uint256 _lastPriceEpochFinalizationTimestamp , enum IFtso . PriceFinalizationType _lastPriceEpochFinalizationType ); Returns asset's current price details. All timestamps are in seconds from UNIX epoch. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _priceTimestamp uint256 Time when price was updated for the last time. _priceFinalizationType enum IFtso.PriceFinalizationType Finalization type when price was updated for the last time. _lastPriceEpochFinalizationTimestamp uint256 Time when last price epoch was finalized. _lastPriceEpochFinalizationType enum IFtso.PriceFinalizationType Finalization type of last finalized price epoch.","title":"getCurrentPriceDetails"},{"location":"apis/smart-contracts/IFtso/#fn_getcurrentpricefromtrustedproviders_af52df08","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns current asset price calculated only using input from trusted providers. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch.","title":"getCurrentPriceFromTrustedProviders"},{"location":"apis/smart-contracts/IFtso/#fn_getcurrentpricewithdecimals_65f5cd86","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price.","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/IFtso/#fn_getcurrentpricewithdecimalsfromtrustedproviders_3cacb3ae","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimalsFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price calculated only using input from trusted providers and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price.","title":"getCurrentPriceWithDecimalsFromTrustedProviders"},{"location":"apis/smart-contracts/IFtso/#fn_getcurrentrandom_d89601fd","text":"Defined in IFtso ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous price epoch, obtained from the random numbers provided by all data providers along with their data submissions.","title":"getCurrentRandom"},{"location":"apis/smart-contracts/IFtso/#fn_getepochid_5303548b","text":"Defined in IFtso ( Docs , Source ). function getEpochId ( uint256 _timestamp ) external view returns ( uint256 ); Returns the ID of the epoch that was opened for price submission at the specified timestamp. Parameters Type Description _timestamp uint256 Queried timestamp in seconds from UNIX epoch. Returns Type Description [0] uint256 Epoch ID corresponding to that timestamp. IDs are consecutive numbers starting from zero.","title":"getEpochId"},{"location":"apis/smart-contracts/IFtso/#fn_getepochprice_7d1d6f12","text":"Defined in IFtso ( Docs , Source ). function getEpochPrice ( uint256 _epochId ) external view returns ( uint256 ); Returns agreed asset price in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch. Only the last 200 epochs can be queried. Out-of-bounds queries revert. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS .","title":"getEpochPrice"},{"location":"apis/smart-contracts/IFtso/#fn_getepochpriceforvoter_c5d8b9e7","text":"Defined in IFtso ( Docs , Source ). function getEpochPriceForVoter ( uint256 _epochId , address _voter ) external view returns ( uint256 ); Returns asset price submitted by a voter in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch being queried. Only the last 200 epochs can be queried. Out-of-bounds queries revert. _voter address Address of the voter being queried. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS .","title":"getEpochPriceForVoter"},{"location":"apis/smart-contracts/IFtso/#fn_getpriceepochconfiguration_144e1591","text":"Defined in IFtso ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ); Returns current epoch's configuration. Returns Type Description _firstEpochStartTs uint256 First epoch start timestamp in seconds from UNIX epoch. _submitPeriodSeconds uint256 Submit period in seconds. _revealPeriodSeconds uint256 Reveal period in seconds.","title":"getPriceEpochConfiguration"},{"location":"apis/smart-contracts/IFtso/#fn_getpriceepochdata_e3b3a3b3","text":"Defined in IFtso ( Docs , Source ). function getPriceEpochData ( ) external view returns ( uint256 _epochId , uint256 _epochSubmitEndTime , uint256 _epochRevealEndTime , uint256 _votePowerBlock , bool _fallbackMode ); Returns current epoch data. Intervals are open on the right: End times are not included. Returns Type Description _epochId uint256 Current epoch ID. _epochSubmitEndTime uint256 End time of the price submission window in seconds from UNIX epoch. _epochRevealEndTime uint256 End time of the price reveal window in seconds from UNIX epoch. _votePowerBlock uint256 Vote power block for the current epoch. _fallbackMode bool Whether the current epoch is in fallback mode. Only votes from trusted addresses are used in this mode.","title":"getPriceEpochData"},{"location":"apis/smart-contracts/IFtso/#fn_getrandom_cd4b6914","text":"Defined in IFtso ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch.","title":"getRandom"},{"location":"apis/smart-contracts/IFtso/#fn_symbol_95d89b41","text":"Defined in IFtso ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the FTSO symbol .","title":"symbol"},{"location":"apis/smart-contracts/IFtsoGenesis/","text":"IFtsoGenesis # Source Portion of the IFtso interface that is available to contracts deployed at genesis. Functions # revealPriceSubmitter # Defined in IFtsoGenesis ( Docs , Source ). function revealPriceSubmitter ( address _voter , uint256 _epochId , uint256 _price , uint256 _voterWNatVP ) external ; Reveals the price submitted by a voter on a specific epoch. The hash of _price and _random must be equal to the submitted hash Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. _price uint256 Submitted price. _voterWNatVP uint256 Voter's vote power in WNat units. wNatVotePowerCached # Defined in IFtsoGenesis ( Docs , Source ). function wNatVotePowerCached ( address _voter , uint256 _epochId ) external returns ( uint256 ); Get and cache the vote power of a voter on a specific epoch, in WNat units. Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. Returns Type Description [0] uint256 Voter's vote power in WNat units.","title":"IFtsoGenesis"},{"location":"apis/smart-contracts/IFtsoGenesis/#ct_iftsogenesis","text":"Source Portion of the IFtso interface that is available to contracts deployed at genesis.","title":"IFtsoGenesis"},{"location":"apis/smart-contracts/IFtsoGenesis/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFtsoGenesis/#fn_revealpricesubmitter_c1f6c36e","text":"Defined in IFtsoGenesis ( Docs , Source ). function revealPriceSubmitter ( address _voter , uint256 _epochId , uint256 _price , uint256 _voterWNatVP ) external ; Reveals the price submitted by a voter on a specific epoch. The hash of _price and _random must be equal to the submitted hash Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. _price uint256 Submitted price. _voterWNatVP uint256 Voter's vote power in WNat units.","title":"revealPriceSubmitter"},{"location":"apis/smart-contracts/IFtsoGenesis/#fn_wnatvotepowercached_f72cab28","text":"Defined in IFtsoGenesis ( Docs , Source ). function wNatVotePowerCached ( address _voter , uint256 _epochId ) external returns ( uint256 ); Get and cache the vote power of a voter on a specific epoch, in WNat units. Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. Returns Type Description [0] uint256 Voter's vote power in WNat units.","title":"wNatVotePowerCached"},{"location":"apis/smart-contracts/IFtsoManager/","text":"IFtsoManager # Source | Inherits from IFtsoManagerGenesis Interface for the FtsoManager contract. Events # AccruingUnearnedRewardsFailed # Defined in IFtsoManager ( Docs , Source ). event AccruingUnearnedRewardsFailed ( uint256 epochId ) Unexpected failure while accruing unearned rewards. This should be a rare occurrence. Parameters Type Description epochId uint256 Epoch ID of the failure. DistributingRewardsFailed # Defined in IFtsoManager ( Docs , Source ). event DistributingRewardsFailed ( address ftso , uint256 epochId ) Unexpected failure while distributing rewards. This should be a rare occurrence. Parameters Type Description ftso address Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure. FallbackMode # Defined in IFtsoManager ( Docs , Source ). event FallbackMode ( bool fallbackMode ) Emitted when the fallback mode of the FTSO manager changes its state. Fallback mode is a recovery mode, where only data from a trusted subset of FTSO data providers is used to calculate the final price. The FTSO Manager enters the fallback mode when ALL FTSOs are in fallback mode. Parameters Type Description fallbackMode bool New state of the FTSO Manager fallback mode. FinalizingPriceEpochFailed # Defined in IFtsoManager ( Docs , Source ). event FinalizingPriceEpochFailed ( contract IIFtso ftso , uint256 epochId , enum IFtso . PriceFinalizationType failingType ) Unexpected failure while finalizing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure. failingType enum IFtso.PriceFinalizationType How was the epoch finalized. FtsoAdded # Defined in IFtsoManager ( Docs , Source ). event FtsoAdded ( contract IIFtso ftso , bool add ) Emitted when a new FTSO has been added or an existing one has been removed. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. add bool True if added, removed otherwise. FtsoFallbackMode # Defined in IFtsoManager ( Docs , Source ). event FtsoFallbackMode ( contract IIFtso ftso , bool fallbackMode ) Emitted when the fallback mode of an FTSO changes its state. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. fallbackMode bool New state of its fallback mode. InitializingCurrentEpochStateForRevealFailed # Defined in IFtsoManager ( Docs , Source ). event InitializingCurrentEpochStateForRevealFailed ( contract IIFtso ftso , uint256 epochId ) Unexpected failure while initializing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID that failed initialization. PriceEpochFinalized # Defined in IFtsoManager ( Docs , Source ). event PriceEpochFinalized ( address chosenFtso , uint256 rewardEpochId ) Emitted when a price epoch ends, this is, after the reveal phase, when final prices are calculated. Parameters Type Description chosenFtso address Contract address of the FTSO asset that was randomly chosen to be the basis for reward calculation. On this price epoch, rewards will be calculated based on how close each data provider was to the median of all submitted prices FOR THIS FTSO. rewardEpochId uint256 Reward epoch ID this price epoch belongs to. RewardEpochFinalized # Defined in IFtsoManager ( Docs , Source ). event RewardEpochFinalized ( uint256 votepowerBlock , uint256 startBlock ) Emitted when a reward epoch ends and rewards are available. Parameters Type Description votepowerBlock uint256 The vote power block of the epoch. startBlock uint256 The first block of the epoch. UseGoodRandomSet # Defined in IFtsoManager ( Docs , Source ). event UseGoodRandomSet ( bool useGoodRandom , uint256 maxWaitForGoodRandomSeconds ) Emitted when the requirement to provide good random numbers has changed. As part of the FTSO protocol , data providers must submit a random number along with their price reveals. When good random numbers are enforced, all providers that submit a hash must then submit a reveal with a random number or they will be punished. This is a measure against random number manipulation. Parameters Type Description useGoodRandom bool Whether good random numbers are now enforced or not. maxWaitForGoodRandomSeconds uint256 Max number of seconds to wait for a good random number to be submitted. Functions # active # Defined in IFtsoManager ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether the FTSO Manager is active or not. Returns Type Description [0] bool bool Active status. getCurrentPriceEpochData # Defined in IFtsoManager ( Docs , Source ). function getCurrentPriceEpochData ( ) external view returns ( uint256 _priceEpochId , uint256 _priceEpochStartTimestamp , uint256 _priceEpochEndTimestamp , uint256 _priceEpochRevealEndTimestamp , uint256 _currentTimestamp ); Returns timing information for the current price epoch. All intervals are half-closed: end time is not included. All timestamps are in seconds since UNIX epoch. See the FTSO page for information about the different submission phases. Returns Type Description _priceEpochId uint256 Price epoch ID. _priceEpochStartTimestamp uint256 Beginning of the commit phase. _priceEpochEndTimestamp uint256 End of the commit phase. _priceEpochRevealEndTimestamp uint256 End of the reveal phase. _currentTimestamp uint256 Current time. getCurrentPriceEpochId # Defined in IFtsoManagerGenesis ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero. getCurrentRewardEpoch # Defined in IFtsoManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns current reward epoch ID (the one currently running). Returns Type Description [0] uint256 Reward epoch ID. A monotonically increasing integer. getFallbackMode # Defined in IFtsoManager ( Docs , Source ). function getFallbackMode ( ) external view returns ( bool _fallbackMode , contract IIFtso [] _ftsos , bool [] _ftsoInFallbackMode ); Returns whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Returns Type Description _fallbackMode bool True if fallback mode is enabled for the manager. _ftsos contract IIFtso[] Array of all currently active FTSO assets. _ftsoInFallbackMode bool[] Boolean array indicating which FTSO assets are in fallback mode. If the FTSO Manager is in fallback mode then ALL FTSOs are in fallback mode. getFtsos # Defined in IFtsoManager ( Docs , Source ). function getFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Returns the list of currently active FTSOs. Returns Type Description _ftsos contract IIFtso[] Array of contract addresses for the FTSOs. getPriceEpochConfiguration # Defined in IFtsoManager ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds ); Returns the current values for price epoch timing configuration. See the FTSO page for information about the different submission phases. Returns Type Description _firstPriceEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first price epoch. _priceEpochDurationSeconds uint256 Duration in seconds of the commit phase. _revealEpochDurationSeconds uint256 Duration in seconds of the reveal phase. getRewardEpochConfiguration # Defined in IFtsoManager ( Docs , Source ). function getRewardEpochConfiguration ( ) external view returns ( uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds ); Returns the current values for reward epoch timing configuration. See the Reward epochs box. Returns Type Description _firstRewardEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first reward epoch. _rewardEpochDurationSeconds uint256 Duration in seconds of the reward epochs. getRewardEpochToExpireNext # Defined in IFtsoManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Return reward epoch that will expire next, when a new reward epoch is initialized. Reward epochs older than 90 days expire, and any unclaimed rewards in them become inaccessible. Returns Type Description [0] uint256 uint256 Reward epoch ID. getRewardEpochVotePowerBlock # Defined in IFtsoManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block that was used for a past reward epoch. Parameters Type Description _rewardEpoch uint256 The queried reward epoch ID. Returns Type Description [0] uint256 uint256 The block number of that reward epoch's vote power block.","title":"IFtsoManager"},{"location":"apis/smart-contracts/IFtsoManager/#ct_iftsomanager","text":"Source | Inherits from IFtsoManagerGenesis Interface for the FtsoManager contract.","title":"IFtsoManager"},{"location":"apis/smart-contracts/IFtsoManager/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IFtsoManager/#ev_accruingunearnedrewardsfailed","text":"Defined in IFtsoManager ( Docs , Source ). event AccruingUnearnedRewardsFailed ( uint256 epochId ) Unexpected failure while accruing unearned rewards. This should be a rare occurrence. Parameters Type Description epochId uint256 Epoch ID of the failure.","title":"AccruingUnearnedRewardsFailed"},{"location":"apis/smart-contracts/IFtsoManager/#ev_distributingrewardsfailed","text":"Defined in IFtsoManager ( Docs , Source ). event DistributingRewardsFailed ( address ftso , uint256 epochId ) Unexpected failure while distributing rewards. This should be a rare occurrence. Parameters Type Description ftso address Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure.","title":"DistributingRewardsFailed"},{"location":"apis/smart-contracts/IFtsoManager/#ev_fallbackmode","text":"Defined in IFtsoManager ( Docs , Source ). event FallbackMode ( bool fallbackMode ) Emitted when the fallback mode of the FTSO manager changes its state. Fallback mode is a recovery mode, where only data from a trusted subset of FTSO data providers is used to calculate the final price. The FTSO Manager enters the fallback mode when ALL FTSOs are in fallback mode. Parameters Type Description fallbackMode bool New state of the FTSO Manager fallback mode.","title":"FallbackMode"},{"location":"apis/smart-contracts/IFtsoManager/#ev_finalizingpriceepochfailed","text":"Defined in IFtsoManager ( Docs , Source ). event FinalizingPriceEpochFailed ( contract IIFtso ftso , uint256 epochId , enum IFtso . PriceFinalizationType failingType ) Unexpected failure while finalizing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure. failingType enum IFtso.PriceFinalizationType How was the epoch finalized.","title":"FinalizingPriceEpochFailed"},{"location":"apis/smart-contracts/IFtsoManager/#ev_ftsoadded","text":"Defined in IFtsoManager ( Docs , Source ). event FtsoAdded ( contract IIFtso ftso , bool add ) Emitted when a new FTSO has been added or an existing one has been removed. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. add bool True if added, removed otherwise.","title":"FtsoAdded"},{"location":"apis/smart-contracts/IFtsoManager/#ev_ftsofallbackmode","text":"Defined in IFtsoManager ( Docs , Source ). event FtsoFallbackMode ( contract IIFtso ftso , bool fallbackMode ) Emitted when the fallback mode of an FTSO changes its state. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. fallbackMode bool New state of its fallback mode.","title":"FtsoFallbackMode"},{"location":"apis/smart-contracts/IFtsoManager/#ev_initializingcurrentepochstateforrevealfailed","text":"Defined in IFtsoManager ( Docs , Source ). event InitializingCurrentEpochStateForRevealFailed ( contract IIFtso ftso , uint256 epochId ) Unexpected failure while initializing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID that failed initialization.","title":"InitializingCurrentEpochStateForRevealFailed"},{"location":"apis/smart-contracts/IFtsoManager/#ev_priceepochfinalized","text":"Defined in IFtsoManager ( Docs , Source ). event PriceEpochFinalized ( address chosenFtso , uint256 rewardEpochId ) Emitted when a price epoch ends, this is, after the reveal phase, when final prices are calculated. Parameters Type Description chosenFtso address Contract address of the FTSO asset that was randomly chosen to be the basis for reward calculation. On this price epoch, rewards will be calculated based on how close each data provider was to the median of all submitted prices FOR THIS FTSO. rewardEpochId uint256 Reward epoch ID this price epoch belongs to.","title":"PriceEpochFinalized"},{"location":"apis/smart-contracts/IFtsoManager/#ev_rewardepochfinalized","text":"Defined in IFtsoManager ( Docs , Source ). event RewardEpochFinalized ( uint256 votepowerBlock , uint256 startBlock ) Emitted when a reward epoch ends and rewards are available. Parameters Type Description votepowerBlock uint256 The vote power block of the epoch. startBlock uint256 The first block of the epoch.","title":"RewardEpochFinalized"},{"location":"apis/smart-contracts/IFtsoManager/#ev_usegoodrandomset","text":"Defined in IFtsoManager ( Docs , Source ). event UseGoodRandomSet ( bool useGoodRandom , uint256 maxWaitForGoodRandomSeconds ) Emitted when the requirement to provide good random numbers has changed. As part of the FTSO protocol , data providers must submit a random number along with their price reveals. When good random numbers are enforced, all providers that submit a hash must then submit a reveal with a random number or they will be punished. This is a measure against random number manipulation. Parameters Type Description useGoodRandom bool Whether good random numbers are now enforced or not. maxWaitForGoodRandomSeconds uint256 Max number of seconds to wait for a good random number to be submitted.","title":"UseGoodRandomSet"},{"location":"apis/smart-contracts/IFtsoManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFtsoManager/#fn_active_02fb0c5e","text":"Defined in IFtsoManager ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether the FTSO Manager is active or not. Returns Type Description [0] bool bool Active status.","title":"active"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getcurrentpriceepochdata_93a79025","text":"Defined in IFtsoManager ( Docs , Source ). function getCurrentPriceEpochData ( ) external view returns ( uint256 _priceEpochId , uint256 _priceEpochStartTimestamp , uint256 _priceEpochEndTimestamp , uint256 _priceEpochRevealEndTimestamp , uint256 _currentTimestamp ); Returns timing information for the current price epoch. All intervals are half-closed: end time is not included. All timestamps are in seconds since UNIX epoch. See the FTSO page for information about the different submission phases. Returns Type Description _priceEpochId uint256 Price epoch ID. _priceEpochStartTimestamp uint256 Beginning of the commit phase. _priceEpochEndTimestamp uint256 End of the commit phase. _priceEpochRevealEndTimestamp uint256 End of the reveal phase. _currentTimestamp uint256 Current time.","title":"getCurrentPriceEpochData"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getcurrentpriceepochid_08a7f402","text":"Defined in IFtsoManagerGenesis ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"getCurrentPriceEpochId"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getcurrentrewardepoch_e7c830d4","text":"Defined in IFtsoManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns current reward epoch ID (the one currently running). Returns Type Description [0] uint256 Reward epoch ID. A monotonically increasing integer.","title":"getCurrentRewardEpoch"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getfallbackmode_4b48dd5e","text":"Defined in IFtsoManager ( Docs , Source ). function getFallbackMode ( ) external view returns ( bool _fallbackMode , contract IIFtso [] _ftsos , bool [] _ftsoInFallbackMode ); Returns whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Returns Type Description _fallbackMode bool True if fallback mode is enabled for the manager. _ftsos contract IIFtso[] Array of all currently active FTSO assets. _ftsoInFallbackMode bool[] Boolean array indicating which FTSO assets are in fallback mode. If the FTSO Manager is in fallback mode then ALL FTSOs are in fallback mode.","title":"getFallbackMode"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getftsos_ce69f833","text":"Defined in IFtsoManager ( Docs , Source ). function getFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Returns the list of currently active FTSOs. Returns Type Description _ftsos contract IIFtso[] Array of contract addresses for the FTSOs.","title":"getFtsos"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getpriceepochconfiguration_144e1591","text":"Defined in IFtsoManager ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds ); Returns the current values for price epoch timing configuration. See the FTSO page for information about the different submission phases. Returns Type Description _firstPriceEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first price epoch. _priceEpochDurationSeconds uint256 Duration in seconds of the commit phase. _revealEpochDurationSeconds uint256 Duration in seconds of the reveal phase.","title":"getPriceEpochConfiguration"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getrewardepochconfiguration_1cb513f7","text":"Defined in IFtsoManager ( Docs , Source ). function getRewardEpochConfiguration ( ) external view returns ( uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds ); Returns the current values for reward epoch timing configuration. See the Reward epochs box. Returns Type Description _firstRewardEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first reward epoch. _rewardEpochDurationSeconds uint256 Duration in seconds of the reward epochs.","title":"getRewardEpochConfiguration"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getrewardepochtoexpirenext_3e7ff857","text":"Defined in IFtsoManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Return reward epoch that will expire next, when a new reward epoch is initialized. Reward epochs older than 90 days expire, and any unclaimed rewards in them become inaccessible. Returns Type Description [0] uint256 uint256 Reward epoch ID.","title":"getRewardEpochToExpireNext"},{"location":"apis/smart-contracts/IFtsoManager/#fn_getrewardepochvotepowerblock_f2edab5a","text":"Defined in IFtsoManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block that was used for a past reward epoch. Parameters Type Description _rewardEpoch uint256 The queried reward epoch ID. Returns Type Description [0] uint256 uint256 The block number of that reward epoch's vote power block.","title":"getRewardEpochVotePowerBlock"},{"location":"apis/smart-contracts/IFtsoManagerGenesis/","text":"IFtsoManagerGenesis # Source Portion of the IFtsoManager interface that is available to contracts deployed at genesis. Functions # getCurrentPriceEpochId # Defined in IFtsoManagerGenesis ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"IFtsoManagerGenesis"},{"location":"apis/smart-contracts/IFtsoManagerGenesis/#ct_iftsomanagergenesis","text":"Source Portion of the IFtsoManager interface that is available to contracts deployed at genesis.","title":"IFtsoManagerGenesis"},{"location":"apis/smart-contracts/IFtsoManagerGenesis/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFtsoManagerGenesis/#fn_getcurrentpriceepochid_08a7f402","text":"Defined in IFtsoManagerGenesis ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"getCurrentPriceEpochId"},{"location":"apis/smart-contracts/IFtsoRegistry/","text":"IFtsoRegistry # Source | Inherits from IFtsoRegistryGenesis Interface for the FtsoRegistry contract. Functions # getAllCurrentPrices # Defined in IFtsoRegistry ( Docs , Source ). function getAllCurrentPrices ( ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of all supported assets. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getCurrentPrice # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( uint256 _ftsoIndex ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. getCurrentPrice # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. getCurrentPriceWithDecimals # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price . getCurrentPriceWithDecimals # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price . getCurrentPricesByIndices # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesByIndices ( uint256 [] _indices ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of indices. Reverts if any of the indices is not supported. Parameters Type Description _indices uint256[] Array of indices to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getCurrentPricesBySymbols # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesBySymbols ( string [] _symbols ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of asset symbols. Reverts if any of the symbols is not supported. Parameters Type Description _symbols string[] Array of symbols to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getFtso # Defined in IFtsoRegistry ( Docs , Source ). function getFtso ( uint256 _activeFtso ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given index. Reverts if unsupported index is passed. Parameters Type Description _activeFtso uint256 The queried index. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried index. getFtsoBySymbol # Defined in IFtsoRegistry ( Docs , Source ). function getFtsoBySymbol ( string _symbol ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given symbol. Reverts if unsupported symbol is passed. Parameters Type Description _symbol string The queried symbol. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried symbol. getFtsoIndex # Defined in IFtsoRegistry ( Docs , Source ). function getFtsoIndex ( string _symbol ) external view returns ( uint256 _assetIndex ); Returns the FTSO index corresponding to a given asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _assetIndex uint256 The corresponding asset index. getFtsoSymbol # Defined in IFtsoRegistry ( Docs , Source ). function getFtsoSymbol ( uint256 _ftsoIndex ) external view returns ( string _symbol ); Returns the asset symbol corresponding to a given FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _symbol string The corresponding asset symbol. getFtsos # Defined in IFtsoRegistryGenesis ( Docs , Source ). function getFtsos ( uint256 [] _indices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _indices uint256[] Array of FTSO indices to query. Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses. getSupportedFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Get array of all FTSO contracts for all supported asset indices. The index of FTSO in returned array does not necessarily correspond to the asset's index. Due to deletion, some indices might be unsupported. Use getSupportedIndicesAndFtsos to retrieve pairs of correct indices and FTSOs, where possible \"null\" holes are readily apparent. Returns Type Description _ftsos contract IIFtso[] Array of all supported FTSOs. getSupportedIndices # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndices ( ) external view returns ( uint256 [] _supportedIndices ); Returns the indices of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all active FTSO indices in increasing order. getSupportedIndicesAndFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , contract IIFtso [] _ftsos ); Get all supported indices and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _ftsos contract IIFtso[] Array of all supported FTSO addresses. getSupportedIndicesAndSymbols # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndSymbols ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols ); Get all supported indices and corresponding symbols. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. getSupportedIndicesSymbolsAndFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesSymbolsAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported indices, symbols, and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses. getSupportedSymbols # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbols ( ) external view returns ( string [] _supportedSymbols ); Returns the symbols of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all active FTSO symbols in increasing order. getSupportedSymbolsAndFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbolsAndFtsos ( ) external view returns ( string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported symbols and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses. Structures # PriceInfo # Defined in IFtsoRegistry ( Docs , Source ). struct PriceInfo { uint256 ftsoIndex ; uint256 price ; uint256 decimals ; uint256 timestamp ; }","title":"IFtsoRegistry"},{"location":"apis/smart-contracts/IFtsoRegistry/#ct_iftsoregistry","text":"Source | Inherits from IFtsoRegistryGenesis Interface for the FtsoRegistry contract.","title":"IFtsoRegistry"},{"location":"apis/smart-contracts/IFtsoRegistry/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getallcurrentprices_58f9296f","text":"Defined in IFtsoRegistry ( Docs , Source ). function getAllCurrentPrices ( ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of all supported assets. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getAllCurrentPrices"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getcurrentprice_c55d0f56","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( uint256 _ftsoIndex ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getcurrentprice_42a0f243","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getcurrentpricewithdecimals_257cbd3a","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price .","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getcurrentpricewithdecimals_a69afdc6","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price .","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getcurrentpricesbyindices_6ba31fa1","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesByIndices ( uint256 [] _indices ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of indices. Reverts if any of the indices is not supported. Parameters Type Description _indices uint256[] Array of indices to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getCurrentPricesByIndices"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getcurrentpricesbysymbols_79d5ea4b","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesBySymbols ( string [] _symbols ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of asset symbols. Reverts if any of the symbols is not supported. Parameters Type Description _symbols string[] Array of symbols to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getCurrentPricesBySymbols"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getftso_d75f6d81","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtso ( uint256 _activeFtso ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given index. Reverts if unsupported index is passed. Parameters Type Description _activeFtso uint256 The queried index. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried index.","title":"getFtso"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getftsobysymbol_97da6af4","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtsoBySymbol ( string _symbol ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given symbol. Reverts if unsupported symbol is passed. Parameters Type Description _symbol string The queried symbol. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried symbol.","title":"getFtsoBySymbol"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getftsoindex_e848da30","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtsoIndex ( string _symbol ) external view returns ( uint256 _assetIndex ); Returns the FTSO index corresponding to a given asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _assetIndex uint256 The corresponding asset index.","title":"getFtsoIndex"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getftsosymbol_136d3f64","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtsoSymbol ( uint256 _ftsoIndex ) external view returns ( string _symbol ); Returns the asset symbol corresponding to a given FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _symbol string The corresponding asset symbol.","title":"getFtsoSymbol"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getftsos_9cb47538","text":"Defined in IFtsoRegistryGenesis ( Docs , Source ). function getFtsos ( uint256 [] _indices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _indices uint256[] Array of FTSO indices to query. Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses.","title":"getFtsos"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getsupportedftsos_a40060ba","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Get array of all FTSO contracts for all supported asset indices. The index of FTSO in returned array does not necessarily correspond to the asset's index. Due to deletion, some indices might be unsupported. Use getSupportedIndicesAndFtsos to retrieve pairs of correct indices and FTSOs, where possible \"null\" holes are readily apparent. Returns Type Description _ftsos contract IIFtso[] Array of all supported FTSOs.","title":"getSupportedFtsos"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getsupportedindices_798aac5b","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndices ( ) external view returns ( uint256 [] _supportedIndices ); Returns the indices of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all active FTSO indices in increasing order.","title":"getSupportedIndices"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getsupportedindicesandftsos_06a2ba29","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , contract IIFtso [] _ftsos ); Get all supported indices and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedIndicesAndFtsos"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getsupportedindicesandsymbols_e68f283b","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndSymbols ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols ); Get all supported indices and corresponding symbols. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols.","title":"getSupportedIndicesAndSymbols"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getsupportedindicessymbolsandftsos_7687542c","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesSymbolsAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported indices, symbols, and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedIndicesSymbolsAndFtsos"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getsupportedsymbols_ce1c0e4d","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbols ( ) external view returns ( string [] _supportedSymbols ); Returns the symbols of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all active FTSO symbols in increasing order.","title":"getSupportedSymbols"},{"location":"apis/smart-contracts/IFtsoRegistry/#fn_getsupportedsymbolsandftsos_0cf48497","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbolsAndFtsos ( ) external view returns ( string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported symbols and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedSymbolsAndFtsos"},{"location":"apis/smart-contracts/IFtsoRegistry/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/IFtsoRegistry/#st_priceinfo","text":"Defined in IFtsoRegistry ( Docs , Source ). struct PriceInfo { uint256 ftsoIndex ; uint256 price ; uint256 decimals ; uint256 timestamp ; }","title":"PriceInfo"},{"location":"apis/smart-contracts/IFtsoRegistryGenesis/","text":"IFtsoRegistryGenesis # Source Portion of the IFtsoRegistry interface that is available to contracts deployed at genesis. Functions # getFtsos # Defined in IFtsoRegistryGenesis ( Docs , Source ). function getFtsos ( uint256 [] _indices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _indices uint256[] Array of FTSO indices to query. Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses.","title":"IFtsoRegistryGenesis"},{"location":"apis/smart-contracts/IFtsoRegistryGenesis/#ct_iftsoregistrygenesis","text":"Source Portion of the IFtsoRegistry interface that is available to contracts deployed at genesis.","title":"IFtsoRegistryGenesis"},{"location":"apis/smart-contracts/IFtsoRegistryGenesis/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFtsoRegistryGenesis/#fn_getftsos_9cb47538","text":"Defined in IFtsoRegistryGenesis ( Docs , Source ). function getFtsos ( uint256 [] _indices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _indices uint256[] Array of FTSO indices to query. Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses.","title":"getFtsos"},{"location":"apis/smart-contracts/IFtsoRewardManager/","text":"IFtsoRewardManager # Source Interface for the FtsoRewardManager contract. Events # FeePercentageChanged # Defined in IFtsoRewardManager ( Docs , Source ). event FeePercentageChanged ( address dataProvider , uint256 value , uint256 validFromEpoch ) Emitted when a data provider changes its fee. Parameters Type Description dataProvider address Address of the data provider. value uint256 New fee, in BIPS. validFromEpoch uint256 Epoch ID where the new fee takes effect. FtsoRewardManagerActivated # Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerActivated ( address ftsoRewardManager ) Emitted when the reward manager contract is activated. Parameters Type Description ftsoRewardManager address The reward manager contract. FtsoRewardManagerDeactivated # Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerDeactivated ( address ftsoRewardManager ) Emitted when the reward manager contract is deactivated. Parameters Type Description ftsoRewardManager address The reward manager contract. RewardClaimed # Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimed ( address dataProvider , address whoClaimed , address sentTo , uint256 rewardEpoch , uint256 amount ) Emitted when a data provider claims its FTSO rewards. Parameters Type Description dataProvider address Address of the data provider that accrued the reward. whoClaimed address Address that actually performed the claim. sentTo address Address that received the reward. rewardEpoch uint256 ID of the reward epoch where the reward was accrued. amount uint256 Amount of rewarded native tokens (wei). RewardClaimsEnabled # Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsEnabled ( uint256 rewardEpochId ) Emitted when reward claims have been enabled. Parameters Type Description rewardEpochId uint256 First claimable reward epoch. RewardClaimsExpired # Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsExpired ( uint256 rewardEpochId ) Unclaimed rewards have expired and are now inaccessible. getUnclaimedReward() can be used to retrieve more information. Parameters Type Description rewardEpochId uint256 ID of the reward epoch that has just expired. RewardsDistributed # Defined in IFtsoRewardManager ( Docs , Source ). event RewardsDistributed ( address ftso , uint256 epochId , address [] addresses , uint256 [] rewards ) Emitted every price epoch, when rewards have been distributed to each contributing data provider. Note that rewards are not claimable until the reward epoch finishes. Parameters Type Description ftso address Address of the FTSO that generated the rewards. epochId uint256 ID of the reward epoch where the rewards were accrued. addresses address[] Data provider addresses that have rewards to claim. rewards uint256[] Amounts available for claiming (wei). UnearnedRewardsAccrued # Defined in IFtsoRewardManager ( Docs , Source ). event UnearnedRewardsAccrued ( uint256 epochId , uint256 reward ) Emitted when rewards cannot be distributed during a reward epoch (for example, because the FTSO went into fallback mode) and they are accrued for later burning. Parameters Type Description epochId uint256 ID of the reward epoch where the reward was accrued. reward uint256 Total amount of accrued rewards (wei). Functions # active # Defined in IFtsoRewardManager ( Docs , Source ). function active ( ) external view returns ( bool ); Whether rewards can be claimed from this reward manager. autoClaim # Defined in IFtsoRewardManager ( Docs , Source ). function autoClaim ( address [] _rewardOwners , uint256 _rewardEpoch ) external ; Allows claiming rewards simultaneously for a list of reward owners and all unclaimed epochs before the specified one. This is meant as a convenience all-in-one reward claiming method to be used both by reward owners and registered executors . It performs a series of operations, besides claiming rewards: If a reward owner has enabled its Personal Delegation Account , rewards are also claimed for the PDA and the total claimed amount is sent to that PDA. Otherwise, the claimed amount is sent to the reward owner's account. Claimed amount is automatically wrapped through the WNat contract. If the caller is a registered executor with a non-zero fee, the fee is paid to the executor for each claimed address. Parameters Type Description _rewardOwners address[] List of reward owners to claim for. _rewardEpoch uint256 Last reward epoch ID to claim for. All previous epochs with pending rewards will be claimed too. claim # Defined in IFtsoRewardManager ( Docs , Source ). function claim ( address _rewardOwner , address payable _recipient , uint256 _rewardEpoch , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by percentage. Reverts if msg.sender is delegating by amount. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpoch uint256 Last reward epoch to claim for. All previous epochs with pending rewards will be claimed too. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). claimFromDataProviders # Defined in IFtsoRewardManager ( Docs , Source ). function claimFromDataProviders ( address _rewardOwner , address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner from specific data providers. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by amount (explicit delegation). Reverts if msg.sender is delegating by percentage. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpochs uint256[] Array of reward epoch IDs to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). claimReward # Defined in IFtsoRewardManager ( Docs , Source ). function claimReward ( address payable _recipient , uint256 [] _rewardEpochs ) external returns ( uint256 _rewardAmount ); Allows a percentage delegator to claim rewards. This function is intended to be used to claim rewards in case of delegation by percentage. This function is deprecated : use claim instead. Reverts if msg.sender is delegating by amount. Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'. Retained for backward compatibility. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. Returns Type Description _rewardAmount uint256 Amount of total claimed rewards (wei). claimRewardFromDataProviders # Defined in IFtsoRewardManager ( Docs , Source ). function claimRewardFromDataProviders ( address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards from specific data providers. This function is intended to be used to claim rewards in case of delegation by amount. This function is deprecated : use claimFromDataProviders instead. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). getClaimedReward # Defined in IFtsoRewardManager ( Docs , Source ). function getClaimedReward ( uint256 _rewardEpoch , address _dataProvider , address _claimer ) external view returns ( bool _claimed , uint256 _amount ); Returns information on the rewards accrued by a reward owner from a specific data provider at a specific reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID to query. _dataProvider address Address of the data provider to query. _claimer address Address of the reward owner to query. Returns Type Description _claimed bool Whether the reward has been claimed or not. _amount uint256 Accrued amount in wei. getCurrentRewardEpoch # Defined in IFtsoRewardManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns the current reward epoch ID. getDataProviderCurrentFeePercentage # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 _feePercentageBIPS ); Returns the current fee percentage of a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. getDataProviderFeePercentage # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderFeePercentage ( address _dataProvider , uint256 _rewardEpoch ) external view returns ( uint256 _feePercentageBIPS ); Returns the fee percentage of a data provider at a given reward epoch. Parameters Type Description _dataProvider address Address of the queried data provider. _rewardEpoch uint256 Reward epoch ID. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. getDataProviderPerformanceInfo # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderPerformanceInfo ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _rewardAmount , uint256 _votePowerIgnoringRevocation ); Returns information on rewards and vote power of a data provider at a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. _dataProvider address Address of the data provider to query. Returns Type Description _rewardAmount uint256 Amount of rewards (wei). _votePowerIgnoringRevocation uint256 Vote power, not including revocations. getDataProviderScheduledFeePercentageChanges # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] _feePercentageBIPS , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the scheduled fee percentage changes for a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256[] Array of fee percentages in BIPS. _validFromEpoch uint256[] Array of block numbers from which the fee settings are effective. _fixed bool[] Array of boolean values indicating whether settings are subject to change or not. getEpochReward # Defined in IFtsoRewardManager ( Docs , Source ). function getEpochReward ( uint256 _rewardEpoch ) external view returns ( uint256 _totalReward , uint256 _claimedReward ); Returns information on an epoch's rewards. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. Returns Type Description _totalReward uint256 Total amount of rewards accrued on that epoch, in wei. _claimedReward uint256 Total amount of rewards that have already been claimed, in wei. getEpochsWithClaimableRewards # Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithClaimableRewards ( ) external view returns ( uint256 _startEpochId , uint256 _endEpochId ); Returns the reward epoch range for which rewards can be claimed. Rewards outside this range are unclaimable, either because they have expired or because the reward epoch is still ongoing. Returns Type Description _startEpochId uint256 The oldest epoch ID that allows reward claiming. _endEpochId uint256 The newest epoch ID that allows reward claiming. getEpochsWithUnclaimedRewards # Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view returns ( uint256 [] _epochIds ); Returns the array of claimable epoch IDs for which the rewards of a reward owner have not yet been claimed. Parameters Type Description _beneficiary address Address of the reward owner to query. Reverts if it uses delegation by amount. Returns Type Description _epochIds uint256[] Array of epoch IDs. getInitialRewardEpoch # Defined in IFtsoRewardManager ( Docs , Source ). function getInitialRewardEpoch ( ) external view returns ( uint256 ); Returns the initial reward epoch ID for this reward manager contract. This corresponds to the oldest reward epoch with claimable rewards in the previous reward manager when this one took over. Set by governance through setInitialRewardData . getRewardEpochToExpireNext # Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Returns the reward epoch that will expire next once a new reward epoch starts. getRewardEpochVotePowerBlock # Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block of a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. getStateOfRewards # Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] _dataProviders , uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address at a specific reward epoch. Parameters Type Description _beneficiary address Address of the beneficiary to query. It can be a data provider or a delegator, for example. Reverts if the queried address is delegating by amount. _rewardEpoch uint256 Reward epoch ID to query. Returns Type Description _dataProviders address[] Array of addresses of data providers. _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not. getStateOfRewardsFromDataProviders # Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] _dataProviders ) external view returns ( uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address coming from a specific set of data providers, at a specific reward epoch. Parameters Type Description _beneficiary address Address of beneficiary to query. _rewardEpoch uint256 Reward epoch ID to query. _dataProviders address[] Array of addresses of the data providers to query. Returns Type Description _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not. nextClaimableRewardEpoch # Defined in IFtsoRewardManager ( Docs , Source ). function nextClaimableRewardEpoch ( address _rewardOwner ) external view returns ( uint256 ); Returns the next claimable reward epoch for a reward owner. Parameters Type Description _rewardOwner address Address of the reward owner to query. setDataProviderFeePercentage # Defined in IFtsoRewardManager ( Docs , Source ). function setDataProviderFeePercentage ( uint256 _feePercentageBIPS ) external returns ( uint256 _validFromEpoch ); Sets the fee a data provider keeps from all delegations. Takes effect after feeValueUpdateOffset reward epochs have elapsed. When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. Returns Type Description _validFromEpoch uint256 Reward epoch number when the new fee percentage will become effective.","title":"IFtsoRewardManager"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ct_iftsorewardmanager","text":"Source Interface for the FtsoRewardManager contract.","title":"IFtsoRewardManager"},{"location":"apis/smart-contracts/IFtsoRewardManager/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_feepercentagechanged","text":"Defined in IFtsoRewardManager ( Docs , Source ). event FeePercentageChanged ( address dataProvider , uint256 value , uint256 validFromEpoch ) Emitted when a data provider changes its fee. Parameters Type Description dataProvider address Address of the data provider. value uint256 New fee, in BIPS. validFromEpoch uint256 Epoch ID where the new fee takes effect.","title":"FeePercentageChanged"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_ftsorewardmanageractivated","text":"Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerActivated ( address ftsoRewardManager ) Emitted when the reward manager contract is activated. Parameters Type Description ftsoRewardManager address The reward manager contract.","title":"FtsoRewardManagerActivated"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_ftsorewardmanagerdeactivated","text":"Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerDeactivated ( address ftsoRewardManager ) Emitted when the reward manager contract is deactivated. Parameters Type Description ftsoRewardManager address The reward manager contract.","title":"FtsoRewardManagerDeactivated"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_rewardclaimed","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimed ( address dataProvider , address whoClaimed , address sentTo , uint256 rewardEpoch , uint256 amount ) Emitted when a data provider claims its FTSO rewards. Parameters Type Description dataProvider address Address of the data provider that accrued the reward. whoClaimed address Address that actually performed the claim. sentTo address Address that received the reward. rewardEpoch uint256 ID of the reward epoch where the reward was accrued. amount uint256 Amount of rewarded native tokens (wei).","title":"RewardClaimed"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_rewardclaimsenabled","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsEnabled ( uint256 rewardEpochId ) Emitted when reward claims have been enabled. Parameters Type Description rewardEpochId uint256 First claimable reward epoch.","title":"RewardClaimsEnabled"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_rewardclaimsexpired","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsExpired ( uint256 rewardEpochId ) Unclaimed rewards have expired and are now inaccessible. getUnclaimedReward() can be used to retrieve more information. Parameters Type Description rewardEpochId uint256 ID of the reward epoch that has just expired.","title":"RewardClaimsExpired"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_rewardsdistributed","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardsDistributed ( address ftso , uint256 epochId , address [] addresses , uint256 [] rewards ) Emitted every price epoch, when rewards have been distributed to each contributing data provider. Note that rewards are not claimable until the reward epoch finishes. Parameters Type Description ftso address Address of the FTSO that generated the rewards. epochId uint256 ID of the reward epoch where the rewards were accrued. addresses address[] Data provider addresses that have rewards to claim. rewards uint256[] Amounts available for claiming (wei).","title":"RewardsDistributed"},{"location":"apis/smart-contracts/IFtsoRewardManager/#ev_unearnedrewardsaccrued","text":"Defined in IFtsoRewardManager ( Docs , Source ). event UnearnedRewardsAccrued ( uint256 epochId , uint256 reward ) Emitted when rewards cannot be distributed during a reward epoch (for example, because the FTSO went into fallback mode) and they are accrued for later burning. Parameters Type Description epochId uint256 ID of the reward epoch where the reward was accrued. reward uint256 Total amount of accrued rewards (wei).","title":"UnearnedRewardsAccrued"},{"location":"apis/smart-contracts/IFtsoRewardManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_active_02fb0c5e","text":"Defined in IFtsoRewardManager ( Docs , Source ). function active ( ) external view returns ( bool ); Whether rewards can be claimed from this reward manager.","title":"active"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_autoclaim_8dc305fa","text":"Defined in IFtsoRewardManager ( Docs , Source ). function autoClaim ( address [] _rewardOwners , uint256 _rewardEpoch ) external ; Allows claiming rewards simultaneously for a list of reward owners and all unclaimed epochs before the specified one. This is meant as a convenience all-in-one reward claiming method to be used both by reward owners and registered executors . It performs a series of operations, besides claiming rewards: If a reward owner has enabled its Personal Delegation Account , rewards are also claimed for the PDA and the total claimed amount is sent to that PDA. Otherwise, the claimed amount is sent to the reward owner's account. Claimed amount is automatically wrapped through the WNat contract. If the caller is a registered executor with a non-zero fee, the fee is paid to the executor for each claimed address. Parameters Type Description _rewardOwners address[] List of reward owners to claim for. _rewardEpoch uint256 Last reward epoch ID to claim for. All previous epochs with pending rewards will be claimed too.","title":"autoClaim"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_claim_b2c12192","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claim ( address _rewardOwner , address payable _recipient , uint256 _rewardEpoch , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by percentage. Reverts if msg.sender is delegating by amount. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpoch uint256 Last reward epoch to claim for. All previous epochs with pending rewards will be claimed too. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claim"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_claimfromdataproviders_21bb25af","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claimFromDataProviders ( address _rewardOwner , address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner from specific data providers. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by amount (explicit delegation). Reverts if msg.sender is delegating by percentage. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpochs uint256[] Array of reward epoch IDs to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claimFromDataProviders"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_claimreward_b2af870a","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claimReward ( address payable _recipient , uint256 [] _rewardEpochs ) external returns ( uint256 _rewardAmount ); Allows a percentage delegator to claim rewards. This function is intended to be used to claim rewards in case of delegation by percentage. This function is deprecated : use claim instead. Reverts if msg.sender is delegating by amount. Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'. Retained for backward compatibility. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. Returns Type Description _rewardAmount uint256 Amount of total claimed rewards (wei).","title":"claimReward"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_claimrewardfromdataproviders_d20bb542","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claimRewardFromDataProviders ( address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards from specific data providers. This function is intended to be used to claim rewards in case of delegation by amount. This function is deprecated : use claimFromDataProviders instead. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claimRewardFromDataProviders"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getclaimedreward_85b4c538","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getClaimedReward ( uint256 _rewardEpoch , address _dataProvider , address _claimer ) external view returns ( bool _claimed , uint256 _amount ); Returns information on the rewards accrued by a reward owner from a specific data provider at a specific reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID to query. _dataProvider address Address of the data provider to query. _claimer address Address of the reward owner to query. Returns Type Description _claimed bool Whether the reward has been claimed or not. _amount uint256 Accrued amount in wei.","title":"getClaimedReward"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getcurrentrewardepoch_e7c830d4","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns the current reward epoch ID.","title":"getCurrentRewardEpoch"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getdataprovidercurrentfeepercentage_cfbcd25f","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 _feePercentageBIPS ); Returns the current fee percentage of a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS.","title":"getDataProviderCurrentFeePercentage"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getdataproviderfeepercentage_961c00ed","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderFeePercentage ( address _dataProvider , uint256 _rewardEpoch ) external view returns ( uint256 _feePercentageBIPS ); Returns the fee percentage of a data provider at a given reward epoch. Parameters Type Description _dataProvider address Address of the queried data provider. _rewardEpoch uint256 Reward epoch ID. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS.","title":"getDataProviderFeePercentage"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getdataproviderperformanceinfo_eb82dd7f","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderPerformanceInfo ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _rewardAmount , uint256 _votePowerIgnoringRevocation ); Returns information on rewards and vote power of a data provider at a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. _dataProvider address Address of the data provider to query. Returns Type Description _rewardAmount uint256 Amount of rewards (wei). _votePowerIgnoringRevocation uint256 Vote power, not including revocations.","title":"getDataProviderPerformanceInfo"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getdataproviderscheduledfeepercentagechanges_33b7971e","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] _feePercentageBIPS , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the scheduled fee percentage changes for a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256[] Array of fee percentages in BIPS. _validFromEpoch uint256[] Array of block numbers from which the fee settings are effective. _fixed bool[] Array of boolean values indicating whether settings are subject to change or not.","title":"getDataProviderScheduledFeePercentageChanges"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getepochreward_d418634a","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getEpochReward ( uint256 _rewardEpoch ) external view returns ( uint256 _totalReward , uint256 _claimedReward ); Returns information on an epoch's rewards. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. Returns Type Description _totalReward uint256 Total amount of rewards accrued on that epoch, in wei. _claimedReward uint256 Total amount of rewards that have already been claimed, in wei.","title":"getEpochReward"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getepochswithclaimablerewards_0441218e","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithClaimableRewards ( ) external view returns ( uint256 _startEpochId , uint256 _endEpochId ); Returns the reward epoch range for which rewards can be claimed. Rewards outside this range are unclaimable, either because they have expired or because the reward epoch is still ongoing. Returns Type Description _startEpochId uint256 The oldest epoch ID that allows reward claiming. _endEpochId uint256 The newest epoch ID that allows reward claiming.","title":"getEpochsWithClaimableRewards"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getepochswithunclaimedrewards_b4a2043d","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view returns ( uint256 [] _epochIds ); Returns the array of claimable epoch IDs for which the rewards of a reward owner have not yet been claimed. Parameters Type Description _beneficiary address Address of the reward owner to query. Reverts if it uses delegation by amount. Returns Type Description _epochIds uint256[] Array of epoch IDs.","title":"getEpochsWithUnclaimedRewards"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getinitialrewardepoch_3123b7d8","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getInitialRewardEpoch ( ) external view returns ( uint256 ); Returns the initial reward epoch ID for this reward manager contract. This corresponds to the oldest reward epoch with claimable rewards in the previous reward manager when this one took over. Set by governance through setInitialRewardData .","title":"getInitialRewardEpoch"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getrewardepochtoexpirenext_3e7ff857","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Returns the reward epoch that will expire next once a new reward epoch starts.","title":"getRewardEpochToExpireNext"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getrewardepochvotepowerblock_f2edab5a","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block of a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID.","title":"getRewardEpochVotePowerBlock"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getstateofrewards_a4472c10","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] _dataProviders , uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address at a specific reward epoch. Parameters Type Description _beneficiary address Address of the beneficiary to query. It can be a data provider or a delegator, for example. Reverts if the queried address is delegating by amount. _rewardEpoch uint256 Reward epoch ID to query. Returns Type Description _dataProviders address[] Array of addresses of data providers. _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not.","title":"getStateOfRewards"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_getstateofrewardsfromdataproviders_e416b7e1","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] _dataProviders ) external view returns ( uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address coming from a specific set of data providers, at a specific reward epoch. Parameters Type Description _beneficiary address Address of beneficiary to query. _rewardEpoch uint256 Reward epoch ID to query. _dataProviders address[] Array of addresses of the data providers to query. Returns Type Description _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not.","title":"getStateOfRewardsFromDataProviders"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_nextclaimablerewardepoch_69b91b59","text":"Defined in IFtsoRewardManager ( Docs , Source ). function nextClaimableRewardEpoch ( address _rewardOwner ) external view returns ( uint256 ); Returns the next claimable reward epoch for a reward owner. Parameters Type Description _rewardOwner address Address of the reward owner to query.","title":"nextClaimableRewardEpoch"},{"location":"apis/smart-contracts/IFtsoRewardManager/#fn_setdataproviderfeepercentage_16e69328","text":"Defined in IFtsoRewardManager ( Docs , Source ). function setDataProviderFeePercentage ( uint256 _feePercentageBIPS ) external returns ( uint256 _validFromEpoch ); Sets the fee a data provider keeps from all delegations. Takes effect after feeValueUpdateOffset reward epochs have elapsed. When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. Returns Type Description _validFromEpoch uint256 Reward epoch number when the new fee percentage will become effective.","title":"setDataProviderFeePercentage"},{"location":"apis/smart-contracts/IGovernanceSettings/","text":"IGovernanceSettings # Source Interface for the GovernanceSettings that hold the Flare governance address and its timelock. All governance calls are delayed by the timelock specified in this contract. NOTE : This contract enables updating the governance address and timelock only by hard-forking the network, meaning only by updating validator code. Functions # getExecutors # Defined in IGovernanceSettings ( Docs , Source ). function getExecutors ( ) external view returns ( address [] _addresses ); Gets the addresses of the accounts that are allowed to execute the timelocked governance calls, once the timelock period expires. Executors can be changed without a hard fork, via a normal governance call. Returns Type Description _addresses address[] Array of executor addresses. getGovernanceAddress # Defined in IGovernanceSettings ( Docs , Source ). function getGovernanceAddress ( ) external view returns ( address _address ); Gets the governance account address. The governance address can only be changed by a hard fork. Returns Type Description _address address The governance account address. getTimelock # Defined in IGovernanceSettings ( Docs , Source ). function getTimelock ( ) external view returns ( uint256 _timelock ); Gets the time in seconds that must pass between a governance call and its execution. The timelock value can only be changed by a hard fork. Returns Type Description _timelock uint256 Time in seconds that passes between the governance call and execution. isExecutor # Defined in IGovernanceSettings ( Docs , Source ). function isExecutor ( address _address ) external view returns ( bool ); Checks whether an address is one of the allowed executors. See getExecutors . Parameters Type Description _address address The address to check. Returns Type Description [0] bool True if _address is in the executors list.","title":"IGovernanceSettings"},{"location":"apis/smart-contracts/IGovernanceSettings/#ct_igovernancesettings","text":"Source Interface for the GovernanceSettings that hold the Flare governance address and its timelock. All governance calls are delayed by the timelock specified in this contract. NOTE : This contract enables updating the governance address and timelock only by hard-forking the network, meaning only by updating validator code.","title":"IGovernanceSettings"},{"location":"apis/smart-contracts/IGovernanceSettings/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IGovernanceSettings/#fn_getexecutors_ef09e78f","text":"Defined in IGovernanceSettings ( Docs , Source ). function getExecutors ( ) external view returns ( address [] _addresses ); Gets the addresses of the accounts that are allowed to execute the timelocked governance calls, once the timelock period expires. Executors can be changed without a hard fork, via a normal governance call. Returns Type Description _addresses address[] Array of executor addresses.","title":"getExecutors"},{"location":"apis/smart-contracts/IGovernanceSettings/#fn_getgovernanceaddress_73252494","text":"Defined in IGovernanceSettings ( Docs , Source ). function getGovernanceAddress ( ) external view returns ( address _address ); Gets the governance account address. The governance address can only be changed by a hard fork. Returns Type Description _address address The governance account address.","title":"getGovernanceAddress"},{"location":"apis/smart-contracts/IGovernanceSettings/#fn_gettimelock_6221a54b","text":"Defined in IGovernanceSettings ( Docs , Source ). function getTimelock ( ) external view returns ( uint256 _timelock ); Gets the time in seconds that must pass between a governance call and its execution. The timelock value can only be changed by a hard fork. Returns Type Description _timelock uint256 Time in seconds that passes between the governance call and execution.","title":"getTimelock"},{"location":"apis/smart-contracts/IGovernanceSettings/#fn_isexecutor_debfda30","text":"Defined in IGovernanceSettings ( Docs , Source ). function isExecutor ( address _address ) external view returns ( bool ); Checks whether an address is one of the allowed executors. See getExecutors . Parameters Type Description _address address The address to check. Returns Type Description [0] bool True if _address is in the executors list.","title":"isExecutor"},{"location":"apis/smart-contracts/IGovernanceVotePower/","text":"IGovernanceVotePower # Source Interface for contracts delegating their governance vote power. Functions # delegate # Defined in IGovernanceVotePower ( Docs , Source ). function delegate ( address _to ) external ; Delegates all governance vote power of msg.sender to address _to . Parameters Type Description _to address The address of the recipient. getDelegateOfAt # Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAt ( address _who , uint256 _blockNumber ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at a given block number. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the address. Returns Type Description [0] address Address where _who was delegating its governance vote power at block _blockNumber . getDelegateOfAtNow # Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAtNow ( address _who ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at the latest block number. Parameters Type Description _who address The address being queried. Returns Type Description [0] address Address where _who is currently delegating its governance vote power. getVotes # Defined in IGovernanceVotePower ( Docs , Source ). function getVotes ( address _who ) external view returns ( uint256 ); Gets the governance vote power of an address at the latest block, including all delegations made to it. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Governance vote power of account at the lastest block. undelegate # Defined in IGovernanceVotePower ( Docs , Source ). function undelegate ( ) external ; Undelegates all governance vote power of msg.sender . votePowerOfAt # Defined in IGovernanceVotePower ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Gets the governance vote power of an address at a given block number, including all delegations made to it. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the vote power. Returns Type Description [0] uint256 Governance vote power of _who at _blockNumber .","title":"IGovernanceVotePower"},{"location":"apis/smart-contracts/IGovernanceVotePower/#ct_igovernancevotepower","text":"Source Interface for contracts delegating their governance vote power.","title":"IGovernanceVotePower"},{"location":"apis/smart-contracts/IGovernanceVotePower/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IGovernanceVotePower/#fn_delegate_5c19a95c","text":"Defined in IGovernanceVotePower ( Docs , Source ). function delegate ( address _to ) external ; Delegates all governance vote power of msg.sender to address _to . Parameters Type Description _to address The address of the recipient.","title":"delegate"},{"location":"apis/smart-contracts/IGovernanceVotePower/#fn_getdelegateofat_3c028e9d","text":"Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAt ( address _who , uint256 _blockNumber ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at a given block number. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the address. Returns Type Description [0] address Address where _who was delegating its governance vote power at block _blockNumber .","title":"getDelegateOfAt"},{"location":"apis/smart-contracts/IGovernanceVotePower/#fn_getdelegateofatnow_b3e871ee","text":"Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAtNow ( address _who ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at the latest block number. Parameters Type Description _who address The address being queried. Returns Type Description [0] address Address where _who is currently delegating its governance vote power.","title":"getDelegateOfAtNow"},{"location":"apis/smart-contracts/IGovernanceVotePower/#fn_getvotes_9ab24eb0","text":"Defined in IGovernanceVotePower ( Docs , Source ). function getVotes ( address _who ) external view returns ( uint256 ); Gets the governance vote power of an address at the latest block, including all delegations made to it. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Governance vote power of account at the lastest block.","title":"getVotes"},{"location":"apis/smart-contracts/IGovernanceVotePower/#fn_undelegate_92ab89bb","text":"Defined in IGovernanceVotePower ( Docs , Source ). function undelegate ( ) external ; Undelegates all governance vote power of msg.sender .","title":"undelegate"},{"location":"apis/smart-contracts/IGovernanceVotePower/#fn_votepowerofat_92bfe6d8","text":"Defined in IGovernanceVotePower ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Gets the governance vote power of an address at a given block number, including all delegations made to it. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the vote power. Returns Type Description [0] uint256 Governance vote power of _who at _blockNumber .","title":"votePowerOfAt"},{"location":"apis/smart-contracts/IIAddressUpdatable/","text":"IIAddressUpdatable # Source Internal interface for contracts that depend on other contracts whose addresses can change. See AddressUpdatable . Functions # updateContractAddresses # Defined in IIAddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; Updates contract addresses. Can only be called from the AddressUpdater contract typically set at construction time. Parameters Type Description _contractNameHashes bytes32[] List of keccak256(abi.encode(...)) contract names. _contractAddresses address[] List of contract addresses corresponding to the contract names.","title":"IIAddressUpdatable"},{"location":"apis/smart-contracts/IIAddressUpdatable/#ct_iiaddressupdatable","text":"Source Internal interface for contracts that depend on other contracts whose addresses can change. See AddressUpdatable .","title":"IIAddressUpdatable"},{"location":"apis/smart-contracts/IIAddressUpdatable/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIAddressUpdatable/#fn_updatecontractaddresses_b00c0b76","text":"Defined in IIAddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; Updates contract addresses. Can only be called from the AddressUpdater contract typically set at construction time. Parameters Type Description _contractNameHashes bytes32[] List of keccak256(abi.encode(...)) contract names. _contractAddresses address[] List of contract addresses corresponding to the contract names.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/IIAddressUpdater/","text":"IIAddressUpdater # Source Internal interface for AddressUpdater . Functions # getContractAddress # Defined in IIAddressUpdater ( Docs , Source ). function getContractAddress ( string _name ) external view returns ( address ); Returns contract address for the given name, which might be address(0). Parameters Type Description _name string Name of the contract to query. Returns Type Description [0] address Current address for the queried contract. getContractAddressByHash # Defined in IIAddressUpdater ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns contract address for the given name hash, which might be address(0). Parameters Type Description _nameHash bytes32 Hash of the contract name: keccak256(abi.encode(name)) Returns Type Description [0] address Current address for the queried contract. getContractAddresses # Defined in IIAddressUpdater ( Docs , Source ). function getContractAddresses ( string [] _names ) external view returns ( address []); Returns contract addresses for the given names, which might be address(0). Parameters Type Description _names string[] Names of the contracts to query. Returns Type Description [0] address[] Current addresses for the queried contracts. getContractAddressesByHash # Defined in IIAddressUpdater ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns contract addresses for the given name hashes, which might be address(0). Parameters Type Description _nameHashes bytes32[] Hashes of the contract names: keccak256(abi.encode(name)) Returns Type Description [0] address[] Current addresses for the queried contracts. getContractNamesAndAddresses # Defined in IIAddressUpdater ( Docs , Source ). function getContractNamesAndAddresses ( ) external view returns ( string [] _contractNames , address [] _contractAddresses ); Returns all contract names and corresponding addresses currently being tracked. Returns Type Description _contractNames string[] Array of contract names. _contractAddresses address[] Array of contract addresses.","title":"IIAddressUpdater"},{"location":"apis/smart-contracts/IIAddressUpdater/#ct_iiaddressupdater","text":"Source Internal interface for AddressUpdater .","title":"IIAddressUpdater"},{"location":"apis/smart-contracts/IIAddressUpdater/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIAddressUpdater/#fn_getcontractaddress_04433bbc","text":"Defined in IIAddressUpdater ( Docs , Source ). function getContractAddress ( string _name ) external view returns ( address ); Returns contract address for the given name, which might be address(0). Parameters Type Description _name string Name of the contract to query. Returns Type Description [0] address Current address for the queried contract.","title":"getContractAddress"},{"location":"apis/smart-contracts/IIAddressUpdater/#fn_getcontractaddressbyhash_159354a2","text":"Defined in IIAddressUpdater ( Docs , Source ). function getContractAddressByHash ( bytes32 _nameHash ) external view returns ( address ); Returns contract address for the given name hash, which might be address(0). Parameters Type Description _nameHash bytes32 Hash of the contract name: keccak256(abi.encode(name)) Returns Type Description [0] address Current address for the queried contract.","title":"getContractAddressByHash"},{"location":"apis/smart-contracts/IIAddressUpdater/#fn_getcontractaddresses_ee6f63c3","text":"Defined in IIAddressUpdater ( Docs , Source ). function getContractAddresses ( string [] _names ) external view returns ( address []); Returns contract addresses for the given names, which might be address(0). Parameters Type Description _names string[] Names of the contracts to query. Returns Type Description [0] address[] Current addresses for the queried contracts.","title":"getContractAddresses"},{"location":"apis/smart-contracts/IIAddressUpdater/#fn_getcontractaddressesbyhash_5e11e2d1","text":"Defined in IIAddressUpdater ( Docs , Source ). function getContractAddressesByHash ( bytes32 [] _nameHashes ) external view returns ( address []); Returns contract addresses for the given name hashes, which might be address(0). Parameters Type Description _nameHashes bytes32[] Hashes of the contract names: keccak256(abi.encode(name)) Returns Type Description [0] address[] Current addresses for the queried contracts.","title":"getContractAddressesByHash"},{"location":"apis/smart-contracts/IIAddressUpdater/#fn_getcontractnamesandaddresses_2f26c5c3","text":"Defined in IIAddressUpdater ( Docs , Source ). function getContractNamesAndAddresses ( ) external view returns ( string [] _contractNames , address [] _contractAddresses ); Returns all contract names and corresponding addresses currently being tracked. Returns Type Description _contractNames string[] Array of contract names. _contractAddresses address[] Array of contract addresses.","title":"getContractNamesAndAddresses"},{"location":"apis/smart-contracts/IIClaimSetupManager/","text":"IIClaimSetupManager # Source | Inherits from IClaimSetupManager Internal interface for the ClaimSetupManager contract. Events # AllowedClaimRecipientsChanged # Defined in IClaimSetupManager ( Docs , Source ). event AllowedClaimRecipientsChanged ( address owner , address [] recipients ) ClaimExecutorFeeValueChanged # Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorFeeValueChanged ( address executor , uint256 validFromRewardEpoch , uint256 feeValueWei ) ClaimExecutorsChanged # Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorsChanged ( address owner , address [] executors ) DelegationAccountCreated # Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountCreated ( address owner , contract IDelegationAccount delegationAccount ) DelegationAccountUpdated # Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountUpdated ( address owner , contract IDelegationAccount delegationAccount , bool enabled ) ExecutorRegistered # Defined in IClaimSetupManager ( Docs , Source ). event ExecutorRegistered ( address executor ) ExecutorUnregistered # Defined in IClaimSetupManager ( Docs , Source ). event ExecutorUnregistered ( address executor , uint256 validFromRewardEpoch ) MaxFeeSet # Defined in IClaimSetupManager ( Docs , Source ). event MaxFeeSet ( uint256 maxFeeValueWei ) MinFeeSet # Defined in IClaimSetupManager ( Docs , Source ). event MinFeeSet ( uint256 minFeeValueWei ) RegisterExecutorFeeSet # Defined in IClaimSetupManager ( Docs , Source ). event RegisterExecutorFeeSet ( uint256 registerExecutorFeeValueWei ) SetExecutorsExcessAmountRefunded # Defined in IClaimSetupManager ( Docs , Source ). event SetExecutorsExcessAmountRefunded ( address owner , uint256 excessAmount ) SetLibraryAddress # Defined in IIClaimSetupManager ( Docs , Source ). event SetLibraryAddress ( address libraryAddress ) Emitted when the libraryAddress has been set. Functions # accountToDelegationAccount # Defined in IClaimSetupManager ( Docs , Source ). function accountToDelegationAccount ( address _owner ) external view returns ( address ); Gets the PDA of an account. Parameters Type Description _owner address Account to query. Returns Type Description [0] address Address of its PDA or address(0) if it has not been created yet. allowedClaimRecipients # Defined in IClaimSetupManager ( Docs , Source ). function allowedClaimRecipients ( address _rewardOwner ) external view returns ( address []); Gets the addresses of recipients allowed to receive rewards on behalf of an account. Beside these, the owner of the rewards is always authorized. See setAllowedClaimRecipients . Parameters Type Description _rewardOwner address The account to query. Returns Type Description [0] address[] Addresses of all set authorized recipients. batchDelegate # Defined in IClaimSetupManager ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegates all percentage delegations from the caller's PDA and then delegate to a list of accounts. See delegate . Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentage of voting power to be delegated to each delegatee, expressed in basis points (1/100 of one percent). Total of all _bips values must be lower than 10000. checkExecutorAndAllowedRecipient # Defined in IIClaimSetupManager ( Docs , Source ). function checkExecutorAndAllowedRecipient ( address _executor , address _owner , address _recipient ) external view ; Checks if an executor can claim on behalf of a given account and send funds to a given recipient address. Reverts if claiming is not possible, does nothing otherwise. Parameters Type Description _executor address The executor to query. _owner address The reward owner to query. _recipient address The address where the reward would be sent. claimExecutors # Defined in IClaimSetupManager ( Docs , Source ). function claimExecutors ( address _owner ) external view returns ( address []); Gets the addresses of executors authorized to claim for an account. See setClaimExecutors . Parameters Type Description _owner address The account to query. Returns Type Description [0] address[] Addresses of all set executors. delegate # Defined in IClaimSetupManager ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegates a percentage of the caller's PDA 's voting power to another address. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: Every call resets the delegation value. A value of 0 revokes delegation. delegateGovernance # Defined in IClaimSetupManager ( Docs , Source ). function delegateGovernance ( address _to ) external ; Delegates all the governance vote power of the caller's PDA to another account. Parameters Type Description _to address Address of the recipient of the delegation. disableDelegationAccount # Defined in IClaimSetupManager ( Docs , Source ). function disableDelegationAccount ( ) external ; Disables the Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the owner's account. Rewards accrued by the PDA will no longer be automatically claimed. Reverts if there is no PDA. enableDelegationAccount # Defined in IClaimSetupManager ( Docs , Source ). function enableDelegationAccount ( ) external returns ( contract IDelegationAccount ); Enables (or creates) a Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the PDA, and any rewards accrued by the PDA will be claimed too. Returns Type Description [0] contract IDelegationAccount Address of the delegation account contract. getAutoClaimAddressesAndExecutorFee # Defined in IIClaimSetupManager ( Docs , Source ). function getAutoClaimAddressesAndExecutorFee ( address _executor , address [] _owners ) external view returns ( address [] _recipients , uint256 _executorFeeValue ); Gets the Personal Delegation Account (PDA) for a list of accounts for which an executor is claiming. Returns owner address instead if the PDA is not created yet or not enabled. Parameters Type Description _executor address Executor to query. _owners address[] Array of reward owners which must have set _executor as their executor. Returns Type Description _recipients address[] Addresses which will receive the claimed rewards. Can be the reward owners or their PDAs. _executorFeeValue uint256 Executor's fee value, in wei. getDelegationAccountData # Defined in IClaimSetupManager ( Docs , Source ). function getDelegationAccountData ( address _owner ) external view returns ( contract IDelegationAccount _delegationAccount , bool _enabled ); Gets PDA data for an account. Parameters Type Description _owner address Account to query. Returns Type Description _delegationAccount contract IDelegationAccount Account's PDA address or address(0) if it has not been created yet. _enabled bool Whether the PDA is enabled. getExecutorCurrentFeeValue # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorCurrentFeeValue ( address _executor ) external view returns ( uint256 ); Returns the current fee of a registered executor. Reverts if the executor is not registered. Parameters Type Description _executor address The executor to query. Returns Type Description [0] uint256 Fee in wei. getExecutorFeeValue # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorFeeValue ( address _executor , uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the fee of an executor at a given reward epoch. Parameters Type Description _executor address The executor to query. _rewardEpoch uint256 Reward Epoch ID to query. Returns Type Description [0] uint256 Fee in wei at that reward epoch. getExecutorInfo # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorInfo ( address _executor ) external view returns ( bool _registered , uint256 _currentFeeValue ); Returns information about an executor. Parameters Type Description _executor address The executor to query. Returns Type Description _registered bool Whether the executor is registered. _currentFeeValue uint256 Executor's current fee value, if registered. getExecutorScheduledFeeValueChanges # Defined in IClaimSetupManager ( Docs , Source ). function getExecutorScheduledFeeValueChanges ( address _executor ) external view returns ( uint256 [] _feeValue , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the currently scheduled fee changes of an executor. Parameters Type Description _executor address Executor to query. Returns Type Description _feeValue uint256[] Array of scheduled fees. _validFromEpoch uint256[] Array of reward epochs ID where the scheduled fees will become effective. _fixed bool[] Array of booleans indicating if an scheduled fee change is fixed or it might still be changed. getRegisteredExecutors # Defined in IClaimSetupManager ( Docs , Source ). function getRegisteredExecutors ( uint256 _start , uint256 _end ) external view returns ( address [] _registeredExecutors , uint256 _totalLength ); Returns the list of executors registered through registerExecutor . Supports paging. Parameters Type Description _start uint256 First executor to return. _end uint256 Last executor to return. Returns Type Description _registeredExecutors address[] Addresses of the registered executors. _totalLength uint256 Total amount of executors. isClaimExecutor # Defined in IClaimSetupManager ( Docs , Source ). function isClaimExecutor ( address _owner , address _executor ) external view returns ( bool ); Returns whether an executor is authorized to claim on behalf of a reward owner. See setClaimExecutors . Parameters Type Description _owner address The reward owner to query. _executor address The executor to query. registerExecutor # Defined in IClaimSetupManager ( Docs , Source ). function registerExecutor ( uint256 _feeValue ) external payable returns ( uint256 ); Registers the caller as an executor and sets its initial fee value. If the executor was already registered, this method only updates the fee, which will take effect after feeValueUpdateOffset reward epochs have elapsed. Executor must pay a fee in order to register. See registerExecutorFeeValueWei . Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective. revokeDelegationAt # Defined in IClaimSetupManager ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revokes all delegation from the caller's PDA to a given account at a given block. Only affects the reads via votePowerOfAtCached() in the specified block. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate with percentage of 0 or undelegateAll . Parameters Type Description _who address The account to revoke. _blockNumber uint256 Block number where the revoking will take place. Must be in the past. setAllowedClaimRecipients # Defined in IClaimSetupManager ( Docs , Source ). function setAllowedClaimRecipients ( address [] _recipients ) external ; Set the addresses of allowed recipients. The reward owner is always an allowed recipient. Parameters Type Description _recipients address[] The new allowed recipients. All old recipients will be deleted and replaced by these. setAutoClaiming # Defined in IClaimSetupManager ( Docs , Source ). function setAutoClaiming ( address [] _executors , bool _enableDelegationAccount ) external payable ; Sets the addresses of executors and optionally enables (creates) a Personal Delegation Account (PDA). If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. _enableDelegationAccount bool Whether the PDA should be enabled. setClaimExecutors # Defined in IClaimSetupManager ( Docs , Source ). function setClaimExecutors ( address [] _executors ) external payable ; Sets the addresses of executors. If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. setLibraryAddress # Defined in IIClaimSetupManager ( Docs , Source ). function setLibraryAddress ( address _libraryAddress ) external ; Sets new library address. setMaxFeeValueWei # Defined in IIClaimSetupManager ( Docs , Source ). function setMaxFeeValueWei ( uint256 _maxFeeValueWei ) external ; Sets maximum fee allowed for executors, in wei. setMinFeeValueWei # Defined in IIClaimSetupManager ( Docs , Source ). function setMinFeeValueWei ( uint256 _minFeeValueWei ) external ; Sets minimum fee allowed for executors, in wei. setRegisterExecutorFeeValueWei # Defined in IIClaimSetupManager ( Docs , Source ). function setRegisterExecutorFeeValueWei ( uint256 _registerExecutorFeeValueWei ) external ; Sets the fee required to register an executor, which must be higher than 0. transferExternalToken # Defined in IClaimSetupManager ( Docs , Source ). function transferExternalToken ( contract IERC20 _token , uint256 _amount ) external ; Allows the caller to transfer ERC-20 tokens from their PDA to the owner account. The main use case is to move ERC-20 tokes received by mistake (by an airdrop, for example) out of the PDA and into the main account, where they can be more easily managed. Reverts if the target token is the WNat contract: use method withdraw for that. Parameters Type Description _token contract IERC20 Target token contract address. _amount uint256 Amount of tokens to transfer. undelegateAll # Defined in IClaimSetupManager ( Docs , Source ). function undelegateAll ( ) external ; Removes all delegations from the caller's PDA . undelegateGovernance # Defined in IClaimSetupManager ( Docs , Source ). function undelegateGovernance ( ) external ; Undelegates all governance vote power currently delegated by the caller's PDA . unregisterExecutor # Defined in IClaimSetupManager ( Docs , Source ). function unregisterExecutor ( ) external returns ( uint256 ); Unregisters the caller as an executor. Returns Type Description [0] uint256 Reward epoch ID when the change becomes effective. updateExecutorFeeValue # Defined in IClaimSetupManager ( Docs , Source ). function updateExecutorFeeValue ( uint256 _feeValue ) external returns ( uint256 ); Sets the caller's executor fee. The caller must be an executor registered through registerExecutor . When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective. wNat # Defined in IIClaimSetupManager ( Docs , Source ). function wNat ( ) external view returns ( contract WNat ); Returns the WNat contract. withdraw # Defined in IClaimSetupManager ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Allows the caller to transfer WNat wrapped tokens from their PDA to the owner account. Parameters Type Description _amount uint256 Amount of tokens to transfer, in wei.","title":"IIClaimSetupManager"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ct_iiclaimsetupmanager","text":"Source | Inherits from IClaimSetupManager Internal interface for the ClaimSetupManager contract.","title":"IIClaimSetupManager"},{"location":"apis/smart-contracts/IIClaimSetupManager/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_allowedclaimrecipientschanged","text":"Defined in IClaimSetupManager ( Docs , Source ). event AllowedClaimRecipientsChanged ( address owner , address [] recipients )","title":"AllowedClaimRecipientsChanged"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_claimexecutorfeevaluechanged","text":"Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorFeeValueChanged ( address executor , uint256 validFromRewardEpoch , uint256 feeValueWei )","title":"ClaimExecutorFeeValueChanged"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_claimexecutorschanged","text":"Defined in IClaimSetupManager ( Docs , Source ). event ClaimExecutorsChanged ( address owner , address [] executors )","title":"ClaimExecutorsChanged"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_delegationaccountcreated","text":"Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountCreated ( address owner , contract IDelegationAccount delegationAccount )","title":"DelegationAccountCreated"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_delegationaccountupdated","text":"Defined in IClaimSetupManager ( Docs , Source ). event DelegationAccountUpdated ( address owner , contract IDelegationAccount delegationAccount , bool enabled )","title":"DelegationAccountUpdated"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_executorregistered","text":"Defined in IClaimSetupManager ( Docs , Source ). event ExecutorRegistered ( address executor )","title":"ExecutorRegistered"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_executorunregistered","text":"Defined in IClaimSetupManager ( Docs , Source ). event ExecutorUnregistered ( address executor , uint256 validFromRewardEpoch )","title":"ExecutorUnregistered"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_maxfeeset","text":"Defined in IClaimSetupManager ( Docs , Source ). event MaxFeeSet ( uint256 maxFeeValueWei )","title":"MaxFeeSet"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_minfeeset","text":"Defined in IClaimSetupManager ( Docs , Source ). event MinFeeSet ( uint256 minFeeValueWei )","title":"MinFeeSet"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_registerexecutorfeeset","text":"Defined in IClaimSetupManager ( Docs , Source ). event RegisterExecutorFeeSet ( uint256 registerExecutorFeeValueWei )","title":"RegisterExecutorFeeSet"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_setexecutorsexcessamountrefunded","text":"Defined in IClaimSetupManager ( Docs , Source ). event SetExecutorsExcessAmountRefunded ( address owner , uint256 excessAmount )","title":"SetExecutorsExcessAmountRefunded"},{"location":"apis/smart-contracts/IIClaimSetupManager/#ev_setlibraryaddress","text":"Defined in IIClaimSetupManager ( Docs , Source ). event SetLibraryAddress ( address libraryAddress ) Emitted when the libraryAddress has been set.","title":"SetLibraryAddress"},{"location":"apis/smart-contracts/IIClaimSetupManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_accounttodelegationaccount_69ea2387","text":"Defined in IClaimSetupManager ( Docs , Source ). function accountToDelegationAccount ( address _owner ) external view returns ( address ); Gets the PDA of an account. Parameters Type Description _owner address Account to query. Returns Type Description [0] address Address of its PDA or address(0) if it has not been created yet.","title":"accountToDelegationAccount"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_allowedclaimrecipients_dfd14c34","text":"Defined in IClaimSetupManager ( Docs , Source ). function allowedClaimRecipients ( address _rewardOwner ) external view returns ( address []); Gets the addresses of recipients allowed to receive rewards on behalf of an account. Beside these, the owner of the rewards is always authorized. See setAllowedClaimRecipients . Parameters Type Description _rewardOwner address The account to query. Returns Type Description [0] address[] Addresses of all set authorized recipients.","title":"allowedClaimRecipients"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_batchdelegate_dc4fcda7","text":"Defined in IClaimSetupManager ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegates all percentage delegations from the caller's PDA and then delegate to a list of accounts. See delegate . Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentage of voting power to be delegated to each delegatee, expressed in basis points (1/100 of one percent). Total of all _bips values must be lower than 10000.","title":"batchDelegate"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_checkexecutorandallowedrecipient_ce2caa57","text":"Defined in IIClaimSetupManager ( Docs , Source ). function checkExecutorAndAllowedRecipient ( address _executor , address _owner , address _recipient ) external view ; Checks if an executor can claim on behalf of a given account and send funds to a given recipient address. Reverts if claiming is not possible, does nothing otherwise. Parameters Type Description _executor address The executor to query. _owner address The reward owner to query. _recipient address The address where the reward would be sent.","title":"checkExecutorAndAllowedRecipient"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_claimexecutors_3f317fe1","text":"Defined in IClaimSetupManager ( Docs , Source ). function claimExecutors ( address _owner ) external view returns ( address []); Gets the addresses of executors authorized to claim for an account. See setClaimExecutors . Parameters Type Description _owner address The account to query. Returns Type Description [0] address[] Addresses of all set executors.","title":"claimExecutors"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_delegate_026e402b","text":"Defined in IClaimSetupManager ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegates a percentage of the caller's PDA 's voting power to another address. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: Every call resets the delegation value. A value of 0 revokes delegation.","title":"delegate"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_delegategovernance_7a68a508","text":"Defined in IClaimSetupManager ( Docs , Source ). function delegateGovernance ( address _to ) external ; Delegates all the governance vote power of the caller's PDA to another account. Parameters Type Description _to address Address of the recipient of the delegation.","title":"delegateGovernance"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_disabledelegationaccount_2394deb1","text":"Defined in IClaimSetupManager ( Docs , Source ). function disableDelegationAccount ( ) external ; Disables the Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the owner's account. Rewards accrued by the PDA will no longer be automatically claimed. Reverts if there is no PDA.","title":"disableDelegationAccount"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_enabledelegationaccount_f0977215","text":"Defined in IClaimSetupManager ( Docs , Source ). function enableDelegationAccount ( ) external returns ( contract IDelegationAccount ); Enables (or creates) a Personal Delegation Account (PDA). When using automatic claiming, all airdrops and FTSO rewards will be sent to the PDA, and any rewards accrued by the PDA will be claimed too. Returns Type Description [0] contract IDelegationAccount Address of the delegation account contract.","title":"enableDelegationAccount"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_getautoclaimaddressesandexecutorfee_e24883b2","text":"Defined in IIClaimSetupManager ( Docs , Source ). function getAutoClaimAddressesAndExecutorFee ( address _executor , address [] _owners ) external view returns ( address [] _recipients , uint256 _executorFeeValue ); Gets the Personal Delegation Account (PDA) for a list of accounts for which an executor is claiming. Returns owner address instead if the PDA is not created yet or not enabled. Parameters Type Description _executor address Executor to query. _owners address[] Array of reward owners which must have set _executor as their executor. Returns Type Description _recipients address[] Addresses which will receive the claimed rewards. Can be the reward owners or their PDAs. _executorFeeValue uint256 Executor's fee value, in wei.","title":"getAutoClaimAddressesAndExecutorFee"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_getdelegationaccountdata_17a1e3fc","text":"Defined in IClaimSetupManager ( Docs , Source ). function getDelegationAccountData ( address _owner ) external view returns ( contract IDelegationAccount _delegationAccount , bool _enabled ); Gets PDA data for an account. Parameters Type Description _owner address Account to query. Returns Type Description _delegationAccount contract IDelegationAccount Account's PDA address or address(0) if it has not been created yet. _enabled bool Whether the PDA is enabled.","title":"getDelegationAccountData"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_getexecutorcurrentfeevalue_e25547f8","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorCurrentFeeValue ( address _executor ) external view returns ( uint256 ); Returns the current fee of a registered executor. Reverts if the executor is not registered. Parameters Type Description _executor address The executor to query. Returns Type Description [0] uint256 Fee in wei.","title":"getExecutorCurrentFeeValue"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_getexecutorfeevalue_3f8f784c","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorFeeValue ( address _executor , uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the fee of an executor at a given reward epoch. Parameters Type Description _executor address The executor to query. _rewardEpoch uint256 Reward Epoch ID to query. Returns Type Description [0] uint256 Fee in wei at that reward epoch.","title":"getExecutorFeeValue"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_getexecutorinfo_8e28b923","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorInfo ( address _executor ) external view returns ( bool _registered , uint256 _currentFeeValue ); Returns information about an executor. Parameters Type Description _executor address The executor to query. Returns Type Description _registered bool Whether the executor is registered. _currentFeeValue uint256 Executor's current fee value, if registered.","title":"getExecutorInfo"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_getexecutorscheduledfeevaluechanges_950b028c","text":"Defined in IClaimSetupManager ( Docs , Source ). function getExecutorScheduledFeeValueChanges ( address _executor ) external view returns ( uint256 [] _feeValue , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the currently scheduled fee changes of an executor. Parameters Type Description _executor address Executor to query. Returns Type Description _feeValue uint256[] Array of scheduled fees. _validFromEpoch uint256[] Array of reward epochs ID where the scheduled fees will become effective. _fixed bool[] Array of booleans indicating if an scheduled fee change is fixed or it might still be changed.","title":"getExecutorScheduledFeeValueChanges"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_getregisteredexecutors_6e927e61","text":"Defined in IClaimSetupManager ( Docs , Source ). function getRegisteredExecutors ( uint256 _start , uint256 _end ) external view returns ( address [] _registeredExecutors , uint256 _totalLength ); Returns the list of executors registered through registerExecutor . Supports paging. Parameters Type Description _start uint256 First executor to return. _end uint256 Last executor to return. Returns Type Description _registeredExecutors address[] Addresses of the registered executors. _totalLength uint256 Total amount of executors.","title":"getRegisteredExecutors"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_isclaimexecutor_87962abe","text":"Defined in IClaimSetupManager ( Docs , Source ). function isClaimExecutor ( address _owner , address _executor ) external view returns ( bool ); Returns whether an executor is authorized to claim on behalf of a reward owner. See setClaimExecutors . Parameters Type Description _owner address The reward owner to query. _executor address The executor to query.","title":"isClaimExecutor"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_registerexecutor_ccce7e86","text":"Defined in IClaimSetupManager ( Docs , Source ). function registerExecutor ( uint256 _feeValue ) external payable returns ( uint256 ); Registers the caller as an executor and sets its initial fee value. If the executor was already registered, this method only updates the fee, which will take effect after feeValueUpdateOffset reward epochs have elapsed. Executor must pay a fee in order to register. See registerExecutorFeeValueWei . Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective.","title":"registerExecutor"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_revokedelegationat_bbd6fbf8","text":"Defined in IClaimSetupManager ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revokes all delegation from the caller's PDA to a given account at a given block. Only affects the reads via votePowerOfAtCached() in the specified block. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate with percentage of 0 or undelegateAll . Parameters Type Description _who address The account to revoke. _blockNumber uint256 Block number where the revoking will take place. Must be in the past.","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_setallowedclaimrecipients_d2a4ac61","text":"Defined in IClaimSetupManager ( Docs , Source ). function setAllowedClaimRecipients ( address [] _recipients ) external ; Set the addresses of allowed recipients. The reward owner is always an allowed recipient. Parameters Type Description _recipients address[] The new allowed recipients. All old recipients will be deleted and replaced by these.","title":"setAllowedClaimRecipients"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_setautoclaiming_e72dcdbb","text":"Defined in IClaimSetupManager ( Docs , Source ). function setAutoClaiming ( address [] _executors , bool _enableDelegationAccount ) external payable ; Sets the addresses of executors and optionally enables (creates) a Personal Delegation Account (PDA). If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these. _enableDelegationAccount bool Whether the PDA should be enabled.","title":"setAutoClaiming"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_setclaimexecutors_9119c494","text":"Defined in IClaimSetupManager ( Docs , Source ). function setClaimExecutors ( address [] _executors ) external payable ; Sets the addresses of executors. If any of the executors is a registered executor, some fee needs to be paid. Parameters Type Description _executors address[] The new executors. All old executors will be deleted and replaced by these.","title":"setClaimExecutors"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_setlibraryaddress_4863ba17","text":"Defined in IIClaimSetupManager ( Docs , Source ). function setLibraryAddress ( address _libraryAddress ) external ; Sets new library address.","title":"setLibraryAddress"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_setmaxfeevaluewei_2e9b6afa","text":"Defined in IIClaimSetupManager ( Docs , Source ). function setMaxFeeValueWei ( uint256 _maxFeeValueWei ) external ; Sets maximum fee allowed for executors, in wei.","title":"setMaxFeeValueWei"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_setminfeevaluewei_d8343550","text":"Defined in IIClaimSetupManager ( Docs , Source ). function setMinFeeValueWei ( uint256 _minFeeValueWei ) external ; Sets minimum fee allowed for executors, in wei.","title":"setMinFeeValueWei"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_setregisterexecutorfeevaluewei_869d90a5","text":"Defined in IIClaimSetupManager ( Docs , Source ). function setRegisterExecutorFeeValueWei ( uint256 _registerExecutorFeeValueWei ) external ; Sets the fee required to register an executor, which must be higher than 0.","title":"setRegisterExecutorFeeValueWei"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_transferexternaltoken_489a8a47","text":"Defined in IClaimSetupManager ( Docs , Source ). function transferExternalToken ( contract IERC20 _token , uint256 _amount ) external ; Allows the caller to transfer ERC-20 tokens from their PDA to the owner account. The main use case is to move ERC-20 tokes received by mistake (by an airdrop, for example) out of the PDA and into the main account, where they can be more easily managed. Reverts if the target token is the WNat contract: use method withdraw for that. Parameters Type Description _token contract IERC20 Target token contract address. _amount uint256 Amount of tokens to transfer.","title":"transferExternalToken"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_undelegateall_b302f393","text":"Defined in IClaimSetupManager ( Docs , Source ). function undelegateAll ( ) external ; Removes all delegations from the caller's PDA .","title":"undelegateAll"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_undelegategovernance_87a2a0dc","text":"Defined in IClaimSetupManager ( Docs , Source ). function undelegateGovernance ( ) external ; Undelegates all governance vote power currently delegated by the caller's PDA .","title":"undelegateGovernance"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_unregisterexecutor_868a660f","text":"Defined in IClaimSetupManager ( Docs , Source ). function unregisterExecutor ( ) external returns ( uint256 ); Unregisters the caller as an executor. Returns Type Description [0] uint256 Reward epoch ID when the change becomes effective.","title":"unregisterExecutor"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_updateexecutorfeevalue_831f16af","text":"Defined in IClaimSetupManager ( Docs , Source ). function updateExecutorFeeValue ( uint256 _feeValue ) external returns ( uint256 ); Sets the caller's executor fee. The caller must be an executor registered through registerExecutor . When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feeValue uint256 Desired fee, in wei. Must be between minFeeValueWei and maxFeeValueWei . 0 means no fee. Returns Type Description [0] uint256 Reward epoch ID when the changes become effective.","title":"updateExecutorFeeValue"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_wnat_9edbf007","text":"Defined in IIClaimSetupManager ( Docs , Source ). function wNat ( ) external view returns ( contract WNat ); Returns the WNat contract.","title":"wNat"},{"location":"apis/smart-contracts/IIClaimSetupManager/#fn_withdraw_2e1a7d4d","text":"Defined in IClaimSetupManager ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Allows the caller to transfer WNat wrapped tokens from their PDA to the owner account. Parameters Type Description _amount uint256 Amount of tokens to transfer, in wei.","title":"withdraw"},{"location":"apis/smart-contracts/IICleanable/","text":"IICleanable # Source Internal interface for entities that can have their block history cleaned. Functions # cleanupBlockNumber # Defined in IICleanable ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. setCleanerContract # Defined in IICleanable ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in IICleanable ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"IICleanable"},{"location":"apis/smart-contracts/IICleanable/#ct_iicleanable","text":"Source Internal interface for entities that can have their block history cleaned.","title":"IICleanable"},{"location":"apis/smart-contracts/IICleanable/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IICleanable/#fn_cleanupblocknumber_deea13e7","text":"Defined in IICleanable ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"cleanupBlockNumber"},{"location":"apis/smart-contracts/IICleanable/#fn_setcleanercontract_f6a494af","text":"Defined in IICleanable ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/IICleanable/#fn_setcleanupblocknumber_13de97f5","text":"Defined in IICleanable ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/IIFtso/","text":"IIFtso # Source | Inherits from IFtso , IFtsoGenesis Internal interface for each of the FTSO contracts that handles an asset. Read the FTSO documentation page for general information about the FTSO system. Functions # activateFtso # Defined in IIFtso ( Docs , Source ). function activateFtso ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ) external ; Initializes FTSO immutable settings and activates the contract. Parameters Type Description _firstEpochStartTs uint256 Timestamp of the first epoch in seconds from UNIX epoch. _submitPeriodSeconds uint256 Duration of epoch submission window in seconds. _revealPeriodSeconds uint256 Duration of epoch reveal window in seconds. active # Defined in IFtso ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether FTSO is active or not. configureEpochs # Defined in IIFtso ( Docs , Source ). function configureEpochs ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ) external ; Sets configurable settings related to epochs. Parameters Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected. deactivateFtso # Defined in IIFtso ( Docs , Source ). function deactivateFtso ( ) external ; Deactivates the contract. epochsConfiguration # Defined in IIFtso ( Docs , Source ). function epochsConfiguration ( ) external view returns ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ); Returns current configuration of epoch state. Returns Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected. fallbackFinalizePriceEpoch # Defined in IIFtso ( Docs , Source ). function fallbackFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch, calculating the median price from trusted addresses only. Used as a fallback method, for example, due to an unexpected error during normal epoch finalization or because the ftsoManager enabled the fallback mode. Parameters Type Description _epochId uint256 ID of the epoch to finalize. finalizePriceEpoch # Defined in IIFtso ( Docs , Source ). function finalizePriceEpoch ( uint256 _epochId , bool _returnRewardData ) external returns ( address [] _eligibleAddresses , uint256 [] _natWeights , uint256 _totalNatWeight ); Computes epoch price based on gathered votes. If the price reveal window for the epoch has ended, finalize the epoch. Iterate list of price submissions. Find weighted median. Find adjacent 50% of price submissions. Allocate rewards for price submissions. Parameters Type Description _epochId uint256 ID of the epoch to finalize. _returnRewardData bool Parameter that determines if the reward data is returned. Returns Type Description _eligibleAddresses address[] List of addresses eligible for reward. _natWeights uint256[] List of native token weights corresponding to the eligible addresses. _totalNatWeight uint256 Sum of weights in _natWeights . forceFinalizePriceEpoch # Defined in IIFtso ( Docs , Source ). function forceFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch by copying the price from the previous epoch. Used as a fallback method if fallbackFinalizePriceEpoch fails due to an exception. Parameters Type Description _epochId uint256 ID of the epoch to finalize. ftsoManager # Defined in IIFtso ( Docs , Source ). function ftsoManager ( ) external view returns ( address ); Returns the FTSO manager's address. Returns Type Description [0] address Address of the FTSO manager contract. getAsset # Defined in IIFtso ( Docs , Source ). function getAsset ( ) external view returns ( contract IIVPToken ); Returns the FTSO asset. Returns Type Description [0] contract IIVPToken Address of the IIVPToken tracked by this FTSO. null in case of multi-asset FTSO. getAssetFtsos # Defined in IIFtso ( Docs , Source ). function getAssetFtsos ( ) external view returns ( contract IIFtso []); Returns the asset FTSOs. Returns Type Description [0] contract IIFtso[] Array of IIFtso contract addresses. null in case of single-asset FTSO. getCurrentEpochId # Defined in IFtso ( Docs , Source ). function getCurrentEpochId ( ) external view returns ( uint256 ); Returns the current epoch ID. Returns Type Description [0] uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero. getCurrentPrice # Defined in IFtso ( Docs , Source ). function getCurrentPrice ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns the current asset price. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. getCurrentPriceDetails # Defined in IFtso ( Docs , Source ). function getCurrentPriceDetails ( ) external view returns ( uint256 _price , uint256 _priceTimestamp , enum IFtso . PriceFinalizationType _priceFinalizationType , uint256 _lastPriceEpochFinalizationTimestamp , enum IFtso . PriceFinalizationType _lastPriceEpochFinalizationType ); Returns asset's current price details. All timestamps are in seconds from UNIX epoch. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _priceTimestamp uint256 Time when price was updated for the last time. _priceFinalizationType enum IFtso.PriceFinalizationType Finalization type when price was updated for the last time. _lastPriceEpochFinalizationTimestamp uint256 Time when last price epoch was finalized. _lastPriceEpochFinalizationType enum IFtso.PriceFinalizationType Finalization type of last finalized price epoch. getCurrentPriceFromTrustedProviders # Defined in IFtso ( Docs , Source ). function getCurrentPriceFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns current asset price calculated only using input from trusted providers. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. getCurrentPriceWithDecimals # Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price. getCurrentPriceWithDecimalsFromTrustedProviders # Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimalsFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price calculated only using input from trusted providers and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price. getCurrentRandom # Defined in IFtso ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous price epoch, obtained from the random numbers provided by all data providers along with their data submissions. getEpochId # Defined in IFtso ( Docs , Source ). function getEpochId ( uint256 _timestamp ) external view returns ( uint256 ); Returns the ID of the epoch that was opened for price submission at the specified timestamp. Parameters Type Description _timestamp uint256 Queried timestamp in seconds from UNIX epoch. Returns Type Description [0] uint256 Epoch ID corresponding to that timestamp. IDs are consecutive numbers starting from zero. getEpochPrice # Defined in IFtso ( Docs , Source ). function getEpochPrice ( uint256 _epochId ) external view returns ( uint256 ); Returns agreed asset price in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch. Only the last 200 epochs can be queried. Out-of-bounds queries revert. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . getEpochPriceForVoter # Defined in IFtso ( Docs , Source ). function getEpochPriceForVoter ( uint256 _epochId , address _voter ) external view returns ( uint256 ); Returns asset price submitted by a voter in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch being queried. Only the last 200 epochs can be queried. Out-of-bounds queries revert. _voter address Address of the voter being queried. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . getPriceEpochConfiguration # Defined in IFtso ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ); Returns current epoch's configuration. Returns Type Description _firstEpochStartTs uint256 First epoch start timestamp in seconds from UNIX epoch. _submitPeriodSeconds uint256 Submit period in seconds. _revealPeriodSeconds uint256 Reveal period in seconds. getPriceEpochData # Defined in IFtso ( Docs , Source ). function getPriceEpochData ( ) external view returns ( uint256 _epochId , uint256 _epochSubmitEndTime , uint256 _epochRevealEndTime , uint256 _votePowerBlock , bool _fallbackMode ); Returns current epoch data. Intervals are open on the right: End times are not included. Returns Type Description _epochId uint256 Current epoch ID. _epochSubmitEndTime uint256 End time of the price submission window in seconds from UNIX epoch. _epochRevealEndTime uint256 End time of the price reveal window in seconds from UNIX epoch. _votePowerBlock uint256 Vote power block for the current epoch. _fallbackMode bool Whether the current epoch is in fallback mode. Only votes from trusted addresses are used in this mode. getRandom # Defined in IFtso ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch. getVoteWeightingParameters # Defined in IIFtso ( Docs , Source ). function getVoteWeightingParameters ( ) external view returns ( contract IIVPToken [] _assets , uint256 [] _assetMultipliers , uint256 _totalVotePowerNat , uint256 _totalVotePowerAsset , uint256 _assetWeightRatio , uint256 _votePowerBlock ); Returns parameters necessary for replicating vote weighting (used in VoterWhitelister ). Returns Type Description _assets contract IIVPToken[] The list of assets that are accounted in vote. _assetMultipliers uint256[] Weight multiplier of each asset in (multiasset) FTSO. _totalVotePowerNat uint256 Total native token vote power at block. _totalVotePowerAsset uint256 Total combined asset vote power at block. _assetWeightRatio uint256 Ratio of combined asset vote power vs. native token vp (in BIPS). _votePowerBlock uint256 Vote power block for the epoch. initializeCurrentEpochStateForReveal # Defined in IIFtso ( Docs , Source ). function initializeCurrentEpochStateForReveal ( uint256 _circulatingSupplyNat , bool _fallbackMode ) external ; Initializes current epoch instance for reveal. Parameters Type Description _circulatingSupplyNat uint256 Epoch native token circulating supply. _fallbackMode bool Whether the current epoch is in fallback mode. revealPriceSubmitter # Defined in IFtsoGenesis ( Docs , Source ). function revealPriceSubmitter ( address _voter , uint256 _epochId , uint256 _price , uint256 _voterWNatVP ) external ; Reveals the price submitted by a voter on a specific epoch. The hash of _price and _random must be equal to the submitted hash Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. _price uint256 Submitted price. _voterWNatVP uint256 Voter's vote power in WNat units. setAsset # Defined in IIFtso ( Docs , Source ). function setAsset ( contract IIVPToken _asset ) external ; Sets asset for FTSO to operate as single-asset oracle. Parameters Type Description _asset contract IIVPToken Address of the IIVPToken contract that will be the asset tracked by this FTSO. setAssetFtsos # Defined in IIFtso ( Docs , Source ). function setAssetFtsos ( contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs for FTSO to operate as multi-asset oracle. FTSOs implicitly determine the FTSO assets. Parameters Type Description _assetFtsos contract IIFtso[] Array of FTSOs. setVotePowerBlock # Defined in IIFtso ( Docs , Source ). function setVotePowerBlock ( uint256 _blockNumber ) external ; Sets the current vote power block. Current vote power block will update per reward epoch. The FTSO doesn't have notion of reward epochs. Parameters Type Description _blockNumber uint256 Vote power block. symbol # Defined in IFtso ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the FTSO symbol . updateInitialPrice # Defined in IIFtso ( Docs , Source ). function updateInitialPrice ( uint256 _initialPriceUSD , uint256 _initialPriceTimestamp ) external ; Updates initial asset price when the contract is not active yet. wNat # Defined in IIFtso ( Docs , Source ). function wNat ( ) external view returns ( contract IIVPToken ); Address of the WNat contract. Returns Type Description [0] contract IIVPToken Address of the WNat contract. wNatVotePowerCached # Defined in IFtsoGenesis ( Docs , Source ). function wNatVotePowerCached ( address _voter , uint256 _epochId ) external returns ( uint256 ); Get and cache the vote power of a voter on a specific epoch, in WNat units. Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. Returns Type Description [0] uint256 Voter's vote power in WNat units.","title":"IIFtso"},{"location":"apis/smart-contracts/IIFtso/#ct_iiftso","text":"Source | Inherits from IFtso , IFtsoGenesis Internal interface for each of the FTSO contracts that handles an asset. Read the FTSO documentation page for general information about the FTSO system.","title":"IIFtso"},{"location":"apis/smart-contracts/IIFtso/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIFtso/#fn_activateftso_2f0a6f3c","text":"Defined in IIFtso ( Docs , Source ). function activateFtso ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ) external ; Initializes FTSO immutable settings and activates the contract. Parameters Type Description _firstEpochStartTs uint256 Timestamp of the first epoch in seconds from UNIX epoch. _submitPeriodSeconds uint256 Duration of epoch submission window in seconds. _revealPeriodSeconds uint256 Duration of epoch reveal window in seconds.","title":"activateFtso"},{"location":"apis/smart-contracts/IIFtso/#fn_active_02fb0c5e","text":"Defined in IFtso ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether FTSO is active or not.","title":"active"},{"location":"apis/smart-contracts/IIFtso/#fn_configureepochs_5a3c9d8e","text":"Defined in IIFtso ( Docs , Source ). function configureEpochs ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ) external ; Sets configurable settings related to epochs. Parameters Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected.","title":"configureEpochs"},{"location":"apis/smart-contracts/IIFtso/#fn_deactivateftso_555989da","text":"Defined in IIFtso ( Docs , Source ). function deactivateFtso ( ) external ; Deactivates the contract.","title":"deactivateFtso"},{"location":"apis/smart-contracts/IIFtso/#fn_epochsconfiguration_e3749e0c","text":"Defined in IIFtso ( Docs , Source ). function epochsConfiguration ( ) external view returns ( uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _elasticBandWidthPPM , address [] _trustedAddresses ); Returns current configuration of epoch state. Returns Type Description _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter. _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Percentage of the rewards (in BIPS) that go to the secondary reward band . The rest go to the primary reward band. _elasticBandWidthPPM uint256 Width of the secondary reward band, in parts-per-milion of the median. _trustedAddresses address[] Trusted voters that will be used if low voter turnout is detected.","title":"epochsConfiguration"},{"location":"apis/smart-contracts/IIFtso/#fn_fallbackfinalizepriceepoch_4afd5102","text":"Defined in IIFtso ( Docs , Source ). function fallbackFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch, calculating the median price from trusted addresses only. Used as a fallback method, for example, due to an unexpected error during normal epoch finalization or because the ftsoManager enabled the fallback mode. Parameters Type Description _epochId uint256 ID of the epoch to finalize.","title":"fallbackFinalizePriceEpoch"},{"location":"apis/smart-contracts/IIFtso/#fn_finalizepriceepoch_40462a2d","text":"Defined in IIFtso ( Docs , Source ). function finalizePriceEpoch ( uint256 _epochId , bool _returnRewardData ) external returns ( address [] _eligibleAddresses , uint256 [] _natWeights , uint256 _totalNatWeight ); Computes epoch price based on gathered votes. If the price reveal window for the epoch has ended, finalize the epoch. Iterate list of price submissions. Find weighted median. Find adjacent 50% of price submissions. Allocate rewards for price submissions. Parameters Type Description _epochId uint256 ID of the epoch to finalize. _returnRewardData bool Parameter that determines if the reward data is returned. Returns Type Description _eligibleAddresses address[] List of addresses eligible for reward. _natWeights uint256[] List of native token weights corresponding to the eligible addresses. _totalNatWeight uint256 Sum of weights in _natWeights .","title":"finalizePriceEpoch"},{"location":"apis/smart-contracts/IIFtso/#fn_forcefinalizepriceepoch_974d7a6b","text":"Defined in IIFtso ( Docs , Source ). function forceFinalizePriceEpoch ( uint256 _epochId ) external ; Forces finalization of a price epoch by copying the price from the previous epoch. Used as a fallback method if fallbackFinalizePriceEpoch fails due to an exception. Parameters Type Description _epochId uint256 ID of the epoch to finalize.","title":"forceFinalizePriceEpoch"},{"location":"apis/smart-contracts/IIFtso/#fn_ftsomanager_11a7aaaa","text":"Defined in IIFtso ( Docs , Source ). function ftsoManager ( ) external view returns ( address ); Returns the FTSO manager's address. Returns Type Description [0] address Address of the FTSO manager contract.","title":"ftsoManager"},{"location":"apis/smart-contracts/IIFtso/#fn_getasset_5c222bad","text":"Defined in IIFtso ( Docs , Source ). function getAsset ( ) external view returns ( contract IIVPToken ); Returns the FTSO asset. Returns Type Description [0] contract IIVPToken Address of the IIVPToken tracked by this FTSO. null in case of multi-asset FTSO.","title":"getAsset"},{"location":"apis/smart-contracts/IIFtso/#fn_getassetftsos_18931c35","text":"Defined in IIFtso ( Docs , Source ). function getAssetFtsos ( ) external view returns ( contract IIFtso []); Returns the asset FTSOs. Returns Type Description [0] contract IIFtso[] Array of IIFtso contract addresses. null in case of single-asset FTSO.","title":"getAssetFtsos"},{"location":"apis/smart-contracts/IIFtso/#fn_getcurrentepochid_a29a839f","text":"Defined in IFtso ( Docs , Source ). function getCurrentEpochId ( ) external view returns ( uint256 ); Returns the current epoch ID. Returns Type Description [0] uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"getCurrentEpochId"},{"location":"apis/smart-contracts/IIFtso/#fn_getcurrentprice_eb91d37e","text":"Defined in IFtso ( Docs , Source ). function getCurrentPrice ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns the current asset price. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/IIFtso/#fn_getcurrentpricedetails_040d73b8","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceDetails ( ) external view returns ( uint256 _price , uint256 _priceTimestamp , enum IFtso . PriceFinalizationType _priceFinalizationType , uint256 _lastPriceEpochFinalizationTimestamp , enum IFtso . PriceFinalizationType _lastPriceEpochFinalizationType ); Returns asset's current price details. All timestamps are in seconds from UNIX epoch. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _priceTimestamp uint256 Time when price was updated for the last time. _priceFinalizationType enum IFtso.PriceFinalizationType Finalization type when price was updated for the last time. _lastPriceEpochFinalizationTimestamp uint256 Time when last price epoch was finalized. _lastPriceEpochFinalizationType enum IFtso.PriceFinalizationType Finalization type of last finalized price epoch.","title":"getCurrentPriceDetails"},{"location":"apis/smart-contracts/IIFtso/#fn_getcurrentpricefromtrustedproviders_af52df08","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp ); Returns current asset price calculated only using input from trusted providers. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch.","title":"getCurrentPriceFromTrustedProviders"},{"location":"apis/smart-contracts/IIFtso/#fn_getcurrentpricewithdecimals_65f5cd86","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price.","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/IIFtso/#fn_getcurrentpricewithdecimalsfromtrustedproviders_3cacb3ae","text":"Defined in IFtso ( Docs , Source ). function getCurrentPriceWithDecimalsFromTrustedProviders ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Returns current asset price calculated only using input from trusted providers and number of decimals. Returns Type Description _price uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Time when price was updated for the last time, in seconds from UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the USD price.","title":"getCurrentPriceWithDecimalsFromTrustedProviders"},{"location":"apis/smart-contracts/IIFtso/#fn_getcurrentrandom_d89601fd","text":"Defined in IFtso ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous price epoch, obtained from the random numbers provided by all data providers along with their data submissions.","title":"getCurrentRandom"},{"location":"apis/smart-contracts/IIFtso/#fn_getepochid_5303548b","text":"Defined in IFtso ( Docs , Source ). function getEpochId ( uint256 _timestamp ) external view returns ( uint256 ); Returns the ID of the epoch that was opened for price submission at the specified timestamp. Parameters Type Description _timestamp uint256 Queried timestamp in seconds from UNIX epoch. Returns Type Description [0] uint256 Epoch ID corresponding to that timestamp. IDs are consecutive numbers starting from zero.","title":"getEpochId"},{"location":"apis/smart-contracts/IIFtso/#fn_getepochprice_7d1d6f12","text":"Defined in IFtso ( Docs , Source ). function getEpochPrice ( uint256 _epochId ) external view returns ( uint256 ); Returns agreed asset price in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch. Only the last 200 epochs can be queried. Out-of-bounds queries revert. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS .","title":"getEpochPrice"},{"location":"apis/smart-contracts/IIFtso/#fn_getepochpriceforvoter_c5d8b9e7","text":"Defined in IFtso ( Docs , Source ). function getEpochPriceForVoter ( uint256 _epochId , address _voter ) external view returns ( uint256 ); Returns asset price submitted by a voter in the specified epoch. Parameters Type Description _epochId uint256 ID of the epoch being queried. Only the last 200 epochs can be queried. Out-of-bounds queries revert. _voter address Address of the voter being queried. Returns Type Description [0] uint256 Price in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS .","title":"getEpochPriceForVoter"},{"location":"apis/smart-contracts/IIFtso/#fn_getpriceepochconfiguration_144e1591","text":"Defined in IFtso ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstEpochStartTs , uint256 _submitPeriodSeconds , uint256 _revealPeriodSeconds ); Returns current epoch's configuration. Returns Type Description _firstEpochStartTs uint256 First epoch start timestamp in seconds from UNIX epoch. _submitPeriodSeconds uint256 Submit period in seconds. _revealPeriodSeconds uint256 Reveal period in seconds.","title":"getPriceEpochConfiguration"},{"location":"apis/smart-contracts/IIFtso/#fn_getpriceepochdata_e3b3a3b3","text":"Defined in IFtso ( Docs , Source ). function getPriceEpochData ( ) external view returns ( uint256 _epochId , uint256 _epochSubmitEndTime , uint256 _epochRevealEndTime , uint256 _votePowerBlock , bool _fallbackMode ); Returns current epoch data. Intervals are open on the right: End times are not included. Returns Type Description _epochId uint256 Current epoch ID. _epochSubmitEndTime uint256 End time of the price submission window in seconds from UNIX epoch. _epochRevealEndTime uint256 End time of the price reveal window in seconds from UNIX epoch. _votePowerBlock uint256 Vote power block for the current epoch. _fallbackMode bool Whether the current epoch is in fallback mode. Only votes from trusted addresses are used in this mode.","title":"getPriceEpochData"},{"location":"apis/smart-contracts/IIFtso/#fn_getrandom_cd4b6914","text":"Defined in IFtso ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch.","title":"getRandom"},{"location":"apis/smart-contracts/IIFtso/#fn_getvoteweightingparameters_8357d08c","text":"Defined in IIFtso ( Docs , Source ). function getVoteWeightingParameters ( ) external view returns ( contract IIVPToken [] _assets , uint256 [] _assetMultipliers , uint256 _totalVotePowerNat , uint256 _totalVotePowerAsset , uint256 _assetWeightRatio , uint256 _votePowerBlock ); Returns parameters necessary for replicating vote weighting (used in VoterWhitelister ). Returns Type Description _assets contract IIVPToken[] The list of assets that are accounted in vote. _assetMultipliers uint256[] Weight multiplier of each asset in (multiasset) FTSO. _totalVotePowerNat uint256 Total native token vote power at block. _totalVotePowerAsset uint256 Total combined asset vote power at block. _assetWeightRatio uint256 Ratio of combined asset vote power vs. native token vp (in BIPS). _votePowerBlock uint256 Vote power block for the epoch.","title":"getVoteWeightingParameters"},{"location":"apis/smart-contracts/IIFtso/#fn_initializecurrentepochstateforreveal_f670ebe3","text":"Defined in IIFtso ( Docs , Source ). function initializeCurrentEpochStateForReveal ( uint256 _circulatingSupplyNat , bool _fallbackMode ) external ; Initializes current epoch instance for reveal. Parameters Type Description _circulatingSupplyNat uint256 Epoch native token circulating supply. _fallbackMode bool Whether the current epoch is in fallback mode.","title":"initializeCurrentEpochStateForReveal"},{"location":"apis/smart-contracts/IIFtso/#fn_revealpricesubmitter_c1f6c36e","text":"Defined in IFtsoGenesis ( Docs , Source ). function revealPriceSubmitter ( address _voter , uint256 _epochId , uint256 _price , uint256 _voterWNatVP ) external ; Reveals the price submitted by a voter on a specific epoch. The hash of _price and _random must be equal to the submitted hash Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. _price uint256 Submitted price. _voterWNatVP uint256 Voter's vote power in WNat units.","title":"revealPriceSubmitter"},{"location":"apis/smart-contracts/IIFtso/#fn_setasset_d0d552dd","text":"Defined in IIFtso ( Docs , Source ). function setAsset ( contract IIVPToken _asset ) external ; Sets asset for FTSO to operate as single-asset oracle. Parameters Type Description _asset contract IIVPToken Address of the IIVPToken contract that will be the asset tracked by this FTSO.","title":"setAsset"},{"location":"apis/smart-contracts/IIFtso/#fn_setassetftsos_131fdee2","text":"Defined in IIFtso ( Docs , Source ). function setAssetFtsos ( contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs for FTSO to operate as multi-asset oracle. FTSOs implicitly determine the FTSO assets. Parameters Type Description _assetFtsos contract IIFtso[] Array of FTSOs.","title":"setAssetFtsos"},{"location":"apis/smart-contracts/IIFtso/#fn_setvotepowerblock_e536f396","text":"Defined in IIFtso ( Docs , Source ). function setVotePowerBlock ( uint256 _blockNumber ) external ; Sets the current vote power block. Current vote power block will update per reward epoch. The FTSO doesn't have notion of reward epochs. Parameters Type Description _blockNumber uint256 Vote power block.","title":"setVotePowerBlock"},{"location":"apis/smart-contracts/IIFtso/#fn_symbol_95d89b41","text":"Defined in IFtso ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the FTSO symbol .","title":"symbol"},{"location":"apis/smart-contracts/IIFtso/#fn_updateinitialprice_306ba253","text":"Defined in IIFtso ( Docs , Source ). function updateInitialPrice ( uint256 _initialPriceUSD , uint256 _initialPriceTimestamp ) external ; Updates initial asset price when the contract is not active yet.","title":"updateInitialPrice"},{"location":"apis/smart-contracts/IIFtso/#fn_wnat_9edbf007","text":"Defined in IIFtso ( Docs , Source ). function wNat ( ) external view returns ( contract IIVPToken ); Address of the WNat contract. Returns Type Description [0] contract IIVPToken Address of the WNat contract.","title":"wNat"},{"location":"apis/smart-contracts/IIFtso/#fn_wnatvotepowercached_f72cab28","text":"Defined in IFtsoGenesis ( Docs , Source ). function wNatVotePowerCached ( address _voter , uint256 _epochId ) external returns ( uint256 ); Get and cache the vote power of a voter on a specific epoch, in WNat units. Parameters Type Description _voter address Voter address. _epochId uint256 ID of the epoch in which the price hash was submitted. Returns Type Description [0] uint256 Voter's vote power in WNat units.","title":"wNatVotePowerCached"},{"location":"apis/smart-contracts/IIFtsoManager/","text":"IIFtsoManager # Source | Inherits from IFtsoManager , IFlareDaemonize Internal interface for the FtsoManager contract. Events # AccruingUnearnedRewardsFailed # Defined in IFtsoManager ( Docs , Source ). event AccruingUnearnedRewardsFailed ( uint256 epochId ) Unexpected failure while accruing unearned rewards. This should be a rare occurrence. Parameters Type Description epochId uint256 Epoch ID of the failure. ChillingNonrevealingDataProvidersFailed # Defined in IIFtsoManager ( Docs , Source ). event ChillingNonrevealingDataProvidersFailed ( ) Unexpected failure. This should be a rare occurrence. CleanupBlockNumberManagerFailedForBlock # Defined in IIFtsoManager ( Docs , Source ). event CleanupBlockNumberManagerFailedForBlock ( uint256 blockNumber ) Unexpected failure. This should be a rare occurrence. ClosingExpiredRewardEpochFailed # Defined in IIFtsoManager ( Docs , Source ). event ClosingExpiredRewardEpochFailed ( uint256 rewardEpoch ) Unexpected failure. This should be a rare occurrence. DistributingRewardsFailed # Defined in IFtsoManager ( Docs , Source ). event DistributingRewardsFailed ( address ftso , uint256 epochId ) Unexpected failure while distributing rewards. This should be a rare occurrence. Parameters Type Description ftso address Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure. FallbackMode # Defined in IFtsoManager ( Docs , Source ). event FallbackMode ( bool fallbackMode ) Emitted when the fallback mode of the FTSO manager changes its state. Fallback mode is a recovery mode, where only data from a trusted subset of FTSO data providers is used to calculate the final price. The FTSO Manager enters the fallback mode when ALL FTSOs are in fallback mode. Parameters Type Description fallbackMode bool New state of the FTSO Manager fallback mode. FinalizingPriceEpochFailed # Defined in IFtsoManager ( Docs , Source ). event FinalizingPriceEpochFailed ( contract IIFtso ftso , uint256 epochId , enum IFtso . PriceFinalizationType failingType ) Unexpected failure while finalizing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure. failingType enum IFtso.PriceFinalizationType How was the epoch finalized. FtsoAdded # Defined in IFtsoManager ( Docs , Source ). event FtsoAdded ( contract IIFtso ftso , bool add ) Emitted when a new FTSO has been added or an existing one has been removed. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. add bool True if added, removed otherwise. FtsoDeactivationFailed # Defined in IIFtsoManager ( Docs , Source ). event FtsoDeactivationFailed ( contract IIFtso ftso ) Unexpected failure. This should be a rare occurrence. FtsoFallbackMode # Defined in IFtsoManager ( Docs , Source ). event FtsoFallbackMode ( contract IIFtso ftso , bool fallbackMode ) Emitted when the fallback mode of an FTSO changes its state. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. fallbackMode bool New state of its fallback mode. InitializingCurrentEpochStateForRevealFailed # Defined in IFtsoManager ( Docs , Source ). event InitializingCurrentEpochStateForRevealFailed ( contract IIFtso ftso , uint256 epochId ) Unexpected failure while initializing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID that failed initialization. PriceEpochFinalized # Defined in IFtsoManager ( Docs , Source ). event PriceEpochFinalized ( address chosenFtso , uint256 rewardEpochId ) Emitted when a price epoch ends, this is, after the reveal phase, when final prices are calculated. Parameters Type Description chosenFtso address Contract address of the FTSO asset that was randomly chosen to be the basis for reward calculation. On this price epoch, rewards will be calculated based on how close each data provider was to the median of all submitted prices FOR THIS FTSO. rewardEpochId uint256 Reward epoch ID this price epoch belongs to. RewardEpochFinalized # Defined in IFtsoManager ( Docs , Source ). event RewardEpochFinalized ( uint256 votepowerBlock , uint256 startBlock ) Emitted when a reward epoch ends and rewards are available. Parameters Type Description votepowerBlock uint256 The vote power block of the epoch. startBlock uint256 The first block of the epoch. UpdatingActiveValidatorsTriggerFailed # Defined in IIFtsoManager ( Docs , Source ). event UpdatingActiveValidatorsTriggerFailed ( uint256 rewardEpoch ) Unexpected failure. This should be a rare occurrence. UseGoodRandomSet # Defined in IFtsoManager ( Docs , Source ). event UseGoodRandomSet ( bool useGoodRandom , uint256 maxWaitForGoodRandomSeconds ) Emitted when the requirement to provide good random numbers has changed. As part of the FTSO protocol , data providers must submit a random number along with their price reveals. When good random numbers are enforced, all providers that submit a hash must then submit a reveal with a random number or they will be punished. This is a measure against random number manipulation. Parameters Type Description useGoodRandom bool Whether good random numbers are now enforced or not. maxWaitForGoodRandomSeconds uint256 Max number of seconds to wait for a good random number to be submitted. Functions # activate # Defined in IIFtsoManager ( Docs , Source ). function activate ( ) external ; Activates FTSO manager ( daemonize will run jobs). active # Defined in IFtsoManager ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether the FTSO Manager is active or not. Returns Type Description [0] bool bool Active status. addFtso # Defined in IIFtsoManager ( Docs , Source ). function addFtso ( contract IIFtso _ftso ) external ; Adds FTSO to the list of managed FTSOs, to support a new price pair. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Parameters Type Description _ftso contract IIFtso FTSO contract address to add. addFtsosBulk # Defined in IIFtsoManager ( Docs , Source ). function addFtsosBulk ( contract IIFtso [] _ftsos ) external ; Adds a list of FTSOs to the list of managed FTSOs, to support new price pairs. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Parameters Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses to add. currentRewardEpochEnds # Defined in IIFtsoManager ( Docs , Source ). function currentRewardEpochEnds ( ) external view returns ( uint256 ); Returns when the current reward epoch finishes. Returns Type Description [0] uint256 uint256 Time in seconds since the UNIX epoch when the current reward epoch will finish. daemonize # Defined in IFlareDaemonize ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused. getContractName # Defined in IFlareDaemonize ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name. getCurrentPriceEpochData # Defined in IFtsoManager ( Docs , Source ). function getCurrentPriceEpochData ( ) external view returns ( uint256 _priceEpochId , uint256 _priceEpochStartTimestamp , uint256 _priceEpochEndTimestamp , uint256 _priceEpochRevealEndTimestamp , uint256 _currentTimestamp ); Returns timing information for the current price epoch. All intervals are half-closed: end time is not included. All timestamps are in seconds since UNIX epoch. See the FTSO page for information about the different submission phases. Returns Type Description _priceEpochId uint256 Price epoch ID. _priceEpochStartTimestamp uint256 Beginning of the commit phase. _priceEpochEndTimestamp uint256 End of the commit phase. _priceEpochRevealEndTimestamp uint256 End of the reveal phase. _currentTimestamp uint256 Current time. getCurrentPriceEpochId # Defined in IFtsoManagerGenesis ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero. getCurrentRewardEpoch # Defined in IFtsoManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns current reward epoch ID (the one currently running). Returns Type Description [0] uint256 Reward epoch ID. A monotonically increasing integer. getElasticBandWidthPPMFtso # Defined in IIFtsoManager ( Docs , Source ). function getElasticBandWidthPPMFtso ( contract IIFtso _ftso ) external view returns ( uint256 ); Returns the secondary band's width in PPM (parts-per-million) of the median value, for a given FTSO. Parameters Type Description _ftso contract IIFtso The queried FTSO contract address. Returns Type Description [0] uint256 uint256 Secondary band width in PPM. To obtain the actual band width, divide this number by 10^6 and multiply by the price median value. getFallbackMode # Defined in IFtsoManager ( Docs , Source ). function getFallbackMode ( ) external view returns ( bool _fallbackMode , contract IIFtso [] _ftsos , bool [] _ftsoInFallbackMode ); Returns whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Returns Type Description _fallbackMode bool True if fallback mode is enabled for the manager. _ftsos contract IIFtso[] Array of all currently active FTSO assets. _ftsoInFallbackMode bool[] Boolean array indicating which FTSO assets are in fallback mode. If the FTSO Manager is in fallback mode then ALL FTSOs are in fallback mode. getFtsos # Defined in IFtsoManager ( Docs , Source ). function getFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Returns the list of currently active FTSOs. Returns Type Description _ftsos contract IIFtso[] Array of contract addresses for the FTSOs. getLastUnprocessedPriceEpochData # Defined in IIFtsoManager ( Docs , Source ). function getLastUnprocessedPriceEpochData ( ) external view returns ( uint256 _lastUnprocessedPriceEpoch , uint256 _lastUnprocessedPriceEpochRevealEnds , bool _lastUnprocessedPriceEpochInitialized ); Returns information regarding the currently unprocessed price epoch. This epoch is not necessarily the last one, in case the network halts for some time due to validator node problems, for example. Returns Type Description _lastUnprocessedPriceEpoch uint256 ID of the price epoch that is currently waiting finalization. _lastUnprocessedPriceEpochRevealEnds uint256 When that price epoch can be finalized, in seconds since UNIX epoch. _lastUnprocessedPriceEpochInitialized bool Whether this price epoch has been already initialized and therefore it must be finalized before the corresponding reward epoch can be finalized. getPriceEpochConfiguration # Defined in IFtsoManager ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds ); Returns the current values for price epoch timing configuration. See the FTSO page for information about the different submission phases. Returns Type Description _firstPriceEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first price epoch. _priceEpochDurationSeconds uint256 Duration in seconds of the commit phase. _revealEpochDurationSeconds uint256 Duration in seconds of the reveal phase. getRewardEpochConfiguration # Defined in IFtsoManager ( Docs , Source ). function getRewardEpochConfiguration ( ) external view returns ( uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds ); Returns the current values for reward epoch timing configuration. See the Reward epochs box. Returns Type Description _firstRewardEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first reward epoch. _rewardEpochDurationSeconds uint256 Duration in seconds of the reward epochs. getRewardEpochData # Defined in IIFtsoManager ( Docs , Source ). function getRewardEpochData ( uint256 _rewardEpochId ) external view returns ( struct IIFtsoManager . RewardEpochData ); Returns data regarding a specific reward epoch ID. Parameters Type Description _rewardEpochId uint256 Epoch ID. Returns Type Description [0] struct IIFtsoManager.RewardEpochData RewardEpochData Its associated data. getRewardEpochToExpireNext # Defined in IFtsoManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Return reward epoch that will expire next, when a new reward epoch is initialized. Reward epochs older than 90 days expire, and any unclaimed rewards in them become inaccessible. Returns Type Description [0] uint256 uint256 Reward epoch ID. getRewardEpochVotePowerBlock # Defined in IFtsoManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block that was used for a past reward epoch. Parameters Type Description _rewardEpoch uint256 The queried reward epoch ID. Returns Type Description [0] uint256 uint256 The block number of that reward epoch's vote power block. getRewardExpiryOffsetSeconds # Defined in IIFtsoManager ( Docs , Source ). function getRewardExpiryOffsetSeconds ( ) external view returns ( uint256 ); Returns the currently configured reward expiration time. Returns Type Description [0] uint256 uint256 Unclaimed rewards accrued in reward epochs more than this amount of seconds in the past expire and become inaccessible. notInitializedFtsos # Defined in IIFtsoManager ( Docs , Source ). function notInitializedFtsos ( contract IIFtso ) external view returns ( bool ); Returns whether an FTSO has been initialized. Returns Type Description [0] bool bool Initialization state. removeFtso # Defined in IIFtsoManager ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes an FTSO from the list of managed FTSOs. Reverts if FTSO is used in a multi-asset FTSO. Deactivates the _ftso . Parameters Type Description _ftso contract IIFtso FTSO contract address to remove. replaceFtso # Defined in IIFtsoManager ( Docs , Source ). function replaceFtso ( contract IIFtso _ftsoToAdd , bool copyCurrentPrice , bool copyAssetOrAssetFtsos ) external ; Replaces one FTSO with another with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSO. Parameters Type Description _ftsoToAdd contract IIFtso FTSO contract address to add. An existing FTSO with the same symbol will be removed. copyCurrentPrice bool When true, initializes the new FTSO with the current price of the previous FTSO. copyAssetOrAssetFtsos bool When true, initializes the new FTSO with the current asset or asset FTSOs of the previous FTSO. replaceFtsosBulk # Defined in IIFtsoManager ( Docs , Source ). function replaceFtsosBulk ( contract IIFtso [] _ftsosToAdd , bool copyCurrentPrice , bool copyAssetOrAssetFtsos ) external ; Replaces a list of FTSOs with other FTSOs with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSOs. Parameters Type Description _ftsosToAdd contract IIFtso[] Array of FTSO contract addresses to add. Every existing FTSO with the same symbols will be removed. copyCurrentPrice bool When true, initializes the new FTSOs with the current price of the previous FTSOs. copyAssetOrAssetFtsos bool When true, initializes the new FTSOs with the current asset or asset FTSOs of the previous FTSOs. rewardEpochDurationSeconds # Defined in IIFtsoManager ( Docs , Source ). function rewardEpochDurationSeconds ( ) external view returns ( uint256 ); Currently configured reward epoch duration. Returns Type Description [0] uint256 uint256 Reward epoch duration, in seconds. rewardEpochs # Defined in IIFtsoManager ( Docs , Source ). function rewardEpochs ( uint256 _rewardEpochId ) external view returns ( uint256 _votepowerBlock , uint256 _startBlock , uint256 _startTimestamp ); Returns information about a reward epoch. Parameters Type Description _rewardEpochId uint256 The epoch ID to query. Returns Type Description _votepowerBlock uint256 The vote power block of the epoch. _startBlock uint256 The first block of the epoch. _startTimestamp uint256 Timestamp of the epoch start, in seconds since UNIX epoch. rewardEpochsStartTs # Defined in IIFtsoManager ( Docs , Source ). function rewardEpochsStartTs ( ) external view returns ( uint256 ); Time when the current reward epoch started. Returns Type Description [0] uint256 uint256 Timestamp, in seconds since UNIX epoch. setFallbackMode # Defined in IIFtsoManager ( Docs , Source ). function setFallbackMode ( bool _fallbackMode ) external ; Sets whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Parameters Type Description _fallbackMode bool True if fallback mode is enabled. setFtsoAsset # Defined in IIFtsoManager ( Docs , Source ). function setFtsoAsset ( contract IIFtso _ftso , contract IIVPToken _asset ) external ; Sets the asset tracked by an FTSO. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _asset contract IIVPToken The VPToken contract address of the asset to track. setFtsoAssetFtsos # Defined in IIFtsoManager ( Docs , Source ). function setFtsoAssetFtsos ( contract IIFtso _ftso , contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs to be tracked by a multi-asset FTSO. FTSOs implicitly determine the FTSO assets. Parameters Type Description _ftso contract IIFtso The multi-asset FTSO contract address. _assetFtsos contract IIFtso[] Array of FTSOs to be tracked. setFtsoFallbackMode # Defined in IIFtsoManager ( Docs , Source ). function setFtsoFallbackMode ( contract IIFtso _ftso , bool _fallbackMode ) external ; Sets whether an FTSO is currently in fallback mode. In this mode only submissions from trusted providers are used. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _fallbackMode bool Fallback mode. setGovernanceParameters # Defined in IIFtsoManager ( Docs , Source ). function setGovernanceParameters ( uint256 _updateTs , uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _rewardExpiryOffsetSeconds , address [] _trustedAddresses ) external ; Sets governance parameters for FTSOs Parameters Type Description _updateTs uint256 Time, in seconds since UNIX epoch, when updated settings should be pushed to FTSOs. _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Secondary reward band, where _elasticBandRewardBIPS goes to the secondary band and 10000 - _elasticBandRewardBIPS to the primary (IQR) band. _rewardExpiryOffsetSeconds uint256 Reward epochs closed earlier than block.timestamp - _rewardExpiryOffsetSeconds expire. _trustedAddresses address[] Trusted addresses will be used as a fallback mechanism for setting the price. setInitialRewardData # Defined in IIFtsoManager ( Docs , Source ). function setInitialRewardData ( uint256 _nextRewardEpochToExpire , uint256 _rewardEpochsLength , uint256 _currentRewardEpochEnds ) external ; Set reward data to values from old ftso manager. Can only be called before activation. Parameters Type Description _nextRewardEpochToExpire uint256 See getRewardEpochToExpireNext . _rewardEpochsLength uint256 See getRewardEpochConfiguration . _currentRewardEpochEnds uint256 See getCurrentRewardEpoch . switchToFallbackMode # Defined in IFlareDaemonize ( Docs , Source ). function switchToFallbackMode ( ) external returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported. Structures # RewardEpochData # Defined in IIFtsoManager ( Docs , Source ). struct RewardEpochData { uint256 votepowerBlock ; uint256 startBlock ; uint256 startTimestamp ; }","title":"IIFtsoManager"},{"location":"apis/smart-contracts/IIFtsoManager/#ct_iiftsomanager","text":"Source | Inherits from IFtsoManager , IFlareDaemonize Internal interface for the FtsoManager contract.","title":"IIFtsoManager"},{"location":"apis/smart-contracts/IIFtsoManager/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_accruingunearnedrewardsfailed","text":"Defined in IFtsoManager ( Docs , Source ). event AccruingUnearnedRewardsFailed ( uint256 epochId ) Unexpected failure while accruing unearned rewards. This should be a rare occurrence. Parameters Type Description epochId uint256 Epoch ID of the failure.","title":"AccruingUnearnedRewardsFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_chillingnonrevealingdataprovidersfailed","text":"Defined in IIFtsoManager ( Docs , Source ). event ChillingNonrevealingDataProvidersFailed ( ) Unexpected failure. This should be a rare occurrence.","title":"ChillingNonrevealingDataProvidersFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_cleanupblocknumbermanagerfailedforblock","text":"Defined in IIFtsoManager ( Docs , Source ). event CleanupBlockNumberManagerFailedForBlock ( uint256 blockNumber ) Unexpected failure. This should be a rare occurrence.","title":"CleanupBlockNumberManagerFailedForBlock"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_closingexpiredrewardepochfailed","text":"Defined in IIFtsoManager ( Docs , Source ). event ClosingExpiredRewardEpochFailed ( uint256 rewardEpoch ) Unexpected failure. This should be a rare occurrence.","title":"ClosingExpiredRewardEpochFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_distributingrewardsfailed","text":"Defined in IFtsoManager ( Docs , Source ). event DistributingRewardsFailed ( address ftso , uint256 epochId ) Unexpected failure while distributing rewards. This should be a rare occurrence. Parameters Type Description ftso address Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure.","title":"DistributingRewardsFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_fallbackmode","text":"Defined in IFtsoManager ( Docs , Source ). event FallbackMode ( bool fallbackMode ) Emitted when the fallback mode of the FTSO manager changes its state. Fallback mode is a recovery mode, where only data from a trusted subset of FTSO data providers is used to calculate the final price. The FTSO Manager enters the fallback mode when ALL FTSOs are in fallback mode. Parameters Type Description fallbackMode bool New state of the FTSO Manager fallback mode.","title":"FallbackMode"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_finalizingpriceepochfailed","text":"Defined in IFtsoManager ( Docs , Source ). event FinalizingPriceEpochFailed ( contract IIFtso ftso , uint256 epochId , enum IFtso . PriceFinalizationType failingType ) Unexpected failure while finalizing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID of the failure. failingType enum IFtso.PriceFinalizationType How was the epoch finalized.","title":"FinalizingPriceEpochFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_ftsoadded","text":"Defined in IFtsoManager ( Docs , Source ). event FtsoAdded ( contract IIFtso ftso , bool add ) Emitted when a new FTSO has been added or an existing one has been removed. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. add bool True if added, removed otherwise.","title":"FtsoAdded"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_ftsodeactivationfailed","text":"Defined in IIFtsoManager ( Docs , Source ). event FtsoDeactivationFailed ( contract IIFtso ftso ) Unexpected failure. This should be a rare occurrence.","title":"FtsoDeactivationFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_ftsofallbackmode","text":"Defined in IFtsoManager ( Docs , Source ). event FtsoFallbackMode ( contract IIFtso ftso , bool fallbackMode ) Emitted when the fallback mode of an FTSO changes its state. Parameters Type Description ftso contract IIFtso Contract address of the FTSO. fallbackMode bool New state of its fallback mode.","title":"FtsoFallbackMode"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_initializingcurrentepochstateforrevealfailed","text":"Defined in IFtsoManager ( Docs , Source ). event InitializingCurrentEpochStateForRevealFailed ( contract IIFtso ftso , uint256 epochId ) Unexpected failure while initializing a price epoch. This should be a rare occurrence. Parameters Type Description ftso contract IIFtso Contract address of the FTSO where the failure happened. epochId uint256 Epoch ID that failed initialization.","title":"InitializingCurrentEpochStateForRevealFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_priceepochfinalized","text":"Defined in IFtsoManager ( Docs , Source ). event PriceEpochFinalized ( address chosenFtso , uint256 rewardEpochId ) Emitted when a price epoch ends, this is, after the reveal phase, when final prices are calculated. Parameters Type Description chosenFtso address Contract address of the FTSO asset that was randomly chosen to be the basis for reward calculation. On this price epoch, rewards will be calculated based on how close each data provider was to the median of all submitted prices FOR THIS FTSO. rewardEpochId uint256 Reward epoch ID this price epoch belongs to.","title":"PriceEpochFinalized"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_rewardepochfinalized","text":"Defined in IFtsoManager ( Docs , Source ). event RewardEpochFinalized ( uint256 votepowerBlock , uint256 startBlock ) Emitted when a reward epoch ends and rewards are available. Parameters Type Description votepowerBlock uint256 The vote power block of the epoch. startBlock uint256 The first block of the epoch.","title":"RewardEpochFinalized"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_updatingactivevalidatorstriggerfailed","text":"Defined in IIFtsoManager ( Docs , Source ). event UpdatingActiveValidatorsTriggerFailed ( uint256 rewardEpoch ) Unexpected failure. This should be a rare occurrence.","title":"UpdatingActiveValidatorsTriggerFailed"},{"location":"apis/smart-contracts/IIFtsoManager/#ev_usegoodrandomset","text":"Defined in IFtsoManager ( Docs , Source ). event UseGoodRandomSet ( bool useGoodRandom , uint256 maxWaitForGoodRandomSeconds ) Emitted when the requirement to provide good random numbers has changed. As part of the FTSO protocol , data providers must submit a random number along with their price reveals. When good random numbers are enforced, all providers that submit a hash must then submit a reveal with a random number or they will be punished. This is a measure against random number manipulation. Parameters Type Description useGoodRandom bool Whether good random numbers are now enforced or not. maxWaitForGoodRandomSeconds uint256 Max number of seconds to wait for a good random number to be submitted.","title":"UseGoodRandomSet"},{"location":"apis/smart-contracts/IIFtsoManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_activate_0f15f4c0","text":"Defined in IIFtsoManager ( Docs , Source ). function activate ( ) external ; Activates FTSO manager ( daemonize will run jobs).","title":"activate"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_active_02fb0c5e","text":"Defined in IFtsoManager ( Docs , Source ). function active ( ) external view returns ( bool ); Returns whether the FTSO Manager is active or not. Returns Type Description [0] bool bool Active status.","title":"active"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_addftso_2663f1b4","text":"Defined in IIFtsoManager ( Docs , Source ). function addFtso ( contract IIFtso _ftso ) external ; Adds FTSO to the list of managed FTSOs, to support a new price pair. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Parameters Type Description _ftso contract IIFtso FTSO contract address to add.","title":"addFtso"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_addftsosbulk_d429cfe5","text":"Defined in IIFtsoManager ( Docs , Source ). function addFtsosBulk ( contract IIFtso [] _ftsos ) external ; Adds a list of FTSOs to the list of managed FTSOs, to support new price pairs. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Parameters Type Description _ftsos contract IIFtso[] Array of FTSO contract addresses to add.","title":"addFtsosBulk"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_currentrewardepochends_d89c39e6","text":"Defined in IIFtsoManager ( Docs , Source ). function currentRewardEpochEnds ( ) external view returns ( uint256 ); Returns when the current reward epoch finishes. Returns Type Description [0] uint256 uint256 Time in seconds since the UNIX epoch when the current reward epoch will finish.","title":"currentRewardEpochEnds"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_daemonize_6d0e8c34","text":"Defined in IFlareDaemonize ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused.","title":"daemonize"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getcontractname_f5f5ba72","text":"Defined in IFlareDaemonize ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name.","title":"getContractName"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getcurrentpriceepochdata_93a79025","text":"Defined in IFtsoManager ( Docs , Source ). function getCurrentPriceEpochData ( ) external view returns ( uint256 _priceEpochId , uint256 _priceEpochStartTimestamp , uint256 _priceEpochEndTimestamp , uint256 _priceEpochRevealEndTimestamp , uint256 _currentTimestamp ); Returns timing information for the current price epoch. All intervals are half-closed: end time is not included. All timestamps are in seconds since UNIX epoch. See the FTSO page for information about the different submission phases. Returns Type Description _priceEpochId uint256 Price epoch ID. _priceEpochStartTimestamp uint256 Beginning of the commit phase. _priceEpochEndTimestamp uint256 End of the commit phase. _priceEpochRevealEndTimestamp uint256 End of the reveal phase. _currentTimestamp uint256 Current time.","title":"getCurrentPriceEpochData"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getcurrentpriceepochid_08a7f402","text":"Defined in IFtsoManagerGenesis ( Docs , Source ). function getCurrentPriceEpochId ( ) external view returns ( uint256 _priceEpochId ); Returns current price epoch ID. Returns Type Description _priceEpochId uint256 Currently running epoch ID. IDs are consecutive numbers starting from zero.","title":"getCurrentPriceEpochId"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getcurrentrewardepoch_e7c830d4","text":"Defined in IFtsoManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns current reward epoch ID (the one currently running). Returns Type Description [0] uint256 Reward epoch ID. A monotonically increasing integer.","title":"getCurrentRewardEpoch"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getelasticbandwidthppmftso_5bb44e9a","text":"Defined in IIFtsoManager ( Docs , Source ). function getElasticBandWidthPPMFtso ( contract IIFtso _ftso ) external view returns ( uint256 ); Returns the secondary band's width in PPM (parts-per-million) of the median value, for a given FTSO. Parameters Type Description _ftso contract IIFtso The queried FTSO contract address. Returns Type Description [0] uint256 uint256 Secondary band width in PPM. To obtain the actual band width, divide this number by 10^6 and multiply by the price median value.","title":"getElasticBandWidthPPMFtso"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getfallbackmode_4b48dd5e","text":"Defined in IFtsoManager ( Docs , Source ). function getFallbackMode ( ) external view returns ( bool _fallbackMode , contract IIFtso [] _ftsos , bool [] _ftsoInFallbackMode ); Returns whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Returns Type Description _fallbackMode bool True if fallback mode is enabled for the manager. _ftsos contract IIFtso[] Array of all currently active FTSO assets. _ftsoInFallbackMode bool[] Boolean array indicating which FTSO assets are in fallback mode. If the FTSO Manager is in fallback mode then ALL FTSOs are in fallback mode.","title":"getFallbackMode"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getftsos_ce69f833","text":"Defined in IFtsoManager ( Docs , Source ). function getFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Returns the list of currently active FTSOs. Returns Type Description _ftsos contract IIFtso[] Array of contract addresses for the FTSOs.","title":"getFtsos"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getlastunprocessedpriceepochdata_6ca051e6","text":"Defined in IIFtsoManager ( Docs , Source ). function getLastUnprocessedPriceEpochData ( ) external view returns ( uint256 _lastUnprocessedPriceEpoch , uint256 _lastUnprocessedPriceEpochRevealEnds , bool _lastUnprocessedPriceEpochInitialized ); Returns information regarding the currently unprocessed price epoch. This epoch is not necessarily the last one, in case the network halts for some time due to validator node problems, for example. Returns Type Description _lastUnprocessedPriceEpoch uint256 ID of the price epoch that is currently waiting finalization. _lastUnprocessedPriceEpochRevealEnds uint256 When that price epoch can be finalized, in seconds since UNIX epoch. _lastUnprocessedPriceEpochInitialized bool Whether this price epoch has been already initialized and therefore it must be finalized before the corresponding reward epoch can be finalized.","title":"getLastUnprocessedPriceEpochData"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getpriceepochconfiguration_144e1591","text":"Defined in IFtsoManager ( Docs , Source ). function getPriceEpochConfiguration ( ) external view returns ( uint256 _firstPriceEpochStartTs , uint256 _priceEpochDurationSeconds , uint256 _revealEpochDurationSeconds ); Returns the current values for price epoch timing configuration. See the FTSO page for information about the different submission phases. Returns Type Description _firstPriceEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first price epoch. _priceEpochDurationSeconds uint256 Duration in seconds of the commit phase. _revealEpochDurationSeconds uint256 Duration in seconds of the reveal phase.","title":"getPriceEpochConfiguration"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getrewardepochconfiguration_1cb513f7","text":"Defined in IFtsoManager ( Docs , Source ). function getRewardEpochConfiguration ( ) external view returns ( uint256 _firstRewardEpochStartTs , uint256 _rewardEpochDurationSeconds ); Returns the current values for reward epoch timing configuration. See the Reward epochs box. Returns Type Description _firstRewardEpochStartTs uint256 Timestamp, in seconds since UNIX epoch, of the first reward epoch. _rewardEpochDurationSeconds uint256 Duration in seconds of the reward epochs.","title":"getRewardEpochConfiguration"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getrewardepochdata_e5399da3","text":"Defined in IIFtsoManager ( Docs , Source ). function getRewardEpochData ( uint256 _rewardEpochId ) external view returns ( struct IIFtsoManager . RewardEpochData ); Returns data regarding a specific reward epoch ID. Parameters Type Description _rewardEpochId uint256 Epoch ID. Returns Type Description [0] struct IIFtsoManager.RewardEpochData RewardEpochData Its associated data.","title":"getRewardEpochData"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getrewardepochtoexpirenext_3e7ff857","text":"Defined in IFtsoManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Return reward epoch that will expire next, when a new reward epoch is initialized. Reward epochs older than 90 days expire, and any unclaimed rewards in them become inaccessible. Returns Type Description [0] uint256 uint256 Reward epoch ID.","title":"getRewardEpochToExpireNext"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getrewardepochvotepowerblock_f2edab5a","text":"Defined in IFtsoManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block that was used for a past reward epoch. Parameters Type Description _rewardEpoch uint256 The queried reward epoch ID. Returns Type Description [0] uint256 uint256 The block number of that reward epoch's vote power block.","title":"getRewardEpochVotePowerBlock"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_getrewardexpiryoffsetseconds_ec31db0c","text":"Defined in IIFtsoManager ( Docs , Source ). function getRewardExpiryOffsetSeconds ( ) external view returns ( uint256 ); Returns the currently configured reward expiration time. Returns Type Description [0] uint256 uint256 Unclaimed rewards accrued in reward epochs more than this amount of seconds in the past expire and become inaccessible.","title":"getRewardExpiryOffsetSeconds"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_notinitializedftsos_823033a9","text":"Defined in IIFtsoManager ( Docs , Source ). function notInitializedFtsos ( contract IIFtso ) external view returns ( bool ); Returns whether an FTSO has been initialized. Returns Type Description [0] bool bool Initialization state.","title":"notInitializedFtsos"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_removeftso_a670ff87","text":"Defined in IIFtsoManager ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes an FTSO from the list of managed FTSOs. Reverts if FTSO is used in a multi-asset FTSO. Deactivates the _ftso . Parameters Type Description _ftso contract IIFtso FTSO contract address to remove.","title":"removeFtso"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_replaceftso_3758e679","text":"Defined in IIFtsoManager ( Docs , Source ). function replaceFtso ( contract IIFtso _ftsoToAdd , bool copyCurrentPrice , bool copyAssetOrAssetFtsos ) external ; Replaces one FTSO with another with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSO. Parameters Type Description _ftsoToAdd contract IIFtso FTSO contract address to add. An existing FTSO with the same symbol will be removed. copyCurrentPrice bool When true, initializes the new FTSO with the current price of the previous FTSO. copyAssetOrAssetFtsos bool When true, initializes the new FTSO with the current asset or asset FTSOs of the previous FTSO.","title":"replaceFtso"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_replaceftsosbulk_758ff1da","text":"Defined in IIFtsoManager ( Docs , Source ). function replaceFtsosBulk ( contract IIFtso [] _ftsosToAdd , bool copyCurrentPrice , bool copyAssetOrAssetFtsos ) external ; Replaces a list of FTSOs with other FTSOs with the same symbol. All FTSOs in a multi-asset FTSO must be managed by the same FTSO manager. Deactivates the old FTSOs. Parameters Type Description _ftsosToAdd contract IIFtso[] Array of FTSO contract addresses to add. Every existing FTSO with the same symbols will be removed. copyCurrentPrice bool When true, initializes the new FTSOs with the current price of the previous FTSOs. copyAssetOrAssetFtsos bool When true, initializes the new FTSOs with the current asset or asset FTSOs of the previous FTSOs.","title":"replaceFtsosBulk"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_rewardepochdurationseconds_85f3c9c9","text":"Defined in IIFtsoManager ( Docs , Source ). function rewardEpochDurationSeconds ( ) external view returns ( uint256 ); Currently configured reward epoch duration. Returns Type Description [0] uint256 uint256 Reward epoch duration, in seconds.","title":"rewardEpochDurationSeconds"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_rewardepochs_a795f409","text":"Defined in IIFtsoManager ( Docs , Source ). function rewardEpochs ( uint256 _rewardEpochId ) external view returns ( uint256 _votepowerBlock , uint256 _startBlock , uint256 _startTimestamp ); Returns information about a reward epoch. Parameters Type Description _rewardEpochId uint256 The epoch ID to query. Returns Type Description _votepowerBlock uint256 The vote power block of the epoch. _startBlock uint256 The first block of the epoch. _startTimestamp uint256 Timestamp of the epoch start, in seconds since UNIX epoch.","title":"rewardEpochs"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_rewardepochsstartts_a578f55b","text":"Defined in IIFtsoManager ( Docs , Source ). function rewardEpochsStartTs ( ) external view returns ( uint256 ); Time when the current reward epoch started. Returns Type Description [0] uint256 uint256 Timestamp, in seconds since UNIX epoch.","title":"rewardEpochsStartTs"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_setfallbackmode_ff882fbb","text":"Defined in IIFtsoManager ( Docs , Source ). function setFallbackMode ( bool _fallbackMode ) external ; Sets whether the FTSO Manager is currently in fallback mode. In this mode only submissions from trusted providers are used. Parameters Type Description _fallbackMode bool True if fallback mode is enabled.","title":"setFallbackMode"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_setftsoasset_6b65cc34","text":"Defined in IIFtsoManager ( Docs , Source ). function setFtsoAsset ( contract IIFtso _ftso , contract IIVPToken _asset ) external ; Sets the asset tracked by an FTSO. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _asset contract IIVPToken The VPToken contract address of the asset to track.","title":"setFtsoAsset"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_setftsoassetftsos_a93a6f42","text":"Defined in IIFtsoManager ( Docs , Source ). function setFtsoAssetFtsos ( contract IIFtso _ftso , contract IIFtso [] _assetFtsos ) external ; Sets an array of FTSOs to be tracked by a multi-asset FTSO. FTSOs implicitly determine the FTSO assets. Parameters Type Description _ftso contract IIFtso The multi-asset FTSO contract address. _assetFtsos contract IIFtso[] Array of FTSOs to be tracked.","title":"setFtsoAssetFtsos"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_setftsofallbackmode_af946af7","text":"Defined in IIFtsoManager ( Docs , Source ). function setFtsoFallbackMode ( contract IIFtso _ftso , bool _fallbackMode ) external ; Sets whether an FTSO is currently in fallback mode. In this mode only submissions from trusted providers are used. Parameters Type Description _ftso contract IIFtso The FTSO contract address. _fallbackMode bool Fallback mode.","title":"setFtsoFallbackMode"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_setgovernanceparameters_13226793","text":"Defined in IIFtsoManager ( Docs , Source ). function setGovernanceParameters ( uint256 _updateTs , uint256 _maxVotePowerNatThresholdFraction , uint256 _maxVotePowerAssetThresholdFraction , uint256 _lowAssetUSDThreshold , uint256 _highAssetUSDThreshold , uint256 _highAssetTurnoutThresholdBIPS , uint256 _lowNatTurnoutThresholdBIPS , uint256 _elasticBandRewardBIPS , uint256 _rewardExpiryOffsetSeconds , address [] _trustedAddresses ) external ; Sets governance parameters for FTSOs Parameters Type Description _updateTs uint256 Time, in seconds since UNIX epoch, when updated settings should be pushed to FTSOs. _maxVotePowerNatThresholdFraction uint256 High threshold for native token vote power per voter. _maxVotePowerAssetThresholdFraction uint256 High threshold for asset vote power per voter _lowAssetUSDThreshold uint256 Threshold for low asset vote power (in scaled USD). _highAssetUSDThreshold uint256 Threshold for high asset vote power (in scaled USD). _highAssetTurnoutThresholdBIPS uint256 Threshold for high asset turnout (in BIPS). _lowNatTurnoutThresholdBIPS uint256 Threshold for low nat turnout (in BIPS). _elasticBandRewardBIPS uint256 Secondary reward band, where _elasticBandRewardBIPS goes to the secondary band and 10000 - _elasticBandRewardBIPS to the primary (IQR) band. _rewardExpiryOffsetSeconds uint256 Reward epochs closed earlier than block.timestamp - _rewardExpiryOffsetSeconds expire. _trustedAddresses address[] Trusted addresses will be used as a fallback mechanism for setting the price.","title":"setGovernanceParameters"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_setinitialrewarddata_e080a970","text":"Defined in IIFtsoManager ( Docs , Source ). function setInitialRewardData ( uint256 _nextRewardEpochToExpire , uint256 _rewardEpochsLength , uint256 _currentRewardEpochEnds ) external ; Set reward data to values from old ftso manager. Can only be called before activation. Parameters Type Description _nextRewardEpochToExpire uint256 See getRewardEpochToExpireNext . _rewardEpochsLength uint256 See getRewardEpochConfiguration . _currentRewardEpochEnds uint256 See getCurrentRewardEpoch .","title":"setInitialRewardData"},{"location":"apis/smart-contracts/IIFtsoManager/#fn_switchtofallbackmode_e22fdece","text":"Defined in IFlareDaemonize ( Docs , Source ). function switchToFallbackMode ( ) external returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported.","title":"switchToFallbackMode"},{"location":"apis/smart-contracts/IIFtsoManager/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/IIFtsoManager/#st_rewardepochdata","text":"Defined in IIFtsoManager ( Docs , Source ). struct RewardEpochData { uint256 votepowerBlock ; uint256 startBlock ; uint256 startTimestamp ; }","title":"RewardEpochData"},{"location":"apis/smart-contracts/IIFtsoRegistry/","text":"IIFtsoRegistry # Source | Inherits from IFtsoRegistry Internal interface for the FtsoRegistry contract. Functions # addFtso # Defined in IIFtsoRegistry ( Docs , Source ). function addFtso ( contract IIFtso _ftsoContract ) external returns ( uint256 ); Add a new FTSO contract to the registry. Parameters Type Description _ftsoContract contract IIFtso New target FTSO contract. Returns Type Description [0] uint256 The FTSO index assigned to the new asset. getAllCurrentPrices # Defined in IFtsoRegistry ( Docs , Source ). function getAllCurrentPrices ( ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of all supported assets. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getCurrentPrice # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( uint256 _ftsoIndex ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. getCurrentPrice # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. getCurrentPriceWithDecimals # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price . getCurrentPriceWithDecimals # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price . getCurrentPricesByIndices # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesByIndices ( uint256 [] _indices ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of indices. Reverts if any of the indices is not supported. Parameters Type Description _indices uint256[] Array of indices to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getCurrentPricesBySymbols # Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesBySymbols ( string [] _symbols ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of asset symbols. Reverts if any of the symbols is not supported. Parameters Type Description _symbols string[] Array of symbols to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures. getFtso # Defined in IFtsoRegistry ( Docs , Source ). function getFtso ( uint256 _activeFtso ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given index. Reverts if unsupported index is passed. Parameters Type Description _activeFtso uint256 The queried index. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried index. getFtsoBySymbol # Defined in IFtsoRegistry ( Docs , Source ). function getFtsoBySymbol ( string _symbol ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given symbol. Reverts if unsupported symbol is passed. Parameters Type Description _symbol string The queried symbol. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried symbol. getFtsoIndex # Defined in IFtsoRegistry ( Docs , Source ). function getFtsoIndex ( string _symbol ) external view returns ( uint256 _assetIndex ); Returns the FTSO index corresponding to a given asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _assetIndex uint256 The corresponding asset index. getFtsoSymbol # Defined in IFtsoRegistry ( Docs , Source ). function getFtsoSymbol ( uint256 _ftsoIndex ) external view returns ( string _symbol ); Returns the asset symbol corresponding to a given FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _symbol string The corresponding asset symbol. getFtsos # Defined in IFtsoRegistryGenesis ( Docs , Source ). function getFtsos ( uint256 [] _indices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _indices uint256[] Array of FTSO indices to query. Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses. getSupportedFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Get array of all FTSO contracts for all supported asset indices. The index of FTSO in returned array does not necessarily correspond to the asset's index. Due to deletion, some indices might be unsupported. Use getSupportedIndicesAndFtsos to retrieve pairs of correct indices and FTSOs, where possible \"null\" holes are readily apparent. Returns Type Description _ftsos contract IIFtso[] Array of all supported FTSOs. getSupportedIndices # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndices ( ) external view returns ( uint256 [] _supportedIndices ); Returns the indices of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all active FTSO indices in increasing order. getSupportedIndicesAndFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , contract IIFtso [] _ftsos ); Get all supported indices and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _ftsos contract IIFtso[] Array of all supported FTSO addresses. getSupportedIndicesAndSymbols # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndSymbols ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols ); Get all supported indices and corresponding symbols. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. getSupportedIndicesSymbolsAndFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesSymbolsAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported indices, symbols, and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses. getSupportedSymbols # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbols ( ) external view returns ( string [] _supportedSymbols ); Returns the symbols of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all active FTSO symbols in increasing order. getSupportedSymbolsAndFtsos # Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbolsAndFtsos ( ) external view returns ( string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported symbols and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses. removeFtso # Defined in IIFtsoRegistry ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes the FTSO and keeps part of the history. Reverts if the provided address is not supported. From now on, the index this asset was using is \"reserved\" and cannot be used again. It will not be returned in any list of currently supported assets. Parameters Type Description _ftso contract IIFtso Address of the FTSO contract to remove.","title":"IIFtsoRegistry"},{"location":"apis/smart-contracts/IIFtsoRegistry/#ct_iiftsoregistry","text":"Source | Inherits from IFtsoRegistry Internal interface for the FtsoRegistry contract.","title":"IIFtsoRegistry"},{"location":"apis/smart-contracts/IIFtsoRegistry/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_addftso_2663f1b4","text":"Defined in IIFtsoRegistry ( Docs , Source ). function addFtso ( contract IIFtso _ftsoContract ) external returns ( uint256 ); Add a new FTSO contract to the registry. Parameters Type Description _ftsoContract contract IIFtso New target FTSO contract. Returns Type Description [0] uint256 The FTSO index assigned to the new asset.","title":"addFtso"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getallcurrentprices_58f9296f","text":"Defined in IFtsoRegistry ( Docs , Source ). function getAllCurrentPrices ( ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of all supported assets. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getAllCurrentPrices"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getcurrentprice_c55d0f56","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( uint256 _ftsoIndex ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getcurrentprice_42a0f243","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPrice ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp ); Public view function to get the current price of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ ASSET_PRICE_USD_DECIMALS . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch.","title":"getCurrentPrice"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getcurrentpricewithdecimals_257cbd3a","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( uint256 _assetIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active FTSO index. Reverts if the index is not supported. Parameters Type Description _assetIndex uint256 Index to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price .","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getcurrentpricewithdecimals_a69afdc6","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPriceWithDecimals ( string _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Public view function to get the current price and decimals of a given active asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _price uint256 Current price of the asset in USD multiplied by 10^ _assetPriceUsdDecimals . _timestamp uint256 Timestamp for when this price was updated, in seconds since UNIX epoch. _assetPriceUsdDecimals uint256 Number of decimals used to return the _price .","title":"getCurrentPriceWithDecimals"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getcurrentpricesbyindices_6ba31fa1","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesByIndices ( uint256 [] _indices ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of indices. Reverts if any of the indices is not supported. Parameters Type Description _indices uint256[] Array of indices to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getCurrentPricesByIndices"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getcurrentpricesbysymbols_79d5ea4b","text":"Defined in IFtsoRegistry ( Docs , Source ). function getCurrentPricesBySymbols ( string [] _symbols ) external view returns ( struct IFtsoRegistry . PriceInfo []); Returns the current price of a list of asset symbols. Reverts if any of the symbols is not supported. Parameters Type Description _symbols string[] Array of symbols to query. Returns Type Description [0] struct IFtsoRegistry.PriceInfo[] Array of PriceInfo structures.","title":"getCurrentPricesBySymbols"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getftso_d75f6d81","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtso ( uint256 _activeFtso ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given index. Reverts if unsupported index is passed. Parameters Type Description _activeFtso uint256 The queried index. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried index.","title":"getFtso"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getftsobysymbol_97da6af4","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtsoBySymbol ( string _symbol ) external view returns ( contract IIFtso _activeFtsoAddress ); Returns the address of the FTSO contract for a given symbol. Reverts if unsupported symbol is passed. Parameters Type Description _symbol string The queried symbol. Returns Type Description _activeFtsoAddress contract IIFtso FTSO contract address for the queried symbol.","title":"getFtsoBySymbol"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getftsoindex_e848da30","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtsoIndex ( string _symbol ) external view returns ( uint256 _assetIndex ); Returns the FTSO index corresponding to a given asset symbol. Reverts if the symbol is not supported. Parameters Type Description _symbol string Symbol to query. Returns Type Description _assetIndex uint256 The corresponding asset index.","title":"getFtsoIndex"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getftsosymbol_136d3f64","text":"Defined in IFtsoRegistry ( Docs , Source ). function getFtsoSymbol ( uint256 _ftsoIndex ) external view returns ( string _symbol ); Returns the asset symbol corresponding to a given FTSO index. Reverts if the index is not supported. Parameters Type Description _ftsoIndex uint256 Index to query. Returns Type Description _symbol string The corresponding asset symbol.","title":"getFtsoSymbol"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getftsos_9cb47538","text":"Defined in IFtsoRegistryGenesis ( Docs , Source ). function getFtsos ( uint256 [] _indices ) external view returns ( contract IFtsoGenesis [] _ftsos ); Get the addresses of the active FTSOs at the given indices. Reverts if any of the provided indices is non-existing or inactive. Parameters Type Description _indices uint256[] Array of FTSO indices to query. Returns Type Description _ftsos contract IFtsoGenesis[] The array of FTSO addresses.","title":"getFtsos"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getsupportedftsos_a40060ba","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedFtsos ( ) external view returns ( contract IIFtso [] _ftsos ); Get array of all FTSO contracts for all supported asset indices. The index of FTSO in returned array does not necessarily correspond to the asset's index. Due to deletion, some indices might be unsupported. Use getSupportedIndicesAndFtsos to retrieve pairs of correct indices and FTSOs, where possible \"null\" holes are readily apparent. Returns Type Description _ftsos contract IIFtso[] Array of all supported FTSOs.","title":"getSupportedFtsos"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getsupportedindices_798aac5b","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndices ( ) external view returns ( uint256 [] _supportedIndices ); Returns the indices of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all active FTSO indices in increasing order.","title":"getSupportedIndices"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getsupportedindicesandftsos_06a2ba29","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , contract IIFtso [] _ftsos ); Get all supported indices and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedIndicesAndFtsos"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getsupportedindicesandsymbols_e68f283b","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesAndSymbols ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols ); Get all supported indices and corresponding symbols. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols.","title":"getSupportedIndicesAndSymbols"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getsupportedindicessymbolsandftsos_7687542c","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedIndicesSymbolsAndFtsos ( ) external view returns ( uint256 [] _supportedIndices , string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported indices, symbols, and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedIndices uint256[] Array of all supported indices. _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedIndicesSymbolsAndFtsos"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getsupportedsymbols_ce1c0e4d","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbols ( ) external view returns ( string [] _supportedSymbols ); Returns the symbols of the currently supported FTSOs. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all active FTSO symbols in increasing order.","title":"getSupportedSymbols"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_getsupportedsymbolsandftsos_0cf48497","text":"Defined in IFtsoRegistry ( Docs , Source ). function getSupportedSymbolsAndFtsos ( ) external view returns ( string [] _supportedSymbols , contract IIFtso [] _ftsos ); Get all supported symbols and corresponding FTSO addresses. Active FTSOs are ones that currently receive price feeds. Returns Type Description _supportedSymbols string[] Array of all supported symbols. _ftsos contract IIFtso[] Array of all supported FTSO addresses.","title":"getSupportedSymbolsAndFtsos"},{"location":"apis/smart-contracts/IIFtsoRegistry/#fn_removeftso_a670ff87","text":"Defined in IIFtsoRegistry ( Docs , Source ). function removeFtso ( contract IIFtso _ftso ) external ; Removes the FTSO and keeps part of the history. Reverts if the provided address is not supported. From now on, the index this asset was using is \"reserved\" and cannot be used again. It will not be returned in any list of currently supported assets. Parameters Type Description _ftso contract IIFtso Address of the FTSO contract to remove.","title":"removeFtso"},{"location":"apis/smart-contracts/IIFtsoRewardManager/","text":"IIFtsoRewardManager # Source | Inherits from IFtsoRewardManager , IIInflationReceiver , IITokenPool Internal interface for the FtsoRewardManager . Events # DailyAuthorizedInflationSet # Defined in IIFtsoRewardManager ( Docs , Source ). event DailyAuthorizedInflationSet ( uint256 authorizedAmountWei ) Emitted when the contract's daily authorized inflation has been set. Parameters Type Description authorizedAmountWei uint256 Authorized amount of native tokens, in wei. FeePercentageChanged # Defined in IFtsoRewardManager ( Docs , Source ). event FeePercentageChanged ( address dataProvider , uint256 value , uint256 validFromEpoch ) Emitted when a data provider changes its fee. Parameters Type Description dataProvider address Address of the data provider. value uint256 New fee, in BIPS. validFromEpoch uint256 Epoch ID where the new fee takes effect. FtsoRewardManagerActivated # Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerActivated ( address ftsoRewardManager ) Emitted when the reward manager contract is activated. Parameters Type Description ftsoRewardManager address The reward manager contract. FtsoRewardManagerDeactivated # Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerDeactivated ( address ftsoRewardManager ) Emitted when the reward manager contract is deactivated. Parameters Type Description ftsoRewardManager address The reward manager contract. InflationReceived # Defined in IIFtsoRewardManager ( Docs , Source ). event InflationReceived ( uint256 amountReceivedWei ) Emitted when the contract has received the daily inflation amount. Parameters Type Description amountReceivedWei uint256 Received amount of native tokens, in wei. RewardClaimed # Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimed ( address dataProvider , address whoClaimed , address sentTo , uint256 rewardEpoch , uint256 amount ) Emitted when a data provider claims its FTSO rewards. Parameters Type Description dataProvider address Address of the data provider that accrued the reward. whoClaimed address Address that actually performed the claim. sentTo address Address that received the reward. rewardEpoch uint256 ID of the reward epoch where the reward was accrued. amount uint256 Amount of rewarded native tokens (wei). RewardClaimsEnabled # Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsEnabled ( uint256 rewardEpochId ) Emitted when reward claims have been enabled. Parameters Type Description rewardEpochId uint256 First claimable reward epoch. RewardClaimsExpired # Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsExpired ( uint256 rewardEpochId ) Unclaimed rewards have expired and are now inaccessible. getUnclaimedReward() can be used to retrieve more information. Parameters Type Description rewardEpochId uint256 ID of the reward epoch that has just expired. RewardsBurned # Defined in IIFtsoRewardManager ( Docs , Source ). event RewardsBurned ( uint256 amountBurnedWei ) Emitted when unclaimed rewards are burned. Parameters Type Description amountBurnedWei uint256 Burned amount of native tokens, in wei. RewardsDistributed # Defined in IFtsoRewardManager ( Docs , Source ). event RewardsDistributed ( address ftso , uint256 epochId , address [] addresses , uint256 [] rewards ) Emitted every price epoch, when rewards have been distributed to each contributing data provider. Note that rewards are not claimable until the reward epoch finishes. Parameters Type Description ftso address Address of the FTSO that generated the rewards. epochId uint256 ID of the reward epoch where the rewards were accrued. addresses address[] Data provider addresses that have rewards to claim. rewards uint256[] Amounts available for claiming (wei). UnearnedRewardsAccrued # Defined in IFtsoRewardManager ( Docs , Source ). event UnearnedRewardsAccrued ( uint256 epochId , uint256 reward ) Emitted when rewards cannot be distributed during a reward epoch (for example, because the FTSO went into fallback mode) and they are accrued for later burning. Parameters Type Description epochId uint256 ID of the reward epoch where the reward was accrued. reward uint256 Total amount of accrued rewards (wei). Functions # accrueUnearnedRewards # Defined in IIFtsoRewardManager ( Docs , Source ). function accrueUnearnedRewards ( uint256 epochId , uint256 priceEpochDurationSeconds , uint256 priceEpochEndTime ) external ; Accrue unearned rewards for a given price epoch. Typically done when the FTSO is in fallback mode or because of insufficient vote power. Simply accrue them so they will not be distributed and will be burned later. The amount of rewards that will be burned is calculated in the same way as in distributeRewards . Parameters Type Description epochId uint256 Price epoch ID. priceEpochDurationSeconds uint256 Duration of price epochs (180s). priceEpochEndTime uint256 Timestamp of the price epoch end time (end of submit period), in seconds since UNIX epoch. activate # Defined in IIFtsoRewardManager ( Docs , Source ). function activate ( ) external ; Activates reward manager (allows claiming rewards). active # Defined in IFtsoRewardManager ( Docs , Source ). function active ( ) external view returns ( bool ); Whether rewards can be claimed from this reward manager. autoClaim # Defined in IFtsoRewardManager ( Docs , Source ). function autoClaim ( address [] _rewardOwners , uint256 _rewardEpoch ) external ; Allows claiming rewards simultaneously for a list of reward owners and all unclaimed epochs before the specified one. This is meant as a convenience all-in-one reward claiming method to be used both by reward owners and registered executors . It performs a series of operations, besides claiming rewards: If a reward owner has enabled its Personal Delegation Account , rewards are also claimed for the PDA and the total claimed amount is sent to that PDA. Otherwise, the claimed amount is sent to the reward owner's account. Claimed amount is automatically wrapped through the WNat contract. If the caller is a registered executor with a non-zero fee, the fee is paid to the executor for each claimed address. Parameters Type Description _rewardOwners address[] List of reward owners to claim for. _rewardEpoch uint256 Last reward epoch ID to claim for. All previous epochs with pending rewards will be claimed too. claim # Defined in IFtsoRewardManager ( Docs , Source ). function claim ( address _rewardOwner , address payable _recipient , uint256 _rewardEpoch , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by percentage. Reverts if msg.sender is delegating by amount. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpoch uint256 Last reward epoch to claim for. All previous epochs with pending rewards will be claimed too. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). claimFromDataProviders # Defined in IFtsoRewardManager ( Docs , Source ). function claimFromDataProviders ( address _rewardOwner , address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner from specific data providers. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by amount (explicit delegation). Reverts if msg.sender is delegating by percentage. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpochs uint256[] Array of reward epoch IDs to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). claimReward # Defined in IFtsoRewardManager ( Docs , Source ). function claimReward ( address payable _recipient , uint256 [] _rewardEpochs ) external returns ( uint256 _rewardAmount ); Allows a percentage delegator to claim rewards. This function is intended to be used to claim rewards in case of delegation by percentage. This function is deprecated : use claim instead. Reverts if msg.sender is delegating by amount. Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'. Retained for backward compatibility. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. Returns Type Description _rewardAmount uint256 Amount of total claimed rewards (wei). claimRewardFromDataProviders # Defined in IFtsoRewardManager ( Docs , Source ). function claimRewardFromDataProviders ( address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards from specific data providers. This function is intended to be used to claim rewards in case of delegation by amount. This function is deprecated : use claimFromDataProviders instead. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei). closeExpiredRewardEpoch # Defined in IIFtsoRewardManager ( Docs , Source ). function closeExpiredRewardEpoch ( uint256 _rewardEpochId ) external ; Collects funds from expired reward epoch and calculates totals. Triggered by ftsoManager on finalization of a reward epoch. Operation is irreversible: when some reward epoch is closed according to current settings, it cannot be reopened even if new parameters would allow it, because nextRewardEpochToExpire in ftsoManager never decreases. Parameters Type Description _rewardEpochId uint256 ID of the epoch to close. deactivate # Defined in IIFtsoRewardManager ( Docs , Source ). function deactivate ( ) external ; Deactivates reward manager (prevents claiming rewards). distributeRewards # Defined in IIFtsoRewardManager ( Docs , Source ). function distributeRewards ( address [] addresses , uint256 [] weights , uint256 totalWeight , uint256 epochId , address ftso , uint256 priceEpochDurationSeconds , uint256 currentRewardEpoch , uint256 priceEpochEndTime , uint256 votePowerBlock ) external ; Distributes price epoch rewards to data provider accounts, according to input parameters. Must be called with totalWeight > 0 and addresses.length > 0. The amount of rewards for a given price epoch ID are calculated in FtsoRewardManager from priceEpochDurationSeconds , priceEpochEndTime and inflation authorization data (see _getTotalPriceEpochRewardWei in FtsoRewardManager . Then each data provider address is given a portion of this amount according to corresponding weight and total sum of weights. Parameters epochId and ftso are only needed so they can be passed onto the emitted event. Parameters Type Description addresses address[] Data provider addresses to reward. weights uint256[] Weights corresponding to rewarded addresses. totalWeight uint256 Sum of all weights. epochId uint256 Price epoch ID. ftso address Randomly chosen FTSO contract used to calculate the weights. priceEpochDurationSeconds uint256 Duration of price epochs (180s). currentRewardEpoch uint256 ID of the current reward epoch. Rewards for the price epoch are added to this reward epoch. priceEpochEndTime uint256 Timestamp of the price epoch end time (end of submit period), in seconds since UNIX epoch. votePowerBlock uint256 Vote power block used in the given reward epoch. enableClaims # Defined in IIFtsoRewardManager ( Docs , Source ). function enableClaims ( ) external ; Enable claiming for current and all future reward epochs. firstClaimableRewardEpoch # Defined in IIFtsoRewardManager ( Docs , Source ). function firstClaimableRewardEpoch ( ) external view returns ( uint256 ); Epochs before the token distribution event at Flare launch were not be claimable. Use this method to know the first reward epoch that was claimable. Returns Type Description [0] uint256 uint256 The first reward epoch that can be claimed. getClaimedReward # Defined in IFtsoRewardManager ( Docs , Source ). function getClaimedReward ( uint256 _rewardEpoch , address _dataProvider , address _claimer ) external view returns ( bool _claimed , uint256 _amount ); Returns information on the rewards accrued by a reward owner from a specific data provider at a specific reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID to query. _dataProvider address Address of the data provider to query. _claimer address Address of the reward owner to query. Returns Type Description _claimed bool Whether the reward has been claimed or not. _amount uint256 Accrued amount in wei. getContractName # Defined in IIInflationReceiver ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating inflation receiver contracts through AddressUpdater . Returns Type Description [0] string Contract name. getCurrentRewardEpoch # Defined in IFtsoRewardManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns the current reward epoch ID. getDataProviderCurrentFeePercentage # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 _feePercentageBIPS ); Returns the current fee percentage of a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. getDataProviderFeePercentage # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderFeePercentage ( address _dataProvider , uint256 _rewardEpoch ) external view returns ( uint256 _feePercentageBIPS ); Returns the fee percentage of a data provider at a given reward epoch. Parameters Type Description _dataProvider address Address of the queried data provider. _rewardEpoch uint256 Reward epoch ID. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. getDataProviderPerformanceInfo # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderPerformanceInfo ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _rewardAmount , uint256 _votePowerIgnoringRevocation ); Returns information on rewards and vote power of a data provider at a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. _dataProvider address Address of the data provider to query. Returns Type Description _rewardAmount uint256 Amount of rewards (wei). _votePowerIgnoringRevocation uint256 Vote power, not including revocations. getDataProviderScheduledFeePercentageChanges # Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] _feePercentageBIPS , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the scheduled fee percentage changes for a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256[] Array of fee percentages in BIPS. _validFromEpoch uint256[] Array of block numbers from which the fee settings are effective. _fixed bool[] Array of boolean values indicating whether settings are subject to change or not. getEpochReward # Defined in IFtsoRewardManager ( Docs , Source ). function getEpochReward ( uint256 _rewardEpoch ) external view returns ( uint256 _totalReward , uint256 _claimedReward ); Returns information on an epoch's rewards. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. Returns Type Description _totalReward uint256 Total amount of rewards accrued on that epoch, in wei. _claimedReward uint256 Total amount of rewards that have already been claimed, in wei. getEpochsWithClaimableRewards # Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithClaimableRewards ( ) external view returns ( uint256 _startEpochId , uint256 _endEpochId ); Returns the reward epoch range for which rewards can be claimed. Rewards outside this range are unclaimable, either because they have expired or because the reward epoch is still ongoing. Returns Type Description _startEpochId uint256 The oldest epoch ID that allows reward claiming. _endEpochId uint256 The newest epoch ID that allows reward claiming. getEpochsWithUnclaimedRewards # Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view returns ( uint256 [] _epochIds ); Returns the array of claimable epoch IDs for which the rewards of a reward owner have not yet been claimed. Parameters Type Description _beneficiary address Address of the reward owner to query. Reverts if it uses delegation by amount. Returns Type Description _epochIds uint256[] Array of epoch IDs. getExpectedBalance # Defined in IIInflationReceiver ( Docs , Source ). function getExpectedBalance ( ) external view returns ( uint256 ); Returns the contract's expected balance (actual balance may be higher due to self-destruct funds). Returns Type Description [0] uint256 Expected native token balance. getInflationAddress # Defined in IIInflationReceiver ( Docs , Source ). function getInflationAddress ( ) external returns ( address ); Returns the address of the Inflation contract. getInitialRewardEpoch # Defined in IFtsoRewardManager ( Docs , Source ). function getInitialRewardEpoch ( ) external view returns ( uint256 ); Returns the initial reward epoch ID for this reward manager contract. This corresponds to the oldest reward epoch with claimable rewards in the previous reward manager when this one took over. Set by governance through setInitialRewardData . getRewardEpochToExpireNext # Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Returns the reward epoch that will expire next once a new reward epoch starts. getRewardEpochVotePowerBlock # Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block of a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. getStateOfRewards # Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] _dataProviders , uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address at a specific reward epoch. Parameters Type Description _beneficiary address Address of the beneficiary to query. It can be a data provider or a delegator, for example. Reverts if the queried address is delegating by amount. _rewardEpoch uint256 Reward epoch ID to query. Returns Type Description _dataProviders address[] Array of addresses of data providers. _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not. getStateOfRewardsFromDataProviders # Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] _dataProviders ) external view returns ( uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address coming from a specific set of data providers, at a specific reward epoch. Parameters Type Description _beneficiary address Address of beneficiary to query. _rewardEpoch uint256 Reward epoch ID to query. _dataProviders address[] Array of addresses of the data providers to query. Returns Type Description _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not. getTokenPoolSupplyData # Defined in IITokenPool ( Docs , Source ). function getTokenPoolSupplyData ( ) external returns ( uint256 _lockedFundsWei , uint256 _totalInflationAuthorizedWei , uint256 _totalClaimedWei ); Returns token pool supply data. Returns Type Description _lockedFundsWei uint256 Total amount of funds ever locked in the token pool (wei). _lockedFundsWei - _totalClaimedWei is the amount currently locked and outside the circulating supply. _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalClaimedWei uint256 Total claimed amount (wei). getUnclaimedReward # Defined in IIFtsoRewardManager ( Docs , Source ). function getUnclaimedReward ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _amount , uint256 _weight ); Returns information on unclaimed rewards for a given data provider and epoch. Parameters Type Description _rewardEpoch uint256 Queried reward epoch ID. _dataProvider address Address of the queried data provider. Returns Type Description _amount uint256 Amount available to be claimed, in wei. _weight uint256 Portion of total vote power used in this reward epoch that has not yet claimed its reward, in BIPS. It decreases to 0 when all data providers have claimed their rewards. nextClaimableRewardEpoch # Defined in IFtsoRewardManager ( Docs , Source ). function nextClaimableRewardEpoch ( address _rewardOwner ) external view returns ( uint256 ); Returns the next claimable reward epoch for a reward owner. Parameters Type Description _rewardOwner address Address of the reward owner to query. receiveInflation # Defined in IIInflationReceiver ( Docs , Source ). function receiveInflation ( ) external payable ; Receive native tokens from inflation. setDailyAuthorizedInflation # Defined in IIInflationReceiver ( Docs , Source ). function setDailyAuthorizedInflation ( uint256 _toAuthorizeWei ) external ; Notify the receiver that it is entitled to receive a new inflation amount. Parameters Type Description _toAuthorizeWei uint256 The amount of inflation that can be awarded in the coming day, in wei. setDataProviderFeePercentage # Defined in IFtsoRewardManager ( Docs , Source ). function setDataProviderFeePercentage ( uint256 _feePercentageBIPS ) external returns ( uint256 _validFromEpoch ); Sets the fee a data provider keeps from all delegations. Takes effect after feeValueUpdateOffset reward epochs have elapsed. When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. Returns Type Description _validFromEpoch uint256 Reward epoch number when the new fee percentage will become effective.","title":"IIFtsoRewardManager"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ct_iiftsorewardmanager","text":"Source | Inherits from IFtsoRewardManager , IIInflationReceiver , IITokenPool Internal interface for the FtsoRewardManager .","title":"IIFtsoRewardManager"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_dailyauthorizedinflationset","text":"Defined in IIFtsoRewardManager ( Docs , Source ). event DailyAuthorizedInflationSet ( uint256 authorizedAmountWei ) Emitted when the contract's daily authorized inflation has been set. Parameters Type Description authorizedAmountWei uint256 Authorized amount of native tokens, in wei.","title":"DailyAuthorizedInflationSet"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_feepercentagechanged","text":"Defined in IFtsoRewardManager ( Docs , Source ). event FeePercentageChanged ( address dataProvider , uint256 value , uint256 validFromEpoch ) Emitted when a data provider changes its fee. Parameters Type Description dataProvider address Address of the data provider. value uint256 New fee, in BIPS. validFromEpoch uint256 Epoch ID where the new fee takes effect.","title":"FeePercentageChanged"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_ftsorewardmanageractivated","text":"Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerActivated ( address ftsoRewardManager ) Emitted when the reward manager contract is activated. Parameters Type Description ftsoRewardManager address The reward manager contract.","title":"FtsoRewardManagerActivated"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_ftsorewardmanagerdeactivated","text":"Defined in IFtsoRewardManager ( Docs , Source ). event FtsoRewardManagerDeactivated ( address ftsoRewardManager ) Emitted when the reward manager contract is deactivated. Parameters Type Description ftsoRewardManager address The reward manager contract.","title":"FtsoRewardManagerDeactivated"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_inflationreceived","text":"Defined in IIFtsoRewardManager ( Docs , Source ). event InflationReceived ( uint256 amountReceivedWei ) Emitted when the contract has received the daily inflation amount. Parameters Type Description amountReceivedWei uint256 Received amount of native tokens, in wei.","title":"InflationReceived"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_rewardclaimed","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimed ( address dataProvider , address whoClaimed , address sentTo , uint256 rewardEpoch , uint256 amount ) Emitted when a data provider claims its FTSO rewards. Parameters Type Description dataProvider address Address of the data provider that accrued the reward. whoClaimed address Address that actually performed the claim. sentTo address Address that received the reward. rewardEpoch uint256 ID of the reward epoch where the reward was accrued. amount uint256 Amount of rewarded native tokens (wei).","title":"RewardClaimed"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_rewardclaimsenabled","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsEnabled ( uint256 rewardEpochId ) Emitted when reward claims have been enabled. Parameters Type Description rewardEpochId uint256 First claimable reward epoch.","title":"RewardClaimsEnabled"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_rewardclaimsexpired","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardClaimsExpired ( uint256 rewardEpochId ) Unclaimed rewards have expired and are now inaccessible. getUnclaimedReward() can be used to retrieve more information. Parameters Type Description rewardEpochId uint256 ID of the reward epoch that has just expired.","title":"RewardClaimsExpired"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_rewardsburned","text":"Defined in IIFtsoRewardManager ( Docs , Source ). event RewardsBurned ( uint256 amountBurnedWei ) Emitted when unclaimed rewards are burned. Parameters Type Description amountBurnedWei uint256 Burned amount of native tokens, in wei.","title":"RewardsBurned"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_rewardsdistributed","text":"Defined in IFtsoRewardManager ( Docs , Source ). event RewardsDistributed ( address ftso , uint256 epochId , address [] addresses , uint256 [] rewards ) Emitted every price epoch, when rewards have been distributed to each contributing data provider. Note that rewards are not claimable until the reward epoch finishes. Parameters Type Description ftso address Address of the FTSO that generated the rewards. epochId uint256 ID of the reward epoch where the rewards were accrued. addresses address[] Data provider addresses that have rewards to claim. rewards uint256[] Amounts available for claiming (wei).","title":"RewardsDistributed"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#ev_unearnedrewardsaccrued","text":"Defined in IFtsoRewardManager ( Docs , Source ). event UnearnedRewardsAccrued ( uint256 epochId , uint256 reward ) Emitted when rewards cannot be distributed during a reward epoch (for example, because the FTSO went into fallback mode) and they are accrued for later burning. Parameters Type Description epochId uint256 ID of the reward epoch where the reward was accrued. reward uint256 Total amount of accrued rewards (wei).","title":"UnearnedRewardsAccrued"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_accrueunearnedrewards_67dcac53","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function accrueUnearnedRewards ( uint256 epochId , uint256 priceEpochDurationSeconds , uint256 priceEpochEndTime ) external ; Accrue unearned rewards for a given price epoch. Typically done when the FTSO is in fallback mode or because of insufficient vote power. Simply accrue them so they will not be distributed and will be burned later. The amount of rewards that will be burned is calculated in the same way as in distributeRewards . Parameters Type Description epochId uint256 Price epoch ID. priceEpochDurationSeconds uint256 Duration of price epochs (180s). priceEpochEndTime uint256 Timestamp of the price epoch end time (end of submit period), in seconds since UNIX epoch.","title":"accrueUnearnedRewards"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_activate_0f15f4c0","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function activate ( ) external ; Activates reward manager (allows claiming rewards).","title":"activate"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_active_02fb0c5e","text":"Defined in IFtsoRewardManager ( Docs , Source ). function active ( ) external view returns ( bool ); Whether rewards can be claimed from this reward manager.","title":"active"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_autoclaim_8dc305fa","text":"Defined in IFtsoRewardManager ( Docs , Source ). function autoClaim ( address [] _rewardOwners , uint256 _rewardEpoch ) external ; Allows claiming rewards simultaneously for a list of reward owners and all unclaimed epochs before the specified one. This is meant as a convenience all-in-one reward claiming method to be used both by reward owners and registered executors . It performs a series of operations, besides claiming rewards: If a reward owner has enabled its Personal Delegation Account , rewards are also claimed for the PDA and the total claimed amount is sent to that PDA. Otherwise, the claimed amount is sent to the reward owner's account. Claimed amount is automatically wrapped through the WNat contract. If the caller is a registered executor with a non-zero fee, the fee is paid to the executor for each claimed address. Parameters Type Description _rewardOwners address[] List of reward owners to claim for. _rewardEpoch uint256 Last reward epoch ID to claim for. All previous epochs with pending rewards will be claimed too.","title":"autoClaim"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_claim_b2c12192","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claim ( address _rewardOwner , address payable _recipient , uint256 _rewardEpoch , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by percentage. Reverts if msg.sender is delegating by amount. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpoch uint256 Last reward epoch to claim for. All previous epochs with pending rewards will be claimed too. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claim"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_claimfromdataproviders_21bb25af","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claimFromDataProviders ( address _rewardOwner , address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders , bool _wrap ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards for a reward owner from specific data providers. The caller does not have to be the owner of the rewards, but must be approved by the owner to claim on his behalf by using setClaimExecutors on the claimSetupManager . This function is intended to be used to claim rewards in case of delegation by amount (explicit delegation). Reverts if msg.sender is delegating by percentage. Anybody can call this method, but rewards can only be sent to the reward owner, therefore no funds can be stolen. However, by limiting the authorized callers, the owner can control the timing of the calls. When the reward owner is the caller, rewards can be sent to any recipient set by setAllowedClaimRecipients on the claimSetupManager . The reward owner's Personal Delegation Account is always an authorized recipient. Parameters Type Description _rewardOwner address Address of the reward owner. _recipient address payable Address to transfer claimed rewards to. _rewardEpochs uint256[] Array of reward epoch IDs to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. _wrap bool Whether claimed rewards should be wrapped through the WNat contract before transferring them to the _recipient . This parameter is offered as a convenience. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claimFromDataProviders"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_claimreward_b2af870a","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claimReward ( address payable _recipient , uint256 [] _rewardEpochs ) external returns ( uint256 _rewardAmount ); Allows a percentage delegator to claim rewards. This function is intended to be used to claim rewards in case of delegation by percentage. This function is deprecated : use claim instead. Reverts if msg.sender is delegating by amount. Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'. Retained for backward compatibility. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. Returns Type Description _rewardAmount uint256 Amount of total claimed rewards (wei).","title":"claimReward"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_claimrewardfromdataproviders_d20bb542","text":"Defined in IFtsoRewardManager ( Docs , Source ). function claimRewardFromDataProviders ( address payable _recipient , uint256 [] _rewardEpochs , address [] _dataProviders ) external returns ( uint256 _rewardAmount ); Allows the caller to claim rewards from specific data providers. This function is intended to be used to claim rewards in case of delegation by amount. This function is deprecated : use claimFromDataProviders instead. Parameters Type Description _recipient address payable Address to transfer funds to. _rewardEpochs uint256[] Array of reward epoch numbers to claim for. _dataProviders address[] Array of addresses of the data providers to claim the reward from. Returns Type Description _rewardAmount uint256 Total amount of claimed rewards (wei).","title":"claimRewardFromDataProviders"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_closeexpiredrewardepoch_d6c1dbee","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function closeExpiredRewardEpoch ( uint256 _rewardEpochId ) external ; Collects funds from expired reward epoch and calculates totals. Triggered by ftsoManager on finalization of a reward epoch. Operation is irreversible: when some reward epoch is closed according to current settings, it cannot be reopened even if new parameters would allow it, because nextRewardEpochToExpire in ftsoManager never decreases. Parameters Type Description _rewardEpochId uint256 ID of the epoch to close.","title":"closeExpiredRewardEpoch"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_deactivate_51b42b00","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function deactivate ( ) external ; Deactivates reward manager (prevents claiming rewards).","title":"deactivate"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_distributerewards_a9b79e17","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function distributeRewards ( address [] addresses , uint256 [] weights , uint256 totalWeight , uint256 epochId , address ftso , uint256 priceEpochDurationSeconds , uint256 currentRewardEpoch , uint256 priceEpochEndTime , uint256 votePowerBlock ) external ; Distributes price epoch rewards to data provider accounts, according to input parameters. Must be called with totalWeight > 0 and addresses.length > 0. The amount of rewards for a given price epoch ID are calculated in FtsoRewardManager from priceEpochDurationSeconds , priceEpochEndTime and inflation authorization data (see _getTotalPriceEpochRewardWei in FtsoRewardManager . Then each data provider address is given a portion of this amount according to corresponding weight and total sum of weights. Parameters epochId and ftso are only needed so they can be passed onto the emitted event. Parameters Type Description addresses address[] Data provider addresses to reward. weights uint256[] Weights corresponding to rewarded addresses. totalWeight uint256 Sum of all weights. epochId uint256 Price epoch ID. ftso address Randomly chosen FTSO contract used to calculate the weights. priceEpochDurationSeconds uint256 Duration of price epochs (180s). currentRewardEpoch uint256 ID of the current reward epoch. Rewards for the price epoch are added to this reward epoch. priceEpochEndTime uint256 Timestamp of the price epoch end time (end of submit period), in seconds since UNIX epoch. votePowerBlock uint256 Vote power block used in the given reward epoch.","title":"distributeRewards"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_enableclaims_ea28edad","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function enableClaims ( ) external ; Enable claiming for current and all future reward epochs.","title":"enableClaims"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_firstclaimablerewardepoch_7b6b2c0a","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function firstClaimableRewardEpoch ( ) external view returns ( uint256 ); Epochs before the token distribution event at Flare launch were not be claimable. Use this method to know the first reward epoch that was claimable. Returns Type Description [0] uint256 uint256 The first reward epoch that can be claimed.","title":"firstClaimableRewardEpoch"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getclaimedreward_85b4c538","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getClaimedReward ( uint256 _rewardEpoch , address _dataProvider , address _claimer ) external view returns ( bool _claimed , uint256 _amount ); Returns information on the rewards accrued by a reward owner from a specific data provider at a specific reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID to query. _dataProvider address Address of the data provider to query. _claimer address Address of the reward owner to query. Returns Type Description _claimed bool Whether the reward has been claimed or not. _amount uint256 Accrued amount in wei.","title":"getClaimedReward"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getcontractname_f5f5ba72","text":"Defined in IIInflationReceiver ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating inflation receiver contracts through AddressUpdater . Returns Type Description [0] string Contract name.","title":"getContractName"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getcurrentrewardepoch_e7c830d4","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getCurrentRewardEpoch ( ) external view returns ( uint256 ); Returns the current reward epoch ID.","title":"getCurrentRewardEpoch"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getdataprovidercurrentfeepercentage_cfbcd25f","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 _feePercentageBIPS ); Returns the current fee percentage of a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS.","title":"getDataProviderCurrentFeePercentage"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getdataproviderfeepercentage_961c00ed","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderFeePercentage ( address _dataProvider , uint256 _rewardEpoch ) external view returns ( uint256 _feePercentageBIPS ); Returns the fee percentage of a data provider at a given reward epoch. Parameters Type Description _dataProvider address Address of the queried data provider. _rewardEpoch uint256 Reward epoch ID. Returns Type Description _feePercentageBIPS uint256 Fee percentage in BIPS.","title":"getDataProviderFeePercentage"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getdataproviderperformanceinfo_eb82dd7f","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderPerformanceInfo ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _rewardAmount , uint256 _votePowerIgnoringRevocation ); Returns information on rewards and vote power of a data provider at a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. _dataProvider address Address of the data provider to query. Returns Type Description _rewardAmount uint256 Amount of rewards (wei). _votePowerIgnoringRevocation uint256 Vote power, not including revocations.","title":"getDataProviderPerformanceInfo"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getdataproviderscheduledfeepercentagechanges_33b7971e","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] _feePercentageBIPS , uint256 [] _validFromEpoch , bool [] _fixed ); Returns the scheduled fee percentage changes for a data provider. Parameters Type Description _dataProvider address Address of the queried data provider. Returns Type Description _feePercentageBIPS uint256[] Array of fee percentages in BIPS. _validFromEpoch uint256[] Array of block numbers from which the fee settings are effective. _fixed bool[] Array of boolean values indicating whether settings are subject to change or not.","title":"getDataProviderScheduledFeePercentageChanges"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getepochreward_d418634a","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getEpochReward ( uint256 _rewardEpoch ) external view returns ( uint256 _totalReward , uint256 _claimedReward ); Returns information on an epoch's rewards. Parameters Type Description _rewardEpoch uint256 Reward epoch ID. Returns Type Description _totalReward uint256 Total amount of rewards accrued on that epoch, in wei. _claimedReward uint256 Total amount of rewards that have already been claimed, in wei.","title":"getEpochReward"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getepochswithclaimablerewards_0441218e","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithClaimableRewards ( ) external view returns ( uint256 _startEpochId , uint256 _endEpochId ); Returns the reward epoch range for which rewards can be claimed. Rewards outside this range are unclaimable, either because they have expired or because the reward epoch is still ongoing. Returns Type Description _startEpochId uint256 The oldest epoch ID that allows reward claiming. _endEpochId uint256 The newest epoch ID that allows reward claiming.","title":"getEpochsWithClaimableRewards"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getepochswithunclaimedrewards_b4a2043d","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view returns ( uint256 [] _epochIds ); Returns the array of claimable epoch IDs for which the rewards of a reward owner have not yet been claimed. Parameters Type Description _beneficiary address Address of the reward owner to query. Reverts if it uses delegation by amount. Returns Type Description _epochIds uint256[] Array of epoch IDs.","title":"getEpochsWithUnclaimedRewards"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getexpectedbalance_af04cd3b","text":"Defined in IIInflationReceiver ( Docs , Source ). function getExpectedBalance ( ) external view returns ( uint256 ); Returns the contract's expected balance (actual balance may be higher due to self-destruct funds). Returns Type Description [0] uint256 Expected native token balance.","title":"getExpectedBalance"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getinflationaddress_ed39d3f8","text":"Defined in IIInflationReceiver ( Docs , Source ). function getInflationAddress ( ) external returns ( address ); Returns the address of the Inflation contract.","title":"getInflationAddress"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getinitialrewardepoch_3123b7d8","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getInitialRewardEpoch ( ) external view returns ( uint256 ); Returns the initial reward epoch ID for this reward manager contract. This corresponds to the oldest reward epoch with claimable rewards in the previous reward manager when this one took over. Set by governance through setInitialRewardData .","title":"getInitialRewardEpoch"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getrewardepochtoexpirenext_3e7ff857","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochToExpireNext ( ) external view returns ( uint256 ); Returns the reward epoch that will expire next once a new reward epoch starts.","title":"getRewardEpochToExpireNext"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getrewardepochvotepowerblock_f2edab5a","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getRewardEpochVotePowerBlock ( uint256 _rewardEpoch ) external view returns ( uint256 ); Returns the vote power block of a given reward epoch. Parameters Type Description _rewardEpoch uint256 Reward epoch ID.","title":"getRewardEpochVotePowerBlock"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getstateofrewards_a4472c10","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] _dataProviders , uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address at a specific reward epoch. Parameters Type Description _beneficiary address Address of the beneficiary to query. It can be a data provider or a delegator, for example. Reverts if the queried address is delegating by amount. _rewardEpoch uint256 Reward epoch ID to query. Returns Type Description _dataProviders address[] Array of addresses of data providers. _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not.","title":"getStateOfRewards"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getstateofrewardsfromdataproviders_e416b7e1","text":"Defined in IFtsoRewardManager ( Docs , Source ). function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] _dataProviders ) external view returns ( uint256 [] _rewardAmounts , bool [] _claimed , bool _claimable ); Returns the state of rewards for a given address coming from a specific set of data providers, at a specific reward epoch. Parameters Type Description _beneficiary address Address of beneficiary to query. _rewardEpoch uint256 Reward epoch ID to query. _dataProviders address[] Array of addresses of the data providers to query. Returns Type Description _rewardAmounts uint256[] Array of reward amounts received from each provider, in wei. _claimed bool[] Array of boolean values indicating whether each reward has been claimed or not. _claimable bool Boolean value indicating whether rewards are claimable or not.","title":"getStateOfRewardsFromDataProviders"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_gettokenpoolsupplydata_2dafdbbf","text":"Defined in IITokenPool ( Docs , Source ). function getTokenPoolSupplyData ( ) external returns ( uint256 _lockedFundsWei , uint256 _totalInflationAuthorizedWei , uint256 _totalClaimedWei ); Returns token pool supply data. Returns Type Description _lockedFundsWei uint256 Total amount of funds ever locked in the token pool (wei). _lockedFundsWei - _totalClaimedWei is the amount currently locked and outside the circulating supply. _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalClaimedWei uint256 Total claimed amount (wei).","title":"getTokenPoolSupplyData"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_getunclaimedreward_657d9695","text":"Defined in IIFtsoRewardManager ( Docs , Source ). function getUnclaimedReward ( uint256 _rewardEpoch , address _dataProvider ) external view returns ( uint256 _amount , uint256 _weight ); Returns information on unclaimed rewards for a given data provider and epoch. Parameters Type Description _rewardEpoch uint256 Queried reward epoch ID. _dataProvider address Address of the queried data provider. Returns Type Description _amount uint256 Amount available to be claimed, in wei. _weight uint256 Portion of total vote power used in this reward epoch that has not yet claimed its reward, in BIPS. It decreases to 0 when all data providers have claimed their rewards.","title":"getUnclaimedReward"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_nextclaimablerewardepoch_69b91b59","text":"Defined in IFtsoRewardManager ( Docs , Source ). function nextClaimableRewardEpoch ( address _rewardOwner ) external view returns ( uint256 ); Returns the next claimable reward epoch for a reward owner. Parameters Type Description _rewardOwner address Address of the reward owner to query.","title":"nextClaimableRewardEpoch"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_receiveinflation_06201f1d","text":"Defined in IIInflationReceiver ( Docs , Source ). function receiveInflation ( ) external payable ; Receive native tokens from inflation.","title":"receiveInflation"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_setdailyauthorizedinflation_e2739563","text":"Defined in IIInflationReceiver ( Docs , Source ). function setDailyAuthorizedInflation ( uint256 _toAuthorizeWei ) external ; Notify the receiver that it is entitled to receive a new inflation amount. Parameters Type Description _toAuthorizeWei uint256 The amount of inflation that can be awarded in the coming day, in wei.","title":"setDailyAuthorizedInflation"},{"location":"apis/smart-contracts/IIFtsoRewardManager/#fn_setdataproviderfeepercentage_16e69328","text":"Defined in IFtsoRewardManager ( Docs , Source ). function setDataProviderFeePercentage ( uint256 _feePercentageBIPS ) external returns ( uint256 _validFromEpoch ); Sets the fee a data provider keeps from all delegations. Takes effect after feeValueUpdateOffset reward epochs have elapsed. When called multiple times inside the same reward epoch, only the last value remains. Parameters Type Description _feePercentageBIPS uint256 Fee percentage in BIPS. Returns Type Description _validFromEpoch uint256 Reward epoch number when the new fee percentage will become effective.","title":"setDataProviderFeePercentage"},{"location":"apis/smart-contracts/IIGovernanceVotePower/","text":"IIGovernanceVotePower # Source | Inherits from IGovernanceVotePower Internal interface for contracts delegating their governance vote power. Events # DelegateChanged # Defined in IIGovernanceVotePower ( Docs , Source ). event DelegateChanged ( address delegator , address fromDelegate , address toDelegate ) Emitted when an account starts delegating vote power or switches its delegation to another address. The event is always emitted from a GovernanceVotePower contract. Parameters Type Description delegator address Account delegating its vote power. fromDelegate address Account receiving the delegation before the change. Can be address(0) if there was no previous delegation. toDelegate address Account receiving the delegation after the change. Can be address(0) if delegator just undelegated all its vote power. DelegateVotesChanged # Defined in IIGovernanceVotePower ( Docs , Source ). event DelegateVotesChanged ( address delegate , uint256 previousBalance , uint256 newBalance ) Emitted when a delegate 's vote power changes, as a result of a new delegation or a token transfer, for example. The event is always emitted from a GovernanceVotePower contract. Parameters Type Description delegate address The account receiving the changing delegated vote power. previousBalance uint256 Delegated vote power before the change. newBalance uint256 Delegated vote power after the change. Functions # delegate # Defined in IGovernanceVotePower ( Docs , Source ). function delegate ( address _to ) external ; Delegates all governance vote power of msg.sender to address _to . Parameters Type Description _to address The address of the recipient. getCleanupBlockNumber # Defined in IIGovernanceVotePower ( Docs , Source ). function getCleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. getDelegateOfAt # Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAt ( address _who , uint256 _blockNumber ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at a given block number. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the address. Returns Type Description [0] address Address where _who was delegating its governance vote power at block _blockNumber . getDelegateOfAtNow # Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAtNow ( address _who ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at the latest block number. Parameters Type Description _who address The address being queried. Returns Type Description [0] address Address where _who is currently delegating its governance vote power. getVotes # Defined in IGovernanceVotePower ( Docs , Source ). function getVotes ( address _who ) external view returns ( uint256 ); Gets the governance vote power of an address at the latest block, including all delegations made to it. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Governance vote power of account at the lastest block. ownerToken # Defined in IIGovernanceVotePower ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); Get the token that this governance vote power contract belongs to. Returns Type Description [0] contract IVPToken The IVPToken interface owning this contract. setCleanerContract # Defined in IIGovernanceVotePower ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in IIGovernanceVotePower ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number. undelegate # Defined in IGovernanceVotePower ( Docs , Source ). function undelegate ( ) external ; Undelegates all governance vote power of msg.sender . updateAtTokenTransfer # Defined in IIGovernanceVotePower ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 _fromBalance , uint256 _toBalance , uint256 _amount ) external ; Update governance vote power of all involved delegates after tokens are transferred. This function MUST be called after each governance token transfer for the delegates to reflect the correct balance. Parameters Type Description _from address Source address of the transfer. _to address Destination address of the transfer. _fromBalance uint256 Ignored. _toBalance uint256 Ignored. _amount uint256 Amount being transferred. votePowerOfAt # Defined in IGovernanceVotePower ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Gets the governance vote power of an address at a given block number, including all delegations made to it. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the vote power. Returns Type Description [0] uint256 Governance vote power of _who at _blockNumber .","title":"IIGovernanceVotePower"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#ct_iigovernancevotepower","text":"Source | Inherits from IGovernanceVotePower Internal interface for contracts delegating their governance vote power.","title":"IIGovernanceVotePower"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#ev_delegatechanged","text":"Defined in IIGovernanceVotePower ( Docs , Source ). event DelegateChanged ( address delegator , address fromDelegate , address toDelegate ) Emitted when an account starts delegating vote power or switches its delegation to another address. The event is always emitted from a GovernanceVotePower contract. Parameters Type Description delegator address Account delegating its vote power. fromDelegate address Account receiving the delegation before the change. Can be address(0) if there was no previous delegation. toDelegate address Account receiving the delegation after the change. Can be address(0) if delegator just undelegated all its vote power.","title":"DelegateChanged"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#ev_delegatevoteschanged","text":"Defined in IIGovernanceVotePower ( Docs , Source ). event DelegateVotesChanged ( address delegate , uint256 previousBalance , uint256 newBalance ) Emitted when a delegate 's vote power changes, as a result of a new delegation or a token transfer, for example. The event is always emitted from a GovernanceVotePower contract. Parameters Type Description delegate address The account receiving the changing delegated vote power. previousBalance uint256 Delegated vote power before the change. newBalance uint256 Delegated vote power after the change.","title":"DelegateVotesChanged"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_delegate_5c19a95c","text":"Defined in IGovernanceVotePower ( Docs , Source ). function delegate ( address _to ) external ; Delegates all governance vote power of msg.sender to address _to . Parameters Type Description _to address The address of the recipient.","title":"delegate"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_getcleanupblocknumber_a72ec4b6","text":"Defined in IIGovernanceVotePower ( Docs , Source ). function getCleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"getCleanupBlockNumber"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_getdelegateofat_3c028e9d","text":"Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAt ( address _who , uint256 _blockNumber ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at a given block number. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the address. Returns Type Description [0] address Address where _who was delegating its governance vote power at block _blockNumber .","title":"getDelegateOfAt"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_getdelegateofatnow_b3e871ee","text":"Defined in IGovernanceVotePower ( Docs , Source ). function getDelegateOfAtNow ( address _who ) external view returns ( address ); Gets the address an account is delegating its governance vote power to, at the latest block number. Parameters Type Description _who address The address being queried. Returns Type Description [0] address Address where _who is currently delegating its governance vote power.","title":"getDelegateOfAtNow"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_getvotes_9ab24eb0","text":"Defined in IGovernanceVotePower ( Docs , Source ). function getVotes ( address _who ) external view returns ( uint256 ); Gets the governance vote power of an address at the latest block, including all delegations made to it. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Governance vote power of account at the lastest block.","title":"getVotes"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_ownertoken_65371883","text":"Defined in IIGovernanceVotePower ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); Get the token that this governance vote power contract belongs to. Returns Type Description [0] contract IVPToken The IVPToken interface owning this contract.","title":"ownerToken"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_setcleanercontract_f6a494af","text":"Defined in IIGovernanceVotePower ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_setcleanupblocknumber_13de97f5","text":"Defined in IIGovernanceVotePower ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_undelegate_92ab89bb","text":"Defined in IGovernanceVotePower ( Docs , Source ). function undelegate ( ) external ; Undelegates all governance vote power of msg.sender .","title":"undelegate"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_updateattokentransfer_eadb4362","text":"Defined in IIGovernanceVotePower ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 _fromBalance , uint256 _toBalance , uint256 _amount ) external ; Update governance vote power of all involved delegates after tokens are transferred. This function MUST be called after each governance token transfer for the delegates to reflect the correct balance. Parameters Type Description _from address Source address of the transfer. _to address Destination address of the transfer. _fromBalance uint256 Ignored. _toBalance uint256 Ignored. _amount uint256 Amount being transferred.","title":"updateAtTokenTransfer"},{"location":"apis/smart-contracts/IIGovernanceVotePower/#fn_votepowerofat_92bfe6d8","text":"Defined in IGovernanceVotePower ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Gets the governance vote power of an address at a given block number, including all delegations made to it. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number at which to fetch the vote power. Returns Type Description [0] uint256 Governance vote power of _who at _blockNumber .","title":"votePowerOfAt"},{"location":"apis/smart-contracts/IIInflationReceiver/","text":"IIInflationReceiver # Source Internal interface for contracts that can receive inflation. Functions # getContractName # Defined in IIInflationReceiver ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating inflation receiver contracts through AddressUpdater . Returns Type Description [0] string Contract name. getExpectedBalance # Defined in IIInflationReceiver ( Docs , Source ). function getExpectedBalance ( ) external view returns ( uint256 ); Returns the contract's expected balance (actual balance may be higher due to self-destruct funds). Returns Type Description [0] uint256 Expected native token balance. getInflationAddress # Defined in IIInflationReceiver ( Docs , Source ). function getInflationAddress ( ) external returns ( address ); Returns the address of the Inflation contract. receiveInflation # Defined in IIInflationReceiver ( Docs , Source ). function receiveInflation ( ) external payable ; Receive native tokens from inflation. setDailyAuthorizedInflation # Defined in IIInflationReceiver ( Docs , Source ). function setDailyAuthorizedInflation ( uint256 _toAuthorizeWei ) external ; Notify the receiver that it is entitled to receive a new inflation amount. Parameters Type Description _toAuthorizeWei uint256 The amount of inflation that can be awarded in the coming day, in wei.","title":"IIInflationReceiver"},{"location":"apis/smart-contracts/IIInflationReceiver/#ct_iiinflationreceiver","text":"Source Internal interface for contracts that can receive inflation.","title":"IIInflationReceiver"},{"location":"apis/smart-contracts/IIInflationReceiver/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIInflationReceiver/#fn_getcontractname_f5f5ba72","text":"Defined in IIInflationReceiver ( Docs , Source ). function getContractName ( ) external view returns ( string ); Implement this function to allow updating inflation receiver contracts through AddressUpdater . Returns Type Description [0] string Contract name.","title":"getContractName"},{"location":"apis/smart-contracts/IIInflationReceiver/#fn_getexpectedbalance_af04cd3b","text":"Defined in IIInflationReceiver ( Docs , Source ). function getExpectedBalance ( ) external view returns ( uint256 ); Returns the contract's expected balance (actual balance may be higher due to self-destruct funds). Returns Type Description [0] uint256 Expected native token balance.","title":"getExpectedBalance"},{"location":"apis/smart-contracts/IIInflationReceiver/#fn_getinflationaddress_ed39d3f8","text":"Defined in IIInflationReceiver ( Docs , Source ). function getInflationAddress ( ) external returns ( address ); Returns the address of the Inflation contract.","title":"getInflationAddress"},{"location":"apis/smart-contracts/IIInflationReceiver/#fn_receiveinflation_06201f1d","text":"Defined in IIInflationReceiver ( Docs , Source ). function receiveInflation ( ) external payable ; Receive native tokens from inflation.","title":"receiveInflation"},{"location":"apis/smart-contracts/IIInflationReceiver/#fn_setdailyauthorizedinflation_e2739563","text":"Defined in IIInflationReceiver ( Docs , Source ). function setDailyAuthorizedInflation ( uint256 _toAuthorizeWei ) external ; Notify the receiver that it is entitled to receive a new inflation amount. Parameters Type Description _toAuthorizeWei uint256 The amount of inflation that can be awarded in the coming day, in wei.","title":"setDailyAuthorizedInflation"},{"location":"apis/smart-contracts/IIPriceSubmitter/","text":"IIPriceSubmitter # Source | Inherits from IPriceSubmitter Internal interface for the PriceSubmitter contract. Functions # getCurrentRandom # Defined in IPriceSubmitter ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous epoch, obtained from the random numbers provided by all data providers along with their data submissions. Note that the random number for the previous epoch keeps updating as new submissions are revealed. Returns Type Description [0] uint256 Random number calculated from all data provider's submissions. getFtsoManager # Defined in IPriceSubmitter ( Docs , Source ). function getFtsoManager ( ) external view returns ( contract IFtsoManagerGenesis ); Returns the address of the FtsoManager contract. getFtsoRegistry # Defined in IPriceSubmitter ( Docs , Source ). function getFtsoRegistry ( ) external view returns ( contract IFtsoRegistryGenesis ); Returns the address of the FtsoRegistry contract. getRandom # Defined in IPriceSubmitter ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Note that only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch. getTrustedAddresses # Defined in IIPriceSubmitter ( Docs , Source ). function getTrustedAddresses ( ) external view returns ( address []); Returns the list of trusted addresses that are always allowed to submit and reveal. Returns Type Description [0] address[] address[] Array of trusted voter addresses. getVoterWhitelister # Defined in IPriceSubmitter ( Docs , Source ). function getVoterWhitelister ( ) external view returns ( address ); Returns the address of the VoterWhitelister contract managing the data provider whitelist. revealPrices # Defined in IPriceSubmitter ( Docs , Source ). function revealPrices ( uint256 _epochId , uint256 [] _ftsoIndices , uint256 [] _prices , uint256 _random ) external ; Reveals submitted prices during the epoch reveal period. The hash of FTSO indices, prices, random number, and voter address must be equal to the hash previously submitted with submitHash . Emits a PricesRevealed event. Parameters Type Description _epochId uint256 ID of the epoch to which the price hashes are submitted. _ftsoIndices uint256[] List of FTSO indices in ascending order. _prices uint256[] List of submitted prices in USD. _random uint256 Submitted random number. setTrustedAddresses # Defined in IIPriceSubmitter ( Docs , Source ). function setTrustedAddresses ( address [] _trustedAddresses ) external ; Set trusted addresses that are always allowed to submit and reveal. Only ftso manager can call this method. Parameters Type Description _trustedAddresses address[] Array of voter addresses. submitHash # Defined in IPriceSubmitter ( Docs , Source ). function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Submits a hash for the current epoch. Can only be called by FTSO data providers whitelisted through the VoterWhitelisted contract. Emits the HashSubmitted event. Parameters Type Description _epochId uint256 ID of the target epoch to which the hash is submitted. _hash bytes32 A hash of the FTSO indices, prices, random number, and voter address. voterWhitelistBitmap # Defined in IPriceSubmitter ( Docs , Source ). function voterWhitelistBitmap ( address _voter ) external view returns ( uint256 ); Returns a bitmap of all FTSOs for which a data provider is allowed to submit prices or hashes. Parameters Type Description _voter address Address of the voter. Returns Type Description [0] uint256 If a data provider is allowed to vote for a given FTSO index, the corresponding bit in the result is 1. voterWhitelisted # Defined in IIPriceSubmitter ( Docs , Source ). function voterWhitelisted ( address _voter , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when a new voter has been whitelisted. Parameters Type Description _voter address Voter address that has been added to the whitelist. _ftsoIndex uint256 Index of the FTSO to which the voter has registered. Each FTSO has its own whitelist. votersRemovedFromWhitelist # Defined in IIPriceSubmitter ( Docs , Source ). function votersRemovedFromWhitelist ( address [] _voters , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when one or more voters have been removed. Parameters Type Description _voters address[] Array of voter addresses that have been removed. _ftsoIndex uint256 Index of the FTSO to which the voters were registered. Each FTSO has its own whitelist.","title":"IIPriceSubmitter"},{"location":"apis/smart-contracts/IIPriceSubmitter/#ct_iipricesubmitter","text":"Source | Inherits from IPriceSubmitter Internal interface for the PriceSubmitter contract.","title":"IIPriceSubmitter"},{"location":"apis/smart-contracts/IIPriceSubmitter/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_getcurrentrandom_d89601fd","text":"Defined in IPriceSubmitter ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous epoch, obtained from the random numbers provided by all data providers along with their data submissions. Note that the random number for the previous epoch keeps updating as new submissions are revealed. Returns Type Description [0] uint256 Random number calculated from all data provider's submissions.","title":"getCurrentRandom"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_getftsomanager_b39c6858","text":"Defined in IPriceSubmitter ( Docs , Source ). function getFtsoManager ( ) external view returns ( contract IFtsoManagerGenesis ); Returns the address of the FtsoManager contract.","title":"getFtsoManager"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_getftsoregistry_8c9d28b6","text":"Defined in IPriceSubmitter ( Docs , Source ). function getFtsoRegistry ( ) external view returns ( contract IFtsoRegistryGenesis ); Returns the address of the FtsoRegistry contract.","title":"getFtsoRegistry"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_getrandom_cd4b6914","text":"Defined in IPriceSubmitter ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Note that only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch.","title":"getRandom"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_gettrustedaddresses_ffacb84e","text":"Defined in IIPriceSubmitter ( Docs , Source ). function getTrustedAddresses ( ) external view returns ( address []); Returns the list of trusted addresses that are always allowed to submit and reveal. Returns Type Description [0] address[] address[] Array of trusted voter addresses.","title":"getTrustedAddresses"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_getvoterwhitelister_71e1fad9","text":"Defined in IPriceSubmitter ( Docs , Source ). function getVoterWhitelister ( ) external view returns ( address ); Returns the address of the VoterWhitelister contract managing the data provider whitelist.","title":"getVoterWhitelister"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_revealprices_e2db5a52","text":"Defined in IPriceSubmitter ( Docs , Source ). function revealPrices ( uint256 _epochId , uint256 [] _ftsoIndices , uint256 [] _prices , uint256 _random ) external ; Reveals submitted prices during the epoch reveal period. The hash of FTSO indices, prices, random number, and voter address must be equal to the hash previously submitted with submitHash . Emits a PricesRevealed event. Parameters Type Description _epochId uint256 ID of the epoch to which the price hashes are submitted. _ftsoIndices uint256[] List of FTSO indices in ascending order. _prices uint256[] List of submitted prices in USD. _random uint256 Submitted random number.","title":"revealPrices"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_settrustedaddresses_9ec2b581","text":"Defined in IIPriceSubmitter ( Docs , Source ). function setTrustedAddresses ( address [] _trustedAddresses ) external ; Set trusted addresses that are always allowed to submit and reveal. Only ftso manager can call this method. Parameters Type Description _trustedAddresses address[] Array of voter addresses.","title":"setTrustedAddresses"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_submithash_8fc6f667","text":"Defined in IPriceSubmitter ( Docs , Source ). function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Submits a hash for the current epoch. Can only be called by FTSO data providers whitelisted through the VoterWhitelisted contract. Emits the HashSubmitted event. Parameters Type Description _epochId uint256 ID of the target epoch to which the hash is submitted. _hash bytes32 A hash of the FTSO indices, prices, random number, and voter address.","title":"submitHash"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_voterwhitelistbitmap_7ac420ad","text":"Defined in IPriceSubmitter ( Docs , Source ). function voterWhitelistBitmap ( address _voter ) external view returns ( uint256 ); Returns a bitmap of all FTSOs for which a data provider is allowed to submit prices or hashes. Parameters Type Description _voter address Address of the voter. Returns Type Description [0] uint256 If a data provider is allowed to vote for a given FTSO index, the corresponding bit in the result is 1.","title":"voterWhitelistBitmap"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_voterwhitelisted_9d986f91","text":"Defined in IIPriceSubmitter ( Docs , Source ). function voterWhitelisted ( address _voter , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when a new voter has been whitelisted. Parameters Type Description _voter address Voter address that has been added to the whitelist. _ftsoIndex uint256 Index of the FTSO to which the voter has registered. Each FTSO has its own whitelist.","title":"voterWhitelisted"},{"location":"apis/smart-contracts/IIPriceSubmitter/#fn_votersremovedfromwhitelist_76794efb","text":"Defined in IIPriceSubmitter ( Docs , Source ). function votersRemovedFromWhitelist ( address [] _voters , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when one or more voters have been removed. Parameters Type Description _voters address[] Array of voter addresses that have been removed. _ftsoIndex uint256 Index of the FTSO to which the voters were registered. Each FTSO has its own whitelist.","title":"votersRemovedFromWhitelist"},{"location":"apis/smart-contracts/IITokenPool/","text":"IITokenPool # Source Internal interface for token pools. Functions # getTokenPoolSupplyData # Defined in IITokenPool ( Docs , Source ). function getTokenPoolSupplyData ( ) external returns ( uint256 _lockedFundsWei , uint256 _totalInflationAuthorizedWei , uint256 _totalClaimedWei ); Returns token pool supply data. Returns Type Description _lockedFundsWei uint256 Total amount of funds ever locked in the token pool (wei). _lockedFundsWei - _totalClaimedWei is the amount currently locked and outside the circulating supply. _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalClaimedWei uint256 Total claimed amount (wei).","title":"IITokenPool"},{"location":"apis/smart-contracts/IITokenPool/#ct_iitokenpool","text":"Source Internal interface for token pools.","title":"IITokenPool"},{"location":"apis/smart-contracts/IITokenPool/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IITokenPool/#fn_gettokenpoolsupplydata_2dafdbbf","text":"Defined in IITokenPool ( Docs , Source ). function getTokenPoolSupplyData ( ) external returns ( uint256 _lockedFundsWei , uint256 _totalInflationAuthorizedWei , uint256 _totalClaimedWei ); Returns token pool supply data. Returns Type Description _lockedFundsWei uint256 Total amount of funds ever locked in the token pool (wei). _lockedFundsWei - _totalClaimedWei is the amount currently locked and outside the circulating supply. _totalInflationAuthorizedWei uint256 Total inflation authorized amount (wei). _totalClaimedWei uint256 Total claimed amount (wei).","title":"getTokenPoolSupplyData"},{"location":"apis/smart-contracts/IIVPContract/","text":"IIVPContract # Source | Inherits from IICleanable , IVPContractEvents Internal interface for helper contracts handling functionality for an associated VPToken . Functions # batchVotePowerOfAt # Defined in IIVPContract ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Get the vote power of a set of addresses at a given block number. Parameters Type Description _owners address[] The list of addresses being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256[] Vote power of each address at _blockNumber , including any delegation received. cleanupBlockNumber # Defined in IICleanable ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. delegate # Defined in IIVPContract ( Docs , Source ). function delegate ( address _from , address _to , uint256 _balance , uint256 _bips ) external ; Delegate _bips percentage of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes delegation). delegateExplicit # Defined in IIVPContract ( Docs , Source ). function delegateExplicit ( address _from , address _to , uint256 _balance , uint256 _amount ) external ; Explicitly delegate _amount tokens of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 undelegates _to ). delegatesOf # Defined in IIVPContract ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator. Parameters Type Description _owner address The address of the delegator being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode. delegatesOfAt # Defined in IIVPContract ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator, at a given block. Parameters Type Description _owner address The address of the delegator being queried. _blockNumber uint256 The block number being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode. delegationModeOf # Defined in IIVPContract ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode of an address. This mode determines whether vote power is allocated by percentage or by explicit value and cannot be changed once set with delegate or delegateExplicit . Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode. isReplacement # Defined in IIVPContract ( Docs , Source ). function isReplacement ( ) external view returns ( bool ); Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block. ownerToken # Defined in IIVPContract ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); The VPToken (or some other contract) that owns this VPContract . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling IIVPContract methods. Owner token is also used in case of replacement to recover vote powers from balances. revokeDelegationAt # Defined in IIVPContract ( Docs , Source ). function revokeDelegationAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external ; Revoke all vote power delegation from a delegator address to a delegatee address at a given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate or delegateExplicit with value of 0, or undelegateAll / undelegateAllExplicit . Parameters Type Description _from address The address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number at which to revoke delegation. Must be in the past. setCleanerContract # Defined in IICleanable ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in IICleanable ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number. undelegateAll # Defined in IIVPContract ( Docs , Source ). function undelegateAll ( address _from , uint256 _balance ) external ; Undelegate all voting power for a delegator address. Can only be used with percentage delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _balance uint256 The delegator's current balance. undelegateAllExplicit # Defined in IIVPContract ( Docs , Source ). function undelegateAllExplicit ( address _from , address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount for a delegator address. Can only be used with explicit delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete). undelegatedVotePowerOf # Defined in IIVPContract ( Docs , Source ). function undelegatedVotePowerOf ( address _owner , uint256 _balance ) external view returns ( uint256 ); Compute the current undelegated vote power of an address. Parameters Type Description _owner address The address being queried. _balance uint256 Current balance of that address. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power currently not being delegated to other addresses. undelegatedVotePowerOfAt # Defined in IIVPContract ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Compute the undelegated vote power of an address at a given block. Parameters Type Description _owner address The address being queried. _balance uint256 _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power that was not being delegated to other addresses at that block number. updateAtTokenTransfer # Defined in IIVPContract ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 _fromBalance , uint256 _toBalance , uint256 _amount ) external ; Update vote powers when tokens are transferred. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations. Parameters Type Description _from address Source account of the transfer. _to address Destination account of the transfer. _fromBalance uint256 Balance of the source account before the transfer. _toBalance uint256 Balance of the destination account before the transfer. _amount uint256 Amount that has been transferred. votePowerFromTo # Defined in IIVPContract ( Docs , Source ). function votePowerFromTo ( address _from , address _to , uint256 _balance ) external view returns ( uint256 ); Get current delegated vote power from a delegator to a delegatee. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. Returns Type Description [0] uint256 The delegated vote power. votePowerFromToAt # Defined in IIVPContract ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated the vote power from a delegator to a delegatee at a given block number. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The delegated vote power. votePowerOf # Defined in IIVPContract ( Docs , Source ). function votePowerOf ( address _who ) external view returns ( uint256 ); Get the current vote power of an address. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Current vote power of _who , including any delegation received. votePowerOfAt # Defined in IIVPContract ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of an address at a given block number Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. votePowerOfAtCached # Defined in IIVPContract ( Docs , Source ). function votePowerOfAtCached ( address _who , uint256 _blockNumber ) external returns ( uint256 ); Get the vote power of an address at a given block number. Reads/updates cache and upholds revocations. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. votePowerOfAtIgnoringRevocation # Defined in IIVPContract ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of an address at a given block number, ignoring revocation information and cache. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. Result doesn't change if vote power is revoked.","title":"IIVPContract"},{"location":"apis/smart-contracts/IIVPContract/#ct_iivpcontract","text":"Source | Inherits from IICleanable , IVPContractEvents Internal interface for helper contracts handling functionality for an associated VPToken .","title":"IIVPContract"},{"location":"apis/smart-contracts/IIVPContract/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIVPContract/#fn_batchvotepowerofat_49e3c7e5","text":"Defined in IIVPContract ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Get the vote power of a set of addresses at a given block number. Parameters Type Description _owners address[] The list of addresses being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256[] Vote power of each address at _blockNumber , including any delegation received.","title":"batchVotePowerOfAt"},{"location":"apis/smart-contracts/IIVPContract/#fn_cleanupblocknumber_deea13e7","text":"Defined in IICleanable ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"cleanupBlockNumber"},{"location":"apis/smart-contracts/IIVPContract/#fn_delegate_6230001a","text":"Defined in IIVPContract ( Docs , Source ). function delegate ( address _from , address _to , uint256 _balance , uint256 _bips ) external ; Delegate _bips percentage of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes delegation).","title":"delegate"},{"location":"apis/smart-contracts/IIVPContract/#fn_delegateexplicit_404d9e82","text":"Defined in IIVPContract ( Docs , Source ). function delegateExplicit ( address _from , address _to , uint256 _balance , uint256 _amount ) external ; Explicitly delegate _amount tokens of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 undelegates _to ).","title":"delegateExplicit"},{"location":"apis/smart-contracts/IIVPContract/#fn_delegatesof_7de5b8ed","text":"Defined in IIVPContract ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator. Parameters Type Description _owner address The address of the delegator being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode.","title":"delegatesOf"},{"location":"apis/smart-contracts/IIVPContract/#fn_delegatesofat_ed475a79","text":"Defined in IIVPContract ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator, at a given block. Parameters Type Description _owner address The address of the delegator being queried. _blockNumber uint256 The block number being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode.","title":"delegatesOfAt"},{"location":"apis/smart-contracts/IIVPContract/#fn_delegationmodeof_f6837767","text":"Defined in IIVPContract ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode of an address. This mode determines whether vote power is allocated by percentage or by explicit value and cannot be changed once set with delegate or delegateExplicit . Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode.","title":"delegationModeOf"},{"location":"apis/smart-contracts/IIVPContract/#fn_isreplacement_aa94d3f2","text":"Defined in IIVPContract ( Docs , Source ). function isReplacement ( ) external view returns ( bool ); Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block.","title":"isReplacement"},{"location":"apis/smart-contracts/IIVPContract/#fn_ownertoken_65371883","text":"Defined in IIVPContract ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); The VPToken (or some other contract) that owns this VPContract . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling IIVPContract methods. Owner token is also used in case of replacement to recover vote powers from balances.","title":"ownerToken"},{"location":"apis/smart-contracts/IIVPContract/#fn_revokedelegationat_c7c62fab","text":"Defined in IIVPContract ( Docs , Source ). function revokeDelegationAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external ; Revoke all vote power delegation from a delegator address to a delegatee address at a given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate or delegateExplicit with value of 0, or undelegateAll / undelegateAllExplicit . Parameters Type Description _from address The address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number at which to revoke delegation. Must be in the past.","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/IIVPContract/#fn_setcleanercontract_f6a494af","text":"Defined in IICleanable ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/IIVPContract/#fn_setcleanupblocknumber_13de97f5","text":"Defined in IICleanable ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/IIVPContract/#fn_undelegateall_05109ecf","text":"Defined in IIVPContract ( Docs , Source ). function undelegateAll ( address _from , uint256 _balance ) external ; Undelegate all voting power for a delegator address. Can only be used with percentage delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _balance uint256 The delegator's current balance.","title":"undelegateAll"},{"location":"apis/smart-contracts/IIVPContract/#fn_undelegateallexplicit_0f8b8af7","text":"Defined in IIVPContract ( Docs , Source ). function undelegateAllExplicit ( address _from , address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount for a delegator address. Can only be used with explicit delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete).","title":"undelegateAllExplicit"},{"location":"apis/smart-contracts/IIVPContract/#fn_undelegatedvotepowerof_4a03d556","text":"Defined in IIVPContract ( Docs , Source ). function undelegatedVotePowerOf ( address _owner , uint256 _balance ) external view returns ( uint256 ); Compute the current undelegated vote power of an address. Parameters Type Description _owner address The address being queried. _balance uint256 Current balance of that address. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power currently not being delegated to other addresses.","title":"undelegatedVotePowerOf"},{"location":"apis/smart-contracts/IIVPContract/#fn_undelegatedvotepowerofat_31503927","text":"Defined in IIVPContract ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Compute the undelegated vote power of an address at a given block. Parameters Type Description _owner address The address being queried. _balance uint256 _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power that was not being delegated to other addresses at that block number.","title":"undelegatedVotePowerOfAt"},{"location":"apis/smart-contracts/IIVPContract/#fn_updateattokentransfer_eadb4362","text":"Defined in IIVPContract ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 _fromBalance , uint256 _toBalance , uint256 _amount ) external ; Update vote powers when tokens are transferred. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations. Parameters Type Description _from address Source account of the transfer. _to address Destination account of the transfer. _fromBalance uint256 Balance of the source account before the transfer. _toBalance uint256 Balance of the destination account before the transfer. _amount uint256 Amount that has been transferred.","title":"updateAtTokenTransfer"},{"location":"apis/smart-contracts/IIVPContract/#fn_votepowerfromto_9dc6b9f2","text":"Defined in IIVPContract ( Docs , Source ). function votePowerFromTo ( address _from , address _to , uint256 _balance ) external view returns ( uint256 ); Get current delegated vote power from a delegator to a delegatee. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromTo"},{"location":"apis/smart-contracts/IIVPContract/#fn_votepowerfromtoat_833aca92","text":"Defined in IIVPContract ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated the vote power from a delegator to a delegatee at a given block number. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromToAt"},{"location":"apis/smart-contracts/IIVPContract/#fn_votepowerof_142d1018","text":"Defined in IIVPContract ( Docs , Source ). function votePowerOf ( address _who ) external view returns ( uint256 ); Get the current vote power of an address. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Current vote power of _who , including any delegation received.","title":"votePowerOf"},{"location":"apis/smart-contracts/IIVPContract/#fn_votepowerofat_92bfe6d8","text":"Defined in IIVPContract ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of an address at a given block number Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received.","title":"votePowerOfAt"},{"location":"apis/smart-contracts/IIVPContract/#fn_votepowerofatcached_e587497e","text":"Defined in IIVPContract ( Docs , Source ). function votePowerOfAtCached ( address _who , uint256 _blockNumber ) external returns ( uint256 ); Get the vote power of an address at a given block number. Reads/updates cache and upholds revocations. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received.","title":"votePowerOfAtCached"},{"location":"apis/smart-contracts/IIVPContract/#fn_votepowerofatignoringrevocation_04bb4e43","text":"Defined in IIVPContract ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of an address at a given block number, ignoring revocation information and cache. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. Result doesn't change if vote power is revoked.","title":"votePowerOfAtIgnoringRevocation"},{"location":"apis/smart-contracts/IIVPToken/","text":"IIVPToken # Source | Inherits from IVPToken , IICleanable Vote power token internal interface. Functions # allowance # Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called. approve # Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event. balanceOf # Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account . balanceOfAt # Defined in IVPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The balance at _blockNumber . batchDelegate # Defined in IVPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%). batchVotePowerOfAt # Defined in IIVPToken ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Return the vote power for several addresses. Parameters Type Description _owners address[] The list of addresses to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256[] Array of vote power for each queried address. cleanupBlockNumber # Defined in IICleanable ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. decimals # Defined in IVPToken ( Docs , Source ). function decimals ( ) external view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method. delegate # Defined in IVPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegateExplicit # Defined in IVPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegatesOf # Defined in IVPToken ( Docs , Source ). function delegatesOf ( address _who ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _who address The address to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegatesOfAt # Defined in IVPToken ( Docs , Source ). function delegatesOfAt ( address _who , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _who address The address to query. _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegationModeOf # Defined in IVPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). governanceVotePower # Defined in IVPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegating governance vote power. name # Defined in IVPToken ( Docs , Source ). function name ( ) external view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method. readVotePowerContract # Defined in IVPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking. revokeDelegationAt # Defined in IVPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached() in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation.. setCleanerContract # Defined in IICleanable ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in IICleanable ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number. setCleanupBlockNumberManager # Defined in IIVPToken ( Docs , Source ). function setCleanupBlockNumberManager ( address _cleanupBlockNumberManager ) external ; Set the contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager . setGovernanceVotePower # Defined in IIVPToken ( Docs , Source ). function setGovernanceVotePower ( contract IIGovernanceVotePower _governanceVotePower ) external ; Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power. symbol # Defined in IVPToken ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method. totalSupply # Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence. totalSupplyAt # Defined in IVPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) external view returns ( uint256 ); Total amount of tokens held by all accounts at a specific block number. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total amount of tokens at _blockNumber . totalVotePower # Defined in IVPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power). totalVotePowerAt # Defined in IVPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers). totalVotePowerAtCached # Defined in IIVPToken ( Docs , Source ). function totalVotePowerAtCached ( uint256 _blockNumber ) external returns ( uint256 ); Get the total vote power at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers). transfer # Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. transferFrom # Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. undelegateAll # Defined in IVPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET. undelegateAllExplicit # Defined in IVPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete). undelegatedVotePowerOf # Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . undelegatedVotePowerOfAt # Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . votePowerFromTo # Defined in IVPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power. votePowerFromToAt # Defined in IVPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power. votePowerOf # Defined in IVPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner . votePowerOfAt # Defined in IVPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . votePowerOfAtCached # Defined in IIVPToken ( Docs , Source ). function votePowerOfAtCached ( address _owner , uint256 _blockNumber ) external returns ( uint256 ); Get the vote power of _owner at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at _blockNumber . votePowerOfAtIgnoringRevocation # Defined in IVPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked. writeVotePowerContract # Defined in IVPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking.","title":"IIVPToken"},{"location":"apis/smart-contracts/IIVPToken/#ct_iivptoken","text":"Source | Inherits from IVPToken , IICleanable Vote power token internal interface.","title":"IIVPToken"},{"location":"apis/smart-contracts/IIVPToken/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIVPToken/#fn_allowance_dd62ed3e","text":"Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called.","title":"allowance"},{"location":"apis/smart-contracts/IIVPToken/#fn_approve_095ea7b3","text":"Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event.","title":"approve"},{"location":"apis/smart-contracts/IIVPToken/#fn_balanceof_70a08231","text":"Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"apis/smart-contracts/IIVPToken/#fn_balanceofat_4ee2cd7e","text":"Defined in IVPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The balance at _blockNumber .","title":"balanceOfAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_batchdelegate_dc4fcda7","text":"Defined in IVPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%).","title":"batchDelegate"},{"location":"apis/smart-contracts/IIVPToken/#fn_batchvotepowerofat_49e3c7e5","text":"Defined in IIVPToken ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Return the vote power for several addresses. Parameters Type Description _owners address[] The list of addresses to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256[] Array of vote power for each queried address.","title":"batchVotePowerOfAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_cleanupblocknumber_deea13e7","text":"Defined in IICleanable ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"cleanupBlockNumber"},{"location":"apis/smart-contracts/IIVPToken/#fn_decimals_313ce567","text":"Defined in IVPToken ( Docs , Source ). function decimals ( ) external view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method.","title":"decimals"},{"location":"apis/smart-contracts/IIVPToken/#fn_delegate_026e402b","text":"Defined in IVPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegate"},{"location":"apis/smart-contracts/IIVPToken/#fn_delegateexplicit_d06dc3ad","text":"Defined in IVPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegateExplicit"},{"location":"apis/smart-contracts/IIVPToken/#fn_delegatesof_7de5b8ed","text":"Defined in IVPToken ( Docs , Source ). function delegatesOf ( address _who ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _who address The address to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOf"},{"location":"apis/smart-contracts/IIVPToken/#fn_delegatesofat_ed475a79","text":"Defined in IVPToken ( Docs , Source ). function delegatesOfAt ( address _who , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _who address The address to query. _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOfAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_delegationmodeof_f6837767","text":"Defined in IVPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegationModeOf"},{"location":"apis/smart-contracts/IIVPToken/#fn_governancevotepower_8c2b8ae1","text":"Defined in IVPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegating governance vote power.","title":"governanceVotePower"},{"location":"apis/smart-contracts/IIVPToken/#fn_name_06fdde03","text":"Defined in IVPToken ( Docs , Source ). function name ( ) external view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method.","title":"name"},{"location":"apis/smart-contracts/IIVPToken/#fn_readvotepowercontract_9b3baa0e","text":"Defined in IVPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking.","title":"readVotePowerContract"},{"location":"apis/smart-contracts/IIVPToken/#fn_revokedelegationat_bbd6fbf8","text":"Defined in IVPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached() in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation..","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_setcleanercontract_f6a494af","text":"Defined in IICleanable ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/IIVPToken/#fn_setcleanupblocknumber_13de97f5","text":"Defined in IICleanable ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/IIVPToken/#fn_setcleanupblocknumbermanager_7f4fcaa9","text":"Defined in IIVPToken ( Docs , Source ). function setCleanupBlockNumberManager ( address _cleanupBlockNumberManager ) external ; Set the contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanupBlockNumberManager"},{"location":"apis/smart-contracts/IIVPToken/#fn_setgovernancevotepower_9ca2231a","text":"Defined in IIVPToken ( Docs , Source ). function setGovernanceVotePower ( contract IIGovernanceVotePower _governanceVotePower ) external ; Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power.","title":"setGovernanceVotePower"},{"location":"apis/smart-contracts/IIVPToken/#fn_symbol_95d89b41","text":"Defined in IVPToken ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method.","title":"symbol"},{"location":"apis/smart-contracts/IIVPToken/#fn_totalsupply_18160ddd","text":"Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"apis/smart-contracts/IIVPToken/#fn_totalsupplyat_981b24d0","text":"Defined in IVPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) external view returns ( uint256 ); Total amount of tokens held by all accounts at a specific block number. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total amount of tokens at _blockNumber .","title":"totalSupplyAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_totalvotepower_f5f3d4f7","text":"Defined in IVPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power).","title":"totalVotePower"},{"location":"apis/smart-contracts/IIVPToken/#fn_totalvotepowerat_3e5aa26a","text":"Defined in IVPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers).","title":"totalVotePowerAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_totalvotepoweratcached_caeb942b","text":"Defined in IIVPToken ( Docs , Source ). function totalVotePowerAtCached ( uint256 _blockNumber ) external returns ( uint256 ); Get the total vote power at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers).","title":"totalVotePowerAtCached"},{"location":"apis/smart-contracts/IIVPToken/#fn_transfer_a9059cbb","text":"Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transfer"},{"location":"apis/smart-contracts/IIVPToken/#fn_transferfrom_23b872dd","text":"Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transferFrom"},{"location":"apis/smart-contracts/IIVPToken/#fn_undelegateall_b302f393","text":"Defined in IVPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET.","title":"undelegateAll"},{"location":"apis/smart-contracts/IIVPToken/#fn_undelegateallexplicit_5d6d11eb","text":"Defined in IVPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete).","title":"undelegateAllExplicit"},{"location":"apis/smart-contracts/IIVPToken/#fn_undelegatedvotepowerof_d6aa0b77","text":"Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOf"},{"location":"apis/smart-contracts/IIVPToken/#fn_undelegatedvotepowerofat_83035a82","text":"Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOfAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_votepowerfromto_be0ca747","text":"Defined in IVPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power.","title":"votePowerFromTo"},{"location":"apis/smart-contracts/IIVPToken/#fn_votepowerfromtoat_e64767aa","text":"Defined in IVPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromToAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_votepowerof_142d1018","text":"Defined in IVPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner .","title":"votePowerOf"},{"location":"apis/smart-contracts/IIVPToken/#fn_votepowerofat_92bfe6d8","text":"Defined in IVPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber .","title":"votePowerOfAt"},{"location":"apis/smart-contracts/IIVPToken/#fn_votepowerofatcached_e587497e","text":"Defined in IIVPToken ( Docs , Source ). function votePowerOfAtCached ( address _owner , uint256 _blockNumber ) external returns ( uint256 ); Get the vote power of _owner at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at _blockNumber .","title":"votePowerOfAtCached"},{"location":"apis/smart-contracts/IIVPToken/#fn_votepowerofatignoringrevocation_04bb4e43","text":"Defined in IVPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked.","title":"votePowerOfAtIgnoringRevocation"},{"location":"apis/smart-contracts/IIVPToken/#fn_writevotepowercontract_1fec092a","text":"Defined in IVPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking.","title":"writeVotePowerContract"},{"location":"apis/smart-contracts/IIVoterWhitelister/","text":"IIVoterWhitelister # Source | Inherits from IVoterWhitelister Internal interface for managers of the FTSO whitelist . Only addresses registered in this contract can submit data to the FTSO system. Functions # addFtso # Defined in IIVoterWhitelister ( Docs , Source ). function addFtso ( uint256 _ftsoIndex ) external ; Create an empty whitelist with default size for a new FTSO. Parameters Type Description _ftsoIndex uint256 Index of the new FTSO. chillVoter # Defined in IIVoterWhitelister ( Docs , Source ). function chillVoter ( address _voter , uint256 _noOfRewardEpochs , uint256 [] _ftsoIndices ) external returns ( bool [] _removed , uint256 _untilRewardEpoch ); Used to chill a data provider, this is, remove it from the whitelist for a specified number of reward epochs. Parameters Type Description _voter address Data provider being chilled. _noOfRewardEpochs uint256 Number of epochs to chill the provider for. _ftsoIndices uint256[] Array of indices of the FTSOs that will not allow this provider to submit data. chilledUntilRewardEpoch # Defined in IVoterWhitelister ( Docs , Source ). function chilledUntilRewardEpoch ( address _voter ) external view returns ( uint256 ); In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards. Parameters Type Description _voter address Address of the queried data provider. Returns Type Description [0] uint256 uint256 ID of the epoch where the data provider can start submitting prices again. defaultMaxVotersForFtso # Defined in IVoterWhitelister ( Docs , Source ). function defaultMaxVotersForFtso ( ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a new FTSO. Returns Type Description [0] uint256 uint256 Default maximum allowed voters. getFtsoWhitelistedPriceProviders # Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProviders ( uint256 _ftsoIndex ) external view returns ( address []); Gets whitelisted price providers for the FTSO at a given index. Parameters Type Description _ftsoIndex uint256 Queried index. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers. getFtsoWhitelistedPriceProvidersBySymbol # Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProvidersBySymbol ( string _symbol ) external view returns ( address []); Gets whitelisted price providers for the FTSO with a specified symbol. Parameters Type Description _symbol string Queried symbol. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers. maxVotersForFtso # Defined in IVoterWhitelister ( Docs , Source ). function maxVotersForFtso ( uint256 _ftsoIndex ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index. Parameters Type Description _ftsoIndex uint256 Index of the FTSO. Returns Type Description [0] uint256 uint256 Maximum allowed voters. removeFtso # Defined in IIVoterWhitelister ( Docs , Source ). function removeFtso ( uint256 _ftsoIndex ) external ; Clear whitelist for a removed FTSO. Parameters Type Description _ftsoIndex uint256 Index of the removed FTSO. removeTrustedAddressFromWhitelist # Defined in IIVoterWhitelister ( Docs , Source ). function removeTrustedAddressFromWhitelist ( address _trustedAddress , uint256 _ftsoIndex ) external ; Remove a trusted address from whitelist. Parameters Type Description _trustedAddress address Address to remove. _ftsoIndex uint256 Index of the FTSO being modified. requestFullVoterWhitelisting # Defined in IVoterWhitelister ( Docs , Source ). function requestFullVoterWhitelisting ( address _voter ) external returns ( uint256 [] _supportedIndices , bool [] _success ); Requests whitelisting an account to act as a data provider for all active FTSOs. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. Returns Type Description _supportedIndices uint256[] Array of currently supported FTSO indices. _success bool[] Array of success flags by FTSO index. requestWhitelistingVoter # Defined in IVoterWhitelister ( Docs , Source ). function requestWhitelistingVoter ( address _voter , uint256 _ftsoIndex ) external ; Requests whitelisting an account to act as a data provider for a specific FTSO. Reverts if the vote power of the account is too low. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. _ftsoIndex uint256 Index of the FTSO. setDefaultMaxVotersForFtso # Defined in IIVoterWhitelister ( Docs , Source ). function setDefaultMaxVotersForFtso ( uint256 _defaultMaxVotersForFtso ) external ; Set the maximum number of voters in the whitelist for a new FTSOs. Parameters Type Description _defaultMaxVotersForFtso uint256 New maximum default value. setMaxVotersForFtso # Defined in IIVoterWhitelister ( Docs , Source ). function setMaxVotersForFtso ( uint256 _ftsoIndex , uint256 _newMaxVoters ) external ; Set the maximum number of voters in the whitelist for a specific FTSO. Can remove voters with the least votepower from the whitelist. Parameters Type Description _ftsoIndex uint256 Index of the FTSO to modify. _newMaxVoters uint256 New size of the whitelist.","title":"IIVoterWhitelister"},{"location":"apis/smart-contracts/IIVoterWhitelister/#ct_iivoterwhitelister","text":"Source | Inherits from IVoterWhitelister Internal interface for managers of the FTSO whitelist . Only addresses registered in this contract can submit data to the FTSO system.","title":"IIVoterWhitelister"},{"location":"apis/smart-contracts/IIVoterWhitelister/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_addftso_345705a4","text":"Defined in IIVoterWhitelister ( Docs , Source ). function addFtso ( uint256 _ftsoIndex ) external ; Create an empty whitelist with default size for a new FTSO. Parameters Type Description _ftsoIndex uint256 Index of the new FTSO.","title":"addFtso"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_chillvoter_2b4faebb","text":"Defined in IIVoterWhitelister ( Docs , Source ). function chillVoter ( address _voter , uint256 _noOfRewardEpochs , uint256 [] _ftsoIndices ) external returns ( bool [] _removed , uint256 _untilRewardEpoch ); Used to chill a data provider, this is, remove it from the whitelist for a specified number of reward epochs. Parameters Type Description _voter address Data provider being chilled. _noOfRewardEpochs uint256 Number of epochs to chill the provider for. _ftsoIndices uint256[] Array of indices of the FTSOs that will not allow this provider to submit data.","title":"chillVoter"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_chilleduntilrewardepoch_46538074","text":"Defined in IVoterWhitelister ( Docs , Source ). function chilledUntilRewardEpoch ( address _voter ) external view returns ( uint256 ); In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards. Parameters Type Description _voter address Address of the queried data provider. Returns Type Description [0] uint256 uint256 ID of the epoch where the data provider can start submitting prices again.","title":"chilledUntilRewardEpoch"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_defaultmaxvotersforftso_47ed51b1","text":"Defined in IVoterWhitelister ( Docs , Source ). function defaultMaxVotersForFtso ( ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a new FTSO. Returns Type Description [0] uint256 uint256 Default maximum allowed voters.","title":"defaultMaxVotersForFtso"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_getftsowhitelistedpriceproviders_09fcb400","text":"Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProviders ( uint256 _ftsoIndex ) external view returns ( address []); Gets whitelisted price providers for the FTSO at a given index. Parameters Type Description _ftsoIndex uint256 Queried index. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers.","title":"getFtsoWhitelistedPriceProviders"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_getftsowhitelistedpriceprovidersbysymbol_aa89dfd4","text":"Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProvidersBySymbol ( string _symbol ) external view returns ( address []); Gets whitelisted price providers for the FTSO with a specified symbol. Parameters Type Description _symbol string Queried symbol. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers.","title":"getFtsoWhitelistedPriceProvidersBySymbol"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_maxvotersforftso_98dccfc2","text":"Defined in IVoterWhitelister ( Docs , Source ). function maxVotersForFtso ( uint256 _ftsoIndex ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index. Parameters Type Description _ftsoIndex uint256 Index of the FTSO. Returns Type Description [0] uint256 uint256 Maximum allowed voters.","title":"maxVotersForFtso"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_removeftso_d8736171","text":"Defined in IIVoterWhitelister ( Docs , Source ). function removeFtso ( uint256 _ftsoIndex ) external ; Clear whitelist for a removed FTSO. Parameters Type Description _ftsoIndex uint256 Index of the removed FTSO.","title":"removeFtso"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_removetrustedaddressfromwhitelist_9dc950ab","text":"Defined in IIVoterWhitelister ( Docs , Source ). function removeTrustedAddressFromWhitelist ( address _trustedAddress , uint256 _ftsoIndex ) external ; Remove a trusted address from whitelist. Parameters Type Description _trustedAddress address Address to remove. _ftsoIndex uint256 Index of the FTSO being modified.","title":"removeTrustedAddressFromWhitelist"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_requestfullvoterwhitelisting_b06cbaf7","text":"Defined in IVoterWhitelister ( Docs , Source ). function requestFullVoterWhitelisting ( address _voter ) external returns ( uint256 [] _supportedIndices , bool [] _success ); Requests whitelisting an account to act as a data provider for all active FTSOs. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. Returns Type Description _supportedIndices uint256[] Array of currently supported FTSO indices. _success bool[] Array of success flags by FTSO index.","title":"requestFullVoterWhitelisting"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_requestwhitelistingvoter_3de2cb1c","text":"Defined in IVoterWhitelister ( Docs , Source ). function requestWhitelistingVoter ( address _voter , uint256 _ftsoIndex ) external ; Requests whitelisting an account to act as a data provider for a specific FTSO. Reverts if the vote power of the account is too low. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. _ftsoIndex uint256 Index of the FTSO.","title":"requestWhitelistingVoter"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_setdefaultmaxvotersforftso_2ee96140","text":"Defined in IIVoterWhitelister ( Docs , Source ). function setDefaultMaxVotersForFtso ( uint256 _defaultMaxVotersForFtso ) external ; Set the maximum number of voters in the whitelist for a new FTSOs. Parameters Type Description _defaultMaxVotersForFtso uint256 New maximum default value.","title":"setDefaultMaxVotersForFtso"},{"location":"apis/smart-contracts/IIVoterWhitelister/#fn_setmaxvotersforftso_7ecfcfa3","text":"Defined in IIVoterWhitelister ( Docs , Source ). function setMaxVotersForFtso ( uint256 _ftsoIndex , uint256 _newMaxVoters ) external ; Set the maximum number of voters in the whitelist for a specific FTSO. Can remove voters with the least votepower from the whitelist. Parameters Type Description _ftsoIndex uint256 Index of the FTSO to modify. _newMaxVoters uint256 New size of the whitelist.","title":"setMaxVotersForFtso"},{"location":"apis/smart-contracts/IInflationGenesis/","text":"IInflationGenesis # Source Portion of the Inflation contract that is available to contracts deployed at genesis. Functions # receiveMinting # Defined in IInflationGenesis ( Docs , Source ). function receiveMinting ( ) external payable ; Receive newly minted native tokens from the FlareDaemon . Assume that the received amount will be >= last topup requested across all services. If there is not enough balance sent to cover the topup request, expect the library method to revert. Also assume that any received balance greater than the calculated topup request came from self-destructor sending a balance to this contract.","title":"IInflationGenesis"},{"location":"apis/smart-contracts/IInflationGenesis/#ct_iinflationgenesis","text":"Source Portion of the Inflation contract that is available to contracts deployed at genesis.","title":"IInflationGenesis"},{"location":"apis/smart-contracts/IInflationGenesis/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IInflationGenesis/#fn_receiveminting_c611c2c5","text":"Defined in IInflationGenesis ( Docs , Source ). function receiveMinting ( ) external payable ; Receive newly minted native tokens from the FlareDaemon . Assume that the received amount will be >= last topup requested across all services. If there is not enough balance sent to cover the topup request, expect the library method to revert. Also assume that any received balance greater than the calculated topup request came from self-destructor sending a balance to this contract.","title":"receiveMinting"},{"location":"apis/smart-contracts/IPriceSubmitter/","text":"IPriceSubmitter # Source Interface for the PriceSubmitter contract. This is the contract used by all FTSO data providers to submit their data. Events # HashSubmitted # Defined in IPriceSubmitter ( Docs , Source ). event HashSubmitted ( address submitter , uint256 epochId , bytes32 hash , uint256 timestamp ) Emitted when a hash is submitted through submitHash . Parameters Type Description submitter address Address of the submitting data provider. epochId uint256 Current price epoch ID. hash bytes32 Submitted hash. timestamp uint256 Current block timestamp. PricesRevealed # Defined in IPriceSubmitter ( Docs , Source ). event PricesRevealed ( address voter , uint256 epochId , contract IFtsoGenesis [] ftsos , uint256 [] prices , uint256 random , uint256 timestamp ) Emitted when prices are revealed through revealPrice . Parameters Type Description voter address Address of the revealing data provider. epochId uint256 ID of the epoch in which the price hash is revealed. ftsos contract IFtsoGenesis[] Array of FTSOs that correspond to the indexes in the call. prices uint256[] List of revealed prices. random uint256 Revealed random number. timestamp uint256 Current block timestamp. Functions # getCurrentRandom # Defined in IPriceSubmitter ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous epoch, obtained from the random numbers provided by all data providers along with their data submissions. Note that the random number for the previous epoch keeps updating as new submissions are revealed. Returns Type Description [0] uint256 Random number calculated from all data provider's submissions. getFtsoManager # Defined in IPriceSubmitter ( Docs , Source ). function getFtsoManager ( ) external view returns ( contract IFtsoManagerGenesis ); Returns the address of the FtsoManager contract. getFtsoRegistry # Defined in IPriceSubmitter ( Docs , Source ). function getFtsoRegistry ( ) external view returns ( contract IFtsoRegistryGenesis ); Returns the address of the FtsoRegistry contract. getRandom # Defined in IPriceSubmitter ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Note that only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch. getVoterWhitelister # Defined in IPriceSubmitter ( Docs , Source ). function getVoterWhitelister ( ) external view returns ( address ); Returns the address of the VoterWhitelister contract managing the data provider whitelist. revealPrices # Defined in IPriceSubmitter ( Docs , Source ). function revealPrices ( uint256 _epochId , uint256 [] _ftsoIndices , uint256 [] _prices , uint256 _random ) external ; Reveals submitted prices during the epoch reveal period. The hash of FTSO indices, prices, random number, and voter address must be equal to the hash previously submitted with submitHash . Emits a PricesRevealed event. Parameters Type Description _epochId uint256 ID of the epoch to which the price hashes are submitted. _ftsoIndices uint256[] List of FTSO indices in ascending order. _prices uint256[] List of submitted prices in USD. _random uint256 Submitted random number. submitHash # Defined in IPriceSubmitter ( Docs , Source ). function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Submits a hash for the current epoch. Can only be called by FTSO data providers whitelisted through the VoterWhitelisted contract. Emits the HashSubmitted event. Parameters Type Description _epochId uint256 ID of the target epoch to which the hash is submitted. _hash bytes32 A hash of the FTSO indices, prices, random number, and voter address. voterWhitelistBitmap # Defined in IPriceSubmitter ( Docs , Source ). function voterWhitelistBitmap ( address _voter ) external view returns ( uint256 ); Returns a bitmap of all FTSOs for which a data provider is allowed to submit prices or hashes. Parameters Type Description _voter address Address of the voter. Returns Type Description [0] uint256 If a data provider is allowed to vote for a given FTSO index, the corresponding bit in the result is 1.","title":"IPriceSubmitter"},{"location":"apis/smart-contracts/IPriceSubmitter/#ct_ipricesubmitter","text":"Source Interface for the PriceSubmitter contract. This is the contract used by all FTSO data providers to submit their data.","title":"IPriceSubmitter"},{"location":"apis/smart-contracts/IPriceSubmitter/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IPriceSubmitter/#ev_hashsubmitted","text":"Defined in IPriceSubmitter ( Docs , Source ). event HashSubmitted ( address submitter , uint256 epochId , bytes32 hash , uint256 timestamp ) Emitted when a hash is submitted through submitHash . Parameters Type Description submitter address Address of the submitting data provider. epochId uint256 Current price epoch ID. hash bytes32 Submitted hash. timestamp uint256 Current block timestamp.","title":"HashSubmitted"},{"location":"apis/smart-contracts/IPriceSubmitter/#ev_pricesrevealed","text":"Defined in IPriceSubmitter ( Docs , Source ). event PricesRevealed ( address voter , uint256 epochId , contract IFtsoGenesis [] ftsos , uint256 [] prices , uint256 random , uint256 timestamp ) Emitted when prices are revealed through revealPrice . Parameters Type Description voter address Address of the revealing data provider. epochId uint256 ID of the epoch in which the price hash is revealed. ftsos contract IFtsoGenesis[] Array of FTSOs that correspond to the indexes in the call. prices uint256[] List of revealed prices. random uint256 Revealed random number. timestamp uint256 Current block timestamp.","title":"PricesRevealed"},{"location":"apis/smart-contracts/IPriceSubmitter/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_getcurrentrandom_d89601fd","text":"Defined in IPriceSubmitter ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous epoch, obtained from the random numbers provided by all data providers along with their data submissions. Note that the random number for the previous epoch keeps updating as new submissions are revealed. Returns Type Description [0] uint256 Random number calculated from all data provider's submissions.","title":"getCurrentRandom"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_getftsomanager_b39c6858","text":"Defined in IPriceSubmitter ( Docs , Source ). function getFtsoManager ( ) external view returns ( contract IFtsoManagerGenesis ); Returns the address of the FtsoManager contract.","title":"getFtsoManager"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_getftsoregistry_8c9d28b6","text":"Defined in IPriceSubmitter ( Docs , Source ). function getFtsoRegistry ( ) external view returns ( contract IFtsoRegistryGenesis ); Returns the address of the FtsoRegistry contract.","title":"getFtsoRegistry"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_getrandom_cd4b6914","text":"Defined in IPriceSubmitter ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Note that only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch.","title":"getRandom"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_getvoterwhitelister_71e1fad9","text":"Defined in IPriceSubmitter ( Docs , Source ). function getVoterWhitelister ( ) external view returns ( address ); Returns the address of the VoterWhitelister contract managing the data provider whitelist.","title":"getVoterWhitelister"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_revealprices_e2db5a52","text":"Defined in IPriceSubmitter ( Docs , Source ). function revealPrices ( uint256 _epochId , uint256 [] _ftsoIndices , uint256 [] _prices , uint256 _random ) external ; Reveals submitted prices during the epoch reveal period. The hash of FTSO indices, prices, random number, and voter address must be equal to the hash previously submitted with submitHash . Emits a PricesRevealed event. Parameters Type Description _epochId uint256 ID of the epoch to which the price hashes are submitted. _ftsoIndices uint256[] List of FTSO indices in ascending order. _prices uint256[] List of submitted prices in USD. _random uint256 Submitted random number.","title":"revealPrices"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_submithash_8fc6f667","text":"Defined in IPriceSubmitter ( Docs , Source ). function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Submits a hash for the current epoch. Can only be called by FTSO data providers whitelisted through the VoterWhitelisted contract. Emits the HashSubmitted event. Parameters Type Description _epochId uint256 ID of the target epoch to which the hash is submitted. _hash bytes32 A hash of the FTSO indices, prices, random number, and voter address.","title":"submitHash"},{"location":"apis/smart-contracts/IPriceSubmitter/#fn_voterwhitelistbitmap_7ac420ad","text":"Defined in IPriceSubmitter ( Docs , Source ). function voterWhitelistBitmap ( address _voter ) external view returns ( uint256 ); Returns a bitmap of all FTSOs for which a data provider is allowed to submit prices or hashes. Parameters Type Description _voter address Address of the voter. Returns Type Description [0] uint256 If a data provider is allowed to vote for a given FTSO index, the corresponding bit in the result is 1.","title":"voterWhitelistBitmap"},{"location":"apis/smart-contracts/IVPContractEvents/","text":"IVPContractEvents # Source Events interface for vote-power related operations. Events # Delegate # Defined in IVPContractEvents ( Docs , Source ). event Delegate ( address from , address to , uint256 priorVotePower , uint256 newVotePower ) Emitted when the amount of vote power delegated from one account to another changes. Note : This event is always emitted from VPToken 's writeVotePowerContract . Parameters Type Description from address The account that has changed the amount of vote power it is delegating. to address The account whose received vote power has changed. priorVotePower uint256 The vote power originally delegated. newVotePower uint256 The new vote power that triggered this event. It can be 0 if the delegation is completely canceled. Revoke # Defined in IVPContractEvents ( Docs , Source ). event Revoke ( address delegator , address delegatee , uint256 votePower , uint256 blockNumber ) Emitted when an account revokes its vote power delegation to another account for a single current or past block (typically the current vote block). Note : This event is always emitted from VPToken 's writeVotePowerContract or readVotePowerContract . See revokeDelegationAt in IVPToken . Parameters Type Description delegator address The account that revoked the delegation. delegatee address The account that has been revoked. votePower uint256 The revoked vote power. blockNumber uint256 The block number at which the delegation has been revoked.","title":"IVPContractEvents"},{"location":"apis/smart-contracts/IVPContractEvents/#ct_ivpcontractevents","text":"Source Events interface for vote-power related operations.","title":"IVPContractEvents"},{"location":"apis/smart-contracts/IVPContractEvents/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IVPContractEvents/#ev_delegate","text":"Defined in IVPContractEvents ( Docs , Source ). event Delegate ( address from , address to , uint256 priorVotePower , uint256 newVotePower ) Emitted when the amount of vote power delegated from one account to another changes. Note : This event is always emitted from VPToken 's writeVotePowerContract . Parameters Type Description from address The account that has changed the amount of vote power it is delegating. to address The account whose received vote power has changed. priorVotePower uint256 The vote power originally delegated. newVotePower uint256 The new vote power that triggered this event. It can be 0 if the delegation is completely canceled.","title":"Delegate"},{"location":"apis/smart-contracts/IVPContractEvents/#ev_revoke","text":"Defined in IVPContractEvents ( Docs , Source ). event Revoke ( address delegator , address delegatee , uint256 votePower , uint256 blockNumber ) Emitted when an account revokes its vote power delegation to another account for a single current or past block (typically the current vote block). Note : This event is always emitted from VPToken 's writeVotePowerContract or readVotePowerContract . See revokeDelegationAt in IVPToken . Parameters Type Description delegator address The account that revoked the delegation. delegatee address The account that has been revoked. votePower uint256 The revoked vote power. blockNumber uint256 The block number at which the delegation has been revoked.","title":"Revoke"},{"location":"apis/smart-contracts/IVPToken/","text":"IVPToken # Source | Inherits from IERC20 Vote power token interface. Functions # allowance # Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called. approve # Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event. balanceOf # Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account . balanceOfAt # Defined in IVPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The balance at _blockNumber . batchDelegate # Defined in IVPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%). decimals # Defined in IVPToken ( Docs , Source ). function decimals ( ) external view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method. delegate # Defined in IVPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegateExplicit # Defined in IVPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegatesOf # Defined in IVPToken ( Docs , Source ). function delegatesOf ( address _who ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _who address The address to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegatesOfAt # Defined in IVPToken ( Docs , Source ). function delegatesOfAt ( address _who , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _who address The address to query. _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegationModeOf # Defined in IVPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). governanceVotePower # Defined in IVPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegating governance vote power. name # Defined in IVPToken ( Docs , Source ). function name ( ) external view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method. readVotePowerContract # Defined in IVPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking. revokeDelegationAt # Defined in IVPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached() in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation.. symbol # Defined in IVPToken ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method. totalSupply # Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence. totalSupplyAt # Defined in IVPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) external view returns ( uint256 ); Total amount of tokens held by all accounts at a specific block number. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total amount of tokens at _blockNumber . totalVotePower # Defined in IVPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power). totalVotePowerAt # Defined in IVPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers). transfer # Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. transferFrom # Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. undelegateAll # Defined in IVPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET. undelegateAllExplicit # Defined in IVPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete). undelegatedVotePowerOf # Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . undelegatedVotePowerOfAt # Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . votePowerFromTo # Defined in IVPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power. votePowerFromToAt # Defined in IVPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power. votePowerOf # Defined in IVPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner . votePowerOfAt # Defined in IVPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . votePowerOfAtIgnoringRevocation # Defined in IVPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked. writeVotePowerContract # Defined in IVPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking.","title":"IVPToken"},{"location":"apis/smart-contracts/IVPToken/#ct_ivptoken","text":"Source | Inherits from IERC20 Vote power token interface.","title":"IVPToken"},{"location":"apis/smart-contracts/IVPToken/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IVPToken/#fn_allowance_dd62ed3e","text":"Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called.","title":"allowance"},{"location":"apis/smart-contracts/IVPToken/#fn_approve_095ea7b3","text":"Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event.","title":"approve"},{"location":"apis/smart-contracts/IVPToken/#fn_balanceof_70a08231","text":"Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"apis/smart-contracts/IVPToken/#fn_balanceofat_4ee2cd7e","text":"Defined in IVPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The balance at _blockNumber .","title":"balanceOfAt"},{"location":"apis/smart-contracts/IVPToken/#fn_batchdelegate_dc4fcda7","text":"Defined in IVPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%).","title":"batchDelegate"},{"location":"apis/smart-contracts/IVPToken/#fn_decimals_313ce567","text":"Defined in IVPToken ( Docs , Source ). function decimals ( ) external view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method.","title":"decimals"},{"location":"apis/smart-contracts/IVPToken/#fn_delegate_026e402b","text":"Defined in IVPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegate"},{"location":"apis/smart-contracts/IVPToken/#fn_delegateexplicit_d06dc3ad","text":"Defined in IVPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegateExplicit"},{"location":"apis/smart-contracts/IVPToken/#fn_delegatesof_7de5b8ed","text":"Defined in IVPToken ( Docs , Source ). function delegatesOf ( address _who ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _who address The address to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOf"},{"location":"apis/smart-contracts/IVPToken/#fn_delegatesofat_ed475a79","text":"Defined in IVPToken ( Docs , Source ). function delegatesOfAt ( address _who , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _who address The address to query. _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOfAt"},{"location":"apis/smart-contracts/IVPToken/#fn_delegationmodeof_f6837767","text":"Defined in IVPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegationModeOf"},{"location":"apis/smart-contracts/IVPToken/#fn_governancevotepower_8c2b8ae1","text":"Defined in IVPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegating governance vote power.","title":"governanceVotePower"},{"location":"apis/smart-contracts/IVPToken/#fn_name_06fdde03","text":"Defined in IVPToken ( Docs , Source ). function name ( ) external view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method.","title":"name"},{"location":"apis/smart-contracts/IVPToken/#fn_readvotepowercontract_9b3baa0e","text":"Defined in IVPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking.","title":"readVotePowerContract"},{"location":"apis/smart-contracts/IVPToken/#fn_revokedelegationat_bbd6fbf8","text":"Defined in IVPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) external ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached() in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation..","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/IVPToken/#fn_symbol_95d89b41","text":"Defined in IVPToken ( Docs , Source ). function symbol ( ) external view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method.","title":"symbol"},{"location":"apis/smart-contracts/IVPToken/#fn_totalsupply_18160ddd","text":"Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"apis/smart-contracts/IVPToken/#fn_totalsupplyat_981b24d0","text":"Defined in IVPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) external view returns ( uint256 ); Total amount of tokens held by all accounts at a specific block number. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total amount of tokens at _blockNumber .","title":"totalSupplyAt"},{"location":"apis/smart-contracts/IVPToken/#fn_totalvotepower_f5f3d4f7","text":"Defined in IVPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power).","title":"totalVotePower"},{"location":"apis/smart-contracts/IVPToken/#fn_totalvotepowerat_3e5aa26a","text":"Defined in IVPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers).","title":"totalVotePowerAt"},{"location":"apis/smart-contracts/IVPToken/#fn_transfer_a9059cbb","text":"Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transfer"},{"location":"apis/smart-contracts/IVPToken/#fn_transferfrom_23b872dd","text":"Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transferFrom"},{"location":"apis/smart-contracts/IVPToken/#fn_undelegateall_b302f393","text":"Defined in IVPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET.","title":"undelegateAll"},{"location":"apis/smart-contracts/IVPToken/#fn_undelegateallexplicit_5d6d11eb","text":"Defined in IVPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete).","title":"undelegateAllExplicit"},{"location":"apis/smart-contracts/IVPToken/#fn_undelegatedvotepowerof_d6aa0b77","text":"Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOf"},{"location":"apis/smart-contracts/IVPToken/#fn_undelegatedvotepowerofat_83035a82","text":"Defined in IVPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOfAt"},{"location":"apis/smart-contracts/IVPToken/#fn_votepowerfromto_be0ca747","text":"Defined in IVPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power.","title":"votePowerFromTo"},{"location":"apis/smart-contracts/IVPToken/#fn_votepowerfromtoat_e64767aa","text":"Defined in IVPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromToAt"},{"location":"apis/smart-contracts/IVPToken/#fn_votepowerof_142d1018","text":"Defined in IVPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner .","title":"votePowerOf"},{"location":"apis/smart-contracts/IVPToken/#fn_votepowerofat_92bfe6d8","text":"Defined in IVPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber .","title":"votePowerOfAt"},{"location":"apis/smart-contracts/IVPToken/#fn_votepowerofatignoringrevocation_04bb4e43","text":"Defined in IVPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked.","title":"votePowerOfAtIgnoringRevocation"},{"location":"apis/smart-contracts/IVPToken/#fn_writevotepowercontract_1fec092a","text":"Defined in IVPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking.","title":"writeVotePowerContract"},{"location":"apis/smart-contracts/IVoterWhitelister/","text":"IVoterWhitelister # Source Interface for managers of the FTSO whitelist . Only addresses registered in this contract can submit data to the FTSO system. Events # VoterChilled # Defined in IVoterWhitelister ( Docs , Source ). event VoterChilled ( address voter , uint256 untilRewardEpoch ) Emitted when an account is chilled from the voter whitelist. Parameters Type Description voter address Address of the chilled account. untilRewardEpoch uint256 Epoch ID when the chill will be lifted. VoterRemovedFromWhitelist # Defined in IVoterWhitelister ( Docs , Source ). event VoterRemovedFromWhitelist ( address voter , uint256 ftsoIndex ) Emitted when an account is removed from the voter whitelist. Parameters Type Description voter address Address of the removed account. ftsoIndex uint256 Index of the FTSO in which it was registered. VoterWhitelisted # Defined in IVoterWhitelister ( Docs , Source ). event VoterWhitelisted ( address voter , uint256 ftsoIndex ) Emitted when an account is added to the voter whitelist. Parameters Type Description voter address Address of the added account. ftsoIndex uint256 Index of the FTSO to which it has been registered. Functions # chilledUntilRewardEpoch # Defined in IVoterWhitelister ( Docs , Source ). function chilledUntilRewardEpoch ( address _voter ) external view returns ( uint256 ); In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards. Parameters Type Description _voter address Address of the queried data provider. Returns Type Description [0] uint256 uint256 ID of the epoch where the data provider can start submitting prices again. defaultMaxVotersForFtso # Defined in IVoterWhitelister ( Docs , Source ). function defaultMaxVotersForFtso ( ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a new FTSO. Returns Type Description [0] uint256 uint256 Default maximum allowed voters. getFtsoWhitelistedPriceProviders # Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProviders ( uint256 _ftsoIndex ) external view returns ( address []); Gets whitelisted price providers for the FTSO at a given index. Parameters Type Description _ftsoIndex uint256 Queried index. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers. getFtsoWhitelistedPriceProvidersBySymbol # Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProvidersBySymbol ( string _symbol ) external view returns ( address []); Gets whitelisted price providers for the FTSO with a specified symbol. Parameters Type Description _symbol string Queried symbol. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers. maxVotersForFtso # Defined in IVoterWhitelister ( Docs , Source ). function maxVotersForFtso ( uint256 _ftsoIndex ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index. Parameters Type Description _ftsoIndex uint256 Index of the FTSO. Returns Type Description [0] uint256 uint256 Maximum allowed voters. requestFullVoterWhitelisting # Defined in IVoterWhitelister ( Docs , Source ). function requestFullVoterWhitelisting ( address _voter ) external returns ( uint256 [] _supportedIndices , bool [] _success ); Requests whitelisting an account to act as a data provider for all active FTSOs. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. Returns Type Description _supportedIndices uint256[] Array of currently supported FTSO indices. _success bool[] Array of success flags by FTSO index. requestWhitelistingVoter # Defined in IVoterWhitelister ( Docs , Source ). function requestWhitelistingVoter ( address _voter , uint256 _ftsoIndex ) external ; Requests whitelisting an account to act as a data provider for a specific FTSO. Reverts if the vote power of the account is too low. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. _ftsoIndex uint256 Index of the FTSO.","title":"IVoterWhitelister"},{"location":"apis/smart-contracts/IVoterWhitelister/#ct_ivoterwhitelister","text":"Source Interface for managers of the FTSO whitelist . Only addresses registered in this contract can submit data to the FTSO system.","title":"IVoterWhitelister"},{"location":"apis/smart-contracts/IVoterWhitelister/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/IVoterWhitelister/#ev_voterchilled","text":"Defined in IVoterWhitelister ( Docs , Source ). event VoterChilled ( address voter , uint256 untilRewardEpoch ) Emitted when an account is chilled from the voter whitelist. Parameters Type Description voter address Address of the chilled account. untilRewardEpoch uint256 Epoch ID when the chill will be lifted.","title":"VoterChilled"},{"location":"apis/smart-contracts/IVoterWhitelister/#ev_voterremovedfromwhitelist","text":"Defined in IVoterWhitelister ( Docs , Source ). event VoterRemovedFromWhitelist ( address voter , uint256 ftsoIndex ) Emitted when an account is removed from the voter whitelist. Parameters Type Description voter address Address of the removed account. ftsoIndex uint256 Index of the FTSO in which it was registered.","title":"VoterRemovedFromWhitelist"},{"location":"apis/smart-contracts/IVoterWhitelister/#ev_voterwhitelisted","text":"Defined in IVoterWhitelister ( Docs , Source ). event VoterWhitelisted ( address voter , uint256 ftsoIndex ) Emitted when an account is added to the voter whitelist. Parameters Type Description voter address Address of the added account. ftsoIndex uint256 Index of the FTSO to which it has been registered.","title":"VoterWhitelisted"},{"location":"apis/smart-contracts/IVoterWhitelister/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IVoterWhitelister/#fn_chilleduntilrewardepoch_46538074","text":"Defined in IVoterWhitelister ( Docs , Source ). function chilledUntilRewardEpoch ( address _voter ) external view returns ( uint256 ); In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards. Parameters Type Description _voter address Address of the queried data provider. Returns Type Description [0] uint256 uint256 ID of the epoch where the data provider can start submitting prices again.","title":"chilledUntilRewardEpoch"},{"location":"apis/smart-contracts/IVoterWhitelister/#fn_defaultmaxvotersforftso_47ed51b1","text":"Defined in IVoterWhitelister ( Docs , Source ). function defaultMaxVotersForFtso ( ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a new FTSO. Returns Type Description [0] uint256 uint256 Default maximum allowed voters.","title":"defaultMaxVotersForFtso"},{"location":"apis/smart-contracts/IVoterWhitelister/#fn_getftsowhitelistedpriceproviders_09fcb400","text":"Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProviders ( uint256 _ftsoIndex ) external view returns ( address []); Gets whitelisted price providers for the FTSO at a given index. Parameters Type Description _ftsoIndex uint256 Queried index. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers.","title":"getFtsoWhitelistedPriceProviders"},{"location":"apis/smart-contracts/IVoterWhitelister/#fn_getftsowhitelistedpriceprovidersbysymbol_aa89dfd4","text":"Defined in IVoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProvidersBySymbol ( string _symbol ) external view returns ( address []); Gets whitelisted price providers for the FTSO with a specified symbol. Parameters Type Description _symbol string Queried symbol. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers.","title":"getFtsoWhitelistedPriceProvidersBySymbol"},{"location":"apis/smart-contracts/IVoterWhitelister/#fn_maxvotersforftso_98dccfc2","text":"Defined in IVoterWhitelister ( Docs , Source ). function maxVotersForFtso ( uint256 _ftsoIndex ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index. Parameters Type Description _ftsoIndex uint256 Index of the FTSO. Returns Type Description [0] uint256 uint256 Maximum allowed voters.","title":"maxVotersForFtso"},{"location":"apis/smart-contracts/IVoterWhitelister/#fn_requestfullvoterwhitelisting_b06cbaf7","text":"Defined in IVoterWhitelister ( Docs , Source ). function requestFullVoterWhitelisting ( address _voter ) external returns ( uint256 [] _supportedIndices , bool [] _success ); Requests whitelisting an account to act as a data provider for all active FTSOs. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. Returns Type Description _supportedIndices uint256[] Array of currently supported FTSO indices. _success bool[] Array of success flags by FTSO index.","title":"requestFullVoterWhitelisting"},{"location":"apis/smart-contracts/IVoterWhitelister/#fn_requestwhitelistingvoter_3de2cb1c","text":"Defined in IVoterWhitelister ( Docs , Source ). function requestWhitelistingVoter ( address _voter , uint256 _ftsoIndex ) external ; Requests whitelisting an account to act as a data provider for a specific FTSO. Reverts if the vote power of the account is too low. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. _ftsoIndex uint256 Index of the FTSO.","title":"requestWhitelistingVoter"},{"location":"apis/smart-contracts/IWNat/","text":"IWNat # Source Wrapped native token interface. This contract converts native tokens into WNAT (wrapped native) tokens and vice versa. WNAT tokens are a one-to-one ERC20 representation of native tokens, which are minted and burned as needed by this contract. The wrapped versions of the native FLR and SGB tokens are called WFLR and WSGB respectively. Code attribution: WETH9. Functions # deposit # Defined in IWNat ( Docs , Source ). function deposit ( ) external payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to the msg.sender 's balance. This operation is commonly known as \"wrapping\". depositTo # Defined in IWNat ( Docs , Source ). function depositTo ( address _recipient ) external payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to _recipient 's balance. This operation is commonly known as \"wrapping\". This is equivalent to using deposit followed by transfer . Parameters Type Description _recipient address The address to receive the minted WNAT . withdraw # Defined in IWNat ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Burns _amount of WNAT tokens from msg.sender 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". Reverts if _amount is higher than msg.sender 's WNAT balance. Parameters Type Description _amount uint256 The amount to withdraw. withdrawFrom # Defined in IWNat ( Docs , Source ). function withdrawFrom ( address _owner , uint256 _amount ) external ; Burns _amount of WNAT tokens from _owner 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". msg.sender must have been authorized to withdraw from _owner 's account through ERC-20's approve mechanism. Reverts if _amount is higher than _owners 's WNAT balance or than msg.sender 's allowance over _owner 's tokens. Parameters Type Description _owner address The address containing the tokens to withdraw. _amount uint256 The amount to withdraw.","title":"IWNat"},{"location":"apis/smart-contracts/IWNat/#ct_iwnat","text":"Source Wrapped native token interface. This contract converts native tokens into WNAT (wrapped native) tokens and vice versa. WNAT tokens are a one-to-one ERC20 representation of native tokens, which are minted and burned as needed by this contract. The wrapped versions of the native FLR and SGB tokens are called WFLR and WSGB respectively. Code attribution: WETH9.","title":"IWNat"},{"location":"apis/smart-contracts/IWNat/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/IWNat/#fn_deposit_d0e30db0","text":"Defined in IWNat ( Docs , Source ). function deposit ( ) external payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to the msg.sender 's balance. This operation is commonly known as \"wrapping\".","title":"deposit"},{"location":"apis/smart-contracts/IWNat/#fn_depositto_b760faf9","text":"Defined in IWNat ( Docs , Source ). function depositTo ( address _recipient ) external payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to _recipient 's balance. This operation is commonly known as \"wrapping\". This is equivalent to using deposit followed by transfer . Parameters Type Description _recipient address The address to receive the minted WNAT .","title":"depositTo"},{"location":"apis/smart-contracts/IWNat/#fn_withdraw_2e1a7d4d","text":"Defined in IWNat ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Burns _amount of WNAT tokens from msg.sender 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". Reverts if _amount is higher than msg.sender 's WNAT balance. Parameters Type Description _amount uint256 The amount to withdraw.","title":"withdraw"},{"location":"apis/smart-contracts/IWNat/#fn_withdrawfrom_9470b0bd","text":"Defined in IWNat ( Docs , Source ). function withdrawFrom ( address _owner , uint256 _amount ) external ; Burns _amount of WNAT tokens from _owner 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". msg.sender must have been authorized to withdraw from _owner 's account through ERC-20's approve mechanism. Reverts if _amount is higher than _owners 's WNAT balance or than msg.sender 's allowance over _owner 's tokens. Parameters Type Description _owner address The address containing the tokens to withdraw. _amount uint256 The amount to withdraw.","title":"withdrawFrom"},{"location":"apis/smart-contracts/Inflation/","text":"Inflation # Source | Inherits from IInflationGenesis , GovernedAndFlareDaemonized , IFlareDaemonize , AddressUpdatable Recognizes, authorizes, mints, and funds native tokens to Flare services that are rewardable through inflation. See the technical specification . Events # GovernanceCallTimelocked # Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire. GovernanceInitialised # Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings . GovernedProductionModeEntered # Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork). InflationAllocationSet # Defined in Inflation ( Docs , Source ). event InflationAllocationSet ( contract IIInflationAllocation inflationAllocation ) InflationAuthorized # Defined in Inflation ( Docs , Source ). event InflationAuthorized ( uint256 amountWei ) InflationRewardServiceDailyAuthorizedInflationComputed # Defined in Inflation ( Docs , Source ). event InflationRewardServiceDailyAuthorizedInflationComputed ( contract IIInflationReceiver inflationReceiver , uint256 amountWei ) InflationRewardServiceTopupComputed # Defined in Inflation ( Docs , Source ). event InflationRewardServiceTopupComputed ( contract IIInflationReceiver inflationReceiver , uint256 amountWei ) InflationRewardServiceTopupRequestReceived # Defined in Inflation ( Docs , Source ). event InflationRewardServiceTopupRequestReceived ( contract IIInflationReceiver inflationReceiver , uint256 amountWei ) MintingReceived # Defined in Inflation ( Docs , Source ). event MintingReceived ( uint256 amountWei , uint256 selfDestructAmountWei ) NewTimeSlotInitialized # Defined in Inflation ( Docs , Source ). event NewTimeSlotInitialized ( uint256 startTimeStamp , uint256 endTimeStamp , uint256 inflatableSupplyWei , uint256 recognizedInflationWei ) SupplySet # Defined in Inflation ( Docs , Source ). event SupplySet ( contract IISupply oldSupply , contract IISupply newSupply ) TimelockedGovernanceCallCanceled # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution. TimelockedGovernanceCallExecuted # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed. TopupConfigurationSet # Defined in Inflation ( Docs , Source ). event TopupConfigurationSet ( struct TopupConfiguration topupConfiguration ) TopupRequested # Defined in Inflation ( Docs , Source ). event TopupRequested ( uint256 requestAmountWei , uint256 reRequestAmountWei ) Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in Inflation ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon , address _addressUpdater , uint256 _rewardEpochStartTs ) public ; constructor # Defined in GovernedAndFlareDaemonized ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. daemonize # Defined in IFlareDaemonize ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getContractName # Defined in Inflation ( Docs , Source ). function getContractName ( ) external pure returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name. getCurrentTimeSlot # Defined in Inflation ( Docs , Source ). function getCurrentTimeSlot ( ) external view returns ( struct InflationTimeSlots . InflationTimeSlot ); Return the current time slot. Expect library to revert if there is no current time slot. Returns Type Description [0] struct InflationTimeSlots.InflationTimeSlot The inflation time slot state of the current time slot. getCurrentTimeSlotId # Defined in Inflation ( Docs , Source ). function getCurrentTimeSlotId ( ) external view returns ( uint256 ); Return current time slot id. Expect library to revert if there is no current time slot. Returns Type Description [0] uint256 Id of the current time slot. getNextExpectedTopupTs # Defined in Inflation ( Docs , Source ). function getNextExpectedTopupTs ( ) external view returns ( uint256 _nextTopupTs ); Returns next expected inflation topup time stamp which is also inflation authorization time. The returned time from this API is actually the time of the block in which the topup is requested. The Actual topup will take place in the next block. Expected diff is up to a few seconds (max is less then a minute). getRewardServices # Defined in Inflation ( Docs , Source ). function getRewardServices ( ) external view returns ( struct InflationRewardServices . RewardService []); Return the structure of reward services. Returns Type Description [0] struct InflationRewardServices.RewardService[] Reward services structure. getTimeSlot # Defined in Inflation ( Docs , Source ). function getTimeSlot ( uint256 _index ) external view returns ( struct InflationTimeSlots . InflationTimeSlot ); Given an index, return the time slot at that index. Expect library to revert if index not found. Parameters Type Description _index uint256 The index of the time slot to fetch. Returns Type Description [0] struct InflationTimeSlots.InflationTimeSlot The inflation time slot state. getTopupConfiguration # Defined in Inflation ( Docs , Source ). function getTopupConfiguration ( contract IIInflationReceiver _inflationReceiver ) external view returns ( struct TopupConfiguration _topupConfiguration ); Given an inflation receiver, get the topup configuration. Parameters Type Description _inflationReceiver contract IIInflationReceiver The reward service. Returns Type Description _topupConfiguration struct TopupConfiguration The configuration of how the topup requests are calculated for a given reward service. getTotals # Defined in Inflation ( Docs , Source ). function getTotals ( ) external view returns ( uint256 _totalAuthorizedInflationWei , uint256 _totalInflationTopupRequestedWei , uint256 _totalInflationTopupDistributedWei , uint256 _totalRecognizedInflationWei ); Get a tuple of totals across inflation time slots. Returns Type Description _totalAuthorizedInflationWei uint256 Total inflation authorized to be mintable _totalInflationTopupRequestedWei uint256 Total inflation requested to be topped up for rewarding _totalInflationTopupDistributedWei uint256 Total inflation received for funding reward services _totalRecognizedInflationWei uint256 Total inflation recognized for rewarding governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. receiveMinting # Defined in Inflation ( Docs , Source ). function receiveMinting ( ) external payable ; Receive newly minted native tokens from the FlareDaemon . Assume that the received amount will be >= last topup requested across all services. If there is not enough balance sent to cover the topup request, expect the library method to revert. Also assume that any received balance greater than the calculated topup request came from self-destructor sending a balance to this contract. setInitialData # Defined in Inflation ( Docs , Source ). function setInitialData ( contract IIInflationV1 _oldInflation , uint256 _noOfAnnums ) external ; Used to copy data from old inflation contract. Only governance can call. Parameters Type Description _oldInflation contract IIInflationV1 Address of old inflation. _noOfAnnums uint256 Number of annums in old inflation. setPreInflationCalculation # Defined in Inflation ( Docs , Source ). function setPreInflationCalculation ( contract IIPreInflationCalculation _preInflationCalculation ) external ; Set contract that should be triggered before new inflation is calculated (it can be address(0)) Only governance can call. setTopupConfiguration # Defined in Inflation ( Docs , Source ). function setTopupConfiguration ( contract IIInflationReceiver _inflationReceiver , enum TopupType _topupType , uint256 _topupFactorX100 ) external ; Set the topup configuration for a reward service. Only governance can call. Topup factor, if _topupType == FACTOROFDAILYAUTHORIZED, must be greater than 100. Parameters Type Description _inflationReceiver contract IIInflationReceiver The reward service to receive the inflation funds for distribution. _topupType enum TopupType The type to signal how the topup amounts are to be calculated. FACTOROFDAILYAUTHORIZED = Use a factor of last daily authorized to set a target balance for a reward service to maintain as a reserve for claiming. ALLAUTHORIZED = Mint enough native tokens to topup reward service contract to hold all authorized but unrequested rewards. _topupFactorX100 uint256 If _topupType == FACTOROFDAILYAUTHORIZED, then this factor (times 100) is multiplied by last daily authorized inflation to obtain the maximum balance that a reward service can hold at any given time. If it holds less, then this max amount is used to compute the mint request topup required to bring the reward service contract native token balance up to that amount. switchToFallbackMode # Defined in Inflation ( Docs , Source ). function switchToFallbackMode ( ) external view returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. Modifiers # notZero # Defined in Inflation ( Docs , Source ). modifier notZero ( address _address ) onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyFlareDaemon # Defined in GovernedAndFlareDaemonized ( Docs , Source ). modifier onlyFlareDaemon () Only the flareDaemon can call this method. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () Variables # flareDaemon # Defined in GovernedAndFlareDaemonized ( Docs , Source ). contract FlareDaemon flareDaemon The FlareDaemon contract, set at construction time. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. inflationAllocation # Defined in Inflation ( Docs , Source ). contract IIInflationAllocation inflationAllocation lastAuthorizationTs # Defined in Inflation ( Docs , Source ). uint256 lastAuthorizationTs The last time inflation was authorized. preInflationCalculation # Defined in Inflation ( Docs , Source ). contract IIPreInflationCalculation preInflationCalculation productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . rewardEpochStartTs # Defined in Inflation ( Docs , Source ). uint256 rewardEpochStartTs Do not start inflation time slots before this, in seconds after UNIX epoch. rewardEpochStartedTs # Defined in Inflation ( Docs , Source ). uint256 rewardEpochStartedTs When the first reward epoch was started, in seconds after UNIX epoch. supply # Defined in Inflation ( Docs , Source ). contract IISupply supply timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"Inflation"},{"location":"apis/smart-contracts/Inflation/#ct_inflation","text":"Source | Inherits from IInflationGenesis , GovernedAndFlareDaemonized , IFlareDaemonize , AddressUpdatable Recognizes, authorizes, mints, and funds native tokens to Flare services that are rewardable through inflation. See the technical specification .","title":"Inflation"},{"location":"apis/smart-contracts/Inflation/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/Inflation/#ev_governancecalltimelocked","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire.","title":"GovernanceCallTimelocked"},{"location":"apis/smart-contracts/Inflation/#ev_governanceinitialised","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings .","title":"GovernanceInitialised"},{"location":"apis/smart-contracts/Inflation/#ev_governedproductionmodeentered","text":"Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork).","title":"GovernedProductionModeEntered"},{"location":"apis/smart-contracts/Inflation/#ev_inflationallocationset","text":"Defined in Inflation ( Docs , Source ). event InflationAllocationSet ( contract IIInflationAllocation inflationAllocation )","title":"InflationAllocationSet"},{"location":"apis/smart-contracts/Inflation/#ev_inflationauthorized","text":"Defined in Inflation ( Docs , Source ). event InflationAuthorized ( uint256 amountWei )","title":"InflationAuthorized"},{"location":"apis/smart-contracts/Inflation/#ev_inflationrewardservicedailyauthorizedinflationcomputed","text":"Defined in Inflation ( Docs , Source ). event InflationRewardServiceDailyAuthorizedInflationComputed ( contract IIInflationReceiver inflationReceiver , uint256 amountWei )","title":"InflationRewardServiceDailyAuthorizedInflationComputed"},{"location":"apis/smart-contracts/Inflation/#ev_inflationrewardservicetopupcomputed","text":"Defined in Inflation ( Docs , Source ). event InflationRewardServiceTopupComputed ( contract IIInflationReceiver inflationReceiver , uint256 amountWei )","title":"InflationRewardServiceTopupComputed"},{"location":"apis/smart-contracts/Inflation/#ev_inflationrewardservicetopuprequestreceived","text":"Defined in Inflation ( Docs , Source ). event InflationRewardServiceTopupRequestReceived ( contract IIInflationReceiver inflationReceiver , uint256 amountWei )","title":"InflationRewardServiceTopupRequestReceived"},{"location":"apis/smart-contracts/Inflation/#ev_mintingreceived","text":"Defined in Inflation ( Docs , Source ). event MintingReceived ( uint256 amountWei , uint256 selfDestructAmountWei )","title":"MintingReceived"},{"location":"apis/smart-contracts/Inflation/#ev_newtimeslotinitialized","text":"Defined in Inflation ( Docs , Source ). event NewTimeSlotInitialized ( uint256 startTimeStamp , uint256 endTimeStamp , uint256 inflatableSupplyWei , uint256 recognizedInflationWei )","title":"NewTimeSlotInitialized"},{"location":"apis/smart-contracts/Inflation/#ev_supplyset","text":"Defined in Inflation ( Docs , Source ). event SupplySet ( contract IISupply oldSupply , contract IISupply newSupply )","title":"SupplySet"},{"location":"apis/smart-contracts/Inflation/#ev_timelockedgovernancecallcanceled","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution.","title":"TimelockedGovernanceCallCanceled"},{"location":"apis/smart-contracts/Inflation/#ev_timelockedgovernancecallexecuted","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed.","title":"TimelockedGovernanceCallExecuted"},{"location":"apis/smart-contracts/Inflation/#ev_topupconfigurationset","text":"Defined in Inflation ( Docs , Source ). event TopupConfigurationSet ( struct TopupConfiguration topupConfiguration )","title":"TopupConfigurationSet"},{"location":"apis/smart-contracts/Inflation/#ev_topuprequested","text":"Defined in Inflation ( Docs , Source ). event TopupRequested ( uint256 requestAmountWei , uint256 reRequestAmountWei )","title":"TopupRequested"},{"location":"apis/smart-contracts/Inflation/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/Inflation/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/Inflation/#fn_constructor_undefined","text":"Defined in Inflation ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon , address _addressUpdater , uint256 _rewardEpochStartTs ) public ;","title":"constructor"},{"location":"apis/smart-contracts/Inflation/#fn_constructor_undefined","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). constructor ( address _governance , contract FlareDaemon _flareDaemon ) public ;","title":"constructor"},{"location":"apis/smart-contracts/Inflation/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/Inflation/#fn_daemonize_6d0e8c34","text":"Defined in IFlareDaemonize ( Docs , Source ). function daemonize ( ) external returns ( bool ); Implement this function to receive a trigger from the FlareDaemon . The trigger method is called by the validator right at the end of block state transition. Returns Type Description [0] bool bool Whether the contract is still active after the call. Currently unused.","title":"daemonize"},{"location":"apis/smart-contracts/Inflation/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/Inflation/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/Inflation/#fn_getcontractname_f5f5ba72","text":"Defined in Inflation ( Docs , Source ). function getContractName ( ) external pure returns ( string ); Implement this function to allow updating daemonized contracts through the AddressUpdater . Returns Type Description [0] string string Contract name.","title":"getContractName"},{"location":"apis/smart-contracts/Inflation/#fn_getcurrenttimeslot_5f61a576","text":"Defined in Inflation ( Docs , Source ). function getCurrentTimeSlot ( ) external view returns ( struct InflationTimeSlots . InflationTimeSlot ); Return the current time slot. Expect library to revert if there is no current time slot. Returns Type Description [0] struct InflationTimeSlots.InflationTimeSlot The inflation time slot state of the current time slot.","title":"getCurrentTimeSlot"},{"location":"apis/smart-contracts/Inflation/#fn_getcurrenttimeslotid_7292d727","text":"Defined in Inflation ( Docs , Source ). function getCurrentTimeSlotId ( ) external view returns ( uint256 ); Return current time slot id. Expect library to revert if there is no current time slot. Returns Type Description [0] uint256 Id of the current time slot.","title":"getCurrentTimeSlotId"},{"location":"apis/smart-contracts/Inflation/#fn_getnextexpectedtopupts_f639c12c","text":"Defined in Inflation ( Docs , Source ). function getNextExpectedTopupTs ( ) external view returns ( uint256 _nextTopupTs ); Returns next expected inflation topup time stamp which is also inflation authorization time. The returned time from this API is actually the time of the block in which the topup is requested. The Actual topup will take place in the next block. Expected diff is up to a few seconds (max is less then a minute).","title":"getNextExpectedTopupTs"},{"location":"apis/smart-contracts/Inflation/#fn_getrewardservices_aa5b5eca","text":"Defined in Inflation ( Docs , Source ). function getRewardServices ( ) external view returns ( struct InflationRewardServices . RewardService []); Return the structure of reward services. Returns Type Description [0] struct InflationRewardServices.RewardService[] Reward services structure.","title":"getRewardServices"},{"location":"apis/smart-contracts/Inflation/#fn_gettimeslot_2b85dcc9","text":"Defined in Inflation ( Docs , Source ). function getTimeSlot ( uint256 _index ) external view returns ( struct InflationTimeSlots . InflationTimeSlot ); Given an index, return the time slot at that index. Expect library to revert if index not found. Parameters Type Description _index uint256 The index of the time slot to fetch. Returns Type Description [0] struct InflationTimeSlots.InflationTimeSlot The inflation time slot state.","title":"getTimeSlot"},{"location":"apis/smart-contracts/Inflation/#fn_gettopupconfiguration_4b13e872","text":"Defined in Inflation ( Docs , Source ). function getTopupConfiguration ( contract IIInflationReceiver _inflationReceiver ) external view returns ( struct TopupConfiguration _topupConfiguration ); Given an inflation receiver, get the topup configuration. Parameters Type Description _inflationReceiver contract IIInflationReceiver The reward service. Returns Type Description _topupConfiguration struct TopupConfiguration The configuration of how the topup requests are calculated for a given reward service.","title":"getTopupConfiguration"},{"location":"apis/smart-contracts/Inflation/#fn_gettotals_84e10a90","text":"Defined in Inflation ( Docs , Source ). function getTotals ( ) external view returns ( uint256 _totalAuthorizedInflationWei , uint256 _totalInflationTopupRequestedWei , uint256 _totalInflationTopupDistributedWei , uint256 _totalRecognizedInflationWei ); Get a tuple of totals across inflation time slots. Returns Type Description _totalAuthorizedInflationWei uint256 Total inflation authorized to be mintable _totalInflationTopupRequestedWei uint256 Total inflation requested to be topped up for rewarding _totalInflationTopupDistributedWei uint256 Total inflation received for funding reward services _totalRecognizedInflationWei uint256 Total inflation recognized for rewarding","title":"getTotals"},{"location":"apis/smart-contracts/Inflation/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/Inflation/#fn_receiveminting_c611c2c5","text":"Defined in Inflation ( Docs , Source ). function receiveMinting ( ) external payable ; Receive newly minted native tokens from the FlareDaemon . Assume that the received amount will be >= last topup requested across all services. If there is not enough balance sent to cover the topup request, expect the library method to revert. Also assume that any received balance greater than the calculated topup request came from self-destructor sending a balance to this contract.","title":"receiveMinting"},{"location":"apis/smart-contracts/Inflation/#fn_setinitialdata_b6f1f749","text":"Defined in Inflation ( Docs , Source ). function setInitialData ( contract IIInflationV1 _oldInflation , uint256 _noOfAnnums ) external ; Used to copy data from old inflation contract. Only governance can call. Parameters Type Description _oldInflation contract IIInflationV1 Address of old inflation. _noOfAnnums uint256 Number of annums in old inflation.","title":"setInitialData"},{"location":"apis/smart-contracts/Inflation/#fn_setpreinflationcalculation_095bfd5a","text":"Defined in Inflation ( Docs , Source ). function setPreInflationCalculation ( contract IIPreInflationCalculation _preInflationCalculation ) external ; Set contract that should be triggered before new inflation is calculated (it can be address(0)) Only governance can call.","title":"setPreInflationCalculation"},{"location":"apis/smart-contracts/Inflation/#fn_settopupconfiguration_6e61ab96","text":"Defined in Inflation ( Docs , Source ). function setTopupConfiguration ( contract IIInflationReceiver _inflationReceiver , enum TopupType _topupType , uint256 _topupFactorX100 ) external ; Set the topup configuration for a reward service. Only governance can call. Topup factor, if _topupType == FACTOROFDAILYAUTHORIZED, must be greater than 100. Parameters Type Description _inflationReceiver contract IIInflationReceiver The reward service to receive the inflation funds for distribution. _topupType enum TopupType The type to signal how the topup amounts are to be calculated. FACTOROFDAILYAUTHORIZED = Use a factor of last daily authorized to set a target balance for a reward service to maintain as a reserve for claiming. ALLAUTHORIZED = Mint enough native tokens to topup reward service contract to hold all authorized but unrequested rewards. _topupFactorX100 uint256 If _topupType == FACTOROFDAILYAUTHORIZED, then this factor (times 100) is multiplied by last daily authorized inflation to obtain the maximum balance that a reward service can hold at any given time. If it holds less, then this max amount is used to compute the mint request topup required to bring the reward service contract native token balance up to that amount.","title":"setTopupConfiguration"},{"location":"apis/smart-contracts/Inflation/#fn_switchtofallbackmode_e22fdece","text":"Defined in Inflation ( Docs , Source ). function switchToFallbackMode ( ) external view returns ( bool ); This function will be called after an error is caught in daemonize . It will switch the contract to a simpler fallback mode, which hopefully works when full mode doesn't. Not every contract needs to support fallback mode ( FtsoManager does), so this method may be empty. Switching back to normal mode is left to the contract (typically a governed method call). This function may be called due to low-gas error, so it shouldn't use more than ~30.000 gas. Returns Type Description [0] bool True if switched to fallback mode, false if already in fallback mode or if fallback mode is not supported.","title":"switchToFallbackMode"},{"location":"apis/smart-contracts/Inflation/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/Inflation/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/Inflation/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/Inflation/#md_notzero","text":"Defined in Inflation ( Docs , Source ). modifier notZero ( address _address )","title":"notZero"},{"location":"apis/smart-contracts/Inflation/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/Inflation/#md_onlyflaredaemon","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). modifier onlyFlareDaemon () Only the flareDaemon can call this method.","title":"onlyFlareDaemon"},{"location":"apis/smart-contracts/Inflation/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/Inflation/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/Inflation/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/Inflation/#va_flaredaemon","text":"Defined in GovernedAndFlareDaemonized ( Docs , Source ). contract FlareDaemon flareDaemon The FlareDaemon contract, set at construction time.","title":"flareDaemon"},{"location":"apis/smart-contracts/Inflation/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/Inflation/#va_inflationallocation","text":"Defined in Inflation ( Docs , Source ). contract IIInflationAllocation inflationAllocation","title":"inflationAllocation"},{"location":"apis/smart-contracts/Inflation/#va_lastauthorizationts","text":"Defined in Inflation ( Docs , Source ). uint256 lastAuthorizationTs The last time inflation was authorized.","title":"lastAuthorizationTs"},{"location":"apis/smart-contracts/Inflation/#va_preinflationcalculation","text":"Defined in Inflation ( Docs , Source ). contract IIPreInflationCalculation preInflationCalculation","title":"preInflationCalculation"},{"location":"apis/smart-contracts/Inflation/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/Inflation/#va_rewardepochstartts","text":"Defined in Inflation ( Docs , Source ). uint256 rewardEpochStartTs Do not start inflation time slots before this, in seconds after UNIX epoch.","title":"rewardEpochStartTs"},{"location":"apis/smart-contracts/Inflation/#va_rewardepochstartedts","text":"Defined in Inflation ( Docs , Source ). uint256 rewardEpochStartedTs When the first reward epoch was started, in seconds after UNIX epoch.","title":"rewardEpochStartedTs"},{"location":"apis/smart-contracts/Inflation/#va_supply","text":"Defined in Inflation ( Docs , Source ). contract IISupply supply","title":"supply"},{"location":"apis/smart-contracts/Inflation/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/PriceSubmitter/","text":"PriceSubmitter # Source | Inherits from IIPriceSubmitter , GovernedAtGenesis , AddressUpdatable Receives prices from FTSO data providers . It then forwards the submissions to the appropriate FTSO contract, allowing data providers to perform all required operations in a single transaction per price epoch. Functions # cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. constructor # Defined in PriceSubmitter ( Docs , Source ). constructor ( ) public ; This constructor should contain no code as this contract is pre-loaded into the genesis block. The super constructors are called for testing convenience. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getCurrentRandom # Defined in PriceSubmitter ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous epoch, obtained from the random numbers provided by all data providers along with their data submissions. Note that the random number for the previous epoch keeps updating as new submissions are revealed. It never reverts. Returns Type Description [0] uint256 Random number calculated from all data provider's submissions. getFtsoManager # Defined in PriceSubmitter ( Docs , Source ). function getFtsoManager ( ) external view returns ( contract IFtsoManagerGenesis ); Returns the address of the FtsoManager contract. getFtsoRegistry # Defined in PriceSubmitter ( Docs , Source ). function getFtsoRegistry ( ) external view returns ( contract IFtsoRegistryGenesis ); Returns the address of the FtsoRegistry contract. getRandom # Defined in PriceSubmitter ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Note that only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch. getTrustedAddresses # Defined in PriceSubmitter ( Docs , Source ). function getTrustedAddresses ( ) external view returns ( address []); Returns the list of trusted addresses that are always allowed to submit and reveal. Returns Type Description [0] address[] address[] Array of trusted voter addresses. getVoterWhitelister # Defined in PriceSubmitter ( Docs , Source ). function getVoterWhitelister ( ) external view returns ( address ); Returns the address of the VoterWhitelister contract managing the data provider whitelist. governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. initialise # Defined in GovernedAtGenesis ( Docs , Source ). function initialise ( address _governance ) public pure ; Disallow initialise to be called. Parameters Type Description _governance address The governance address for initial claiming. revealPrices # Defined in PriceSubmitter ( Docs , Source ). function revealPrices ( uint256 _epochId , uint256 [] _ftsoIndices , uint256 [] _prices , uint256 _random ) external ; Reveals submitted prices during the epoch reveal period. The hash of FTSO indices, prices, random number, and voter address must be equal to the hash previously submitted with submitHash . Emits a PricesRevealed event. Parameters Type Description _epochId uint256 ID of the epoch to which the price hashes are submitted. _ftsoIndices uint256[] List of FTSO indices in ascending order. _prices uint256[] List of submitted prices in USD. _random uint256 Submitted random number. setAddressUpdater # Defined in PriceSubmitter ( Docs , Source ). function setAddressUpdater ( address _addressUpdater ) external ; Sets the address updater contract. Only governance cal call this method. Parameters Type Description _addressUpdater address Address of the AddressUpdater contract. setTrustedAddresses # Defined in PriceSubmitter ( Docs , Source ). function setTrustedAddresses ( address [] _trustedAddresses ) external ; Set the trusted addresses that are always allowed to submit and reveal. Trusted addresses are used, for example, in fallback mode. Only FTSO Manager can call this method. Parameters Type Description _trustedAddresses address[] Array of FTSO data provider addresses (voters). The previous list of trusted addresses is discarded. submitHash # Defined in PriceSubmitter ( Docs , Source ). function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Submits a hash for the current epoch. Can only be called by FTSO data providers whitelisted through the VoterWhitelisted contract. Emits the HashSubmitted event. Parameters Type Description _epochId uint256 ID of the target epoch to which the hash is submitted. _hash bytes32 A hash of the FTSO indices, prices, random number, and voter address. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. voterWhitelistBitmap # Defined in PriceSubmitter ( Docs , Source ). function voterWhitelistBitmap ( address _voter ) external view returns ( uint256 ); Returns a bitmap of all FTSOs for which a data provider is allowed to submit prices or hashes. Parameters Type Description _voter address Address of the voter. Returns Type Description [0] uint256 If a data provider is allowed to vote for a given FTSO index, the corresponding bit in the result is 1. voterWhitelisted # Defined in PriceSubmitter ( Docs , Source ). function voterWhitelisted ( address _voter , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when a new voter has been whitelisted. Only the VoterWhitelister contract can call this method. Parameters Type Description _voter address Voter address that has been added to the whitelist. _ftsoIndex uint256 Index of the FTSO to which the voter has registered. Each FTSO has its own whitelist. votersRemovedFromWhitelist # Defined in PriceSubmitter ( Docs , Source ). function votersRemovedFromWhitelist ( address [] _removedVoters , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when one or more voters have been removed. Only the VoterWhitelister contract can call this method. Parameters Type Description _removedVoters address[] _ftsoIndex uint256 Index of the FTSO to which the voters were registered. Each FTSO has its own whitelist. Modifiers # onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyFtsoManager # Defined in PriceSubmitter ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () onlyWhitelister # Defined in PriceSubmitter ( Docs , Source ). modifier onlyWhitelister () Only the voterWhitelister can call this method. Variables # MINIMAL_RANDOM # Defined in PriceSubmitter ( Docs , Source ). uint256 MINIMAL_RANDOM Minimal random value accepted along price submissions. Submitted random values below this threshold will revert. RANDOM_EPOCH_CYCLIC_BUFFER_SIZE # Defined in PriceSubmitter ( Docs , Source ). uint256 RANDOM_EPOCH_CYCLIC_BUFFER_SIZE Number of past random numbers remembered. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"PriceSubmitter"},{"location":"apis/smart-contracts/PriceSubmitter/#ct_pricesubmitter","text":"Source | Inherits from IIPriceSubmitter , GovernedAtGenesis , AddressUpdatable Receives prices from FTSO data providers . It then forwards the submissions to the appropriate FTSO contract, allowing data providers to perform all required operations in a single transaction per price epoch.","title":"PriceSubmitter"},{"location":"apis/smart-contracts/PriceSubmitter/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_constructor_undefined","text":"Defined in PriceSubmitter ( Docs , Source ). constructor ( ) public ; This constructor should contain no code as this contract is pre-loaded into the genesis block. The super constructors are called for testing convenience.","title":"constructor"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_getcurrentrandom_d89601fd","text":"Defined in PriceSubmitter ( Docs , Source ). function getCurrentRandom ( ) external view returns ( uint256 ); Returns the random number for the previous epoch, obtained from the random numbers provided by all data providers along with their data submissions. Note that the random number for the previous epoch keeps updating as new submissions are revealed. It never reverts. Returns Type Description [0] uint256 Random number calculated from all data provider's submissions.","title":"getCurrentRandom"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_getftsomanager_b39c6858","text":"Defined in PriceSubmitter ( Docs , Source ). function getFtsoManager ( ) external view returns ( contract IFtsoManagerGenesis ); Returns the address of the FtsoManager contract.","title":"getFtsoManager"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_getftsoregistry_8c9d28b6","text":"Defined in PriceSubmitter ( Docs , Source ). function getFtsoRegistry ( ) external view returns ( contract IFtsoRegistryGenesis ); Returns the address of the FtsoRegistry contract.","title":"getFtsoRegistry"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_getrandom_cd4b6914","text":"Defined in PriceSubmitter ( Docs , Source ). function getRandom ( uint256 _epochId ) external view returns ( uint256 ); Returns the random number used in a specific past epoch, obtained from the random numbers provided by all data providers along with their data submissions. Parameters Type Description _epochId uint256 ID of the queried epoch. Current epoch cannot be queried, and the previous epoch is constantly updated as data providers reveal their prices and random numbers. Note that only the last 50 epochs can be queried and there is no bounds checking for this parameter. Out-of-bounds queries return undefined values. Returns Type Description [0] uint256 The random number used in that epoch.","title":"getRandom"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_gettrustedaddresses_ffacb84e","text":"Defined in PriceSubmitter ( Docs , Source ). function getTrustedAddresses ( ) external view returns ( address []); Returns the list of trusted addresses that are always allowed to submit and reveal. Returns Type Description [0] address[] address[] Array of trusted voter addresses.","title":"getTrustedAddresses"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_getvoterwhitelister_71e1fad9","text":"Defined in PriceSubmitter ( Docs , Source ). function getVoterWhitelister ( ) external view returns ( address ); Returns the address of the VoterWhitelister contract managing the data provider whitelist.","title":"getVoterWhitelister"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_initialise_9d6a890f","text":"Defined in GovernedAtGenesis ( Docs , Source ). function initialise ( address _governance ) public pure ; Disallow initialise to be called. Parameters Type Description _governance address The governance address for initial claiming.","title":"initialise"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_revealprices_e2db5a52","text":"Defined in PriceSubmitter ( Docs , Source ). function revealPrices ( uint256 _epochId , uint256 [] _ftsoIndices , uint256 [] _prices , uint256 _random ) external ; Reveals submitted prices during the epoch reveal period. The hash of FTSO indices, prices, random number, and voter address must be equal to the hash previously submitted with submitHash . Emits a PricesRevealed event. Parameters Type Description _epochId uint256 ID of the epoch to which the price hashes are submitted. _ftsoIndices uint256[] List of FTSO indices in ascending order. _prices uint256[] List of submitted prices in USD. _random uint256 Submitted random number.","title":"revealPrices"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_setaddressupdater_aea36b53","text":"Defined in PriceSubmitter ( Docs , Source ). function setAddressUpdater ( address _addressUpdater ) external ; Sets the address updater contract. Only governance cal call this method. Parameters Type Description _addressUpdater address Address of the AddressUpdater contract.","title":"setAddressUpdater"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_settrustedaddresses_9ec2b581","text":"Defined in PriceSubmitter ( Docs , Source ). function setTrustedAddresses ( address [] _trustedAddresses ) external ; Set the trusted addresses that are always allowed to submit and reveal. Trusted addresses are used, for example, in fallback mode. Only FTSO Manager can call this method. Parameters Type Description _trustedAddresses address[] Array of FTSO data provider addresses (voters). The previous list of trusted addresses is discarded.","title":"setTrustedAddresses"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_submithash_8fc6f667","text":"Defined in PriceSubmitter ( Docs , Source ). function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Submits a hash for the current epoch. Can only be called by FTSO data providers whitelisted through the VoterWhitelisted contract. Emits the HashSubmitted event. Parameters Type Description _epochId uint256 ID of the target epoch to which the hash is submitted. _hash bytes32 A hash of the FTSO indices, prices, random number, and voter address.","title":"submitHash"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_voterwhitelistbitmap_7ac420ad","text":"Defined in PriceSubmitter ( Docs , Source ). function voterWhitelistBitmap ( address _voter ) external view returns ( uint256 ); Returns a bitmap of all FTSOs for which a data provider is allowed to submit prices or hashes. Parameters Type Description _voter address Address of the voter. Returns Type Description [0] uint256 If a data provider is allowed to vote for a given FTSO index, the corresponding bit in the result is 1.","title":"voterWhitelistBitmap"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_voterwhitelisted_9d986f91","text":"Defined in PriceSubmitter ( Docs , Source ). function voterWhitelisted ( address _voter , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when a new voter has been whitelisted. Only the VoterWhitelister contract can call this method. Parameters Type Description _voter address Voter address that has been added to the whitelist. _ftsoIndex uint256 Index of the FTSO to which the voter has registered. Each FTSO has its own whitelist.","title":"voterWhitelisted"},{"location":"apis/smart-contracts/PriceSubmitter/#fn_votersremovedfromwhitelist_76794efb","text":"Defined in PriceSubmitter ( Docs , Source ). function votersRemovedFromWhitelist ( address [] _removedVoters , uint256 _ftsoIndex ) external ; Called from the VoterWhitelister contract when one or more voters have been removed. Only the VoterWhitelister contract can call this method. Parameters Type Description _removedVoters address[] _ftsoIndex uint256 Index of the FTSO to which the voters were registered. Each FTSO has its own whitelist.","title":"votersRemovedFromWhitelist"},{"location":"apis/smart-contracts/PriceSubmitter/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/PriceSubmitter/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/PriceSubmitter/#md_onlyftsomanager","text":"Defined in PriceSubmitter ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method.","title":"onlyFtsoManager"},{"location":"apis/smart-contracts/PriceSubmitter/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/PriceSubmitter/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/PriceSubmitter/#md_onlywhitelister","text":"Defined in PriceSubmitter ( Docs , Source ). modifier onlyWhitelister () Only the voterWhitelister can call this method.","title":"onlyWhitelister"},{"location":"apis/smart-contracts/PriceSubmitter/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/PriceSubmitter/#va_minimal_random","text":"Defined in PriceSubmitter ( Docs , Source ). uint256 MINIMAL_RANDOM Minimal random value accepted along price submissions. Submitted random values below this threshold will revert.","title":"MINIMAL_RANDOM"},{"location":"apis/smart-contracts/PriceSubmitter/#va_random_epoch_cyclic_buffer_size","text":"Defined in PriceSubmitter ( Docs , Source ). uint256 RANDOM_EPOCH_CYCLIC_BUFFER_SIZE Number of past random numbers remembered.","title":"RANDOM_EPOCH_CYCLIC_BUFFER_SIZE"},{"location":"apis/smart-contracts/PriceSubmitter/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/PriceSubmitter/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/PriceSubmitter/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/RevertErrorTracking/","text":"RevertErrorTracking # Source Revert error tracking contract. A contract to track and store revert errors. Events # ContractRevertError # Defined in RevertErrorTracking ( Docs , Source ). event ContractRevertError ( address theContract , uint256 atBlock , string theMessage ) Emitted when a contract reverts. Parameters Type Description theContract address The culprit's address. atBlock uint256 Block number where the error happened. theMessage string Reason for the revert, as reported by the contract. Functions # showLastRevertedError # Defined in RevertErrorTracking ( Docs , Source ). function showLastRevertedError ( ) external view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest error information. All arrays will contain only one entry. Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts. showRevertedErrors # Defined in RevertErrorTracking ( Docs , Source ). function showRevertedErrors ( uint256 startIndex , uint256 numErrorTypesToShow ) public view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest errors. Parameters Type Description startIndex uint256 Starting index in the error list array. numErrorTypesToShow uint256 Number of errors to show. The total amount can be found in errorData . Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts. Structures # LastErrorData # Defined in RevertErrorTracking ( Docs , Source ). struct LastErrorData { uint192 totalRevertedErrors ; uint64 lastErrorTypeIndex ; } RevertedError # Defined in RevertErrorTracking ( Docs , Source ). struct RevertedError { uint192 lastErrorBlock ; uint64 numErrors ; address fromContract ; uint64 errorTypeIndex ; string errorMessage ; } Variables # errorData # Defined in RevertErrorTracking ( Docs , Source ). struct RevertErrorTracking . LastErrorData errorData Most recent error information.","title":"RevertErrorTracking"},{"location":"apis/smart-contracts/RevertErrorTracking/#ct_reverterrortracking","text":"Source Revert error tracking contract. A contract to track and store revert errors.","title":"RevertErrorTracking"},{"location":"apis/smart-contracts/RevertErrorTracking/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/RevertErrorTracking/#ev_contractreverterror","text":"Defined in RevertErrorTracking ( Docs , Source ). event ContractRevertError ( address theContract , uint256 atBlock , string theMessage ) Emitted when a contract reverts. Parameters Type Description theContract address The culprit's address. atBlock uint256 Block number where the error happened. theMessage string Reason for the revert, as reported by the contract.","title":"ContractRevertError"},{"location":"apis/smart-contracts/RevertErrorTracking/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/RevertErrorTracking/#fn_showlastrevertederror_2b3c41a4","text":"Defined in RevertErrorTracking ( Docs , Source ). function showLastRevertedError ( ) external view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest error information. All arrays will contain only one entry. Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts.","title":"showLastRevertedError"},{"location":"apis/smart-contracts/RevertErrorTracking/#fn_showrevertederrors_6ea0aa31","text":"Defined in RevertErrorTracking ( Docs , Source ). function showRevertedErrors ( uint256 startIndex , uint256 numErrorTypesToShow ) public view returns ( uint256 [] _lastErrorBlock , uint256 [] _numErrors , string [] _errorString , address [] _erroringContract , uint256 _totalRevertedErrors ); Returns latest errors. Parameters Type Description startIndex uint256 Starting index in the error list array. numErrorTypesToShow uint256 Number of errors to show. The total amount can be found in errorData . Returns Type Description _lastErrorBlock uint256[] Array of block numbers where the errors occurred. _numErrors uint256[] Array of number of times same error with same contract address has been reverted. _errorString string[] Array of revert error messages. _erroringContract address[] Array of addresses of the reverting contracts. _totalRevertedErrors uint256 Total number of revert errors across all contracts.","title":"showRevertedErrors"},{"location":"apis/smart-contracts/RevertErrorTracking/#structures","text":"","title":"Structures"},{"location":"apis/smart-contracts/RevertErrorTracking/#st_lasterrordata","text":"Defined in RevertErrorTracking ( Docs , Source ). struct LastErrorData { uint192 totalRevertedErrors ; uint64 lastErrorTypeIndex ; }","title":"LastErrorData"},{"location":"apis/smart-contracts/RevertErrorTracking/#st_revertederror","text":"Defined in RevertErrorTracking ( Docs , Source ). struct RevertedError { uint192 lastErrorBlock ; uint64 numErrors ; address fromContract ; uint64 errorTypeIndex ; string errorMessage ; }","title":"RevertedError"},{"location":"apis/smart-contracts/RevertErrorTracking/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/RevertErrorTracking/#va_errordata","text":"Defined in RevertErrorTracking ( Docs , Source ). struct RevertErrorTracking . LastErrorData errorData Most recent error information.","title":"errorData"},{"location":"apis/smart-contracts/VPContract/","text":"VPContract # Source | Inherits from IIVPContract , Delegatable Helper contract handling all the vote power and delegation functionality for an associated VPToken . Functions # batchVotePowerOfAt # Defined in VPContract ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 [] _votePowers ); Get the vote power of a set of addresses at a given block number. Parameters Type Description _owners address[] The list of addresses being queried. _blockNumber uint256 The block number being queried. Returns Type Description _votePowers uint256[] Vote power of each address at _blockNumber , including any delegation received. cleanupBlockNumber # Defined in VPContract ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. constructor # Defined in VPContract ( Docs , Source ). constructor ( contract IVPToken _ownerToken , bool _isReplacement ) public ; Construct VPContract for given VPToken . delegate # Defined in VPContract ( Docs , Source ). function delegate ( address _from , address _to , uint256 _balance , uint256 _bips ) external ; Delegate _bips percentage of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes delegation). delegateExplicit # Defined in VPContract ( Docs , Source ). function delegateExplicit ( address _from , address _to , uint256 _balance , uint256 _amount ) external ; Explicitly delegate _amount tokens of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 undelegates _to ). delegatesOf # Defined in VPContract ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator. Parameters Type Description _owner address The address of the delegator being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode. delegatesOfAt # Defined in VPContract ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) public view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator, at a given block. Parameters Type Description _owner address The address of the delegator being queried. _blockNumber uint256 The block number being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode. delegationModeOf # Defined in VPContract ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode of an address. This mode determines whether vote power is allocated by percentage or by explicit value and cannot be changed once set with delegate or delegateExplicit . Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode. explicitDelegationHistoryCleanup # Defined in Delegatable ( Docs , Source ). function explicitDelegationHistoryCleanup ( address _from , address _to , uint256 _count ) external returns ( uint256 ); Delete explicit delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of checkpoints deleted. isReplacement # Defined in IIVPContract ( Docs , Source ). function isReplacement ( ) external view returns ( bool ); Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block. ownerToken # Defined in IIVPContract ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); The VPToken (or some other contract) that owns this VPContract . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling IIVPContract methods. Owner token is also used in case of replacement to recover vote powers from balances. percentageDelegationHistoryCleanup # Defined in Delegatable ( Docs , Source ). function percentageDelegationHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete percentage delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Balance owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints. revocationCleanup # Defined in Delegatable ( Docs , Source ). function revocationCleanup ( address _from , address _to , uint256 _blockNumber ) external returns ( uint256 ); Delete revocation entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of revocation entries deleted (always 0 or 1). revokeDelegationAt # Defined in VPContract ( Docs , Source ). function revokeDelegationAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external ; Revoke all vote power delegation from a delegator address to a delegatee address at a given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate or delegateExplicit with value of 0, or undelegateAll / undelegateAllExplicit . Parameters Type Description _from address The address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number at which to revoke delegation. Must be in the past. setCleanerContract # Defined in VPContract ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in VPContract ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. The method can be called only by the owner token. Parameters Type Description _blockNumber uint256 The new cleanup block number. undelegateAll # Defined in VPContract ( Docs , Source ). function undelegateAll ( address _from , uint256 _balance ) external ; Undelegate all voting power for a delegator address. Can only be used with percentage delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _balance uint256 The delegator's current balance. undelegateAllExplicit # Defined in VPContract ( Docs , Source ). function undelegateAllExplicit ( address _from , address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount for a delegator address. Can only be used with explicit delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete). undelegatedVotePowerOf # Defined in VPContract ( Docs , Source ). function undelegatedVotePowerOf ( address _owner , uint256 _balance ) external view returns ( uint256 ); Compute the current undelegated vote power of an address. Parameters Type Description _owner address The address being queried. _balance uint256 Current balance of that address. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power currently not being delegated to other addresses. undelegatedVotePowerOfAt # Defined in VPContract ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Compute the undelegated vote power of an address at a given block. Parameters Type Description _owner address The address being queried. _balance uint256 _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power that was not being delegated to other addresses at that block number. updateAtTokenTransfer # Defined in VPContract ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 _fromBalance , uint256 _toBalance , uint256 _amount ) external ; Update vote powers when tokens are transferred. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations. Parameters Type Description _from address Source account of the transfer. _to address Destination account of the transfer. _fromBalance uint256 Balance of the source account before the transfer. _toBalance uint256 Balance of the destination account before the transfer. _amount uint256 Amount that has been transferred. votePowerCacheCleanup # Defined in Delegatable ( Docs , Source ). function votePowerCacheCleanup ( address _owner , uint256 _blockNumber ) external returns ( uint256 ); Delete vote power cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of deleted cache entries (always 0 or 1). votePowerFromTo # Defined in VPContract ( Docs , Source ). function votePowerFromTo ( address _from , address _to , uint256 _balance ) external view returns ( uint256 ); Get current delegated vote power from a delegator to a delegatee. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. Returns Type Description [0] uint256 The delegated vote power. votePowerFromToAt # Defined in VPContract ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated the vote power from a delegator to a delegatee at a given block number. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The delegated vote power. votePowerHistoryCleanup # Defined in Delegatable ( Docs , Source ). function votePowerHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete vote power checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints. votePowerOf # Defined in VPContract ( Docs , Source ). function votePowerOf ( address _who ) external view returns ( uint256 ); Get the current vote power of an address. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Current vote power of _who , including any delegation received. votePowerOfAt # Defined in VPContract ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) public view returns ( uint256 ); Get the vote power of an address at a given block number Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. votePowerOfAtCached # Defined in VPContract ( Docs , Source ). function votePowerOfAtCached ( address _who , uint256 _blockNumber ) external returns ( uint256 ); Get the vote power of an address at a given block number. Reads/updates cache and upholds revocations. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. votePowerOfAtIgnoringRevocation # Defined in VPContract ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of an address at a given block number, ignoring revocation information and cache. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. Result doesn't change if vote power is revoked. Modifiers # notBeforeCleanupBlock # Defined in Delegatable ( Docs , Source ). modifier notBeforeCleanupBlock ( uint256 _blockNumber ) Reading from history is not allowed before cleanupBlockNumber , since data before that might have been deleted and is thus unreliable. Parameters Type Description _blockNumber uint256 The block number being checked for validity. onlyCleaner # Defined in Delegatable ( Docs , Source ). modifier onlyCleaner () History cleaning methods can be called only from cleanerContract . onlyExplicit # Defined in VPContract ( Docs , Source ). modifier onlyExplicit ( address sender ) If a delegate cannot be added by explicit amount, revert. onlyOwnerToken # Defined in VPContract ( Docs , Source ). modifier onlyOwnerToken () All external methods in VPContract can only be executed by the owner token. onlyPercent # Defined in VPContract ( Docs , Source ). modifier onlyPercent ( address sender ) If a delegate cannot be added by percentage, revert. Variables # cleanerContract # Defined in Delegatable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning. isReplacement # Defined in VPContract ( Docs , Source ). bool isReplacement Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block. ownerToken # Defined in VPContract ( Docs , Source ). contract IVPToken ownerToken The VPToken (or some other contract) that owns this VPContract . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling IIVPContract methods. Owner token is also used in case of replacement to recover vote powers from balances.","title":"VPContract"},{"location":"apis/smart-contracts/VPContract/#ct_vpcontract","text":"Source | Inherits from IIVPContract , Delegatable Helper contract handling all the vote power and delegation functionality for an associated VPToken .","title":"VPContract"},{"location":"apis/smart-contracts/VPContract/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/VPContract/#fn_batchvotepowerofat_49e3c7e5","text":"Defined in VPContract ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 [] _votePowers ); Get the vote power of a set of addresses at a given block number. Parameters Type Description _owners address[] The list of addresses being queried. _blockNumber uint256 The block number being queried. Returns Type Description _votePowers uint256[] Vote power of each address at _blockNumber , including any delegation received.","title":"batchVotePowerOfAt"},{"location":"apis/smart-contracts/VPContract/#fn_cleanupblocknumber_deea13e7","text":"Defined in VPContract ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"cleanupBlockNumber"},{"location":"apis/smart-contracts/VPContract/#fn_constructor_undefined","text":"Defined in VPContract ( Docs , Source ). constructor ( contract IVPToken _ownerToken , bool _isReplacement ) public ; Construct VPContract for given VPToken .","title":"constructor"},{"location":"apis/smart-contracts/VPContract/#fn_delegate_6230001a","text":"Defined in VPContract ( Docs , Source ). function delegate ( address _from , address _to , uint256 _balance , uint256 _bips ) external ; Delegate _bips percentage of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes delegation).","title":"delegate"},{"location":"apis/smart-contracts/VPContract/#fn_delegateexplicit_404d9e82","text":"Defined in VPContract ( Docs , Source ). function delegateExplicit ( address _from , address _to , uint256 _balance , uint256 _amount ) external ; Explicitly delegate _amount tokens of voting power from a delegator address to a delegatee address. Parameters Type Description _from address The address of the delegator. _to address The address of the delegatee. _balance uint256 The delegator's current balance. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 undelegates _to ).","title":"delegateExplicit"},{"location":"apis/smart-contracts/VPContract/#fn_delegatesof_7de5b8ed","text":"Defined in VPContract ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator. Parameters Type Description _owner address The address of the delegator being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode.","title":"delegatesOf"},{"location":"apis/smart-contracts/VPContract/#fn_delegatesofat_ed475a79","text":"Defined in VPContract ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) public view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the percentages and addresses being delegated to by a vote power delegator, at a given block. Parameters Type Description _owner address The address of the delegator being queried. _blockNumber uint256 The block number being queried. Returns Type Description _delegateAddresses address[] Array of delegatee addresses. _bips uint256[] Array of delegation percents specified in basis points (1/100 or 1 percent), for each delegatee. _count uint256 The number of returned delegatees. _delegationMode uint256 The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode.","title":"delegatesOfAt"},{"location":"apis/smart-contracts/VPContract/#fn_delegationmodeof_f6837767","text":"Defined in VPContract ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode of an address. This mode determines whether vote power is allocated by percentage or by explicit value and cannot be changed once set with delegate or delegateExplicit . Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2). See Delegatable .DelegationMode.","title":"delegationModeOf"},{"location":"apis/smart-contracts/VPContract/#fn_explicitdelegationhistorycleanup_cabc4528","text":"Defined in Delegatable ( Docs , Source ). function explicitDelegationHistoryCleanup ( address _from , address _to , uint256 _count ) external returns ( uint256 ); Delete explicit delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of checkpoints deleted.","title":"explicitDelegationHistoryCleanup"},{"location":"apis/smart-contracts/VPContract/#fn_isreplacement_aa94d3f2","text":"Defined in IIVPContract ( Docs , Source ). function isReplacement ( ) external view returns ( bool ); Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block.","title":"isReplacement"},{"location":"apis/smart-contracts/VPContract/#fn_ownertoken_65371883","text":"Defined in IIVPContract ( Docs , Source ). function ownerToken ( ) external view returns ( contract IVPToken ); The VPToken (or some other contract) that owns this VPContract . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling IIVPContract methods. Owner token is also used in case of replacement to recover vote powers from balances.","title":"ownerToken"},{"location":"apis/smart-contracts/VPContract/#fn_percentagedelegationhistorycleanup_7f57d58f","text":"Defined in Delegatable ( Docs , Source ). function percentageDelegationHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete percentage delegation checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Balance owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints.","title":"percentageDelegationHistoryCleanup"},{"location":"apis/smart-contracts/VPContract/#fn_revocationcleanup_8c0b6b40","text":"Defined in Delegatable ( Docs , Source ). function revocationCleanup ( address _from , address _to , uint256 _blockNumber ) external returns ( uint256 ); Delete revocation entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _from address Delegator address. _to address Delegatee address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of revocation entries deleted (always 0 or 1).","title":"revocationCleanup"},{"location":"apis/smart-contracts/VPContract/#fn_revokedelegationat_c7c62fab","text":"Defined in VPContract ( Docs , Source ). function revokeDelegationAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external ; Revoke all vote power delegation from a delegator address to a delegatee address at a given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate or delegateExplicit with value of 0, or undelegateAll / undelegateAllExplicit . Parameters Type Description _from address The address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number at which to revoke delegation. Must be in the past.","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/VPContract/#fn_setcleanercontract_f6a494af","text":"Defined in VPContract ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/VPContract/#fn_setcleanupblocknumber_13de97f5","text":"Defined in VPContract ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. The method can be called only by the owner token. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/VPContract/#fn_undelegateall_05109ecf","text":"Defined in VPContract ( Docs , Source ). function undelegateAll ( address _from , uint256 _balance ) external ; Undelegate all voting power for a delegator address. Can only be used with percentage delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _balance uint256 The delegator's current balance.","title":"undelegateAll"},{"location":"apis/smart-contracts/VPContract/#fn_undelegateallexplicit_0f8b8af7","text":"Defined in VPContract ( Docs , Source ). function undelegateAllExplicit ( address _from , address [] _delegateAddresses ) external returns ( uint256 ); Undelegate all explicit vote power by amount for a delegator address. Can only be used with explicit delegation. Does not reset delegation mode back to NOTSET . Parameters Type Description _from address The address of the delegator. _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description [0] uint256 The amount still delegated (in case the list of delegates was incomplete).","title":"undelegateAllExplicit"},{"location":"apis/smart-contracts/VPContract/#fn_undelegatedvotepowerof_4a03d556","text":"Defined in VPContract ( Docs , Source ). function undelegatedVotePowerOf ( address _owner , uint256 _balance ) external view returns ( uint256 ); Compute the current undelegated vote power of an address. Parameters Type Description _owner address The address being queried. _balance uint256 Current balance of that address. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power currently not being delegated to other addresses.","title":"undelegatedVotePowerOf"},{"location":"apis/smart-contracts/VPContract/#fn_undelegatedvotepowerofat_31503927","text":"Defined in VPContract ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Compute the undelegated vote power of an address at a given block. Parameters Type Description _owner address The address being queried. _balance uint256 _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The unallocated vote power of _owner , this is, the amount of vote power that was not being delegated to other addresses at that block number.","title":"undelegatedVotePowerOfAt"},{"location":"apis/smart-contracts/VPContract/#fn_updateattokentransfer_eadb4362","text":"Defined in VPContract ( Docs , Source ). function updateAtTokenTransfer ( address _from , address _to , uint256 _fromBalance , uint256 _toBalance , uint256 _amount ) external ; Update vote powers when tokens are transferred. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations. Parameters Type Description _from address Source account of the transfer. _to address Destination account of the transfer. _fromBalance uint256 Balance of the source account before the transfer. _toBalance uint256 Balance of the destination account before the transfer. _amount uint256 Amount that has been transferred.","title":"updateAtTokenTransfer"},{"location":"apis/smart-contracts/VPContract/#fn_votepowercachecleanup_891339a8","text":"Defined in Delegatable ( Docs , Source ). function votePowerCacheCleanup ( address _owner , uint256 _blockNumber ) external returns ( uint256 ); Delete vote power cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _blockNumber uint256 Block number for which total supply value was cached. Returns Type Description [0] uint256 Number of deleted cache entries (always 0 or 1).","title":"votePowerCacheCleanup"},{"location":"apis/smart-contracts/VPContract/#fn_votepowerfromto_9dc6b9f2","text":"Defined in VPContract ( Docs , Source ). function votePowerFromTo ( address _from , address _to , uint256 _balance ) external view returns ( uint256 ); Get current delegated vote power from a delegator to a delegatee. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromTo"},{"location":"apis/smart-contracts/VPContract/#fn_votepowerfromtoat_833aca92","text":"Defined in VPContract ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _balance , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated the vote power from a delegator to a delegatee at a given block number. Parameters Type Description _from address Address of the delegator. _to address Address of the delegatee. _balance uint256 The delegator's current balance. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromToAt"},{"location":"apis/smart-contracts/VPContract/#fn_votepowerhistorycleanup_1a05274c","text":"Defined in Delegatable ( Docs , Source ). function votePowerHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete vote power checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address Vote power owner account address. _count uint256 Maximum number of checkpoints to delete. Returns Type Description [0] uint256 Number of deleted checkpoints.","title":"votePowerHistoryCleanup"},{"location":"apis/smart-contracts/VPContract/#fn_votepowerof_142d1018","text":"Defined in VPContract ( Docs , Source ). function votePowerOf ( address _who ) external view returns ( uint256 ); Get the current vote power of an address. Parameters Type Description _who address The address being queried. Returns Type Description [0] uint256 Current vote power of _who , including any delegation received.","title":"votePowerOf"},{"location":"apis/smart-contracts/VPContract/#fn_votepowerofat_92bfe6d8","text":"Defined in VPContract ( Docs , Source ). function votePowerOfAt ( address _who , uint256 _blockNumber ) public view returns ( uint256 ); Get the vote power of an address at a given block number Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received.","title":"votePowerOfAt"},{"location":"apis/smart-contracts/VPContract/#fn_votepowerofatcached_e587497e","text":"Defined in VPContract ( Docs , Source ). function votePowerOfAtCached ( address _who , uint256 _blockNumber ) external returns ( uint256 ); Get the vote power of an address at a given block number. Reads/updates cache and upholds revocations. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received.","title":"votePowerOfAtCached"},{"location":"apis/smart-contracts/VPContract/#fn_votepowerofatignoringrevocation_04bb4e43","text":"Defined in VPContract ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _who , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of an address at a given block number, ignoring revocation information and cache. Parameters Type Description _who address The address being queried. _blockNumber uint256 The block number being queried. Returns Type Description [0] uint256 Vote power of _who at _blockNumber , including any delegation received. Result doesn't change if vote power is revoked.","title":"votePowerOfAtIgnoringRevocation"},{"location":"apis/smart-contracts/VPContract/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/VPContract/#md_notbeforecleanupblock","text":"Defined in Delegatable ( Docs , Source ). modifier notBeforeCleanupBlock ( uint256 _blockNumber ) Reading from history is not allowed before cleanupBlockNumber , since data before that might have been deleted and is thus unreliable. Parameters Type Description _blockNumber uint256 The block number being checked for validity.","title":"notBeforeCleanupBlock"},{"location":"apis/smart-contracts/VPContract/#md_onlycleaner","text":"Defined in Delegatable ( Docs , Source ). modifier onlyCleaner () History cleaning methods can be called only from cleanerContract .","title":"onlyCleaner"},{"location":"apis/smart-contracts/VPContract/#md_onlyexplicit","text":"Defined in VPContract ( Docs , Source ). modifier onlyExplicit ( address sender ) If a delegate cannot be added by explicit amount, revert.","title":"onlyExplicit"},{"location":"apis/smart-contracts/VPContract/#md_onlyownertoken","text":"Defined in VPContract ( Docs , Source ). modifier onlyOwnerToken () All external methods in VPContract can only be executed by the owner token.","title":"onlyOwnerToken"},{"location":"apis/smart-contracts/VPContract/#md_onlypercent","text":"Defined in VPContract ( Docs , Source ). modifier onlyPercent ( address sender ) If a delegate cannot be added by percentage, revert.","title":"onlyPercent"},{"location":"apis/smart-contracts/VPContract/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/VPContract/#va_cleanercontract","text":"Defined in Delegatable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning.","title":"cleanerContract"},{"location":"apis/smart-contracts/VPContract/#va_isreplacement","text":"Defined in VPContract ( Docs , Source ). bool isReplacement Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block.","title":"isReplacement"},{"location":"apis/smart-contracts/VPContract/#va_ownertoken","text":"Defined in VPContract ( Docs , Source ). contract IVPToken ownerToken The VPToken (or some other contract) that owns this VPContract . All state changing methods may be called only from this address. This is because original msg.sender is typically sent in a parameter and we must make sure that it cannot be faked by directly calling IIVPContract methods. Owner token is also used in case of replacement to recover vote powers from balances.","title":"ownerToken"},{"location":"apis/smart-contracts/VPToken/","text":"VPToken # Source | Inherits from IIVPToken , ERC20, CheckPointable , Governed Vote power token. An ERC20 token that enables the holder to delegate a voting power equal to their balance, with history tracking by block height. Actual vote power and delegation functionality is implemented in an associated VPContract . Events # Approval # Defined in IERC20 ( Source ). event Approval ( address owner , address spender , uint256 value ) Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance . CreatedTotalSupplyCache # Defined in CheckPointable ( Docs , Source ). event CreatedTotalSupplyCache ( uint256 _blockNumber ) Emitted when a total supply cache entry is created. Allows history cleaners to track total supply cache cleanup opportunities off-chain. GovernanceCallTimelocked # Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire. GovernanceInitialised # Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings . GovernedProductionModeEntered # Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork). TimelockedGovernanceCallCanceled # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution. TimelockedGovernanceCallExecuted # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed. Transfer # Defined in IERC20 ( Source ). event Transfer ( address from , address to , uint256 value ) Emitted when value tokens are moved from one account ( from ) to another ( to ). Note that value may be zero. VotePowerContractChanged # Defined in VPToken ( Docs , Source ). event VotePowerContractChanged ( uint256 _contractType , address _oldContractAddress , address _newContractAddress ) Emitted when one of the vote power contracts is changed. It is used to track the history of VPToken -> VPContract / GovernanceVotePower associations (e.g. by external cleaners). Parameters Type Description _contractType uint256 0 = Read VPContract , 1 = Write VPContract , 2 = Governance vote power. _oldContractAddress address Contract address before change. _newContractAddress address Contract address after change. Functions # allowance # Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called. approve # Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event. balanceHistoryCleanup # Defined in CheckPointable ( Docs , Source ). function balanceHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete balance checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address balance owner account address _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted balanceOf # Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account . balanceOfAt # Defined in VPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) public view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 batchDelegate # Defined in VPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%). batchVotePowerOfAt # Defined in VPToken ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Return the vote power for several addresses. Parameters Type Description _owners address[] The list of addresses to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256[] Array of vote power for each queried address. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. cleanupBlockNumber # Defined in VPToken ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. constructor # Defined in VPToken ( Docs , Source ). constructor ( address _governance , string _name , string _symbol ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. constructor # Defined in ERC20 ( Source ). constructor ( string name_ , string symbol_ ) public ; Sets the values for name and symbol , initializes decimals with a default value of 18. To select a different value for decimals , use _setupDecimals. All three of these values are immutable: they can only be set once during construction. decimals # Defined in VPToken ( Docs , Source ). function decimals ( ) public view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method. delegate # Defined in VPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegateExplicit # Defined in VPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegatesOf # Defined in VPToken ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _owner address Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegatesOfAt # Defined in VPToken ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _owner address _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegationModeOf # Defined in VPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. governanceVotePower # Defined in VPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegate governance vote power. name # Defined in VPToken ( Docs , Source ). function name ( ) public view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method. readVotePowerContract # Defined in VPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking. revokeDelegationAt # Defined in VPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) public ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation.. setCleanerContract # Defined in VPToken ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in VPToken ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number. setCleanupBlockNumberManager # Defined in VPToken ( Docs , Source ). function setCleanupBlockNumberManager ( address _cleanupBlockNumberManager ) external ; Set the contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager . setGovernanceVotePower # Defined in VPToken ( Docs , Source ). function setGovernanceVotePower ( contract IIGovernanceVotePower _governanceVotePower ) external ; Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power. setReadVpContract # Defined in VPToken ( Docs , Source ). function setReadVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set read VpContract on token, e.g. vpToken. setReadVpContract (new VPContract (vpToken)). Read VPContract must be set before any of the VPToken delegation or vote power reading methods are called, otherwise they will revert. NOTE : If readVpContract differs from writeVpContract all reads will be \"frozen\" and will not reflect changes (not even revokes; they may or may not reflect balance transfers). Parameters Type Description _vpContract contract IIVPContract Read vote power contract to be used by this token. setWriteVpContract # Defined in VPToken ( Docs , Source ). function setWriteVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set write VpContract on token, e.g. vpToken. setWriteVpContract (new VPContract (vpToken)). Write VPContract must be set before any of the VPToken delegation modifying methods are called, otherwise they will revert. Parameters Type Description _vpContract contract IIVPContract Write vote power contract to be used by this token. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . symbol # Defined in VPToken ( Docs , Source ). function symbol ( ) public view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method. totalSupply # Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence. totalSupplyAt # Defined in VPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) public view returns ( uint256 ); Total amount of tokens at a specific _blockNumber . Parameters Type Description _blockNumber uint256 The block number when the _totalSupply is queried Returns Type Description [0] uint256 totalSupplyCacheCleanup # Defined in CheckPointable ( Docs , Source ). function totalSupplyCacheCleanup ( uint256 _blockNumber ) external returns ( uint256 ); Delete total supply cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _blockNumber uint256 the block number for which total supply value was cached Returns Type Description [0] uint256 the number of cache entries deleted (always 0 or 1) totalSupplyHistoryCleanup # Defined in CheckPointable ( Docs , Source ). function totalSupplyHistoryCleanup ( uint256 _count ) external returns ( uint256 ); Delete total supply checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted totalVotePower # Defined in VPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power). totalVotePowerAt # Defined in VPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers). totalVotePowerAtCached # Defined in VPToken ( Docs , Source ). function totalVotePowerAtCached ( uint256 _blockNumber ) public returns ( uint256 ); Get the total vote power at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers). transfer # Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. transferFrom # Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. undelegateAll # Defined in VPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET. undelegateAllExplicit # Defined in VPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 _remainingDelegation ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description _remainingDelegation uint256 The amount still delegated (in case the list of delegates was incomplete). undelegatedVotePowerOf # Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . undelegatedVotePowerOfAt # Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . votePowerFromTo # Defined in VPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power. votePowerFromToAt # Defined in VPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power. votePowerOf # Defined in VPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner . votePowerOfAt # Defined in VPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . votePowerOfAtCached # Defined in VPToken ( Docs , Source ). function votePowerOfAtCached ( address _owner , uint256 _blockNumber ) public returns ( uint256 ); Get the vote power of _owner at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at _blockNumber . votePowerOfAtIgnoringRevocation # Defined in VPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked. writeVotePowerContract # Defined in VPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking. Variables # cleanerContract # Defined in CheckPointable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning. cleanupBlockNumberManager # Defined in VPToken ( Docs , Source ). address cleanupBlockNumberManager The contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager . governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls. vpContractInitialized # Defined in VPToken ( Docs , Source ). bool vpContractInitialized When true, the argument to setWriteVpContract must be a vpContract with isReplacement set to true . To be used for creating the correct VPContract .","title":"VPToken"},{"location":"apis/smart-contracts/VPToken/#ct_vptoken","text":"Source | Inherits from IIVPToken , ERC20, CheckPointable , Governed Vote power token. An ERC20 token that enables the holder to delegate a voting power equal to their balance, with history tracking by block height. Actual vote power and delegation functionality is implemented in an associated VPContract .","title":"VPToken"},{"location":"apis/smart-contracts/VPToken/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/VPToken/#ev_approval","text":"Defined in IERC20 ( Source ). event Approval ( address owner , address spender , uint256 value ) Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance .","title":"Approval"},{"location":"apis/smart-contracts/VPToken/#ev_createdtotalsupplycache","text":"Defined in CheckPointable ( Docs , Source ). event CreatedTotalSupplyCache ( uint256 _blockNumber ) Emitted when a total supply cache entry is created. Allows history cleaners to track total supply cache cleanup opportunities off-chain.","title":"CreatedTotalSupplyCache"},{"location":"apis/smart-contracts/VPToken/#ev_governancecalltimelocked","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire.","title":"GovernanceCallTimelocked"},{"location":"apis/smart-contracts/VPToken/#ev_governanceinitialised","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings .","title":"GovernanceInitialised"},{"location":"apis/smart-contracts/VPToken/#ev_governedproductionmodeentered","text":"Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork).","title":"GovernedProductionModeEntered"},{"location":"apis/smart-contracts/VPToken/#ev_timelockedgovernancecallcanceled","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution.","title":"TimelockedGovernanceCallCanceled"},{"location":"apis/smart-contracts/VPToken/#ev_timelockedgovernancecallexecuted","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed.","title":"TimelockedGovernanceCallExecuted"},{"location":"apis/smart-contracts/VPToken/#ev_transfer","text":"Defined in IERC20 ( Source ). event Transfer ( address from , address to , uint256 value ) Emitted when value tokens are moved from one account ( from ) to another ( to ). Note that value may be zero.","title":"Transfer"},{"location":"apis/smart-contracts/VPToken/#ev_votepowercontractchanged","text":"Defined in VPToken ( Docs , Source ). event VotePowerContractChanged ( uint256 _contractType , address _oldContractAddress , address _newContractAddress ) Emitted when one of the vote power contracts is changed. It is used to track the history of VPToken -> VPContract / GovernanceVotePower associations (e.g. by external cleaners). Parameters Type Description _contractType uint256 0 = Read VPContract , 1 = Write VPContract , 2 = Governance vote power. _oldContractAddress address Contract address before change. _newContractAddress address Contract address after change.","title":"VotePowerContractChanged"},{"location":"apis/smart-contracts/VPToken/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/VPToken/#fn_allowance_dd62ed3e","text":"Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called.","title":"allowance"},{"location":"apis/smart-contracts/VPToken/#fn_approve_095ea7b3","text":"Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event.","title":"approve"},{"location":"apis/smart-contracts/VPToken/#fn_balancehistorycleanup_f0e292c9","text":"Defined in CheckPointable ( Docs , Source ). function balanceHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete balance checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address balance owner account address _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted","title":"balanceHistoryCleanup"},{"location":"apis/smart-contracts/VPToken/#fn_balanceof_70a08231","text":"Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"apis/smart-contracts/VPToken/#fn_balanceofat_4ee2cd7e","text":"Defined in VPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) public view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256","title":"balanceOfAt"},{"location":"apis/smart-contracts/VPToken/#fn_batchdelegate_dc4fcda7","text":"Defined in VPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%).","title":"batchDelegate"},{"location":"apis/smart-contracts/VPToken/#fn_batchvotepowerofat_49e3c7e5","text":"Defined in VPToken ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Return the vote power for several addresses. Parameters Type Description _owners address[] The list of addresses to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256[] Array of vote power for each queried address.","title":"batchVotePowerOfAt"},{"location":"apis/smart-contracts/VPToken/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/VPToken/#fn_cleanupblocknumber_deea13e7","text":"Defined in VPToken ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"cleanupBlockNumber"},{"location":"apis/smart-contracts/VPToken/#fn_constructor_undefined","text":"Defined in VPToken ( Docs , Source ). constructor ( address _governance , string _name , string _symbol ) public ;","title":"constructor"},{"location":"apis/smart-contracts/VPToken/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/VPToken/#fn_constructor_undefined","text":"Defined in ERC20 ( Source ). constructor ( string name_ , string symbol_ ) public ; Sets the values for name and symbol , initializes decimals with a default value of 18. To select a different value for decimals , use _setupDecimals. All three of these values are immutable: they can only be set once during construction.","title":"constructor"},{"location":"apis/smart-contracts/VPToken/#fn_decimals_313ce567","text":"Defined in VPToken ( Docs , Source ). function decimals ( ) public view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method.","title":"decimals"},{"location":"apis/smart-contracts/VPToken/#fn_delegate_026e402b","text":"Defined in VPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegate"},{"location":"apis/smart-contracts/VPToken/#fn_delegateexplicit_d06dc3ad","text":"Defined in VPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegateExplicit"},{"location":"apis/smart-contracts/VPToken/#fn_delegatesof_7de5b8ed","text":"Defined in VPToken ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _owner address Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOf"},{"location":"apis/smart-contracts/VPToken/#fn_delegatesofat_ed475a79","text":"Defined in VPToken ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _owner address _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOfAt"},{"location":"apis/smart-contracts/VPToken/#fn_delegationmodeof_f6837767","text":"Defined in VPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegationModeOf"},{"location":"apis/smart-contracts/VPToken/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/VPToken/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/VPToken/#fn_governancevotepower_8c2b8ae1","text":"Defined in VPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegate governance vote power.","title":"governanceVotePower"},{"location":"apis/smart-contracts/VPToken/#fn_name_06fdde03","text":"Defined in VPToken ( Docs , Source ). function name ( ) public view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method.","title":"name"},{"location":"apis/smart-contracts/VPToken/#fn_readvotepowercontract_9b3baa0e","text":"Defined in VPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking.","title":"readVotePowerContract"},{"location":"apis/smart-contracts/VPToken/#fn_revokedelegationat_bbd6fbf8","text":"Defined in VPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) public ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation..","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/VPToken/#fn_setcleanercontract_f6a494af","text":"Defined in VPToken ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/VPToken/#fn_setcleanupblocknumber_13de97f5","text":"Defined in VPToken ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/VPToken/#fn_setcleanupblocknumbermanager_7f4fcaa9","text":"Defined in VPToken ( Docs , Source ). function setCleanupBlockNumberManager ( address _cleanupBlockNumberManager ) external ; Set the contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanupBlockNumberManager"},{"location":"apis/smart-contracts/VPToken/#fn_setgovernancevotepower_9ca2231a","text":"Defined in VPToken ( Docs , Source ). function setGovernanceVotePower ( contract IIGovernanceVotePower _governanceVotePower ) external ; Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power.","title":"setGovernanceVotePower"},{"location":"apis/smart-contracts/VPToken/#fn_setreadvpcontract_31d12a16","text":"Defined in VPToken ( Docs , Source ). function setReadVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set read VpContract on token, e.g. vpToken. setReadVpContract (new VPContract (vpToken)). Read VPContract must be set before any of the VPToken delegation or vote power reading methods are called, otherwise they will revert. NOTE : If readVpContract differs from writeVpContract all reads will be \"frozen\" and will not reflect changes (not even revokes; they may or may not reflect balance transfers). Parameters Type Description _vpContract contract IIVPContract Read vote power contract to be used by this token.","title":"setReadVpContract"},{"location":"apis/smart-contracts/VPToken/#fn_setwritevpcontract_755d10a4","text":"Defined in VPToken ( Docs , Source ). function setWriteVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set write VpContract on token, e.g. vpToken. setWriteVpContract (new VPContract (vpToken)). Write VPContract must be set before any of the VPToken delegation modifying methods are called, otherwise they will revert. Parameters Type Description _vpContract contract IIVPContract Write vote power contract to be used by this token.","title":"setWriteVpContract"},{"location":"apis/smart-contracts/VPToken/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/VPToken/#fn_symbol_95d89b41","text":"Defined in VPToken ( Docs , Source ). function symbol ( ) public view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method.","title":"symbol"},{"location":"apis/smart-contracts/VPToken/#fn_totalsupply_18160ddd","text":"Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"apis/smart-contracts/VPToken/#fn_totalsupplyat_981b24d0","text":"Defined in VPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) public view returns ( uint256 ); Total amount of tokens at a specific _blockNumber . Parameters Type Description _blockNumber uint256 The block number when the _totalSupply is queried Returns Type Description [0] uint256","title":"totalSupplyAt"},{"location":"apis/smart-contracts/VPToken/#fn_totalsupplycachecleanup_43ea370b","text":"Defined in CheckPointable ( Docs , Source ). function totalSupplyCacheCleanup ( uint256 _blockNumber ) external returns ( uint256 ); Delete total supply cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _blockNumber uint256 the block number for which total supply value was cached Returns Type Description [0] uint256 the number of cache entries deleted (always 0 or 1)","title":"totalSupplyCacheCleanup"},{"location":"apis/smart-contracts/VPToken/#fn_totalsupplyhistorycleanup_f62f8f3a","text":"Defined in CheckPointable ( Docs , Source ). function totalSupplyHistoryCleanup ( uint256 _count ) external returns ( uint256 ); Delete total supply checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted","title":"totalSupplyHistoryCleanup"},{"location":"apis/smart-contracts/VPToken/#fn_totalvotepower_f5f3d4f7","text":"Defined in VPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power).","title":"totalVotePower"},{"location":"apis/smart-contracts/VPToken/#fn_totalvotepowerat_3e5aa26a","text":"Defined in VPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers).","title":"totalVotePowerAt"},{"location":"apis/smart-contracts/VPToken/#fn_totalvotepoweratcached_caeb942b","text":"Defined in VPToken ( Docs , Source ). function totalVotePowerAtCached ( uint256 _blockNumber ) public returns ( uint256 ); Get the total vote power at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers).","title":"totalVotePowerAtCached"},{"location":"apis/smart-contracts/VPToken/#fn_transfer_a9059cbb","text":"Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transfer"},{"location":"apis/smart-contracts/VPToken/#fn_transferfrom_23b872dd","text":"Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transferFrom"},{"location":"apis/smart-contracts/VPToken/#fn_undelegateall_b302f393","text":"Defined in VPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET.","title":"undelegateAll"},{"location":"apis/smart-contracts/VPToken/#fn_undelegateallexplicit_5d6d11eb","text":"Defined in VPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 _remainingDelegation ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description _remainingDelegation uint256 The amount still delegated (in case the list of delegates was incomplete).","title":"undelegateAllExplicit"},{"location":"apis/smart-contracts/VPToken/#fn_undelegatedvotepowerof_d6aa0b77","text":"Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOf"},{"location":"apis/smart-contracts/VPToken/#fn_undelegatedvotepowerofat_83035a82","text":"Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOfAt"},{"location":"apis/smart-contracts/VPToken/#fn_votepowerfromto_be0ca747","text":"Defined in VPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power.","title":"votePowerFromTo"},{"location":"apis/smart-contracts/VPToken/#fn_votepowerfromtoat_e64767aa","text":"Defined in VPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromToAt"},{"location":"apis/smart-contracts/VPToken/#fn_votepowerof_142d1018","text":"Defined in VPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner .","title":"votePowerOf"},{"location":"apis/smart-contracts/VPToken/#fn_votepowerofat_92bfe6d8","text":"Defined in VPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber .","title":"votePowerOfAt"},{"location":"apis/smart-contracts/VPToken/#fn_votepowerofatcached_e587497e","text":"Defined in VPToken ( Docs , Source ). function votePowerOfAtCached ( address _owner , uint256 _blockNumber ) public returns ( uint256 ); Get the vote power of _owner at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at _blockNumber .","title":"votePowerOfAtCached"},{"location":"apis/smart-contracts/VPToken/#fn_votepowerofatignoringrevocation_04bb4e43","text":"Defined in VPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked.","title":"votePowerOfAtIgnoringRevocation"},{"location":"apis/smart-contracts/VPToken/#fn_writevotepowercontract_1fec092a","text":"Defined in VPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking.","title":"writeVotePowerContract"},{"location":"apis/smart-contracts/VPToken/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/VPToken/#va_cleanercontract","text":"Defined in CheckPointable ( Docs , Source ). address cleanerContract Address of the contract that is allowed to call methods for history cleaning.","title":"cleanerContract"},{"location":"apis/smart-contracts/VPToken/#va_cleanupblocknumbermanager","text":"Defined in VPToken ( Docs , Source ). address cleanupBlockNumberManager The contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager .","title":"cleanupBlockNumberManager"},{"location":"apis/smart-contracts/VPToken/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/VPToken/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/VPToken/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/VPToken/#va_vpcontractinitialized","text":"Defined in VPToken ( Docs , Source ). bool vpContractInitialized When true, the argument to setWriteVpContract must be a vpContract with isReplacement set to true . To be used for creating the correct VPContract .","title":"vpContractInitialized"},{"location":"apis/smart-contracts/VoterWhitelister/","text":"VoterWhitelister # Source | Inherits from IIVoterWhitelister , Governed , AddressUpdatable Manager of the FTSO whitelist . Only addresses registered in this contract can submit data to the FTSO system. Functions # addFtso # Defined in VoterWhitelister ( Docs , Source ). function addFtso ( uint256 _ftsoIndex ) external ; Create an empty whitelist with default size for a new FTSO. Only ftsoManager can call this method. Parameters Type Description _ftsoIndex uint256 Index of the new FTSO. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. chillVoter # Defined in VoterWhitelister ( Docs , Source ). function chillVoter ( address _voter , uint256 _noOfRewardEpochs , uint256 [] _ftsoIndices ) external returns ( bool [] _removed , uint256 _untilRewardEpoch ); Used to chill a data provider, this is, remove it from the whitelist for a specified number of reward epochs. Only governance can call this method. Parameters Type Description _voter address Data provider being chilled. _noOfRewardEpochs uint256 Number of epochs to chill the provider for. _ftsoIndices uint256[] Array of indices of the FTSOs that will not allow this provider to submit data. chilledUntilRewardEpoch # Defined in IVoterWhitelister ( Docs , Source ). function chilledUntilRewardEpoch ( address _voter ) external view returns ( uint256 ); In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards. Parameters Type Description _voter address Address of the queried data provider. Returns Type Description [0] uint256 uint256 ID of the epoch where the data provider can start submitting prices again. constructor # Defined in VoterWhitelister ( Docs , Source ). constructor ( address _governance , address _addressUpdater , contract IIPriceSubmitter _priceSubmitter , uint256 _defaultMaxVotersForFtso , contract IVoterWhitelister _oldVoterWhitelister ) public ; constructor # Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero. copyWhitelist # Defined in VoterWhitelister ( Docs , Source ). function copyWhitelist ( uint256 _ftsoIndex ) external ; Copy whitelist data from oldVoterWhitelister for a specific FTSO. Can only be called by governance . Parameters Type Description _ftsoIndex uint256 Index of the FTSO whose whitelist is to be copied. defaultMaxVotersForFtso # Defined in IVoterWhitelister ( Docs , Source ). function defaultMaxVotersForFtso ( ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a new FTSO. Returns Type Description [0] uint256 uint256 Default maximum allowed voters. executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). getAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call. getFtsoWhitelistedPriceProviders # Defined in VoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProviders ( uint256 _ftsoIndex ) public view returns ( address []); Gets whitelisted price providers for the FTSO at a given index. Parameters Type Description _ftsoIndex uint256 Queried index. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers. getFtsoWhitelistedPriceProvidersBySymbol # Defined in VoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProvidersBySymbol ( string _symbol ) external view returns ( address []); Gets whitelisted price providers for the FTSO with a specified symbol. Parameters Type Description _symbol string Queried symbol. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers. governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. maxVotersForFtso # Defined in IVoterWhitelister ( Docs , Source ). function maxVotersForFtso ( uint256 _ftsoIndex ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index. Parameters Type Description _ftsoIndex uint256 Index of the FTSO. Returns Type Description [0] uint256 uint256 Maximum allowed voters. removeFtso # Defined in VoterWhitelister ( Docs , Source ). function removeFtso ( uint256 _ftsoIndex ) external ; Clear whitelist for a removed FTSO. Only ftsoManager can call this method. Parameters Type Description _ftsoIndex uint256 Index of the removed FTSO. removeTrustedAddressFromWhitelist # Defined in VoterWhitelister ( Docs , Source ). function removeTrustedAddressFromWhitelist ( address _trustedAddress , uint256 _ftsoIndex ) external ; Remove a trusted address from whitelist. Parameters Type Description _trustedAddress address Address to remove. _ftsoIndex uint256 Index of the FTSO being modified. requestFullVoterWhitelisting # Defined in VoterWhitelister ( Docs , Source ). function requestFullVoterWhitelisting ( address _voter ) external returns ( uint256 [] _supportedIndices , bool [] _success ); Requests whitelisting an account to act as a data provider for all active FTSOs. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. Returns Type Description _supportedIndices uint256[] Array of currently supported FTSO indices. _success bool[] Array of success flags by FTSO index. requestWhitelistingVoter # Defined in VoterWhitelister ( Docs , Source ). function requestWhitelistingVoter ( address _voter , uint256 _ftsoIndex ) external ; Requests whitelisting an account to act as a data provider for a specific FTSO. Reverts if the vote power of the account is too low. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. _ftsoIndex uint256 Index of the FTSO. setDefaultMaxVotersForFtso # Defined in VoterWhitelister ( Docs , Source ). function setDefaultMaxVotersForFtso ( uint256 _defaultMaxVotersForFtso ) external ; Set the maximum number of voters in the whitelist for a new FTSOs. Only governance can call this method. Parameters Type Description _defaultMaxVotersForFtso uint256 New maximum default value. setMaxVotersForFtso # Defined in VoterWhitelister ( Docs , Source ). function setMaxVotersForFtso ( uint256 _ftsoIndex , uint256 _newMaxVoters ) external ; Set the maximum number of voters in the whitelist for a specific FTSO. Can remove voters with the least votepower from the whitelist. Only governance can call this method. Parameters Type Description _ftsoIndex uint256 Index of the FTSO to modify. _newMaxVoters uint256 New size of the whitelist. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . turnOffCopyMode # Defined in VoterWhitelister ( Docs , Source ). function turnOffCopyMode ( ) external ; Turn off copy mode. Can only be called by governance . updateContractAddresses # Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only. Modifiers # notInCopyMode # Defined in VoterWhitelister ( Docs , Source ). modifier notInCopyMode () Only callable when not in copy mode. onlyAddressUpdater # Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself. onlyFtsoManager # Defined in VoterWhitelister ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method. onlyGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance () onlyImmediateGovernance # Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance () voterNotChilled # Defined in VoterWhitelister ( Docs , Source ). modifier voterNotChilled ( address _voter ) Only data providers that have not been chilled can perform this action. Parameters Type Description _voter address Address of the data provider performing the action. Variables # chilledUntilRewardEpoch # Defined in VoterWhitelister ( Docs , Source ). mapping ( address => uint256 ) chilledUntilRewardEpoch In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards. copyMode # Defined in VoterWhitelister ( Docs , Source ). bool copyMode defaultMaxVotersForFtso # Defined in VoterWhitelister ( Docs , Source ). uint256 defaultMaxVotersForFtso Maximum number of voters in the whitelist for a new FTSO. ftsoManager # Defined in VoterWhitelister ( Docs , Source ). contract IFtsoManager ftsoManager Address of the FtsoManager contract. ftsoRegistry # Defined in VoterWhitelister ( Docs , Source ). contract IFtsoRegistry ftsoRegistry Address of the FtsoRegistry contract. governanceSettings # Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings. maxVotersForFtso # Defined in VoterWhitelister ( Docs , Source ). mapping ( uint256 => uint256 ) maxVotersForFtso Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index. oldVoterWhitelister # Defined in VoterWhitelister ( Docs , Source ). contract IVoterWhitelister oldVoterWhitelister Previous VoterWhitelister contract, set at construction time. Necessary to allow copying the previous whitelist onto a new contract. priceSubmitter # Defined in VoterWhitelister ( Docs , Source ). contract IIPriceSubmitter priceSubmitter Address of the PriceSubmitter contract set at construction time. productionMode # Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode . timelockedCalls # Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"VoterWhitelister"},{"location":"apis/smart-contracts/VoterWhitelister/#ct_voterwhitelister","text":"Source | Inherits from IIVoterWhitelister , Governed , AddressUpdatable Manager of the FTSO whitelist . Only addresses registered in this contract can submit data to the FTSO system.","title":"VoterWhitelister"},{"location":"apis/smart-contracts/VoterWhitelister/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_addftso_345705a4","text":"Defined in VoterWhitelister ( Docs , Source ). function addFtso ( uint256 _ftsoIndex ) external ; Create an empty whitelist with default size for a new FTSO. Only ftsoManager can call this method. Parameters Type Description _ftsoIndex uint256 Index of the new FTSO.","title":"addFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_chillvoter_2b4faebb","text":"Defined in VoterWhitelister ( Docs , Source ). function chillVoter ( address _voter , uint256 _noOfRewardEpochs , uint256 [] _ftsoIndices ) external returns ( bool [] _removed , uint256 _untilRewardEpoch ); Used to chill a data provider, this is, remove it from the whitelist for a specified number of reward epochs. Only governance can call this method. Parameters Type Description _voter address Data provider being chilled. _noOfRewardEpochs uint256 Number of epochs to chill the provider for. _ftsoIndices uint256[] Array of indices of the FTSOs that will not allow this provider to submit data.","title":"chillVoter"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_chilleduntilrewardepoch_46538074","text":"Defined in IVoterWhitelister ( Docs , Source ). function chilledUntilRewardEpoch ( address _voter ) external view returns ( uint256 ); In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards. Parameters Type Description _voter address Address of the queried data provider. Returns Type Description [0] uint256 uint256 ID of the epoch where the data provider can start submitting prices again.","title":"chilledUntilRewardEpoch"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_constructor_undefined","text":"Defined in VoterWhitelister ( Docs , Source ). constructor ( address _governance , address _addressUpdater , contract IIPriceSubmitter _priceSubmitter , uint256 _defaultMaxVotersForFtso , contract IVoterWhitelister _oldVoterWhitelister ) public ;","title":"constructor"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_constructor_undefined","text":"Defined in Governed ( Docs , Source ). constructor ( address _governance ) public ; Parameters Type Description _governance address Governance contract. Must not be zero.","title":"constructor"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_copywhitelist_8e15c883","text":"Defined in VoterWhitelister ( Docs , Source ). function copyWhitelist ( uint256 _ftsoIndex ) external ; Copy whitelist data from oldVoterWhitelister for a specific FTSO. Can only be called by governance . Parameters Type Description _ftsoIndex uint256 Index of the FTSO whose whitelist is to be copied.","title":"copyWhitelist"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_defaultmaxvotersforftso_47ed51b1","text":"Defined in IVoterWhitelister ( Docs , Source ). function defaultMaxVotersForFtso ( ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a new FTSO. Returns Type Description [0] uint256 uint256 Default maximum allowed voters.","title":"defaultMaxVotersForFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_getaddressupdater_5267a15d","text":"Defined in AddressUpdatable ( Docs , Source ). function getAddressUpdater ( ) public view returns ( address _addressUpdater ); Returns the configured address updater. Returns Type Description _addressUpdater address The AddresUpdater contract that can update our contract address list, as a response to a governance call.","title":"getAddressUpdater"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_getftsowhitelistedpriceproviders_09fcb400","text":"Defined in VoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProviders ( uint256 _ftsoIndex ) public view returns ( address []); Gets whitelisted price providers for the FTSO at a given index. Parameters Type Description _ftsoIndex uint256 Queried index. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers.","title":"getFtsoWhitelistedPriceProviders"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_getftsowhitelistedpriceprovidersbysymbol_aa89dfd4","text":"Defined in VoterWhitelister ( Docs , Source ). function getFtsoWhitelistedPriceProvidersBySymbol ( string _symbol ) external view returns ( address []); Gets whitelisted price providers for the FTSO with a specified symbol. Parameters Type Description _symbol string Queried symbol. Returns Type Description [0] address[] Array of addresses of the whitelisted data providers.","title":"getFtsoWhitelistedPriceProvidersBySymbol"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_maxvotersforftso_98dccfc2","text":"Defined in IVoterWhitelister ( Docs , Source ). function maxVotersForFtso ( uint256 _ftsoIndex ) external view returns ( uint256 ); Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index. Parameters Type Description _ftsoIndex uint256 Index of the FTSO. Returns Type Description [0] uint256 uint256 Maximum allowed voters.","title":"maxVotersForFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_removeftso_d8736171","text":"Defined in VoterWhitelister ( Docs , Source ). function removeFtso ( uint256 _ftsoIndex ) external ; Clear whitelist for a removed FTSO. Only ftsoManager can call this method. Parameters Type Description _ftsoIndex uint256 Index of the removed FTSO.","title":"removeFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_removetrustedaddressfromwhitelist_9dc950ab","text":"Defined in VoterWhitelister ( Docs , Source ). function removeTrustedAddressFromWhitelist ( address _trustedAddress , uint256 _ftsoIndex ) external ; Remove a trusted address from whitelist. Parameters Type Description _trustedAddress address Address to remove. _ftsoIndex uint256 Index of the FTSO being modified.","title":"removeTrustedAddressFromWhitelist"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_requestfullvoterwhitelisting_b06cbaf7","text":"Defined in VoterWhitelister ( Docs , Source ). function requestFullVoterWhitelisting ( address _voter ) external returns ( uint256 [] _supportedIndices , bool [] _success ); Requests whitelisting an account to act as a data provider for all active FTSOs. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. Returns Type Description _supportedIndices uint256[] Array of currently supported FTSO indices. _success bool[] Array of success flags by FTSO index.","title":"requestFullVoterWhitelisting"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_requestwhitelistingvoter_3de2cb1c","text":"Defined in VoterWhitelister ( Docs , Source ). function requestWhitelistingVoter ( address _voter , uint256 _ftsoIndex ) external ; Requests whitelisting an account to act as a data provider for a specific FTSO. Reverts if the vote power of the account is too low. May be called by any address, including the voter itself. Parameters Type Description _voter address Address of the voter to be whitelisted. _ftsoIndex uint256 Index of the FTSO.","title":"requestWhitelistingVoter"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_setdefaultmaxvotersforftso_2ee96140","text":"Defined in VoterWhitelister ( Docs , Source ). function setDefaultMaxVotersForFtso ( uint256 _defaultMaxVotersForFtso ) external ; Set the maximum number of voters in the whitelist for a new FTSOs. Only governance can call this method. Parameters Type Description _defaultMaxVotersForFtso uint256 New maximum default value.","title":"setDefaultMaxVotersForFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_setmaxvotersforftso_7ecfcfa3","text":"Defined in VoterWhitelister ( Docs , Source ). function setMaxVotersForFtso ( uint256 _ftsoIndex , uint256 _newMaxVoters ) external ; Set the maximum number of voters in the whitelist for a specific FTSO. Can remove voters with the least votepower from the whitelist. Only governance can call this method. Parameters Type Description _ftsoIndex uint256 Index of the FTSO to modify. _newMaxVoters uint256 New size of the whitelist.","title":"setMaxVotersForFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_turnoffcopymode_3a65d7b6","text":"Defined in VoterWhitelister ( Docs , Source ). function turnOffCopyMode ( ) external ; Turn off copy mode. Can only be called by governance .","title":"turnOffCopyMode"},{"location":"apis/smart-contracts/VoterWhitelister/#fn_updatecontractaddresses_b00c0b76","text":"Defined in AddressUpdatable ( Docs , Source ). function updateContractAddresses ( bytes32 [] _contractNameHashes , address [] _contractAddresses ) external ; External method called from AddressUpdater only.","title":"updateContractAddresses"},{"location":"apis/smart-contracts/VoterWhitelister/#modifiers","text":"","title":"Modifiers"},{"location":"apis/smart-contracts/VoterWhitelister/#md_notincopymode","text":"Defined in VoterWhitelister ( Docs , Source ). modifier notInCopyMode () Only callable when not in copy mode.","title":"notInCopyMode"},{"location":"apis/smart-contracts/VoterWhitelister/#md_onlyaddressupdater","text":"Defined in AddressUpdatable ( Docs , Source ). modifier onlyAddressUpdater () Only the AdressUpdater contract can call this method. Its address is set at construction time but it can also update itself.","title":"onlyAddressUpdater"},{"location":"apis/smart-contracts/VoterWhitelister/#md_onlyftsomanager","text":"Defined in VoterWhitelister ( Docs , Source ). modifier onlyFtsoManager () Only the ftsoManager can call this method.","title":"onlyFtsoManager"},{"location":"apis/smart-contracts/VoterWhitelister/#md_onlygovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyGovernance ()","title":"onlyGovernance"},{"location":"apis/smart-contracts/VoterWhitelister/#md_onlyimmediategovernance","text":"Defined in GovernedBase ( Docs , Source ). modifier onlyImmediateGovernance ()","title":"onlyImmediateGovernance"},{"location":"apis/smart-contracts/VoterWhitelister/#md_voternotchilled","text":"Defined in VoterWhitelister ( Docs , Source ). modifier voterNotChilled ( address _voter ) Only data providers that have not been chilled can perform this action. Parameters Type Description _voter address Address of the data provider performing the action.","title":"voterNotChilled"},{"location":"apis/smart-contracts/VoterWhitelister/#variables","text":"","title":"Variables"},{"location":"apis/smart-contracts/VoterWhitelister/#va_chilleduntilrewardepoch","text":"Defined in VoterWhitelister ( Docs , Source ). mapping ( address => uint256 ) chilledUntilRewardEpoch In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards.","title":"chilledUntilRewardEpoch"},{"location":"apis/smart-contracts/VoterWhitelister/#va_copymode","text":"Defined in VoterWhitelister ( Docs , Source ). bool copyMode","title":"copyMode"},{"location":"apis/smart-contracts/VoterWhitelister/#va_defaultmaxvotersforftso","text":"Defined in VoterWhitelister ( Docs , Source ). uint256 defaultMaxVotersForFtso Maximum number of voters in the whitelist for a new FTSO.","title":"defaultMaxVotersForFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#va_ftsomanager","text":"Defined in VoterWhitelister ( Docs , Source ). contract IFtsoManager ftsoManager Address of the FtsoManager contract.","title":"ftsoManager"},{"location":"apis/smart-contracts/VoterWhitelister/#va_ftsoregistry","text":"Defined in VoterWhitelister ( Docs , Source ). contract IFtsoRegistry ftsoRegistry Address of the FtsoRegistry contract.","title":"ftsoRegistry"},{"location":"apis/smart-contracts/VoterWhitelister/#va_governancesettings","text":"Defined in GovernedBase ( Docs , Source ). contract IGovernanceSettings governanceSettings Governance Settings.","title":"governanceSettings"},{"location":"apis/smart-contracts/VoterWhitelister/#va_maxvotersforftso","text":"Defined in VoterWhitelister ( Docs , Source ). mapping ( uint256 => uint256 ) maxVotersForFtso Maximum number of voters in the whitelist for a specific FTSO. Adjustable separately for each index.","title":"maxVotersForFtso"},{"location":"apis/smart-contracts/VoterWhitelister/#va_oldvoterwhitelister","text":"Defined in VoterWhitelister ( Docs , Source ). contract IVoterWhitelister oldVoterWhitelister Previous VoterWhitelister contract, set at construction time. Necessary to allow copying the previous whitelist onto a new contract.","title":"oldVoterWhitelister"},{"location":"apis/smart-contracts/VoterWhitelister/#va_pricesubmitter","text":"Defined in VoterWhitelister ( Docs , Source ). contract IIPriceSubmitter priceSubmitter Address of the PriceSubmitter contract set at construction time.","title":"priceSubmitter"},{"location":"apis/smart-contracts/VoterWhitelister/#va_productionmode","text":"Defined in GovernedBase ( Docs , Source ). bool productionMode When true, governance is enabled and cannot be disabled. See switchToProductionMode .","title":"productionMode"},{"location":"apis/smart-contracts/VoterWhitelister/#va_timelockedcalls","text":"Defined in GovernedBase ( Docs , Source ). mapping ( bytes4 => struct GovernedBase . TimelockedCall ) timelockedCalls List of pending timelocked governance calls.","title":"timelockedCalls"},{"location":"apis/smart-contracts/WNat/","text":"WNat # Source | Inherits from VPToken , IWNat Wrapped native token. This contract converts native tokens into WNAT (wrapped native) tokens and vice versa. WNAT tokens are a one-to-one ERC20 representation of native tokens, which are minted and burned as needed by this contract. The wrapped versions of the native FLR and SGB tokens are called WFLR and WSGB respectively. Besides the standard ERC20 operations, this contract supports FTSO delegation and governance vote delegation . Code attribution: WETH9. Events # Approval # Defined in IERC20 ( Source ). event Approval ( address owner , address spender , uint256 value ) Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance . CreatedTotalSupplyCache # Defined in CheckPointable ( Docs , Source ). event CreatedTotalSupplyCache ( uint256 _blockNumber ) Emitted when a total supply cache entry is created. Allows history cleaners to track total supply cache cleanup opportunities off-chain. Deposit # Defined in WNat ( Docs , Source ). event Deposit ( address dst , uint256 amount ) Emitted when tokens have been wrapped. Parameters Type Description dst address The account that received the wrapped tokens. amount uint256 The amount that was wrapped. GovernanceCallTimelocked # Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire. GovernanceInitialised # Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings . GovernedProductionModeEntered # Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork). TimelockedGovernanceCallCanceled # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution. TimelockedGovernanceCallExecuted # Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed. Transfer # Defined in IERC20 ( Source ). event Transfer ( address from , address to , uint256 value ) Emitted when value tokens are moved from one account ( from ) to another ( to ). Note that value may be zero. VotePowerContractChanged # Defined in VPToken ( Docs , Source ). event VotePowerContractChanged ( uint256 _contractType , address _oldContractAddress , address _newContractAddress ) Emitted when one of the vote power contracts is changed. It is used to track the history of VPToken -> VPContract / GovernanceVotePower associations (e.g. by external cleaners). Parameters Type Description _contractType uint256 0 = Read VPContract , 1 = Write VPContract , 2 = Governance vote power. _oldContractAddress address Contract address before change. _newContractAddress address Contract address after change. Withdrawal # Defined in WNat ( Docs , Source ). event Withdrawal ( address src , uint256 amount ) Emitted when tokens have been unwrapped. Parameters Type Description src address The account that received the unwrapped tokens. amount uint256 The amount that was unwrapped. Functions # allowance # Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called. approve # Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event. balanceHistoryCleanup # Defined in CheckPointable ( Docs , Source ). function balanceHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete balance checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address balance owner account address _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted balanceOf # Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account . balanceOfAt # Defined in VPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) public view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 batchDelegate # Defined in VPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%). batchVotePowerOfAt # Defined in VPToken ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Return the vote power for several addresses. Parameters Type Description _owners address[] The list of addresses to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256[] Array of vote power for each queried address. cancelGovernanceCall # Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector. cleanupBlockNumber # Defined in VPToken ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number. constructor # Defined in WNat ( Docs , Source ). constructor ( address _governance , string _name , string _symbol ) public ; Construct an ERC20 token. decimals # Defined in VPToken ( Docs , Source ). function decimals ( ) public view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method. delegate # Defined in VPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegateExplicit # Defined in VPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations). delegatesOf # Defined in VPToken ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _owner address Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegatesOfAt # Defined in VPToken ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _owner address _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). delegationModeOf # Defined in VPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit). deposit # Defined in WNat ( Docs , Source ). function deposit ( ) public payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to the msg.sender 's balance. This operation is commonly known as \"wrapping\". Emits a Deposit event. depositTo # Defined in WNat ( Docs , Source ). function depositTo ( address _recipient ) external payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to _recipient 's balance. This operation is commonly known as \"wrapping\". This is equivalent to using deposit followed by transfer . Emits a Deposit event. Parameters Type Description _recipient address The address to receive the minted WNAT . executeGovernanceCall # Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored). governance # Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address. governanceVotePower # Defined in VPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegate governance vote power. name # Defined in VPToken ( Docs , Source ). function name ( ) public view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method. readVotePowerContract # Defined in VPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking. receive # Defined in WNat ( Docs , Source ). receive ( ) external payable ; A proxy for the deposit method. revokeDelegationAt # Defined in VPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) public ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation.. setCleanerContract # Defined in VPToken ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager . setCleanupBlockNumber # Defined in VPToken ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number. setCleanupBlockNumberManager # Defined in VPToken ( Docs , Source ). function setCleanupBlockNumberManager ( address _cleanupBlockNumberManager ) external ; Set the contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager . setGovernanceVotePower # Defined in VPToken ( Docs , Source ). function setGovernanceVotePower ( contract IIGovernanceVotePower _governanceVotePower ) external ; Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power. setReadVpContract # Defined in VPToken ( Docs , Source ). function setReadVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set read VpContract on token, e.g. vpToken. setReadVpContract (new VPContract (vpToken)). Read VPContract must be set before any of the VPToken delegation or vote power reading methods are called, otherwise they will revert. NOTE : If readVpContract differs from writeVpContract all reads will be \"frozen\" and will not reflect changes (not even revokes; they may or may not reflect balance transfers). Parameters Type Description _vpContract contract IIVPContract Read vote power contract to be used by this token. setWriteVpContract # Defined in VPToken ( Docs , Source ). function setWriteVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set write VpContract on token, e.g. vpToken. setWriteVpContract (new VPContract (vpToken)). Write VPContract must be set before any of the VPToken delegation modifying methods are called, otherwise they will revert. Parameters Type Description _vpContract contract IIVPContract Write vote power contract to be used by this token. switchToProductionMode # Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered . symbol # Defined in VPToken ( Docs , Source ). function symbol ( ) public view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method. totalSupply # Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence. totalSupplyAt # Defined in VPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) public view returns ( uint256 ); Total amount of tokens at a specific _blockNumber . Parameters Type Description _blockNumber uint256 The block number when the _totalSupply is queried Returns Type Description [0] uint256 totalSupplyCacheCleanup # Defined in CheckPointable ( Docs , Source ). function totalSupplyCacheCleanup ( uint256 _blockNumber ) external returns ( uint256 ); Delete total supply cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _blockNumber uint256 the block number for which total supply value was cached Returns Type Description [0] uint256 the number of cache entries deleted (always 0 or 1) totalSupplyHistoryCleanup # Defined in CheckPointable ( Docs , Source ). function totalSupplyHistoryCleanup ( uint256 _count ) external returns ( uint256 ); Delete total supply checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted totalVotePower # Defined in VPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power). totalVotePowerAt # Defined in VPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers). totalVotePowerAtCached # Defined in VPToken ( Docs , Source ). function totalVotePowerAtCached ( uint256 _blockNumber ) public returns ( uint256 ); Get the total vote power at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers). transfer # Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. transferFrom # Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event. undelegateAll # Defined in VPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET. undelegateAllExplicit # Defined in VPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 _remainingDelegation ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description _remainingDelegation uint256 The amount still delegated (in case the list of delegates was incomplete). undelegatedVotePowerOf # Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . undelegatedVotePowerOfAt # Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner . votePowerFromTo # Defined in VPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power. votePowerFromToAt # Defined in VPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power. votePowerOf # Defined in VPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner . votePowerOfAt # Defined in VPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . votePowerOfAtCached # Defined in VPToken ( Docs , Source ). function votePowerOfAtCached ( address _owner , uint256 _blockNumber ) public returns ( uint256 ); Get the vote power of _owner at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at _blockNumber . votePowerOfAtIgnoringRevocation # Defined in VPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked. withdraw # Defined in WNat ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Burns _amount of WNAT tokens from msg.sender 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". Reverts if _amount is higher than msg.sender 's WNAT balance. Emits a Withdrawal event. Parameters Type Description _amount uint256 The amount to withdraw. withdrawFrom # Defined in WNat ( Docs , Source ). function withdrawFrom ( address _owner , uint256 _amount ) external ; Burns _amount of WNAT tokens from _owner 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". msg.sender must have been authorized to withdraw from _owner 's account through ERC-20's approve mechanism. Reverts if _amount is higher than _owners 's WNAT balance or than msg.sender 's allowance over _owner 's tokens. Emits a Withdrawal event. Parameters Type Description _owner address The address containing the tokens to withdraw. _amount uint256 The amount to withdraw. writeVotePowerContract # Defined in VPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking.","title":"WNat"},{"location":"apis/smart-contracts/WNat/#ct_wnat","text":"Source | Inherits from VPToken , IWNat Wrapped native token. This contract converts native tokens into WNAT (wrapped native) tokens and vice versa. WNAT tokens are a one-to-one ERC20 representation of native tokens, which are minted and burned as needed by this contract. The wrapped versions of the native FLR and SGB tokens are called WFLR and WSGB respectively. Besides the standard ERC20 operations, this contract supports FTSO delegation and governance vote delegation . Code attribution: WETH9.","title":"WNat"},{"location":"apis/smart-contracts/WNat/#events","text":"","title":"Events"},{"location":"apis/smart-contracts/WNat/#ev_approval","text":"Defined in IERC20 ( Source ). event Approval ( address owner , address spender , uint256 value ) Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance .","title":"Approval"},{"location":"apis/smart-contracts/WNat/#ev_createdtotalsupplycache","text":"Defined in CheckPointable ( Docs , Source ). event CreatedTotalSupplyCache ( uint256 _blockNumber ) Emitted when a total supply cache entry is created. Allows history cleaners to track total supply cache cleanup opportunities off-chain.","title":"CreatedTotalSupplyCache"},{"location":"apis/smart-contracts/WNat/#ev_deposit","text":"Defined in WNat ( Docs , Source ). event Deposit ( address dst , uint256 amount ) Emitted when tokens have been wrapped. Parameters Type Description dst address The account that received the wrapped tokens. amount uint256 The amount that was wrapped.","title":"Deposit"},{"location":"apis/smart-contracts/WNat/#ev_governancecalltimelocked","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceCallTimelocked ( bytes4 selector , uint256 allowedAfterTimestamp , bytes encodedCall ) Emitted when a new governance call has been recorded and is now waiting for the time lock to expire.","title":"GovernanceCallTimelocked"},{"location":"apis/smart-contracts/WNat/#ev_governanceinitialised","text":"Defined in GovernedBase ( Docs , Source ). event GovernanceInitialised ( address initialGovernance ) Emitted when the governance address is initialized. This address will be used until production mode is entered (see GovernedProductionModeEntered ). At that point the governance address is taken from GovernanceSettings .","title":"GovernanceInitialised"},{"location":"apis/smart-contracts/WNat/#ev_governedproductionmodeentered","text":"Defined in GovernedBase ( Docs , Source ). event GovernedProductionModeEntered ( address governanceSettings ) Emitted when governance is enabled and the governance address cannot be changed anymore (only through a network fork).","title":"GovernedProductionModeEntered"},{"location":"apis/smart-contracts/WNat/#ev_timelockedgovernancecallcanceled","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallCanceled ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is canceled before execution.","title":"TimelockedGovernanceCallCanceled"},{"location":"apis/smart-contracts/WNat/#ev_timelockedgovernancecallexecuted","text":"Defined in GovernedBase ( Docs , Source ). event TimelockedGovernanceCallExecuted ( bytes4 selector , uint256 timestamp ) Emitted when a timelocked governance call is executed.","title":"TimelockedGovernanceCallExecuted"},{"location":"apis/smart-contracts/WNat/#ev_transfer","text":"Defined in IERC20 ( Source ). event Transfer ( address from , address to , uint256 value ) Emitted when value tokens are moved from one account ( from ) to another ( to ). Note that value may be zero.","title":"Transfer"},{"location":"apis/smart-contracts/WNat/#ev_votepowercontractchanged","text":"Defined in VPToken ( Docs , Source ). event VotePowerContractChanged ( uint256 _contractType , address _oldContractAddress , address _newContractAddress ) Emitted when one of the vote power contracts is changed. It is used to track the history of VPToken -> VPContract / GovernanceVotePower associations (e.g. by external cleaners). Parameters Type Description _contractType uint256 0 = Read VPContract , 1 = Write VPContract , 2 = Governance vote power. _oldContractAddress address Contract address before change. _newContractAddress address Contract address after change.","title":"VotePowerContractChanged"},{"location":"apis/smart-contracts/WNat/#ev_withdrawal","text":"Defined in WNat ( Docs , Source ). event Withdrawal ( address src , uint256 amount ) Emitted when tokens have been unwrapped. Parameters Type Description src address The account that received the unwrapped tokens. amount uint256 The amount that was unwrapped.","title":"Withdrawal"},{"location":"apis/smart-contracts/WNat/#functions","text":"","title":"Functions"},{"location":"apis/smart-contracts/WNat/#fn_allowance_dd62ed3e","text":"Defined in IERC20 ( Source ). function allowance ( address owner , address spender ) external view returns ( uint256 ); Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom . This is zero by default. This value changes when approve or transferFrom are called.","title":"allowance"},{"location":"apis/smart-contracts/WNat/#fn_approve_095ea7b3","text":"Defined in IERC20 ( Source ). function approve ( address spender , uint256 amount ) external returns ( bool ); Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an Approval event.","title":"approve"},{"location":"apis/smart-contracts/WNat/#fn_balancehistorycleanup_f0e292c9","text":"Defined in CheckPointable ( Docs , Source ). function balanceHistoryCleanup ( address _owner , uint256 _count ) external returns ( uint256 ); Delete balance checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _owner address balance owner account address _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted","title":"balanceHistoryCleanup"},{"location":"apis/smart-contracts/WNat/#fn_balanceof_70a08231","text":"Defined in IERC20 ( Source ). function balanceOf ( address account ) external view returns ( uint256 ); Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"apis/smart-contracts/WNat/#fn_balanceofat_4ee2cd7e","text":"Defined in VPToken ( Docs , Source ). function balanceOfAt ( address _owner , uint256 _blockNumber ) public view returns ( uint256 ); Queries the token balance of _owner at a specific _blockNumber . Parameters Type Description _owner address The address from which the balance will be retrieved. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256","title":"balanceOfAt"},{"location":"apis/smart-contracts/WNat/#fn_batchdelegate_dc4fcda7","text":"Defined in VPToken ( Docs , Source ). function batchDelegate ( address [] _delegatees , uint256 [] _bips ) external ; Undelegate all percentage delegations from the sender and then delegate corresponding _bips percentage of voting power from the sender to each member of the _delegatees array. Parameters Type Description _delegatees address[] The addresses of the new recipients. _bips uint256[] The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all _bips values must be at most 10000 (100%).","title":"batchDelegate"},{"location":"apis/smart-contracts/WNat/#fn_batchvotepowerofat_49e3c7e5","text":"Defined in VPToken ( Docs , Source ). function batchVotePowerOfAt ( address [] _owners , uint256 _blockNumber ) external view returns ( uint256 []); Return the vote power for several addresses. Parameters Type Description _owners address[] The list of addresses to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256[] Array of vote power for each queried address.","title":"batchVotePowerOfAt"},{"location":"apis/smart-contracts/WNat/#fn_cancelgovernancecall_67fc4029","text":"Defined in GovernedBase ( Docs , Source ). function cancelGovernanceCall ( bytes4 _selector ) external ; Cancel a timelocked governance call before it has been executed. Only governance can call this method. Parameters Type Description _selector bytes4 The method selector.","title":"cancelGovernanceCall"},{"location":"apis/smart-contracts/WNat/#fn_cleanupblocknumber_deea13e7","text":"Defined in VPToken ( Docs , Source ). function cleanupBlockNumber ( ) external view returns ( uint256 ); Get the current cleanup block number set with setCleanupBlockNumber . Returns Type Description [0] uint256 The currently set cleanup block number.","title":"cleanupBlockNumber"},{"location":"apis/smart-contracts/WNat/#fn_constructor_undefined","text":"Defined in WNat ( Docs , Source ). constructor ( address _governance , string _name , string _symbol ) public ; Construct an ERC20 token.","title":"constructor"},{"location":"apis/smart-contracts/WNat/#fn_decimals_313ce567","text":"Defined in VPToken ( Docs , Source ). function decimals ( ) public view returns ( uint8 ); Returns the number of decimals used to get its user representation. For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5.05 (505 / 10 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including balanceOf and transfer . Should be compatible with ERC20 method.","title":"decimals"},{"location":"apis/smart-contracts/WNat/#fn_delegate_026e402b","text":"Defined in VPToken ( Docs , Source ). function delegate ( address _to , uint256 _bips ) external ; Delegate voting power to account _to from msg.sender , by percentage. Parameters Type Description _to address The address of the recipient. _bips uint256 The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegate"},{"location":"apis/smart-contracts/WNat/#fn_delegateexplicit_d06dc3ad","text":"Defined in VPToken ( Docs , Source ). function delegateExplicit ( address _to , uint256 _amount ) external ; Explicitly delegate _amount voting power to account _to from msg.sender . Compare with delegate which delegates by percentage. Parameters Type Description _to address The address of the recipient. _amount uint256 An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).","title":"delegateExplicit"},{"location":"apis/smart-contracts/WNat/#fn_delegatesof_7de5b8ed","text":"Defined in VPToken ( Docs , Source ). function delegatesOf ( address _owner ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages. Parameters Type Description _owner address Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOf"},{"location":"apis/smart-contracts/WNat/#fn_delegatesofat_ed475a79","text":"Defined in VPToken ( Docs , Source ). function delegatesOfAt ( address _owner , uint256 _blockNumber ) external view returns ( address [] _delegateAddresses , uint256 [] _bips , uint256 _count , uint256 _delegationMode ); Get the list of addresses to which _who is delegating, and their percentages, at the given block. Parameters Type Description _owner address _blockNumber uint256 The block number to query. Returns Type Description _delegateAddresses address[] Positional array of addresses being delegated to. _bips uint256[] Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the _delegateAddresses array. _count uint256 The number of delegates. _delegationMode uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegatesOfAt"},{"location":"apis/smart-contracts/WNat/#fn_delegationmodeof_f6837767","text":"Defined in VPToken ( Docs , Source ). function delegationModeOf ( address _who ) external view returns ( uint256 ); Get the delegation mode for account '_who'. This mode determines whether vote power is allocated by percentage or by explicit amount. Once the delegation mode is set, it can never be changed, even if all delegations are removed. Parameters Type Description _who address The address to get delegation mode. Returns Type Description [0] uint256 Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).","title":"delegationModeOf"},{"location":"apis/smart-contracts/WNat/#fn_deposit_d0e30db0","text":"Defined in WNat ( Docs , Source ). function deposit ( ) public payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to the msg.sender 's balance. This operation is commonly known as \"wrapping\". Emits a Deposit event.","title":"deposit"},{"location":"apis/smart-contracts/WNat/#fn_depositto_b760faf9","text":"Defined in WNat ( Docs , Source ). function depositTo ( address _recipient ) external payable ; Deposits native tokens and mints the same amount of WNAT tokens, which are added to _recipient 's balance. This operation is commonly known as \"wrapping\". This is equivalent to using deposit followed by transfer . Emits a Deposit event. Parameters Type Description _recipient address The address to receive the minted WNAT .","title":"depositTo"},{"location":"apis/smart-contracts/WNat/#fn_executegovernancecall_5ff27079","text":"Defined in GovernedBase ( Docs , Source ). function executeGovernanceCall ( bytes4 _selector ) external ; Execute the timelocked governance calls once the timelock period expires. Only executor can call this method. Parameters Type Description _selector bytes4 The method selector (only one timelocked call per method is stored).","title":"executeGovernanceCall"},{"location":"apis/smart-contracts/WNat/#fn_governance_5aa6e675","text":"Defined in GovernedBase ( Docs , Source ). function governance ( ) public view returns ( address ); Returns the current effective governance address.","title":"governance"},{"location":"apis/smart-contracts/WNat/#fn_governancevotepower_8c2b8ae1","text":"Defined in VPToken ( Docs , Source ). function governanceVotePower ( ) external view returns ( contract IGovernanceVotePower ); When set, allows token owners to participate in governance voting and delegate governance vote power.","title":"governanceVotePower"},{"location":"apis/smart-contracts/WNat/#fn_name_06fdde03","text":"Defined in VPToken ( Docs , Source ). function name ( ) public view returns ( string ); Returns the name of the token. Should be compatible with ERC20 method.","title":"name"},{"location":"apis/smart-contracts/WNat/#fn_readvotepowercontract_9b3baa0e","text":"Defined in VPToken ( Docs , Source ). function readVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for read-only operations (view methods). The only non-view method that might be called on it is revokeDelegationAt . readVotePowerContract is almost always equal to writeVotePowerContract except during an upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All methods are exposed via VPToken . This is the reason that this method returns IVPContractEvents . Use it only for listening to events and revoking.","title":"readVotePowerContract"},{"location":"apis/smart-contracts/WNat/#fn_receive_undefined","text":"Defined in WNat ( Docs , Source ). receive ( ) external payable ; A proxy for the deposit method.","title":"receive"},{"location":"apis/smart-contracts/WNat/#fn_revokedelegationat_bbd6fbf8","text":"Defined in VPToken ( Docs , Source ). function revokeDelegationAt ( address _who , uint256 _blockNumber ) public ; Revoke all delegation from sender to _who at given block. Only affects the reads via votePowerOfAtCached in the block _blockNumber . Block _blockNumber must be in the past. This method should be used only to prevent rogue delegate voting in the current voting block. To stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit . Parameters Type Description _who address Address of the delegatee. _blockNumber uint256 The block number at which to revoke delegation..","title":"revokeDelegationAt"},{"location":"apis/smart-contracts/WNat/#fn_setcleanercontract_f6a494af","text":"Defined in VPToken ( Docs , Source ). function setCleanerContract ( address _cleanerContract ) external ; Set the contract that is allowed to call history cleaning methods. Parameters Type Description _cleanerContract address Address of the cleanup contract. Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanerContract"},{"location":"apis/smart-contracts/WNat/#fn_setcleanupblocknumber_13de97f5","text":"Defined in VPToken ( Docs , Source ). function setCleanupBlockNumber ( uint256 _blockNumber ) external ; Set the cleanup block number. Historic data for the blocks before cleanupBlockNumber can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block. Parameters Type Description _blockNumber uint256 The new cleanup block number.","title":"setCleanupBlockNumber"},{"location":"apis/smart-contracts/WNat/#fn_setcleanupblocknumbermanager_7f4fcaa9","text":"Defined in VPToken ( Docs , Source ). function setCleanupBlockNumberManager ( address _cleanupBlockNumberManager ) external ; Set the contract that is allowed to set cleanupBlockNumber . Usually this will be an instance of CleanupBlockNumberManager .","title":"setCleanupBlockNumberManager"},{"location":"apis/smart-contracts/WNat/#fn_setgovernancevotepower_9ca2231a","text":"Defined in VPToken ( Docs , Source ). function setGovernanceVotePower ( contract IIGovernanceVotePower _governanceVotePower ) external ; Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power.","title":"setGovernanceVotePower"},{"location":"apis/smart-contracts/WNat/#fn_setreadvpcontract_31d12a16","text":"Defined in VPToken ( Docs , Source ). function setReadVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set read VpContract on token, e.g. vpToken. setReadVpContract (new VPContract (vpToken)). Read VPContract must be set before any of the VPToken delegation or vote power reading methods are called, otherwise they will revert. NOTE : If readVpContract differs from writeVpContract all reads will be \"frozen\" and will not reflect changes (not even revokes; they may or may not reflect balance transfers). Parameters Type Description _vpContract contract IIVPContract Read vote power contract to be used by this token.","title":"setReadVpContract"},{"location":"apis/smart-contracts/WNat/#fn_setwritevpcontract_755d10a4","text":"Defined in VPToken ( Docs , Source ). function setWriteVpContract ( contract IIVPContract _vpContract ) external ; Call from governance to set write VpContract on token, e.g. vpToken. setWriteVpContract (new VPContract (vpToken)). Write VPContract must be set before any of the VPToken delegation modifying methods are called, otherwise they will revert. Parameters Type Description _vpContract contract IIVPContract Write vote power contract to be used by this token.","title":"setWriteVpContract"},{"location":"apis/smart-contracts/WNat/#fn_switchtoproductionmode_f5a98383","text":"Defined in GovernedBase ( Docs , Source ). function switchToProductionMode ( ) external ; Enter the production mode after all the initial governance settings have been set. This enables timelocks and the governance can be obtained afterward by calling governanceSettings .getGovernanceAddress(). Emits GovernedProductionModeEntered .","title":"switchToProductionMode"},{"location":"apis/smart-contracts/WNat/#fn_symbol_95d89b41","text":"Defined in VPToken ( Docs , Source ). function symbol ( ) public view returns ( string ); Returns the symbol of the token, usually a shorter version of the name . Should be compatible with ERC20 method.","title":"symbol"},{"location":"apis/smart-contracts/WNat/#fn_totalsupply_18160ddd","text":"Defined in IERC20 ( Source ). function totalSupply ( ) external view returns ( uint256 ); Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"apis/smart-contracts/WNat/#fn_totalsupplyat_981b24d0","text":"Defined in VPToken ( Docs , Source ). function totalSupplyAt ( uint256 _blockNumber ) public view returns ( uint256 ); Total amount of tokens at a specific _blockNumber . Parameters Type Description _blockNumber uint256 The block number when the _totalSupply is queried Returns Type Description [0] uint256","title":"totalSupplyAt"},{"location":"apis/smart-contracts/WNat/#fn_totalsupplycachecleanup_43ea370b","text":"Defined in CheckPointable ( Docs , Source ). function totalSupplyCacheCleanup ( uint256 _blockNumber ) external returns ( uint256 ); Delete total supply cache entry that expired (i.e. is before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _blockNumber uint256 the block number for which total supply value was cached Returns Type Description [0] uint256 the number of cache entries deleted (always 0 or 1)","title":"totalSupplyCacheCleanup"},{"location":"apis/smart-contracts/WNat/#fn_totalsupplyhistorycleanup_f62f8f3a","text":"Defined in CheckPointable ( Docs , Source ). function totalSupplyHistoryCleanup ( uint256 _count ) external returns ( uint256 ); Delete total supply checkpoints that expired (i.e. are before cleanupBlockNumber ). Method can only be called from the cleanerContract (which may be a proxy to external cleaners). Parameters Type Description _count uint256 maximum number of checkpoints to delete Returns Type Description [0] uint256 the number of checkpoints deleted","title":"totalSupplyHistoryCleanup"},{"location":"apis/smart-contracts/WNat/#fn_totalvotepower_f5f3d4f7","text":"Defined in VPToken ( Docs , Source ). function totalVotePower ( ) external view returns ( uint256 ); Get the current total vote power. Returns Type Description [0] uint256 The current total vote power (sum of all accounts' vote power).","title":"totalVotePower"},{"location":"apis/smart-contracts/WNat/#fn_totalvotepowerat_3e5aa26a","text":"Defined in VPToken ( Docs , Source ). function totalVotePowerAt ( uint256 _blockNumber ) external view returns ( uint256 ); Get the total vote power at block _blockNumber . Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers).","title":"totalVotePowerAt"},{"location":"apis/smart-contracts/WNat/#fn_totalvotepoweratcached_caeb942b","text":"Defined in VPToken ( Docs , Source ). function totalVotePowerAtCached ( uint256 _blockNumber ) public returns ( uint256 ); Get the total vote power at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The total vote power at the queried block (sum of all accounts' vote powers).","title":"totalVotePowerAtCached"},{"location":"apis/smart-contracts/WNat/#fn_transfer_a9059cbb","text":"Defined in IERC20 ( Source ). function transfer ( address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transfer"},{"location":"apis/smart-contracts/WNat/#fn_transferfrom_23b872dd","text":"Defined in IERC20 ( Source ). function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ); Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance . Returns a boolean value indicating whether the operation succeeded. Emits a Transfer event.","title":"transferFrom"},{"location":"apis/smart-contracts/WNat/#fn_undelegateall_b302f393","text":"Defined in VPToken ( Docs , Source ). function undelegateAll ( ) external ; Undelegate all voting power of msg.sender . This effectively revokes all previous delegations. Can only be used with percentage delegation. Does not reset delegation mode back to NOT SET.","title":"undelegateAll"},{"location":"apis/smart-contracts/WNat/#fn_undelegateallexplicit_5d6d11eb","text":"Defined in VPToken ( Docs , Source ). function undelegateAllExplicit ( address [] _delegateAddresses ) external returns ( uint256 _remainingDelegation ); Undelegate all explicit vote power by amount of msg.sender . Can only be used with explicit delegation. Does not reset delegation mode back to NOT SET. Parameters Type Description _delegateAddresses address[] Explicit delegation does not store delegatees' addresses, so the caller must supply them. Returns Type Description _remainingDelegation uint256 The amount still delegated (in case the list of delegates was incomplete).","title":"undelegateAllExplicit"},{"location":"apis/smart-contracts/WNat/#fn_undelegatedvotepowerof_d6aa0b77","text":"Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOf ( address _owner ) external view returns ( uint256 ); Compute the current undelegated vote power of the _owner account. Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOf"},{"location":"apis/smart-contracts/WNat/#fn_undelegatedvotepowerofat_83035a82","text":"Defined in VPToken ( Docs , Source ). function undelegatedVotePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the undelegated vote power of the _owner account at a given block number. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The unallocated vote power of _owner .","title":"undelegatedVotePowerOfAt"},{"location":"apis/smart-contracts/WNat/#fn_votepowerfromto_be0ca747","text":"Defined in VPToken ( Docs , Source ). function votePowerFromTo ( address _from , address _to ) external view returns ( uint256 ); Get current delegated vote power from delegator _from to delegatee _to . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. Returns Type Description [0] uint256 votePower The delegated vote power.","title":"votePowerFromTo"},{"location":"apis/smart-contracts/WNat/#fn_votepowerfromtoat_e64767aa","text":"Defined in VPToken ( Docs , Source ). function votePowerFromToAt ( address _from , address _to , uint256 _blockNumber ) external view returns ( uint256 ); Get delegated vote power from delegator _from to delegatee _to at _blockNumber . Parameters Type Description _from address Address of delegator. _to address Address of delegatee. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 The delegated vote power.","title":"votePowerFromToAt"},{"location":"apis/smart-contracts/WNat/#fn_votepowerof_142d1018","text":"Defined in VPToken ( Docs , Source ). function votePowerOf ( address _owner ) external view returns ( uint256 ); Get the current vote power of _owner . Parameters Type Description _owner address The address to query. Returns Type Description [0] uint256 Current vote power of _owner .","title":"votePowerOf"},{"location":"apis/smart-contracts/WNat/#fn_votepowerofat_92bfe6d8","text":"Defined in VPToken ( Docs , Source ). function votePowerOfAt ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber .","title":"votePowerOfAt"},{"location":"apis/smart-contracts/WNat/#fn_votepowerofatcached_e587497e","text":"Defined in VPToken ( Docs , Source ). function votePowerOfAtCached ( address _owner , uint256 _blockNumber ) public returns ( uint256 ); Get the vote power of _owner at block _blockNumber using cache. It tries to read the cached value and if it is not found, reads the actual value and stores it in the cache. Can only be used if _blockNumber is in the past, otherwise reverts. Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at _blockNumber .","title":"votePowerOfAtCached"},{"location":"apis/smart-contracts/WNat/#fn_votepowerofatignoringrevocation_04bb4e43","text":"Defined in VPToken ( Docs , Source ). function votePowerOfAtIgnoringRevocation ( address _owner , uint256 _blockNumber ) external view returns ( uint256 ); Get the vote power of _owner at block _blockNumber , ignoring revocation information (and cache). Parameters Type Description _owner address The address to query. _blockNumber uint256 The block number to query. Returns Type Description [0] uint256 Vote power of _owner at block number _blockNumber . Result doesn't change if vote power is revoked.","title":"votePowerOfAtIgnoringRevocation"},{"location":"apis/smart-contracts/WNat/#fn_withdraw_2e1a7d4d","text":"Defined in WNat ( Docs , Source ). function withdraw ( uint256 _amount ) external ; Burns _amount of WNAT tokens from msg.sender 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". Reverts if _amount is higher than msg.sender 's WNAT balance. Emits a Withdrawal event. Parameters Type Description _amount uint256 The amount to withdraw.","title":"withdraw"},{"location":"apis/smart-contracts/WNat/#fn_withdrawfrom_9470b0bd","text":"Defined in WNat ( Docs , Source ). function withdrawFrom ( address _owner , uint256 _amount ) external ; Burns _amount of WNAT tokens from _owner 's WNAT balance and transfers the same amount of native tokens to msg.sender . This operation is commonly known as \"unwrapping\". msg.sender must have been authorized to withdraw from _owner 's account through ERC-20's approve mechanism. Reverts if _amount is higher than _owners 's WNAT balance or than msg.sender 's allowance over _owner 's tokens. Emits a Withdrawal event. Parameters Type Description _owner address The address containing the tokens to withdraw. _amount uint256 The amount to withdraw.","title":"withdrawFrom"},{"location":"apis/smart-contracts/WNat/#fn_writevotepowercontract_1fec092a","text":"Defined in VPToken ( Docs , Source ). function writeVotePowerContract ( ) external view returns ( contract IVPContractEvents ); Returns VPContract event interface used for state-changing operations (non-view methods). The only non-view method that might be called on it is revokeDelegationAt . writeVotePowerContract is almost always equal to readVotePowerContract , except during upgrade from one VPContract to a new version (which should happen rarely or never and will be announced beforehand). In the case of an upgrade, writeVotePowerContract is replaced first to establish delegations. After some period (e.g., after a reward epoch ends), readVotePowerContract is set equal to it. Do not call any methods on VPContract directly. State changing methods are forbidden from direct calls. All are exposed via VPToken . This is the reason that this method returns IVPContractEvents Use it only for listening to events, delegating, and revoking.","title":"writeVotePowerContract"},{"location":"dev/","text":"Developer Docs # Quick links Network Configuration Flare Contracts Addresses How to run a node All Flare networks are a fork of the Avalanche project, which runs the Ethereum Virtual Machine . Therefore, all Ethereum contracts and tools work on Flare, Songbird and Coston. All Flare networks are layer-1 networks, and run independently of both Avalanche and Ethereum. You can interact with the Flare networks using wallets , block explorers and the most common blockchain development environments . As an example, all Flare networks support NFTs and many have already been created on Songbird. The block explorer also supports displaying NFTs. Once you have set up your development environment , you can start with the Accessing the Network tutorials. Open-Source Repositories # These are Flare's main source repositories, both on GitHub and GitLab . Validator node Smart contracts Topics # Getting Started Tutorials Reference Guides External Learning Resources Tools and Projects","title":"Developer Docs"},{"location":"dev/#developer-docs","text":"Quick links Network Configuration Flare Contracts Addresses How to run a node All Flare networks are a fork of the Avalanche project, which runs the Ethereum Virtual Machine . Therefore, all Ethereum contracts and tools work on Flare, Songbird and Coston. All Flare networks are layer-1 networks, and run independently of both Avalanche and Ethereum. You can interact with the Flare networks using wallets , block explorers and the most common blockchain development environments . As an example, all Flare networks support NFTs and many have already been created on Songbird. The block explorer also supports displaying NFTs. Once you have set up your development environment , you can start with the Accessing the Network tutorials.","title":"Developer Docs"},{"location":"dev/#open-source-repositories","text":"These are Flare's main source repositories, both on GitHub and GitLab . Validator node Smart contracts","title":"Open-Source Repositories"},{"location":"dev/#topics","text":"Getting Started Tutorials Reference Guides External Learning Resources Tools and Projects","title":"Topics"},{"location":"dev/external-resources/","text":"External Learning Resources # Curated list of resources you can use to extend your knowledge of the Flare network. Tutorials # Filip Koprivec's Flare Tutorials on Medium Videos # Tim Rowley's Explainer Videos on YouTube FTSO (Flare Time Series Oracle) | Learn how to Query Prices on Flare","title":"External Learning Resources"},{"location":"dev/external-resources/#external-learning-resources","text":"Curated list of resources you can use to extend your knowledge of the Flare network.","title":"External Learning Resources"},{"location":"dev/external-resources/#tutorials","text":"Filip Koprivec's Flare Tutorials on Medium","title":"Tutorials"},{"location":"dev/external-resources/#videos","text":"Tim Rowley's Explainer Videos on YouTube FTSO (Flare Time Series Oracle) | Learn how to Query Prices on Flare","title":"Videos"},{"location":"dev/tools/","text":"Tooling # The following tools already support the Flare network. API Providers # These companies provide API services like RPC endpoints , for example. Unlike Flare's public RPC endpoints , paid services are typically not rate-limited. Flare API Portal Ankr NOWNodes Identity and Account Abstraction # web3auth Indexing and Querying # Blockchains typically store the history of all transactions but not the latest, consolidated state of individual accounts. The companies below provide fast access to this information Ankr Covalent SubQuery Subsquid Monitoring Tools # These tools report information about Flare networks: Flare Builders FlareMetrics Validators, presented by Towo Labs SolidiFi Storage # Storing large amounts of data on-chain is typically very expensive. These are some decentralized storage alternatives. Filecoin IPFS Crust Network Pinata Lighthouse Arweave Wallets # Please see the Wallet user guides for a list of wallets currently supporting the Flare network.","title":"Tooling"},{"location":"dev/tools/#tooling","text":"The following tools already support the Flare network.","title":"Tooling"},{"location":"dev/tools/#api-providers","text":"These companies provide API services like RPC endpoints , for example. Unlike Flare's public RPC endpoints , paid services are typically not rate-limited. Flare API Portal Ankr NOWNodes","title":"API Providers"},{"location":"dev/tools/#identity-and-account-abstraction","text":"web3auth","title":"Identity and Account Abstraction"},{"location":"dev/tools/#indexing-and-querying","text":"Blockchains typically store the history of all transactions but not the latest, consolidated state of individual accounts. The companies below provide fast access to this information Ankr Covalent SubQuery Subsquid","title":"Indexing and Querying"},{"location":"dev/tools/#monitoring-tools","text":"These tools report information about Flare networks: Flare Builders FlareMetrics Validators, presented by Towo Labs SolidiFi","title":"Monitoring Tools"},{"location":"dev/tools/#storage","text":"Storing large amounts of data on-chain is typically very expensive. These are some decentralized storage alternatives. Filecoin IPFS Crust Network Pinata Lighthouse Arweave","title":"Storage"},{"location":"dev/tools/#wallets","text":"Please see the Wallet user guides for a list of wallets currently supporting the Flare network.","title":"Wallets"},{"location":"dev/getting-started/","text":"Getting Started # The following guides provide information to quickly start developing on the Flare networks. Guides # Setting Up Your Environment Retrieving Contract Addresses","title":"Getting Started"},{"location":"dev/getting-started/#getting-started","text":"The following guides provide information to quickly start developing on the Flare networks.","title":"Getting Started"},{"location":"dev/getting-started/#guides","text":"Setting Up Your Environment Retrieving Contract Addresses","title":"Guides"},{"location":"dev/getting-started/contract-addresses/","text":"Retrieving Contract Addresses # Attention Developers should never rely on contract addresses gathered from off-chain sources like direct messages, social media, or even websites, as these addresses could easily lead to malicious contracts. For this reason, this documentation does not provide any contract address except for the single entry point described below. The only secure way to retrieve contract addresses is from the blockchain itself . As a convenience, though, Flare's smart contract repository contains the latest deployment address for all Flare's smart contracts. These addresses can be used to speed up development, but should not be used in production. To emphasize: Applications are strongly encouraged to retrieve any contract address they need directly from the blockchain and not have addresses hard-coded into the source code, except for the single entry point given in this page. Retrieval from Blockchain # All of Flare's smart contract addresses can be retrieved from the FlareContractRegistry contract. This is the only contract address given in this documentation. FlareContractRegistry 0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019 This contract is available at the same address in all Flare networks: Flare, Songbird, Coston and Coston2. Copy the above address into the Block Explorer to see the available contract's methods. You can retrieve the current address on the blockchain of any Flare smart contract from its name by using these methods, for example: function getContractAddressByName ( string calldata _name ) external view returns ( address ); function getContractAddressesByName ( string [] calldata _names ) external view returns ( address [] memory ); The name search is case-sensitive , so you should use the proper capitalization. For example: WNat FtsoRewardManager PriceSubmitter Applications can also retrieve all smart contract names and addresses at once using: function getAllContracts ( ) external view returns ( string [] memory _names , address [] memory _addresses ); Retrieve current list Retrieval from Source Code # The Flare Smart Contracts repository contains an autogenerated JSON file listing the latest deployed addresses of all Flare contracts on each network. You can find this file in the deployment/deploys folder, and parse it to retrieve the addresses of any Flare contract. Attention As stated at the beginning, applications should NOT have Flare contract addresses in their source code. Instead, applications are strongly encouraged to retrieve any contract address they need directly from the blockchain as described above . Branch JSON file Flare flare_network_deployed_code flare.json Songbird songbird_network_deployed_code songbird.json Coston coston_network_deployed_code coston.json Coston2 coston2_network_deployed_code coston2.json const button = document.getElementById(\"contract-list-button\"); const list = document.getElementById(\"contract-list-results\"); button.addEventListener(\"click\", (e) => { e.preventDefault(); button.style.display = \"none\"; list.innerHTML = \"Retrieving...\"; import(\"/assets/javascripts/ethers-6.3.esm.min.js\").then(ethers => { const provider = new ethers.JsonRpcProvider(\"https://flare-api.flare.network/ext/C/rpc\"); const flareContractRegistry = new ethers.Contract( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\", [\"function getAllContracts() external view returns(string[] memory, address[] memory)\"], provider); const res = flareContractRegistry.getAllContracts().then(res => { list.innerHTML = \"Current smart contract list:\"; var ul=document.createElement('ul'); for (var i = 0; i < res[0].length; ++i) { var li = document.createElement('li'); li.innerHTML = `<code>${res[0][i]}</code>`; ul.appendChild(li); } list.appendChild(ul); }); }); });","title":"Retrieving Contract Addresses"},{"location":"dev/getting-started/contract-addresses/#retrieving-contract-addresses","text":"Attention Developers should never rely on contract addresses gathered from off-chain sources like direct messages, social media, or even websites, as these addresses could easily lead to malicious contracts. For this reason, this documentation does not provide any contract address except for the single entry point described below. The only secure way to retrieve contract addresses is from the blockchain itself . As a convenience, though, Flare's smart contract repository contains the latest deployment address for all Flare's smart contracts. These addresses can be used to speed up development, but should not be used in production. To emphasize: Applications are strongly encouraged to retrieve any contract address they need directly from the blockchain and not have addresses hard-coded into the source code, except for the single entry point given in this page.","title":"Retrieving Contract Addresses"},{"location":"dev/getting-started/contract-addresses/#retrieval-from-blockchain","text":"All of Flare's smart contract addresses can be retrieved from the FlareContractRegistry contract. This is the only contract address given in this documentation. FlareContractRegistry 0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019 This contract is available at the same address in all Flare networks: Flare, Songbird, Coston and Coston2. Copy the above address into the Block Explorer to see the available contract's methods. You can retrieve the current address on the blockchain of any Flare smart contract from its name by using these methods, for example: function getContractAddressByName ( string calldata _name ) external view returns ( address ); function getContractAddressesByName ( string [] calldata _names ) external view returns ( address [] memory ); The name search is case-sensitive , so you should use the proper capitalization. For example: WNat FtsoRewardManager PriceSubmitter Applications can also retrieve all smart contract names and addresses at once using: function getAllContracts ( ) external view returns ( string [] memory _names , address [] memory _addresses ); Retrieve current list","title":"Retrieval from Blockchain"},{"location":"dev/getting-started/contract-addresses/#retrieval-from-source-code","text":"The Flare Smart Contracts repository contains an autogenerated JSON file listing the latest deployed addresses of all Flare contracts on each network. You can find this file in the deployment/deploys folder, and parse it to retrieve the addresses of any Flare contract. Attention As stated at the beginning, applications should NOT have Flare contract addresses in their source code. Instead, applications are strongly encouraged to retrieve any contract address they need directly from the blockchain as described above . Branch JSON file Flare flare_network_deployed_code flare.json Songbird songbird_network_deployed_code songbird.json Coston coston_network_deployed_code coston.json Coston2 coston2_network_deployed_code coston2.json const button = document.getElementById(\"contract-list-button\"); const list = document.getElementById(\"contract-list-results\"); button.addEventListener(\"click\", (e) => { e.preventDefault(); button.style.display = \"none\"; list.innerHTML = \"Retrieving...\"; import(\"/assets/javascripts/ethers-6.3.esm.min.js\").then(ethers => { const provider = new ethers.JsonRpcProvider(\"https://flare-api.flare.network/ext/C/rpc\"); const flareContractRegistry = new ethers.Contract( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\", [\"function getAllContracts() external view returns(string[] memory, address[] memory)\"], provider); const res = flareContractRegistry.getAllContracts().then(res => { list.innerHTML = \"Current smart contract list:\"; var ul=document.createElement('ul'); for (var i = 0; i < res[0].length; ++i) { var li = document.createElement('li'); li.innerHTML = `<code>${res[0][i]}</code>`; ul.appendChild(li); } list.appendChild(ul); }); }); });","title":"Retrieval from Source Code"},{"location":"dev/getting-started/setup/","text":"Setting Up Your Environment # The following guides provide information to quickly set up a smart contract development environment. Guides # Using Remix Using Hardhat Using Truffle Using Foundry","title":"Setting Up Your Environment"},{"location":"dev/getting-started/setup/#setting-up-your-environment","text":"The following guides provide information to quickly set up a smart contract development environment.","title":"Setting Up Your Environment"},{"location":"dev/getting-started/setup/#guides","text":"Using Remix Using Hardhat Using Truffle Using Foundry","title":"Guides"},{"location":"dev/getting-started/setup/foundry/","text":"Setting Up Your Environment Using Foundry # Foundry is a fast, portable and modular testing and deployment tool for developing EVM smart contracts. Tests are written in Solidity to keep the workflow consistent with smart contract development and testing before deployments. Foundry itself is written in Rust. This article, partially based on the Foundry documentation , shows how to set up Foundry and use it to build and deploy smart contracts on Flare. Guide # 1. Set up the Environment # Follow the instructions for your operating system in the Foundry's Installation guide . 2. Create a Foundry Project # Foundry can quick-start your development by providing a sample project: forge init hello_foundry This creates a new directory hello_foundry from the default template which should look something like this: Foundry project structure. 3. Build the Contract # To build the Counter.sol contract in the sample project run: cd hello_foundry forge build When done, it should print Compiler run successful . You will notice that two new directories have been created, out and cache : Foundry project after build. The out directory contains your contract artifact, such as the ABI, while the cache is used by forge to only recompile what is necessary. 4. Test the Contract # In the test folder you should find a ready-made test file that verifies the contract works as expected. To run tests with Foundry, you just need to run: forge test When finished, it should print something similar to Test result: ok. 2 passed; 0 failed; finished in 24.43ms . Info Learn more about Advanced Testing using Foundry . 5. Deploy the Contract # Forge can deploy only one contract at a time to a given network. To do so, you must provide the URL of the RPC node to access the network, and the private key of the account that will deploy the contract. The URL can be stored in an environment variable named FOUNDRY_ETH_RPC_URL) so you do not need to supply it every time. Important You are going to deploy the contract on the Coston 2 network . Make sure you have enough C2FLR in the account that will deploy the contract to pay the gas fees! You can add C2FLR to any account using the Coston 2 Faucet . The general Foundry command to deploy a contract is: forge create --rpc-url <your_rpc_url> \\ --private-key <your_private_key> \\ <contract_file>:<contract_name> Since Solidity files may contain multiple contracts, the :<contract_name> parameter specifies which contract to deploy from the <contract_file> source file. Learn more about Deploying and Verifying Smart Contracts using Foundry . To deploy the sample Counter contract to Flare's Coston 2 Network, run: forge create --rpc-url https://coston2-api.flare.network/ext/C/rpc \\ --private-key d8936f6eae35c73a14ea7c1aabb8d068e16889a7f516c8abc482ba4e1489f4cd \\ src/Counter.sol:Counter Using the private key for your account. Execution should look similar to this: Foundry project deployment. You can check the status of the contract by copy and pasting the Deployed to: address into the Coston 2 Block Explorer . Info Learn more about Deploying and Verifying Smart Contracts using Foundry !","title":"Using Foundry"},{"location":"dev/getting-started/setup/foundry/#setting-up-your-environment-using-foundry","text":"Foundry is a fast, portable and modular testing and deployment tool for developing EVM smart contracts. Tests are written in Solidity to keep the workflow consistent with smart contract development and testing before deployments. Foundry itself is written in Rust. This article, partially based on the Foundry documentation , shows how to set up Foundry and use it to build and deploy smart contracts on Flare.","title":"Setting Up Your Environment Using Foundry"},{"location":"dev/getting-started/setup/foundry/#guide","text":"","title":"Guide"},{"location":"dev/getting-started/setup/foundry/#1-set-up-the-environment","text":"Follow the instructions for your operating system in the Foundry's Installation guide .","title":"1. Set up the Environment"},{"location":"dev/getting-started/setup/foundry/#2-create-a-foundry-project","text":"Foundry can quick-start your development by providing a sample project: forge init hello_foundry This creates a new directory hello_foundry from the default template which should look something like this: Foundry project structure.","title":"2. Create a Foundry Project"},{"location":"dev/getting-started/setup/foundry/#3-build-the-contract","text":"To build the Counter.sol contract in the sample project run: cd hello_foundry forge build When done, it should print Compiler run successful . You will notice that two new directories have been created, out and cache : Foundry project after build. The out directory contains your contract artifact, such as the ABI, while the cache is used by forge to only recompile what is necessary.","title":"3. Build the Contract"},{"location":"dev/getting-started/setup/foundry/#4-test-the-contract","text":"In the test folder you should find a ready-made test file that verifies the contract works as expected. To run tests with Foundry, you just need to run: forge test When finished, it should print something similar to Test result: ok. 2 passed; 0 failed; finished in 24.43ms . Info Learn more about Advanced Testing using Foundry .","title":"4. Test the Contract"},{"location":"dev/getting-started/setup/foundry/#5-deploy-the-contract","text":"Forge can deploy only one contract at a time to a given network. To do so, you must provide the URL of the RPC node to access the network, and the private key of the account that will deploy the contract. The URL can be stored in an environment variable named FOUNDRY_ETH_RPC_URL) so you do not need to supply it every time. Important You are going to deploy the contract on the Coston 2 network . Make sure you have enough C2FLR in the account that will deploy the contract to pay the gas fees! You can add C2FLR to any account using the Coston 2 Faucet . The general Foundry command to deploy a contract is: forge create --rpc-url <your_rpc_url> \\ --private-key <your_private_key> \\ <contract_file>:<contract_name> Since Solidity files may contain multiple contracts, the :<contract_name> parameter specifies which contract to deploy from the <contract_file> source file. Learn more about Deploying and Verifying Smart Contracts using Foundry . To deploy the sample Counter contract to Flare's Coston 2 Network, run: forge create --rpc-url https://coston2-api.flare.network/ext/C/rpc \\ --private-key d8936f6eae35c73a14ea7c1aabb8d068e16889a7f516c8abc482ba4e1489f4cd \\ src/Counter.sol:Counter Using the private key for your account. Execution should look similar to this: Foundry project deployment. You can check the status of the contract by copy and pasting the Deployed to: address into the Coston 2 Block Explorer . Info Learn more about Deploying and Verifying Smart Contracts using Foundry !","title":"5. Deploy the Contract"},{"location":"dev/getting-started/setup/hardhat/","text":"Setting Up Your Environment Using Hardhat # Hardhat is an environment developers use to test, compile, deploy and debug dapps based on any blockchain compatible Ethereum's EVM . Hardhat is a flexible and extensible task runner that helps you manage and automate the recurring tasks inherent to developing smart contracts and dapps. This article, partially based on the Hardhat documentation shows you how to set up Hardhat and use it to build, test and deploy smart contracts on Flare. Guide # 1. Set up the Environment # Install the following dependencies: NodeJSv12+ LTS and npm/Yarn Package Installer . Tip Check the Official Guide by Hardhat if you have issues installing this package. Once the above dependencies are installed, create an npm empty project by running the following commands in a terminal: mkdir flare-tutorial cd flare-tutorial npm init Press Enter on each of the prompts. Finally, add Hardhat and a few dependencies to the project, since you will use them in this tutorial. npm install --save-dev \\ hardhat \\ @nomicfoundation/hardhat-toolbox \\ @nomiclabs/hardhat-ethers \\ dotenv 2. Create a Hardhat Project # Hardhat can quick-start your development by providing a sample project. Just run: npx hardhat You should see the following prompt: Hardhat project creation prompt. Choose the Create a JavaScript project with the Up and Down keys, and Press Enter . Then press Y for rest of the prompts. When done, it should print Project created . If you take a look in the contracts folder, you should find a sample source file called Lock.sol . It is a Solidity smart contract implementing a simple digital lock, where users can only withdraw funds after a given period of time: // SPDX-License-Identifier: UNLICENSED pragma solidity ^ 0.8.9 ; // Uncomment this line to use console.log // import \"hardhat/console.sol\"; contract Lock { uint public unlockTime ; address payable public owner ; event Withdrawal ( uint amount , uint when ); constructor ( uint _unlockTime ) payable { require ( block.timestamp < _unlockTime , \"Unlock time should be in the future\" ); unlockTime = _unlockTime ; owner = payable ( msg.sender ); } function withdraw () public { // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp); require ( block.timestamp >= unlockTime , \"You can't withdraw yet\" ); require ( msg.sender == owner , \"You aren't the owner\" ); emit Withdrawal ( address ( this ). balance , block.timestamp ); owner . transfer ( address ( this ). balance ); } } 3. Compile the Contracts # To compile the sample project, simply run: npx hardhat compile Upon successful compilation it will print Compiled 1 Solidity file successfully . 4. Configure the Project # In order to be deployed on any of the Flare networks , the project needs to be configured. Edit the hardhat.config.js file and replace its contents with the following: require ( 'dotenv' ). config (); require ( \"@nomicfoundation/hardhat-toolbox\" ); require ( '@nomiclabs/hardhat-ethers' ); /** @type import('hardhat/config').HardhatUserConfig */ module . exports = { solidity : \"0.8.17\" , networks : { hardhat : { }, coston : { url : \"https://coston-api.flare.network/ext/bc/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 16 }, songbird : { url : \"https://songbird-api.flare.network/ext/bc/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 19 }, coston2 : { url : \"https://coston2-api.flare.network/ext/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 114 , }, flare : { url : \"https://flare-api.flare.network/ext/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 14 , } }, }; Then, create a file called .env at the root of you project (where the hardhat.config.js file resides) to store the private key for the account to use for testing. .env files are useful to store local information which should not be committed into the source repository. In this tutorial, you need to store your test account's private key in this format: PRIVATE_KEY = \"0x0000000000000000000000000000000000000000000000000000000000000000\" That is, 64 hexadecimal characters after the 0x . Caution Make sure you never upload your .env file to a remote repository. For this reason, the .gitignore file that Hardhat created for you already ignores .env files. 5. Test the Contract # In the test folder you should find a ready-made test file that verifies the contract works as expected. To run tests with Hardhat, you just need to run: npx hardhat test You should get: Lock contract test results. 6. Deploy the Contract # Finally, you will deploy the contract to Flare's test network, Coston2 , using a Hardhat script from the scripts folder. Run this command in the root of the project: npx hardhat run scripts/deploy.js --network coston2 You should get an output similar to: Lock with 1 ETH and unlock timestamp 1705592309 deployed to 0xdC7781FA9fA7e2d0313cd0229a5080B4e30663a5 The last part is the address where the contract has been deployed. You can check the status of the contract by copy and pasting this address in the Block Explorer .","title":"Using Hardhat"},{"location":"dev/getting-started/setup/hardhat/#setting-up-your-environment-using-hardhat","text":"Hardhat is an environment developers use to test, compile, deploy and debug dapps based on any blockchain compatible Ethereum's EVM . Hardhat is a flexible and extensible task runner that helps you manage and automate the recurring tasks inherent to developing smart contracts and dapps. This article, partially based on the Hardhat documentation shows you how to set up Hardhat and use it to build, test and deploy smart contracts on Flare.","title":"Setting Up Your Environment Using Hardhat"},{"location":"dev/getting-started/setup/hardhat/#guide","text":"","title":"Guide"},{"location":"dev/getting-started/setup/hardhat/#1-set-up-the-environment","text":"Install the following dependencies: NodeJSv12+ LTS and npm/Yarn Package Installer . Tip Check the Official Guide by Hardhat if you have issues installing this package. Once the above dependencies are installed, create an npm empty project by running the following commands in a terminal: mkdir flare-tutorial cd flare-tutorial npm init Press Enter on each of the prompts. Finally, add Hardhat and a few dependencies to the project, since you will use them in this tutorial. npm install --save-dev \\ hardhat \\ @nomicfoundation/hardhat-toolbox \\ @nomiclabs/hardhat-ethers \\ dotenv","title":"1. Set up the Environment"},{"location":"dev/getting-started/setup/hardhat/#2-create-a-hardhat-project","text":"Hardhat can quick-start your development by providing a sample project. Just run: npx hardhat You should see the following prompt: Hardhat project creation prompt. Choose the Create a JavaScript project with the Up and Down keys, and Press Enter . Then press Y for rest of the prompts. When done, it should print Project created . If you take a look in the contracts folder, you should find a sample source file called Lock.sol . It is a Solidity smart contract implementing a simple digital lock, where users can only withdraw funds after a given period of time: // SPDX-License-Identifier: UNLICENSED pragma solidity ^ 0.8.9 ; // Uncomment this line to use console.log // import \"hardhat/console.sol\"; contract Lock { uint public unlockTime ; address payable public owner ; event Withdrawal ( uint amount , uint when ); constructor ( uint _unlockTime ) payable { require ( block.timestamp < _unlockTime , \"Unlock time should be in the future\" ); unlockTime = _unlockTime ; owner = payable ( msg.sender ); } function withdraw () public { // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp); require ( block.timestamp >= unlockTime , \"You can't withdraw yet\" ); require ( msg.sender == owner , \"You aren't the owner\" ); emit Withdrawal ( address ( this ). balance , block.timestamp ); owner . transfer ( address ( this ). balance ); } }","title":"2. Create a Hardhat Project"},{"location":"dev/getting-started/setup/hardhat/#3-compile-the-contracts","text":"To compile the sample project, simply run: npx hardhat compile Upon successful compilation it will print Compiled 1 Solidity file successfully .","title":"3. Compile the Contracts"},{"location":"dev/getting-started/setup/hardhat/#4-configure-the-project","text":"In order to be deployed on any of the Flare networks , the project needs to be configured. Edit the hardhat.config.js file and replace its contents with the following: require ( 'dotenv' ). config (); require ( \"@nomicfoundation/hardhat-toolbox\" ); require ( '@nomiclabs/hardhat-ethers' ); /** @type import('hardhat/config').HardhatUserConfig */ module . exports = { solidity : \"0.8.17\" , networks : { hardhat : { }, coston : { url : \"https://coston-api.flare.network/ext/bc/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 16 }, songbird : { url : \"https://songbird-api.flare.network/ext/bc/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 19 }, coston2 : { url : \"https://coston2-api.flare.network/ext/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 114 , }, flare : { url : \"https://flare-api.flare.network/ext/C/rpc\" , accounts : [ process . env . PRIVATE_KEY ], chainId : 14 , } }, }; Then, create a file called .env at the root of you project (where the hardhat.config.js file resides) to store the private key for the account to use for testing. .env files are useful to store local information which should not be committed into the source repository. In this tutorial, you need to store your test account's private key in this format: PRIVATE_KEY = \"0x0000000000000000000000000000000000000000000000000000000000000000\" That is, 64 hexadecimal characters after the 0x . Caution Make sure you never upload your .env file to a remote repository. For this reason, the .gitignore file that Hardhat created for you already ignores .env files.","title":"4. Configure the Project"},{"location":"dev/getting-started/setup/hardhat/#5-test-the-contract","text":"In the test folder you should find a ready-made test file that verifies the contract works as expected. To run tests with Hardhat, you just need to run: npx hardhat test You should get: Lock contract test results.","title":"5. Test the Contract"},{"location":"dev/getting-started/setup/hardhat/#6-deploy-the-contract","text":"Finally, you will deploy the contract to Flare's test network, Coston2 , using a Hardhat script from the scripts folder. Run this command in the root of the project: npx hardhat run scripts/deploy.js --network coston2 You should get an output similar to: Lock with 1 ETH and unlock timestamp 1705592309 deployed to 0xdC7781FA9fA7e2d0313cd0229a5080B4e30663a5 The last part is the address where the contract has been deployed. You can check the status of the contract by copy and pasting this address in the Block Explorer .","title":"6. Deploy the Contract"},{"location":"dev/getting-started/setup/remix/","text":"Setting Up Your Environment Using Remix # The Remix IDE is a powerful, open-source tool that helps you write Solidity smart contracts straight from the browser, without requiring any download, account creation, or login. This article shows you how to deploy a Hello World contract to the Flare blockchain using the Remix IDE and the MetaMask wallet. Guide # 1. Create a New File # Visit the Remix IDE and click the New File button. Name it HelloWorld.sol . Drag and drop it to the contracts folder. New file in the Remix IDE. 2. Write Your Contract # Copy and paste the smart contract code provided below into the newly created HelloWorld.sol file. // SPDX-License-Identifier: MIT // Specifies the version of Solidity, using semantic versioning. pragma solidity 0.8.17 ; // Defines a contract named `HelloWorld` contract HelloWorld { // Declares a state variable `message` of type `string`. string public message ; // Constructors are used to initialize the contract's data. constructor ( string memory initMessage ) { // Accepts a string argument `initMessage`. message = initMessage ; } // A public function that accepts a string argument. function update ( string memory newMessage ) public { message = newMessage ; } } 3. Compile Your Contract # Go to the Solidity Compiler tab (on the left), and select compiler version 0.8.17 . Now, click the Compile HelloWorld.sol button. After successful compilation, it will show a Green tick mark on the Compiler tab button. Compilation successful. 4. Deploying on Flare Testnet # You will now deploy the smart contract on the Coston2 network , Flare's test network. When a smart contract is deployed on Flare's main network, it not only costs money (such as gas fees), but it also becomes immutable and cannot be modified. Therefore, deploying your smart contracts first on the test network is highly recommended. Important Before jumping onto Remix Deployment: Make sure that you have added and selected the Coston2 test network to your MetaMask Wallet. The MetaMask Wallet guide shows how to do it. Use the values for Coston2 that you will find in the Network Configurations page. Ensure that you have enough Coston2 native tokens $C2FLR to pay for gas. Visit the Coston2 Faucet to request some $C2FLR . Go to the Deploy & Run Transactions tab (the last one) and select Injected Provider - Metamask from the ENVIRONMENT dropdown. Accept the connection request received in MetaMask if necessary. Environment selection on Remix. Click the Deploy button and confirm the CONTRACT DEPLOYMENT transaction in MetaMask. Contract deployment transaction. Note The process to deploy your contract on the Flare main network is the same as above. You only have to select Flare Network on MetaMask and use $FLR tokens. 5. Interact with the Contract # You can now interact with the contract to verify that it is working as intended. In the Deployed Contracts section at the bottom of the left column, expand the HELLOWORLD contract to see its methods and data: update method. message public variable. Type a message in the box next to the update button and click the button. Confirm the deployment transaction in MetaMask. Check that the contract has been updated by clicking the message button and verifying you get back the message you typed before. Interact with the contract","title":"Using Remix"},{"location":"dev/getting-started/setup/remix/#setting-up-your-environment-using-remix","text":"The Remix IDE is a powerful, open-source tool that helps you write Solidity smart contracts straight from the browser, without requiring any download, account creation, or login. This article shows you how to deploy a Hello World contract to the Flare blockchain using the Remix IDE and the MetaMask wallet.","title":"Setting Up Your Environment Using Remix"},{"location":"dev/getting-started/setup/remix/#guide","text":"","title":"Guide"},{"location":"dev/getting-started/setup/remix/#1-create-a-new-file","text":"Visit the Remix IDE and click the New File button. Name it HelloWorld.sol . Drag and drop it to the contracts folder. New file in the Remix IDE.","title":"1. Create a New File"},{"location":"dev/getting-started/setup/remix/#2-write-your-contract","text":"Copy and paste the smart contract code provided below into the newly created HelloWorld.sol file. // SPDX-License-Identifier: MIT // Specifies the version of Solidity, using semantic versioning. pragma solidity 0.8.17 ; // Defines a contract named `HelloWorld` contract HelloWorld { // Declares a state variable `message` of type `string`. string public message ; // Constructors are used to initialize the contract's data. constructor ( string memory initMessage ) { // Accepts a string argument `initMessage`. message = initMessage ; } // A public function that accepts a string argument. function update ( string memory newMessage ) public { message = newMessage ; } }","title":"2. Write Your Contract"},{"location":"dev/getting-started/setup/remix/#3-compile-your-contract","text":"Go to the Solidity Compiler tab (on the left), and select compiler version 0.8.17 . Now, click the Compile HelloWorld.sol button. After successful compilation, it will show a Green tick mark on the Compiler tab button. Compilation successful.","title":"3. Compile Your Contract"},{"location":"dev/getting-started/setup/remix/#4-deploying-on-flare-testnet","text":"You will now deploy the smart contract on the Coston2 network , Flare's test network. When a smart contract is deployed on Flare's main network, it not only costs money (such as gas fees), but it also becomes immutable and cannot be modified. Therefore, deploying your smart contracts first on the test network is highly recommended. Important Before jumping onto Remix Deployment: Make sure that you have added and selected the Coston2 test network to your MetaMask Wallet. The MetaMask Wallet guide shows how to do it. Use the values for Coston2 that you will find in the Network Configurations page. Ensure that you have enough Coston2 native tokens $C2FLR to pay for gas. Visit the Coston2 Faucet to request some $C2FLR . Go to the Deploy & Run Transactions tab (the last one) and select Injected Provider - Metamask from the ENVIRONMENT dropdown. Accept the connection request received in MetaMask if necessary. Environment selection on Remix. Click the Deploy button and confirm the CONTRACT DEPLOYMENT transaction in MetaMask. Contract deployment transaction. Note The process to deploy your contract on the Flare main network is the same as above. You only have to select Flare Network on MetaMask and use $FLR tokens.","title":"4. Deploying on Flare Testnet"},{"location":"dev/getting-started/setup/remix/#5-interact-with-the-contract","text":"You can now interact with the contract to verify that it is working as intended. In the Deployed Contracts section at the bottom of the left column, expand the HELLOWORLD contract to see its methods and data: update method. message public variable. Type a message in the box next to the update button and click the button. Confirm the deployment transaction in MetaMask. Check that the contract has been updated by clicking the message button and verifying you get back the message you typed before. Interact with the contract","title":"5. Interact with the Contract"},{"location":"dev/getting-started/setup/truffle/","text":"Setting Up Your Environment Using Truffle # Truffle is a blockchain development environment, which you can use to create and test smart contracts by leveraging the Ethereum Virtual Machine (EVM), aiming to make life as a developer easier. This article shows you how to set up Truffle and use it to build and deploy a smart contract on the Flare network. Guide # 1. Set up the Environment # Install the following dependencies: NodeJSv12+ LTS and npm/Yarn Package Installer . Once the above dependencies are installed, install Truffle: npm install -g truffle To verify that Truffle is installed properly, type truffle version into the terminal. 2. Create a Truffle Project # In this article you will use one of Truffle's boilerplate projects which you can find on the Truffle Boxes page . MetaCoin box is an example of a completed coin-like contract. Create a new directory for this Truffle project by running: mkdir flare-truffle-tutorial cd flare-truffle-tutorial Then install the MetaCoin box: truffle unbox metacoin Once this operation is complete, you should have a project structure with the following items: Truffle Project structure. Finally, install the following dependencies which will be needed to deploy contracts: npm i @truffle/hdwallet-provider dotenv 3. Compile the Contract # In the contracts folder you should find two sample source files called MetaCoin.sol and ConvertLib.sol . To compile them, simply run: truffle compile Upon successful compilation, you should see the following output: Truffle compilation output. 4. Test the Contract # In the test folder you should find examples for testing your smart contracts in both JavaScript and Solidity that verify the contracts work as expected. To run tests: truffle test When successful, the output should look like this: Truffle test output. 5. Configure the Project # In order to be deployed on any of the Flare networks , the project needs to be configured. Edit the truffle-config.js file and replace its contents with the following: const HDWalletProvider = require ( '@truffle/hdwallet-provider' ); require ( 'dotenv' ). config (); const fs = require ( 'fs' ); module . exports = { networks : { development : { host : \"127.0.0.1\" , // Localhost (default: none) port : 8545 , // Standard Ethereum port (default: none) network_id : \"*\" , // Any network (default: none) }, flare : { provider : () => new HDWalletProvider ( process . env . PRIVATE_KEY , `https://flare-api.flare.network/ext/C/rpc` ), network_id : 14 , timeoutBlocks : 200 , skipDryRun : true }, coston2 : { provider : () => new HDWalletProvider ( process . env . PRIVATE_KEY , `https://coston2-api.flare.network/ext/C/rpc` ), network_id : 114 , timeoutBlocks : 200 , skipDryRun : true }, }, // Set default mocha options here, use special reporters etc. mocha : { // timeout: 100000 }, // Configure your compilers compilers : { solc : { version : \"0.8.13\" , // Fetch exact version from solc-bin } } }; Then, create a file called .env at the root of you project (where the truffle-config.js file resides) to store the private key for the account to use for testing. PRIVATE_KEY = \"d8936f6eae35c73a14ea7c1aabb8d068e16889a7f516c8abc482ba4e1489f4cd\" .env files are useful to store local information which should not be committed into the source repository. Caution Make sure you never upload your .env file to a remote repository. For this reason, the .gitignore file that Truffle created for you already ignores .env files. 6. Deploy the Contract # Important You are going to deploy the contract on the Coston 2 network . Make sure you have enough C2FLR in the account that will deploy the contract to pay the gas fees! You can add C2FLR to any account using the Coston 2 Faucet . Run this command in the root folder of the project: truffle migrate --network coston2 You should get an output similar to: Truffle deployment output. You can check the status of the contract by copy and pasting the contract address: in the Block Explorer .","title":"Using Truffle"},{"location":"dev/getting-started/setup/truffle/#setting-up-your-environment-using-truffle","text":"Truffle is a blockchain development environment, which you can use to create and test smart contracts by leveraging the Ethereum Virtual Machine (EVM), aiming to make life as a developer easier. This article shows you how to set up Truffle and use it to build and deploy a smart contract on the Flare network.","title":"Setting Up Your Environment Using Truffle"},{"location":"dev/getting-started/setup/truffle/#guide","text":"","title":"Guide"},{"location":"dev/getting-started/setup/truffle/#1-set-up-the-environment","text":"Install the following dependencies: NodeJSv12+ LTS and npm/Yarn Package Installer . Once the above dependencies are installed, install Truffle: npm install -g truffle To verify that Truffle is installed properly, type truffle version into the terminal.","title":"1. Set up the Environment"},{"location":"dev/getting-started/setup/truffle/#2-create-a-truffle-project","text":"In this article you will use one of Truffle's boilerplate projects which you can find on the Truffle Boxes page . MetaCoin box is an example of a completed coin-like contract. Create a new directory for this Truffle project by running: mkdir flare-truffle-tutorial cd flare-truffle-tutorial Then install the MetaCoin box: truffle unbox metacoin Once this operation is complete, you should have a project structure with the following items: Truffle Project structure. Finally, install the following dependencies which will be needed to deploy contracts: npm i @truffle/hdwallet-provider dotenv","title":"2. Create a Truffle Project"},{"location":"dev/getting-started/setup/truffle/#3-compile-the-contract","text":"In the contracts folder you should find two sample source files called MetaCoin.sol and ConvertLib.sol . To compile them, simply run: truffle compile Upon successful compilation, you should see the following output: Truffle compilation output.","title":"3. Compile the Contract"},{"location":"dev/getting-started/setup/truffle/#4-test-the-contract","text":"In the test folder you should find examples for testing your smart contracts in both JavaScript and Solidity that verify the contracts work as expected. To run tests: truffle test When successful, the output should look like this: Truffle test output.","title":"4. Test the Contract"},{"location":"dev/getting-started/setup/truffle/#5-configure-the-project","text":"In order to be deployed on any of the Flare networks , the project needs to be configured. Edit the truffle-config.js file and replace its contents with the following: const HDWalletProvider = require ( '@truffle/hdwallet-provider' ); require ( 'dotenv' ). config (); const fs = require ( 'fs' ); module . exports = { networks : { development : { host : \"127.0.0.1\" , // Localhost (default: none) port : 8545 , // Standard Ethereum port (default: none) network_id : \"*\" , // Any network (default: none) }, flare : { provider : () => new HDWalletProvider ( process . env . PRIVATE_KEY , `https://flare-api.flare.network/ext/C/rpc` ), network_id : 14 , timeoutBlocks : 200 , skipDryRun : true }, coston2 : { provider : () => new HDWalletProvider ( process . env . PRIVATE_KEY , `https://coston2-api.flare.network/ext/C/rpc` ), network_id : 114 , timeoutBlocks : 200 , skipDryRun : true }, }, // Set default mocha options here, use special reporters etc. mocha : { // timeout: 100000 }, // Configure your compilers compilers : { solc : { version : \"0.8.13\" , // Fetch exact version from solc-bin } } }; Then, create a file called .env at the root of you project (where the truffle-config.js file resides) to store the private key for the account to use for testing. PRIVATE_KEY = \"d8936f6eae35c73a14ea7c1aabb8d068e16889a7f516c8abc482ba4e1489f4cd\" .env files are useful to store local information which should not be committed into the source repository. Caution Make sure you never upload your .env file to a remote repository. For this reason, the .gitignore file that Truffle created for you already ignores .env files.","title":"5. Configure the Project"},{"location":"dev/getting-started/setup/truffle/#6-deploy-the-contract","text":"Important You are going to deploy the contract on the Coston 2 network . Make sure you have enough C2FLR in the account that will deploy the contract to pay the gas fees! You can add C2FLR to any account using the Coston 2 Faucet . Run this command in the root folder of the project: truffle migrate --network coston2 You should get an output similar to: Truffle deployment output. You can check the status of the contract by copy and pasting the contract address: in the Block Explorer .","title":"6. Deploy the Contract"},{"location":"dev/reference/","text":"Reference Guides # The following guides provide in-depth information about the Flare networks and the different smart contracts APIs. Guides # Automatic Claiming Block Explorers and Indexers FTSO Network Configuration Personal Delegation Accounts The FlareDrop Wallets","title":"Reference Guides"},{"location":"dev/reference/#reference-guides","text":"The following guides provide in-depth information about the Flare networks and the different smart contracts APIs.","title":"Reference Guides"},{"location":"dev/reference/#guides","text":"Automatic Claiming Block Explorers and Indexers FTSO Network Configuration Personal Delegation Accounts The FlareDrop Wallets","title":"Guides"},{"location":"dev/reference/automatic-claiming/","text":"Automatic Claiming # Users who do not want to claim rewards themselves can enlist executors to claim on their behalf. Executors can then initiate the claiming process, and rewards are sent directly to the user's account. Introduction # Building an executor requires two parts: An executor bot that periodically claims on behalf of the users. An app that allows users to select the executor, such as the Flare Portal , which is free to use. This page contains the following information: The Required Contracts section briefly lists the smart contracts related to executor operation. The User Operations section shows how to perform the operations required in a user-facing application, such as setting an executor. The Executor Operations section shows how to perform the operations required by an executor bot, such as registering as an executor. The User and Executor Reports section shows how to access information useful for performing user and executor functions. Required Contracts # Setting up automatic claiming requires interacting with these contracts: ClaimSetupManager (CSM). FTSORewardManager (FTSO). To find the addresses of these contracts, see the Contract Addresses page. User Operations # This section shows how to perform operations required to enable autoclaiming. The main step is to set the executor that will perform the claiming for the user who has accrued rewards. Then other operations are explained, such as changing the executor and disabling automatic claiming. Setting Claim Executors # There are two ways to set up automatic claiming: Manual and Registered . Manual Claiming # With Manual Claiming , rewards are claimed on-chain, but any agreement between users and executors happens off-chain. Fees are not paid automatically. To set one or more executors to claim rewards for a user: Set a specific executor by calling CSM.setClaimExecutors() and providing the executor's address. This method must be called from the user's account, since they are the only ones that can authorize claiming on their behalf. This function removes all previously set executors and replaces them with the new set. Registered Claiming # With Registered Claiming , a purpose-built ClaimSetupManager contract handles the on-chain agreement between users and executors, greatly simplifying the process. To set one or more registered executors to claim rewards for a user: Get a list of executors and their fees by calling CSM.getRegisteredExecutors() . To find the fee of a specific executor, call CSM.getExecutorCurrentFeeValue() . This fee is deducted from the user\u2019s reward after each claim and sent to the executor. You can show this information to the user and let them select which executor to use. Set the selected executors by calling CSM.setClaimExecutors() as shown for Manual Claiming . However, when setting registered executors, the call must include a value equal to the executor\u2019s fee (in FLR), which is sent to the executor as an enrollment fee. If more than one executor is set, the value must equal the sum of all the executor's fees. Changing Registered Executors # To change registered executors, call CSM.setClaimExecutors() with the new list of executors. This new list overwrites the current list. Disabling Automatic Claiming # To disable automatic claiming, remove all executors by sending an empty array of executors with CSM.setClaimExecutors() . Executor Operations # This section shows how to perform operations required in an executor-facing application, for example, becoming an executor. While the main step for manual executors is only claiming rewards, the main steps for registered executors are registering, setting a fee, and claiming rewards. Other operations like changing the fee, unregistering as an executor, and learning which addresses to claim for are also explained. Becoming an Executor # There are two ways to become an executor: Manual and Registered . Manual Executor # Setting an executor manually means doing so off-chain. Therefore, there is no operation required for executors, besides communicating to the users the address of the executor they need to use. Registered Executor # The ClaimSetupManager contract contains a list of self-registered executors that users can use to discover executors and their service fees, avoiding the need for off-chain operations as in manual claiming. To automatically receive fees for claiming, an executor address must register, set the fee for claiming rewards, and pay the registration fee. Register an executor by calling CSM.registerExecutor(uint256 feeValue) , where feeValue is the fee in wei that the executor requires to perform this service. The fee value must be at least CSM.minFeeValueWei , currently 0.1 FLR, and no greater than CSM.maxFeeValueWei , currently 100 FLR. This transaction must include a registration fee equal to CSM.registerExecutorFeeValueWei , currently 1000 FLR, which is burned. Claiming Rewards # How to Claim # Executors can now only claim FTSO delegation rewards on behalf of users. As other rewards become available, they will also be claimable by executors without any user intervention. Manual and registered executors use the same function, the only difference being that unregistered executors do not receive a fee automatically. To claim FTSO rewards for all of a user's unclaimed epochs, call FTSO.autoClaim(address[] rewardOwners, uint256 rewardEpoch) . This method can be used to claim for multiple users, since rewardOwners is an array. The rewardEpoch is the most current one that the executor wants to claim for, typically the one before the current epoch. If a user has more unclaimed epochs from the past, the function claims for all of them. The claimed amount gets the executor fee subtracted and is automatically wrapped, so it is sent to the user as $WFLR . What to Expect in Fees # The executor gets paid a fee for each user for which he claims the FTSO delegation reward. However, he only gets paid one fee per user regardless of whether he claims for one or more epochs. The fee is paid in native $FLR tokens. If the claimed reward for a user is lower than the executor fee, the transaction is reverted. To see which users have enough rewards to complete and which would revert, call FTSO.autoClaim with a specific user address. Changing the Fee # Registered executors can change the fee they charge for the successful execution of claims. To change the fee, call CSM.updateExecutorFeeValue() . The new fee value will be in effect after CSM.feeValueUpdateOffset reward epochs have elapsed (currently 3 epochs), where the first epoch is the one that is currently active. This function returns the reward epoch number when the setting will become effective. Unregistering an Executor # Registered executors can unregister by calling CSM.unregisterExecutor() and they will be removed from the list of executors. To help the users adjust to the change, executors will retain the current fee and continue claiming for the next 3 reward epochs ( feeValueUpdateOffset ). An executor's best practice is to notify users when unregistering. Updating the User List # Executors should keep a list of users to claim for, there is no mechanism to retrieve this list from the chain. There are two ways to keep this list updated: Listen to the CSM.ClaimExecutorsChanged event which is emitted every time a user sets its executors. This method is suitable for registered executors which might be selected at any time. If the executor is only interested in a closed list of users, e.g., the ones that enlisted on an application, it can call CSM.isClaimExecutor(address user, address executor) for each user to verify the executor's address is properly configured. User and Executor Reports # This section shows how to access information that can help you perform both user and executor functions. Executor Fees # Get the current fee for each executor on the Registered Executors list by calling CSM.getExecutorCurrentFeeValue(address executor) . For upcoming fee changes, call CSM.getExecutorScheduledFeeValueChanges(address executor) . Executors by User # A user can set more than one executor. To see a list of current executors for a user, call CSM.claimExecutors(address user) , which returns an array of executor addresses. It is a best practice for users to check this report periodically (at least every 90 days) to make sure their selected executors have not unregistered without notice. Executor Status # To check if an executor is registered, call CSM.getExecutorInfo(address executor) . It returns whether an executor is registered and its fee.","title":"Automatic Claiming"},{"location":"dev/reference/automatic-claiming/#automatic-claiming","text":"Users who do not want to claim rewards themselves can enlist executors to claim on their behalf. Executors can then initiate the claiming process, and rewards are sent directly to the user's account.","title":"Automatic Claiming"},{"location":"dev/reference/automatic-claiming/#introduction","text":"Building an executor requires two parts: An executor bot that periodically claims on behalf of the users. An app that allows users to select the executor, such as the Flare Portal , which is free to use. This page contains the following information: The Required Contracts section briefly lists the smart contracts related to executor operation. The User Operations section shows how to perform the operations required in a user-facing application, such as setting an executor. The Executor Operations section shows how to perform the operations required by an executor bot, such as registering as an executor. The User and Executor Reports section shows how to access information useful for performing user and executor functions.","title":"Introduction"},{"location":"dev/reference/automatic-claiming/#required-contracts","text":"Setting up automatic claiming requires interacting with these contracts: ClaimSetupManager (CSM). FTSORewardManager (FTSO). To find the addresses of these contracts, see the Contract Addresses page.","title":"Required Contracts"},{"location":"dev/reference/automatic-claiming/#user-operations","text":"This section shows how to perform operations required to enable autoclaiming. The main step is to set the executor that will perform the claiming for the user who has accrued rewards. Then other operations are explained, such as changing the executor and disabling automatic claiming.","title":"User Operations"},{"location":"dev/reference/automatic-claiming/#setting-claim-executors","text":"There are two ways to set up automatic claiming: Manual and Registered .","title":"Setting Claim Executors"},{"location":"dev/reference/automatic-claiming/#manual-claiming","text":"With Manual Claiming , rewards are claimed on-chain, but any agreement between users and executors happens off-chain. Fees are not paid automatically. To set one or more executors to claim rewards for a user: Set a specific executor by calling CSM.setClaimExecutors() and providing the executor's address. This method must be called from the user's account, since they are the only ones that can authorize claiming on their behalf. This function removes all previously set executors and replaces them with the new set.","title":"Manual Claiming"},{"location":"dev/reference/automatic-claiming/#registered-claiming","text":"With Registered Claiming , a purpose-built ClaimSetupManager contract handles the on-chain agreement between users and executors, greatly simplifying the process. To set one or more registered executors to claim rewards for a user: Get a list of executors and their fees by calling CSM.getRegisteredExecutors() . To find the fee of a specific executor, call CSM.getExecutorCurrentFeeValue() . This fee is deducted from the user\u2019s reward after each claim and sent to the executor. You can show this information to the user and let them select which executor to use. Set the selected executors by calling CSM.setClaimExecutors() as shown for Manual Claiming . However, when setting registered executors, the call must include a value equal to the executor\u2019s fee (in FLR), which is sent to the executor as an enrollment fee. If more than one executor is set, the value must equal the sum of all the executor's fees.","title":"Registered Claiming"},{"location":"dev/reference/automatic-claiming/#changing-registered-executors","text":"To change registered executors, call CSM.setClaimExecutors() with the new list of executors. This new list overwrites the current list.","title":"Changing Registered Executors"},{"location":"dev/reference/automatic-claiming/#disabling-automatic-claiming","text":"To disable automatic claiming, remove all executors by sending an empty array of executors with CSM.setClaimExecutors() .","title":"Disabling Automatic Claiming"},{"location":"dev/reference/automatic-claiming/#executor-operations","text":"This section shows how to perform operations required in an executor-facing application, for example, becoming an executor. While the main step for manual executors is only claiming rewards, the main steps for registered executors are registering, setting a fee, and claiming rewards. Other operations like changing the fee, unregistering as an executor, and learning which addresses to claim for are also explained.","title":"Executor Operations"},{"location":"dev/reference/automatic-claiming/#becoming-an-executor","text":"There are two ways to become an executor: Manual and Registered .","title":"Becoming an Executor"},{"location":"dev/reference/automatic-claiming/#manual-executor","text":"Setting an executor manually means doing so off-chain. Therefore, there is no operation required for executors, besides communicating to the users the address of the executor they need to use.","title":"Manual Executor"},{"location":"dev/reference/automatic-claiming/#registered-executor","text":"The ClaimSetupManager contract contains a list of self-registered executors that users can use to discover executors and their service fees, avoiding the need for off-chain operations as in manual claiming. To automatically receive fees for claiming, an executor address must register, set the fee for claiming rewards, and pay the registration fee. Register an executor by calling CSM.registerExecutor(uint256 feeValue) , where feeValue is the fee in wei that the executor requires to perform this service. The fee value must be at least CSM.minFeeValueWei , currently 0.1 FLR, and no greater than CSM.maxFeeValueWei , currently 100 FLR. This transaction must include a registration fee equal to CSM.registerExecutorFeeValueWei , currently 1000 FLR, which is burned.","title":"Registered Executor"},{"location":"dev/reference/automatic-claiming/#claiming-rewards","text":"","title":"Claiming Rewards"},{"location":"dev/reference/automatic-claiming/#how-to-claim","text":"Executors can now only claim FTSO delegation rewards on behalf of users. As other rewards become available, they will also be claimable by executors without any user intervention. Manual and registered executors use the same function, the only difference being that unregistered executors do not receive a fee automatically. To claim FTSO rewards for all of a user's unclaimed epochs, call FTSO.autoClaim(address[] rewardOwners, uint256 rewardEpoch) . This method can be used to claim for multiple users, since rewardOwners is an array. The rewardEpoch is the most current one that the executor wants to claim for, typically the one before the current epoch. If a user has more unclaimed epochs from the past, the function claims for all of them. The claimed amount gets the executor fee subtracted and is automatically wrapped, so it is sent to the user as $WFLR .","title":"How to Claim"},{"location":"dev/reference/automatic-claiming/#what-to-expect-in-fees","text":"The executor gets paid a fee for each user for which he claims the FTSO delegation reward. However, he only gets paid one fee per user regardless of whether he claims for one or more epochs. The fee is paid in native $FLR tokens. If the claimed reward for a user is lower than the executor fee, the transaction is reverted. To see which users have enough rewards to complete and which would revert, call FTSO.autoClaim with a specific user address.","title":"What to Expect in Fees"},{"location":"dev/reference/automatic-claiming/#changing-the-fee","text":"Registered executors can change the fee they charge for the successful execution of claims. To change the fee, call CSM.updateExecutorFeeValue() . The new fee value will be in effect after CSM.feeValueUpdateOffset reward epochs have elapsed (currently 3 epochs), where the first epoch is the one that is currently active. This function returns the reward epoch number when the setting will become effective.","title":"Changing the Fee"},{"location":"dev/reference/automatic-claiming/#unregistering-an-executor","text":"Registered executors can unregister by calling CSM.unregisterExecutor() and they will be removed from the list of executors. To help the users adjust to the change, executors will retain the current fee and continue claiming for the next 3 reward epochs ( feeValueUpdateOffset ). An executor's best practice is to notify users when unregistering.","title":"Unregistering an Executor"},{"location":"dev/reference/automatic-claiming/#updating-the-user-list","text":"Executors should keep a list of users to claim for, there is no mechanism to retrieve this list from the chain. There are two ways to keep this list updated: Listen to the CSM.ClaimExecutorsChanged event which is emitted every time a user sets its executors. This method is suitable for registered executors which might be selected at any time. If the executor is only interested in a closed list of users, e.g., the ones that enlisted on an application, it can call CSM.isClaimExecutor(address user, address executor) for each user to verify the executor's address is properly configured.","title":"Updating the User List"},{"location":"dev/reference/automatic-claiming/#user-and-executor-reports","text":"This section shows how to access information that can help you perform both user and executor functions.","title":"User and Executor Reports"},{"location":"dev/reference/automatic-claiming/#executor-fees","text":"Get the current fee for each executor on the Registered Executors list by calling CSM.getExecutorCurrentFeeValue(address executor) . For upcoming fee changes, call CSM.getExecutorScheduledFeeValueChanges(address executor) .","title":"Executor Fees"},{"location":"dev/reference/automatic-claiming/#executors-by-user","text":"A user can set more than one executor. To see a list of current executors for a user, call CSM.claimExecutors(address user) , which returns an array of executor addresses. It is a best practice for users to check this report periodically (at least every 90 days) to make sure their selected executors have not unregistered without notice.","title":"Executors by User"},{"location":"dev/reference/automatic-claiming/#executor-status","text":"To check if an executor is registered, call CSM.getExecutorInfo(address executor) . It returns whether an executor is registered and its fee.","title":"Executor Status"},{"location":"dev/reference/explorers-and-indexers/","text":"Block Explorers and Indexers # Flare provides a block explorer for each of the networks in its ecosystem. All explorers are a fork of Blockscout , adapted to the Flare networks ( Blockscout Docs ). API documentation for each network's explorer: Flare Songbird Coston Coston2 API access to the Coston Explorer is enabled for noncommercial use only. Related User Guides # Block Explorers","title":"Block Explorers and Indexers"},{"location":"dev/reference/explorers-and-indexers/#block-explorers-and-indexers","text":"Flare provides a block explorer for each of the networks in its ecosystem. All explorers are a fork of Blockscout , adapted to the Flare networks ( Blockscout Docs ). API documentation for each network's explorer: Flare Songbird Coston Coston2 API access to the Coston Explorer is enabled for noncommercial use only.","title":"Block Explorers and Indexers"},{"location":"dev/reference/explorers-and-indexers/#related-user-guides","text":"Block Explorers","title":"Related User Guides"},{"location":"dev/reference/ftso/","text":"FTSO # The Flare Time Series Oracle (FTSO) is a smart contract that utilizes the Flare network to provide continuous estimations for various data types . This process is completely decentralized , meaning that no single party has control over it, and is highly secure , making it very difficult to disrupt. This page serves as a guide to understanding and using the FTSO in different applications. System Architecture # The FTSO system is composed of multiple smart contracts running on the Flare Network. Using prices as an example, the following diagram shows the flow of data, queries, and rewards through the FTSO system: FTSO component smart contracts. The following list describes the most relevant contracts and their purposes: FTSO : Each data type is handled by its own FTSO contract, including calculation of the filtered feed. To retrieve information about a data type, access this contract. Note If an FTSO contract is redeployed (for example, to fix a bug), its address will change and apps using it will need to be updated. The FTSO Registry contract below tracks this change for you. You can retrieve the addresses of all FTSO contracts using the getAllFtsos method in the FTSO Registry. FTSO Registry : Aggregates the output of each individual FTSO contract and provides a convenient one-stop API to retrieve all data. Price Submitter : This contract is used by the FTSO data providers to submit their data. Although the contract is called PriceSubmitter , data is not limited to prices. Reward Manager : Use this contract to claim your rewards , whether you are a data provider or a delegator . Wrapped Native (WNat) : This contract is not exclusively related to the FTSO system, but it is required to wrap and unwrap native tokens into the $WFLR and $WSGB that delegation requires. Note The Contract Addresses page explains how to securely retrieve each contract's address. Manual Delegation and Claiming # The following graphic shows the delegation process. You can call methods in several different smart contracts to manually delegate vote power and claim rewards . FTSO delegation process summary. Data-Submission Process # Data submission uses a commit-and-reveal scheme to prevent providers from viewing each other's submissions until a round is over. To speed up the process, both phases are actually overlapped so: All Commit phases happen continuously in so-called 3-minute Price Epochs . Reveal phases happen during the first half ( first 90 seconds ) of the following Commit phase. The published price information is therefore updated every 3 minutes . Only a hash of the data is submitted during the Commit phase. Next, in the Reveal phase the actual data is sent. If its hash does not match the previous commitment, the data is discarded. The submission API is slightly different for the Flare and Songbird networks: Flare Songbird FTSO data providers submit data through the PriceSubmitter contract . Commit : A single hash is needed for each submission. function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Reveal : After all data is submitted, a single random number must be submitted. function revealPrices ( uint256 _epochId , uint256 [] memory _ftsoIndices , uint256 [] memory _prices , uint256 _random ) external ; FTSO data providers submit data through the PriceSubmitter contract . Commit : A separate hash is needed for each submission. function submitPriceHashes ( uint256 _epochId , uint256 [] memory _ftsoIndices , bytes32 [] memory _hashes ) external ; Reveal : Along with each data submission, a random number must be submitted too. function revealPrices ( uint256 _epochId , uint256 [] memory _ftsoIndices , uint256 [] memory _prices , uint256 [] memory _randoms ) external ; Retrieving Data # Data produced by the FTSO is publicly available on the Flare and Songbird networks. All data can be retrieved either through the FtsoRegistry contract or directly through one of the Ftso contracts. In any case, using the getCurrentPriceWithDecimals method is recommended. The following examples show how to use this method to retrieve price data. Retrieve by pair index Retrieve by pair symbol Retrieve directly From the FtsoRegistry contract: function getCurrentPriceWithDecimals ( uint256 _ftsoIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Where _ftsoIndex is one of the allowed indices returned by getSupportedIndices , for example. From the FtsoRegistry contract: function getCurrentPriceWithDecimals ( string memory _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Where _symbol is one of the allowed symbols returned by getSupportedSymbols , for example. First you need to obtain the address of the Ftso contract managing the price pair you are interested in. You can use getSupportedIndicesSymbolsAndFtsos from the FtsoRegistry , for example. Then call getCurrentPriceWithDecimals on the FTSO directly: function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Note Individual FTSO contracts might be updated periodically, which will change their addresses. Instead of caching these addresses, use the FtsoRegistry . GetCurrentPriceWithDecimals returns the requested price (the outcome of the previous 3-minute price epoch) in $USD shifting the comma by the amount of decimal places returned in _assetPriceUsdDecimals . That is, the actual price is _price * 10 - _assetPriceUsdDecimals . For example, a return value of 2603 with _assetPriceUsdDecimals of 5 means a price of 0.02603 USD (There are only 5 significant decimal places). A standard Unix timestamp of the last price update is also returned. Related Tutorials # FTSO","title":"FTSO"},{"location":"dev/reference/ftso/#ftso","text":"The Flare Time Series Oracle (FTSO) is a smart contract that utilizes the Flare network to provide continuous estimations for various data types . This process is completely decentralized , meaning that no single party has control over it, and is highly secure , making it very difficult to disrupt. This page serves as a guide to understanding and using the FTSO in different applications.","title":"FTSO"},{"location":"dev/reference/ftso/#system-architecture","text":"The FTSO system is composed of multiple smart contracts running on the Flare Network. Using prices as an example, the following diagram shows the flow of data, queries, and rewards through the FTSO system: FTSO component smart contracts. The following list describes the most relevant contracts and their purposes: FTSO : Each data type is handled by its own FTSO contract, including calculation of the filtered feed. To retrieve information about a data type, access this contract. Note If an FTSO contract is redeployed (for example, to fix a bug), its address will change and apps using it will need to be updated. The FTSO Registry contract below tracks this change for you. You can retrieve the addresses of all FTSO contracts using the getAllFtsos method in the FTSO Registry. FTSO Registry : Aggregates the output of each individual FTSO contract and provides a convenient one-stop API to retrieve all data. Price Submitter : This contract is used by the FTSO data providers to submit their data. Although the contract is called PriceSubmitter , data is not limited to prices. Reward Manager : Use this contract to claim your rewards , whether you are a data provider or a delegator . Wrapped Native (WNat) : This contract is not exclusively related to the FTSO system, but it is required to wrap and unwrap native tokens into the $WFLR and $WSGB that delegation requires. Note The Contract Addresses page explains how to securely retrieve each contract's address.","title":"System Architecture"},{"location":"dev/reference/ftso/#manual-delegation-and-claiming","text":"The following graphic shows the delegation process. You can call methods in several different smart contracts to manually delegate vote power and claim rewards . FTSO delegation process summary.","title":"Manual Delegation and Claiming"},{"location":"dev/reference/ftso/#data-submission-process","text":"Data submission uses a commit-and-reveal scheme to prevent providers from viewing each other's submissions until a round is over. To speed up the process, both phases are actually overlapped so: All Commit phases happen continuously in so-called 3-minute Price Epochs . Reveal phases happen during the first half ( first 90 seconds ) of the following Commit phase. The published price information is therefore updated every 3 minutes . Only a hash of the data is submitted during the Commit phase. Next, in the Reveal phase the actual data is sent. If its hash does not match the previous commitment, the data is discarded. The submission API is slightly different for the Flare and Songbird networks: Flare Songbird FTSO data providers submit data through the PriceSubmitter contract . Commit : A single hash is needed for each submission. function submitHash ( uint256 _epochId , bytes32 _hash ) external ; Reveal : After all data is submitted, a single random number must be submitted. function revealPrices ( uint256 _epochId , uint256 [] memory _ftsoIndices , uint256 [] memory _prices , uint256 _random ) external ; FTSO data providers submit data through the PriceSubmitter contract . Commit : A separate hash is needed for each submission. function submitPriceHashes ( uint256 _epochId , uint256 [] memory _ftsoIndices , bytes32 [] memory _hashes ) external ; Reveal : Along with each data submission, a random number must be submitted too. function revealPrices ( uint256 _epochId , uint256 [] memory _ftsoIndices , uint256 [] memory _prices , uint256 [] memory _randoms ) external ;","title":"Data-Submission Process"},{"location":"dev/reference/ftso/#retrieving-data","text":"Data produced by the FTSO is publicly available on the Flare and Songbird networks. All data can be retrieved either through the FtsoRegistry contract or directly through one of the Ftso contracts. In any case, using the getCurrentPriceWithDecimals method is recommended. The following examples show how to use this method to retrieve price data. Retrieve by pair index Retrieve by pair symbol Retrieve directly From the FtsoRegistry contract: function getCurrentPriceWithDecimals ( uint256 _ftsoIndex ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Where _ftsoIndex is one of the allowed indices returned by getSupportedIndices , for example. From the FtsoRegistry contract: function getCurrentPriceWithDecimals ( string memory _symbol ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Where _symbol is one of the allowed symbols returned by getSupportedSymbols , for example. First you need to obtain the address of the Ftso contract managing the price pair you are interested in. You can use getSupportedIndicesSymbolsAndFtsos from the FtsoRegistry , for example. Then call getCurrentPriceWithDecimals on the FTSO directly: function getCurrentPriceWithDecimals ( ) external view returns ( uint256 _price , uint256 _timestamp , uint256 _assetPriceUsdDecimals ); Note Individual FTSO contracts might be updated periodically, which will change their addresses. Instead of caching these addresses, use the FtsoRegistry . GetCurrentPriceWithDecimals returns the requested price (the outcome of the previous 3-minute price epoch) in $USD shifting the comma by the amount of decimal places returned in _assetPriceUsdDecimals . That is, the actual price is _price * 10 - _assetPriceUsdDecimals . For example, a return value of 2603 with _assetPriceUsdDecimals of 5 means a price of 0.02603 USD (There are only 5 significant decimal places). A standard Unix timestamp of the last price update is also returned.","title":"Retrieving Data"},{"location":"dev/reference/ftso/#related-tutorials","text":"FTSO","title":"Related Tutorials"},{"location":"dev/reference/network-config/","text":"Network Configuration # Flare Networks # These are the values required to configure the different Flare networks : Flare Songbird Coston Coston2 Flare Chain ID 14 Asset Ticker FLR RPC endpoint https://flare-api.flare.network/ext/C/rpc Rosetta API https://flare-rosetta-api.flare.network/ Block Explorer https://flare-explorer.flare.network Bootstraping nodes https://flare.flare.network https://flare-bootstrap-1.staking.production.figment.io https://flare.senseinode.com Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://flare-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } Songbird Chain ID 19 Asset Ticker SGB RPC endpoint https://songbird-api.flare.network/ext/C/rpc Block Explorer https://songbird-explorer.flare.network Bootstraping nodes https://songbird.flare.network Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://songbird-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } Coston Chain ID 16 Asset Ticker CFLR RPC endpoint https://coston-api.flare.network/ext/C/rpc Block Explorer https://coston-explorer.flare.network Bootstraping nodes https://coston.flare.network Test Faucet https://faucet.towolabs.com Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://coston-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } Coston2 Chain ID 114 Asset Ticker C2FLR RPC endpoint https://coston2-api.flare.network/ext/C/rpc Block Explorer https://coston2-explorer.flare.network Bootstraping nodes https://coston2.flare.network Test Faucet https://coston2-faucet.towolabs.com Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://coston2-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } All public RPC endpoints are experimental and rate-limited to avoid spamming attacks. For a production-grade option check out Flare's API Portal Connected Networks # Along with the endpoints listed above to interact with its own networks, Flare offers public RPC nodes for a series of other blockchain networks, to bootstrap development of connected services like attestation providers . All public RPC endpoints are experimental and rate-limited to avoid spamming attacks. For a production-grade option check out Flare's API Portal Bitcoin BNB-BSC Litecoin Dogecoin XRPL Algorand Ethereum RPC endpoint https://bitcoin-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"jsonrpc\": \"1.0\", \"id\":\"hc\", \"method\": \"getblockchaininfo\", \"params\":[]}' \\ -u public:d681co1pe2l3wcj9adrm2orlk0j5r5gr3wghgxt58tvge594co0k1ciljxq9glei \\ https://bitcoin-api.flare.network | jq RPC endpoint https://bnb-bsc-api.flare.network/ Sample query curl -s -X POST -m 10 -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\": \"2.0\", \"id\":67, \"method\":\"eth_blockNumber\", \"params\":[]}' \\ https://bnb-bsc-api.flare.network | jq RPC endpoint https://litecoin-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"jsonrpc\": \"1.0\", \"id\":\"hc\", \"method\": \"getblockchaininfo\", \"params\":[]}' \\ -u public:ntvzi4i1yne499t7vcdjqhhp92m3jvm0bb6dkpr406gkndvuns9sg6th3jd393uc \\ https://litecoin-api.flare.network | jq RPC endpoint https://dogecoin-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"jsonrpc\": \"1.0\", \"id\":\"hc\", \"method\": \"getblockchaininfo\", \"params\":[]}' \\ -u public:6r1e5z3w9g6qruvkzkqvz8w67yqrq5js2cmyl2f1cncbp7gpp7tqixqskuub5v70 \\ https://dogecoin-api.flare.network | jq RPC endpoint https://xrpl-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"method\": \"server_info\", \"params\":[{\"api_version\": 1}]}' \\ https://xrpl-api.flare.network | jq RPC endpoint https://algorand-api.flare.network Sample query curl -s -m 10 \\ -H \"X-Algo-API-Token: zl748k3wddvld8cvn64utnslbf7otorkijp84se0f58pmuu0shgm27gttpcjpmuq\" \\ https://algorand-api.flare.network/v2/status | jq RPC endpoint https://ethereum-api.flare.network/ Sample query curl -s -X POST -m 10 -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\": \"2.0\", \"id\":67, \"method\":\"eth_blockNumber\", \"params\":[]}' \\ https://ethereum-api.flare.network | jq","title":"Network Configuration"},{"location":"dev/reference/network-config/#network-configuration","text":"","title":"Network Configuration"},{"location":"dev/reference/network-config/#flare-networks","text":"These are the values required to configure the different Flare networks : Flare Songbird Coston Coston2 Flare Chain ID 14 Asset Ticker FLR RPC endpoint https://flare-api.flare.network/ext/C/rpc Rosetta API https://flare-rosetta-api.flare.network/ Block Explorer https://flare-explorer.flare.network Bootstraping nodes https://flare.flare.network https://flare-bootstrap-1.staking.production.figment.io https://flare.senseinode.com Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://flare-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } Songbird Chain ID 19 Asset Ticker SGB RPC endpoint https://songbird-api.flare.network/ext/C/rpc Block Explorer https://songbird-explorer.flare.network Bootstraping nodes https://songbird.flare.network Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://songbird-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } Coston Chain ID 16 Asset Ticker CFLR RPC endpoint https://coston-api.flare.network/ext/C/rpc Block Explorer https://coston-explorer.flare.network Bootstraping nodes https://coston.flare.network Test Faucet https://faucet.towolabs.com Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://coston-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } Coston2 Chain ID 114 Asset Ticker C2FLR RPC endpoint https://coston2-api.flare.network/ext/C/rpc Block Explorer https://coston2-explorer.flare.network Bootstraping nodes https://coston2.flare.network Test Faucet https://coston2-faucet.towolabs.com Sample query You can check that you are accessing the RPC endpoint correctly with this sample query: curl -s -m 10 --request POST 'https://coston2-api.flare.network/ext/C/rpc' \\ -H 'Content-Type: application/json' \\ -d '{ \"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":1 }' It should return the current chain height in a message similar to: { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x103384\" } All public RPC endpoints are experimental and rate-limited to avoid spamming attacks. For a production-grade option check out Flare's API Portal","title":"Flare Networks"},{"location":"dev/reference/network-config/#connected-networks","text":"Along with the endpoints listed above to interact with its own networks, Flare offers public RPC nodes for a series of other blockchain networks, to bootstrap development of connected services like attestation providers . All public RPC endpoints are experimental and rate-limited to avoid spamming attacks. For a production-grade option check out Flare's API Portal Bitcoin BNB-BSC Litecoin Dogecoin XRPL Algorand Ethereum RPC endpoint https://bitcoin-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"jsonrpc\": \"1.0\", \"id\":\"hc\", \"method\": \"getblockchaininfo\", \"params\":[]}' \\ -u public:d681co1pe2l3wcj9adrm2orlk0j5r5gr3wghgxt58tvge594co0k1ciljxq9glei \\ https://bitcoin-api.flare.network | jq RPC endpoint https://bnb-bsc-api.flare.network/ Sample query curl -s -X POST -m 10 -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\": \"2.0\", \"id\":67, \"method\":\"eth_blockNumber\", \"params\":[]}' \\ https://bnb-bsc-api.flare.network | jq RPC endpoint https://litecoin-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"jsonrpc\": \"1.0\", \"id\":\"hc\", \"method\": \"getblockchaininfo\", \"params\":[]}' \\ -u public:ntvzi4i1yne499t7vcdjqhhp92m3jvm0bb6dkpr406gkndvuns9sg6th3jd393uc \\ https://litecoin-api.flare.network | jq RPC endpoint https://dogecoin-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"jsonrpc\": \"1.0\", \"id\":\"hc\", \"method\": \"getblockchaininfo\", \"params\":[]}' \\ -u public:6r1e5z3w9g6qruvkzkqvz8w67yqrq5js2cmyl2f1cncbp7gpp7tqixqskuub5v70 \\ https://dogecoin-api.flare.network | jq RPC endpoint https://xrpl-api.flare.network Sample query curl -s -X POST -m 10 -H \"Content-type: application/json\" \\ -d '{\"method\": \"server_info\", \"params\":[{\"api_version\": 1}]}' \\ https://xrpl-api.flare.network | jq RPC endpoint https://algorand-api.flare.network Sample query curl -s -m 10 \\ -H \"X-Algo-API-Token: zl748k3wddvld8cvn64utnslbf7otorkijp84se0f58pmuu0shgm27gttpcjpmuq\" \\ https://algorand-api.flare.network/v2/status | jq RPC endpoint https://ethereum-api.flare.network/ Sample query curl -s -X POST -m 10 -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\": \"2.0\", \"id\":67, \"method\":\"eth_blockNumber\", \"params\":[]}' \\ https://ethereum-api.flare.network | jq","title":"Connected Networks"},{"location":"dev/reference/personal-delegation-account/","text":"Personal Delegation Accounts # Personal Delegation Accounts (PDAs) temporarily store rewards, such as FTSO delegation rewards, that users do not want to claim to their main accounts as explained in the Concept page . This page explains how to manage PDA functionality in applications. Required contracts # Working with the PDAs requires interacting with these contracts: ClaimSetupManager (CSM). FTSORewardManager (FTSO). To find the addresses of these contracts read the Contract Addresses page. Enabling a PDA # CSM.enableDelegationAccount() returns the address of the PDA associated with the caller's address, creating the PDA in the process if it didn't exist. A single PDA can be associated with each address and it cannot be destroyed once created, only disabled (see below). There exist no private keys to the PDA account so it cannot sign any transactions. All interaction with the PDA happens through the CSM contract, and is usually triggered by the user's main account. Note that this means that a PDA cannot have its own PDA, since no calls to the CSM can be made from the PDA account. Once a PDA is created, certain functions like FTSO.autoClaim() automatically send claimed rewards to the PDA account instead of the main account. See Delegation and Rewards below. Disabling a PDA # To disable the use of a PDA, call CSM.disableDelegationAccount() . Any $WFLR tokens that are on the PDA address are transferred back to the user's main account. When users disable their PDA, FTSO.autoClaim() claims only the rewards for their main account and to their main account. CSM.disableDelegationAccount() disables the PDA contract but does not destroy it: its address is still returned by CSM.getDelegationAccountData() , but the enabled boolean will be false . Checking PDA State # To check if a user's PDA is enabled, call CSM.getDelegationAccountData() . It returns both the PDA address and its state: Condition Address State PDA is enabled PDA address true PDA is disabled PDA address false PDA has never been created 0x000...000 false Never rely solely on the returned address being non-zero to check if an account has a PDA. Delegation and Rewards # A PDA is a regular account for which there are no private keys and which must be managed through the CSM contract instead. Conveniently, the method signatures to delegate on the CSM are the same as on the WNat contract where delegation is usually performed, for instance CSM.batchDelegate() . FTSO reward claiming, though, is still performed through the FTSORewardManager , for example using claimReward(address recipient, ...) where recipient allows sending to any address, including a PDA. For information on how to delegate and claim FTSO rewards, see Delegation and Rewards . In addition to the methods used for regular accounts, FTSO.autoClaim() automatically claims for both the main account and the PDA, to the PDA or the main account depending on whether the PDA is enabled or not. If users disable their PDA, autoClaim() claims rewards for only their main account and to only their main account. Note The autoClaim() method is unrelated to Automatic Claiming performed by executors. Governance Voting # Flare network users have a right to vote on proposals that can change the behavior of the network or add new features. The number of votes an address has is equal to the amount of wrapped Flare tokens ( $WFLR ) that the address holds. PDA addresses cannot vote directly, but their owners can transfer all their votes to another address (e.g., the owner's address) by calling CSM.delegateGovernance(address recipient) . The recipient of the votes can then vote with its own votes as well as with the votes received from other addresses. Transferring Funds # Because a PDA is a regular account, anyone can send funds to it. However, FLR tokens transferred to a PDA are automatically converted to $WFLR , making them convenient for delegation. Only the owner of the main account and its PDA can transfer funds from the PDA and only to its main account. To transfer tokens, the owner calls CSM.withdraw() and states the amount to withdraw. Since it has no private keys, any token other than $FLR or $WFLR transferred to the PDA cannot be moved out by conventional means. Instead, CSM.transferExternalToken() must be used to transfer them to another account. This is useful, for example, to recover airdropped tokens accidentally sent to the PDA. Note CSM.transferExternalToken() only works on ERC-20 tokens or token contracts that support the transfer function. Wallet or Dapp Integration # To support personal delegation accounts, a wallet or dapp at a minimum should show its status, including: Checking the user's PDA address and whether it is enabled. Showing the amount of $WFLR on the user's PDA. Additional integration could support the following actions: Enabling and disabling the PDA. Allowing the delegation of funds from a PDA to FTSO price providers. Delegating votes for governance voting. Claiming rewards to the PDA. Withdrawing funds from users' PDAs to their main accounts. Withdrawing custom ERC-20 tokens to the users' main accounts. See the Flare Portal for an example of such integration.","title":"Personal Delegation Accounts"},{"location":"dev/reference/personal-delegation-account/#personal-delegation-accounts","text":"Personal Delegation Accounts (PDAs) temporarily store rewards, such as FTSO delegation rewards, that users do not want to claim to their main accounts as explained in the Concept page . This page explains how to manage PDA functionality in applications.","title":"Personal Delegation Accounts"},{"location":"dev/reference/personal-delegation-account/#required-contracts","text":"Working with the PDAs requires interacting with these contracts: ClaimSetupManager (CSM). FTSORewardManager (FTSO). To find the addresses of these contracts read the Contract Addresses page.","title":"Required contracts"},{"location":"dev/reference/personal-delegation-account/#enabling-a-pda","text":"CSM.enableDelegationAccount() returns the address of the PDA associated with the caller's address, creating the PDA in the process if it didn't exist. A single PDA can be associated with each address and it cannot be destroyed once created, only disabled (see below). There exist no private keys to the PDA account so it cannot sign any transactions. All interaction with the PDA happens through the CSM contract, and is usually triggered by the user's main account. Note that this means that a PDA cannot have its own PDA, since no calls to the CSM can be made from the PDA account. Once a PDA is created, certain functions like FTSO.autoClaim() automatically send claimed rewards to the PDA account instead of the main account. See Delegation and Rewards below.","title":"Enabling a PDA"},{"location":"dev/reference/personal-delegation-account/#disabling-a-pda","text":"To disable the use of a PDA, call CSM.disableDelegationAccount() . Any $WFLR tokens that are on the PDA address are transferred back to the user's main account. When users disable their PDA, FTSO.autoClaim() claims only the rewards for their main account and to their main account. CSM.disableDelegationAccount() disables the PDA contract but does not destroy it: its address is still returned by CSM.getDelegationAccountData() , but the enabled boolean will be false .","title":"Disabling a PDA"},{"location":"dev/reference/personal-delegation-account/#checking-pda-state","text":"To check if a user's PDA is enabled, call CSM.getDelegationAccountData() . It returns both the PDA address and its state: Condition Address State PDA is enabled PDA address true PDA is disabled PDA address false PDA has never been created 0x000...000 false Never rely solely on the returned address being non-zero to check if an account has a PDA.","title":"Checking PDA State"},{"location":"dev/reference/personal-delegation-account/#delegation-and-rewards","text":"A PDA is a regular account for which there are no private keys and which must be managed through the CSM contract instead. Conveniently, the method signatures to delegate on the CSM are the same as on the WNat contract where delegation is usually performed, for instance CSM.batchDelegate() . FTSO reward claiming, though, is still performed through the FTSORewardManager , for example using claimReward(address recipient, ...) where recipient allows sending to any address, including a PDA. For information on how to delegate and claim FTSO rewards, see Delegation and Rewards . In addition to the methods used for regular accounts, FTSO.autoClaim() automatically claims for both the main account and the PDA, to the PDA or the main account depending on whether the PDA is enabled or not. If users disable their PDA, autoClaim() claims rewards for only their main account and to only their main account. Note The autoClaim() method is unrelated to Automatic Claiming performed by executors.","title":"Delegation and Rewards"},{"location":"dev/reference/personal-delegation-account/#governance-voting","text":"Flare network users have a right to vote on proposals that can change the behavior of the network or add new features. The number of votes an address has is equal to the amount of wrapped Flare tokens ( $WFLR ) that the address holds. PDA addresses cannot vote directly, but their owners can transfer all their votes to another address (e.g., the owner's address) by calling CSM.delegateGovernance(address recipient) . The recipient of the votes can then vote with its own votes as well as with the votes received from other addresses.","title":"Governance Voting"},{"location":"dev/reference/personal-delegation-account/#transferring-funds","text":"Because a PDA is a regular account, anyone can send funds to it. However, FLR tokens transferred to a PDA are automatically converted to $WFLR , making them convenient for delegation. Only the owner of the main account and its PDA can transfer funds from the PDA and only to its main account. To transfer tokens, the owner calls CSM.withdraw() and states the amount to withdraw. Since it has no private keys, any token other than $FLR or $WFLR transferred to the PDA cannot be moved out by conventional means. Instead, CSM.transferExternalToken() must be used to transfer them to another account. This is useful, for example, to recover airdropped tokens accidentally sent to the PDA. Note CSM.transferExternalToken() only works on ERC-20 tokens or token contracts that support the transfer function.","title":"Transferring Funds"},{"location":"dev/reference/personal-delegation-account/#wallet-or-dapp-integration","text":"To support personal delegation accounts, a wallet or dapp at a minimum should show its status, including: Checking the user's PDA address and whether it is enabled. Showing the amount of $WFLR on the user's PDA. Additional integration could support the following actions: Enabling and disabling the PDA. Allowing the delegation of funds from a PDA to FTSO price providers. Delegating votes for governance voting. Claiming rewards to the PDA. Withdrawing funds from users' PDAs to their main accounts. Withdrawing custom ERC-20 tokens to the users' main accounts. See the Flare Portal for an example of such integration.","title":"Wallet or Dapp Integration"},{"location":"dev/reference/the-flaredrop/","text":"The FlareDrop # The FlareDrop , previously called the Delegation Incentive Pool in the FIP.01 , is a distribution method for the 24.25B remaining $FLR tokens after the original airdrop . This page explains how to manage FlareDrop functionality in applications. Required Contracts # Working with the FlareDrop requires interacting with these contracts: DistributionToDelegators (Dist). Manages all claims. ClaimSetupManager (CSM). Needed to configure autoclaiming. To find their addresses, read the Contract Addresses page. Operations # Basic Claiming # The Dist.claim method allows claiming the FlareDrop one account at a time. function claim ( address _rewardOwner , address _recipient , uint256 _month , bool _wrap ) external returns ( uint256 _rewardAmount ); It transfers the FlareDrop rewards accrued by account _rewardOwner during the specified _month to the specified _recipient . _wrap controls whether the reward is transferred in native $FLR tokens or wrapped in $WFLR tokens. You can use Dist.getCurrentMonth() to find out the current month (starting at 0), or Dist.getClaimableMonths() to get the interval of months which are currently available for claiming. Use Dist.getClaimableAmount() or Dist.getClaimableAmountOf() to find out if a given address has pending rewards on any given month. Dist.claim() returns the amount of claimed rewards. Two modes of operation are supported: Self-claiming and claiming on behalf of another account. Self-Claiming : When msg.sender matches _rewardOwner , the caller is claiming its own rewards. In this case _recipient can be any address. Claiming on behalf of another account : When msg.sender does not match _rewardOwner , the caller must be a claim executor , claiming on behalf of _rewardOwner . If _msg.sender is not in the authorized list of executors for _rewardOwner , the call will revert. Authorized executors must be set beforehand by _rewardOwner using CSM.setClaimExecutors() . The _recipient must either be _rewardOwner , its PDA , or any of the authorized recipients previously set by _rewardOwner using CSM.setAllowedClaimRecipients() . The call will revert otherwise. Batched Claiming # The Dist.autoClaim() method allows claiming the FlareDrop for an arbitrary amount of accounts in a single call, with convenient default values. function autoClaim ( address [] calldata _rewardOwners , uint256 _month ) external ; It claims the rewards accrued by all the accounts in the _rewardOwners array during the specified _month . If an account does not have an enabled PDA , the rewards are sent to the same account. However, if an account does have an enabled PDA, the rewards are sent to the PDA account. Any rewards accrued by the PDA account are also claimed and sent to the PDA. Rewards claimed with this method are always wrapped. If the executor is a registered executor with a nonzero fee, the fee is automatically deducted from each claimed reward and sent to the executor account (unwrapped). If rewards are claimed for both an address and its PDA, the fee is deducted only once. The call reverts if: msg.sender is not in the authorized list of executors for any of the _rewardOwners . The total claimed rewards for any of the _rewardOwners is not high enough to cover the executor's fee.","title":"The FlareDrop"},{"location":"dev/reference/the-flaredrop/#the-flaredrop","text":"The FlareDrop , previously called the Delegation Incentive Pool in the FIP.01 , is a distribution method for the 24.25B remaining $FLR tokens after the original airdrop . This page explains how to manage FlareDrop functionality in applications.","title":"The FlareDrop"},{"location":"dev/reference/the-flaredrop/#required-contracts","text":"Working with the FlareDrop requires interacting with these contracts: DistributionToDelegators (Dist). Manages all claims. ClaimSetupManager (CSM). Needed to configure autoclaiming. To find their addresses, read the Contract Addresses page.","title":"Required Contracts"},{"location":"dev/reference/the-flaredrop/#operations","text":"","title":"Operations"},{"location":"dev/reference/the-flaredrop/#basic-claiming","text":"The Dist.claim method allows claiming the FlareDrop one account at a time. function claim ( address _rewardOwner , address _recipient , uint256 _month , bool _wrap ) external returns ( uint256 _rewardAmount ); It transfers the FlareDrop rewards accrued by account _rewardOwner during the specified _month to the specified _recipient . _wrap controls whether the reward is transferred in native $FLR tokens or wrapped in $WFLR tokens. You can use Dist.getCurrentMonth() to find out the current month (starting at 0), or Dist.getClaimableMonths() to get the interval of months which are currently available for claiming. Use Dist.getClaimableAmount() or Dist.getClaimableAmountOf() to find out if a given address has pending rewards on any given month. Dist.claim() returns the amount of claimed rewards. Two modes of operation are supported: Self-claiming and claiming on behalf of another account. Self-Claiming : When msg.sender matches _rewardOwner , the caller is claiming its own rewards. In this case _recipient can be any address. Claiming on behalf of another account : When msg.sender does not match _rewardOwner , the caller must be a claim executor , claiming on behalf of _rewardOwner . If _msg.sender is not in the authorized list of executors for _rewardOwner , the call will revert. Authorized executors must be set beforehand by _rewardOwner using CSM.setClaimExecutors() . The _recipient must either be _rewardOwner , its PDA , or any of the authorized recipients previously set by _rewardOwner using CSM.setAllowedClaimRecipients() . The call will revert otherwise.","title":"Basic Claiming"},{"location":"dev/reference/the-flaredrop/#batched-claiming","text":"The Dist.autoClaim() method allows claiming the FlareDrop for an arbitrary amount of accounts in a single call, with convenient default values. function autoClaim ( address [] calldata _rewardOwners , uint256 _month ) external ; It claims the rewards accrued by all the accounts in the _rewardOwners array during the specified _month . If an account does not have an enabled PDA , the rewards are sent to the same account. However, if an account does have an enabled PDA, the rewards are sent to the PDA account. Any rewards accrued by the PDA account are also claimed and sent to the PDA. Rewards claimed with this method are always wrapped. If the executor is a registered executor with a nonzero fee, the fee is automatically deducted from each claimed reward and sent to the executor account (unwrapped). If rewards are claimed for both an address and its PDA, the fee is deducted only once. The call reverts if: msg.sender is not in the authorized list of executors for any of the _rewardOwners . The total claimed rewards for any of the _rewardOwners is not high enough to cover the executor's fee.","title":"Batched Claiming"},{"location":"dev/reference/wallets/","text":"Wallets # Information for wallet developers wanting to integrate with the Flare networks. First off, find all basic network information like Chain ID or public RPC endpoints in the Network Configuration page. This page then provides a few more pointers specific to wallet development. Block Explorers and Indexers # For all its networks, Flare offers public block explorers that double down as indexers. Learn about them in the Block Explorers section. Flare's Personal Delegation Accounts # See the Integration with a Personal Delegation Account page. Address Derivation Paths for HD Wallets # Address derivation and format validation on Flare are the same as on Ethereum. In particular, Flare uses the same coin type as Ethereum, this is, 60. The BIP-44 paths are therefore m/44\u2019/60\u2019/x\u2019/0/0 (hardened) and m/44\u2019/60\u2019/0\u2019/0/x . The same path is used on both the C-chain and the P-chain .","title":"Wallets"},{"location":"dev/reference/wallets/#wallets","text":"Information for wallet developers wanting to integrate with the Flare networks. First off, find all basic network information like Chain ID or public RPC endpoints in the Network Configuration page. This page then provides a few more pointers specific to wallet development.","title":"Wallets"},{"location":"dev/reference/wallets/#block-explorers-and-indexers","text":"For all its networks, Flare offers public block explorers that double down as indexers. Learn about them in the Block Explorers section.","title":"Block Explorers and Indexers"},{"location":"dev/reference/wallets/#flares-personal-delegation-accounts","text":"See the Integration with a Personal Delegation Account page.","title":"Flare's Personal Delegation Accounts"},{"location":"dev/reference/wallets/#address-derivation-paths-for-hd-wallets","text":"Address derivation and format validation on Flare are the same as on Ethereum. In particular, Flare uses the same coin type as Ethereum, this is, 60. The BIP-44 paths are therefore m/44\u2019/60\u2019/x\u2019/0/0 (hardened) and m/44\u2019/60\u2019/0\u2019/0/x . The same path is used on both the C-chain and the P-chain .","title":"Address Derivation Paths for HD Wallets"},{"location":"dev/tutorials/","text":"Tutorials # The Flare developer tutorials are divided into the following topics. Topics # Accessing the Network FTSO","title":"Tutorials"},{"location":"dev/tutorials/#tutorials","text":"The Flare developer tutorials are divided into the following topics.","title":"Tutorials"},{"location":"dev/tutorials/#topics","text":"Accessing the Network FTSO","title":"Topics"},{"location":"dev/tutorials/ftso/","text":"FTSO Tutorials # These code samples and explanations show how to use the FTSO system . Tutorials # Getting FTSO Data Feeds","title":"FTSO Tutorials"},{"location":"dev/tutorials/ftso/#ftso-tutorials","text":"These code samples and explanations show how to use the FTSO system .","title":"FTSO Tutorials"},{"location":"dev/tutorials/ftso/#tutorials","text":"Getting FTSO Data Feeds","title":"Tutorials"},{"location":"dev/tutorials/ftso/getting-data-feeds/","text":"Getting FTSO Data Feeds # This tutorial shows the simplest way to use the FTSO system to retrieve a specific data feed, like the price of Bitcoin. The tutorial shows: How to use the Flare periphery packages to simplify working with the Flare API. How to retrieve the latest price for a given asset from the FTSO system. Code # Choose your preferred programming language and ensure you have a working development environment . For easy navigation, numbered comments in the source code link to the tutorial sections below. Solidity JavaScript GettingDataFeeds.sol 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; // 1. Import dependencies import \"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\" ; import \"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\" ; contract GettingDataFeeds { address private constant FLARE_CONTRACT_REGISTRY = 0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019 ; function getTokenPriceWei ( string memory _symbol ) public view returns ( uint256 _price , uint256 _timestamp , uint256 _decimals ) { // 2. Access the Contract Registry IFlareContractRegistry contractRegistry = IFlareContractRegistry ( FLARE_CONTRACT_REGISTRY ); // 3. Retrieve the FTSO Registry IFtsoRegistry ftsoRegistry = IFtsoRegistry ( contractRegistry . getContractAddressByName ( 'FtsoRegistry' )); // 4. Get latest price ( _price , _timestamp , _decimals ) = ftsoRegistry . getCurrentPriceWithDecimals ( _symbol ); } } Source code license Building with Hardhat Create a new folder and move into it. Create a new Hardhat project (More information in the Hardhat setup guide ): npm init npm install hardhat @nomicfoundation/hardhat-toolbox npx hardhat init You will not be using the sample project, therefore: Remove contracts/Lock.sol Remove test/Lock.js Add Flare's Periphery Package as a dependency with: npm install @flarenetwork/flare-periphery-contracts Copy the Solidity code above into a new file called GettingDataFeeds.sol in the contracts folder. Compile with npx hardhat compile . Testing with Hardhat Testing smart contracts before deploying them is typically performed by forking the network or by using mock contracts . These instructions quickly show you how to use the former. Build the Hardhat project following the previous instructions. Modify your hardhat.config.js to look like this: hardhat.config.js require ( \"@nomicfoundation/hardhat-toolbox\" ); /** @type import('hardhat/config').HardhatUserConfig */ module . exports = { solidity : \"0.8.19\" , networks : { hardhat : { forking : { url : 'https://flare-api.flare.network/ext/C/rpc' , }, }, }, }; Copy the code below into a new file called TestGettingDataFeeds.js in the test folder. TestGettingDataFeeds.js const { expect } = require ( \"chai\" ); describe ( \"GettingDataFeeds\" , async function () { let contract ; beforeEach ( async function () { contract = await ethers . deployContract ( \"GettingDataFeeds\" ); }); it ( \"Should return sensible values\" , async function () { const res = await contract . getTokenPriceWei ( \"BTC\" ); expect ( res . _timestamp ). to . greaterThan ( 1695817332 ); expect ( res . _decimals ). to . within ( 0 , 18 ); expect ( res . _price ). to . within ( 0 , 1000000 * 10 ** Number ( res . _decimals )); }); }); Run the test with npx hardhat test . GettingDataFeeds.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 const FLARE_PACKAGE = \"@flarenetwork/flare-periphery-contract-artifacts\" ; const FLARE_RPC = \"https://flare-api.flare.network/ext/C/rpc\" ; async function GettingDataFeeds_run ( _symbol ) { console . log ( `Retrieving current price of ${ _symbol } ...` ); // 1. Import dependencies var ethers , flare ; if ( typeof window === \"undefined\" ) { // Node.js ethers = await import ( \"ethers\" ); flare = await import ( FLARE_PACKAGE ); } else { // Browser ethers = await import ( \"https://esm.run/ethers@6.3\" ); flare = await import ( `https://esm.run/ ${ FLARE_PACKAGE } ` ); } // Node to submit queries to. const provider = new ethers . JsonRpcProvider ( FLARE_RPC ); // 2. Access the Contract Registry const flareContractRegistry = new ethers . Contract ( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\" , flare . nameToAbi ( \"FlareContractRegistry\" , \"flare\" ). data , provider ); // 3. Retrieve the FTSO Registry const ftsoRegistryAddr = await flareContractRegistry . getContractAddressByName ( \"FtsoRegistry\" ); const ftsoRegistry = new ethers . Contract ( ftsoRegistryAddr , flare . nameToAbi ( \"FtsoRegistry\" , \"flare\" ). data , provider ); // 4. Get latest price const [ _price , _timestamp , _decimals ] = await ftsoRegistry [ \"getCurrentPriceWithDecimals(string)\" ]( _symbol ); console . log ( ` ${ Number ( _price ) / Math . pow ( 10 , Number ( _decimals )) } USD` ); console . log ( `Calculated at ${ new Date ( Number ( _timestamp ) * 1000 ) } ` ); } GettingDataFeeds_run ( \"BTC\" ); Source code license async function GettingDataFeeds_runner() { console.old_log = console.log; if (!document.getElementById('GettingDataFeeds-run-me-button').hasAttribute('open')) { console.log = console.old_log; return; } console.old_log = console.log; output = document.getElementById('GettingDataFeeds-output').getElementsByTagName('code')[0]; output.innerHTML = \"\"; console.log = function(message) { output.innerHTML += (typeof message == 'object' ? JSON.stringify(message, null, 2) : message) + \"\\n\"; }; await GettingDataFeeds_run('BTC'); console.log = console.old_log; } Run with Node.js This tutorial has been tested with npm v9.5 and Node.js v18.16 . Create a new folder and move into it. Copy & paste the code above into a new file called GettingDataFeeds.js . Install dependencies with: npm init npm install ethers @flarenetwork/flare-periphery-contract-artifacts Run the program with: node GettingDataFeeds.js Run in browser const FLARE_PACKAGE = \"@flarenetwork/flare-periphery-contract-artifacts\"; const FLARE_RPC = \"https://flare-api.flare.network/ext/C/rpc\"; async function GettingDataFeeds_run(_symbol) { console.log(`Retrieving current price of ${_symbol}...`); // 1. Import dependencies var ethers, flare; if (typeof window === \"undefined\") { // Node.js ethers = await import(\"ethers\"); flare = await import(FLARE_PACKAGE); } else { // Browser ethers = await import(\"https://esm.run/ethers@6.3\"); flare = await import(`https://esm.run/${FLARE_PACKAGE}`); } // Node to submit queries to. const provider = new ethers.JsonRpcProvider(FLARE_RPC); // 2. Access the Contract Registry const flareContractRegistry = new ethers.Contract( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\", flare.nameToAbi(\"FlareContractRegistry\", \"flare\").data, provider); // 3. Retrieve the FTSO Registry const ftsoRegistryAddr = await flareContractRegistry.getContractAddressByName(\"FtsoRegistry\"); const ftsoRegistry = new ethers.Contract( ftsoRegistryAddr, flare.nameToAbi(\"FtsoRegistry\", \"flare\").data, provider); // 4. Get latest price const [_price, _timestamp, _decimals] = await ftsoRegistry[\"getCurrentPriceWithDecimals(string)\"](_symbol); console.log(`${Number(_price) / Math.pow(10, Number(_decimals))} USD`); console.log(`Calculated at ${new Date(Number(_timestamp) * 1000)}`); } Tutorial # 1. Import Dependencies # The tutorial uses the following dependencies: The Flare Periphery Package for Solidity and the Flare Periphery Artifacts Package for JavaScript, which provide the API for all Flare smart contracts. If you use JavaScript, the ethers package is also needed to work with smart contracts. Solidity JavaScript 6 7 import \"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\" ; import \"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\" ; 8 9 10 11 12 13 14 15 16 17 var ethers , flare ; if ( typeof window === \"undefined\" ) { // Node.js ethers = await import ( \"ethers\" ); flare = await import ( FLARE_PACKAGE ); } else { // Browser ethers = await import ( \"https://esm.run/ethers@6.3\" ); flare = await import ( `https://esm.run/ ${ FLARE_PACKAGE } ` ); } The Periphery Packages simplify working with the Flare smart contracts significantly. If you remove this dependency, you must manually provide the signatures for all the methods you want to use. 2. Access the Contract Registry # The FlareContractRegistry contains the current addresses for all Flare smart contracts, and it is the only recommended way to retrieve them. Its address is the same on all of Flare's networks , and it is the only Flare address that needs to be hard-coded into any program. Solidity JavaScript 20 21 IFlareContractRegistry contractRegistry = IFlareContractRegistry ( FLARE_CONTRACT_REGISTRY ); 23 24 25 26 const flareContractRegistry = new ethers . Contract ( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\" , flare . nameToAbi ( \"FlareContractRegistry\" , \"flare\" ). data , provider ); 3. Retrieve the FTSO Registry # Prices for all assets tracked by the FTSO system are recovered through the FtsoRegistry contract. Use the getContractAddressByName() method from the FlareContractRegistry to retrieve the address of the FtsoRegistry . Solidity JavaScript 24 25 IFtsoRegistry ftsoRegistry = IFtsoRegistry ( contractRegistry . getContractAddressByName ( 'FtsoRegistry' )); 29 30 31 32 33 34 const ftsoRegistryAddr = await flareContractRegistry . getContractAddressByName ( \"FtsoRegistry\" ); const ftsoRegistry = new ethers . Contract ( ftsoRegistryAddr , flare . nameToAbi ( \"FtsoRegistry\" , \"flare\" ). data , provider ); This address can be retrieved in the initialization phase of your program and used afterward. There is no need to fetch it every time it must be used. 4. Get Latest Price # Finally, the asset's price is fetched from the FtsoRegistry using getCurrentPriceWithDecimals . Solidity JavaScript 28 29 ( _price , _timestamp , _decimals ) = ftsoRegistry . getCurrentPriceWithDecimals ( _symbol ); 37 38 39 40 41 const [ _price , _timestamp , _decimals ] = await ftsoRegistry [ \"getCurrentPriceWithDecimals(string)\" ]( _symbol ); console . log ( ` ${ Number ( _price ) / Math . pow ( 10 , Number ( _decimals )) } USD` ); console . log ( `Calculated at ${ new Date ( Number ( _timestamp ) * 1000 ) } ` ); The only parameter of this method is the symbol for the asset being queried, like \"FLR\" or \"BTC\" . You can use getSupportedSymbols() to retrieve the list of all supported symbols. Given that Solidity does not support numbers with decimals, this method returns the requested price as an integer and the number of decimal places by which the comma must be shifted. For example, if it returns 1234 for the price and 2 for the decimals, the actual price of the asset in USD is 12.34 . It also returns the time when the price was calculated by the FTSO system as a UNIX timestamp . You can use an online tool like EpochConverter to turn the timestamp into a human-readable form, or use Date as in the JavaScript example. JavaScript note on overloaded methods The call to the getCurrentPriceWithDecimals method is a bit cumbersome in JavaScript: 37 38 const [ _price , _timestamp , _decimals ] = await ftsoRegistry [ \"getCurrentPriceWithDecimals(string)\" ]( _symbol ); The call needs to be like this because this method is overloaded. getCurrentPriceWithDecimals has two versions: one accepting a string for the symbol and another one accepting an integer for the asset's index in the FTSO system. Therefore, the call needs to disambiguate both versions. The vast majority of methods are not overloaded and allow a more natural call format. For example: await ftsoRegistry . getSupportedSymbols (); Conclusion # This tutorial served as the Hello World program for the FTSO system . It has shown: How to use the Flare Periphery Package, both from Solidity and from JavaScript . How to retrieve the latest price for a given asset from the FTSO system.","title":"Getting FTSO Data Feeds"},{"location":"dev/tutorials/ftso/getting-data-feeds/#getting-ftso-data-feeds","text":"This tutorial shows the simplest way to use the FTSO system to retrieve a specific data feed, like the price of Bitcoin. The tutorial shows: How to use the Flare periphery packages to simplify working with the Flare API. How to retrieve the latest price for a given asset from the FTSO system.","title":"Getting FTSO Data Feeds"},{"location":"dev/tutorials/ftso/getting-data-feeds/#code","text":"Choose your preferred programming language and ensure you have a working development environment . For easy navigation, numbered comments in the source code link to the tutorial sections below. Solidity JavaScript GettingDataFeeds.sol 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; // 1. Import dependencies import \"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\" ; import \"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\" ; contract GettingDataFeeds { address private constant FLARE_CONTRACT_REGISTRY = 0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019 ; function getTokenPriceWei ( string memory _symbol ) public view returns ( uint256 _price , uint256 _timestamp , uint256 _decimals ) { // 2. Access the Contract Registry IFlareContractRegistry contractRegistry = IFlareContractRegistry ( FLARE_CONTRACT_REGISTRY ); // 3. Retrieve the FTSO Registry IFtsoRegistry ftsoRegistry = IFtsoRegistry ( contractRegistry . getContractAddressByName ( 'FtsoRegistry' )); // 4. Get latest price ( _price , _timestamp , _decimals ) = ftsoRegistry . getCurrentPriceWithDecimals ( _symbol ); } } Source code license Building with Hardhat Create a new folder and move into it. Create a new Hardhat project (More information in the Hardhat setup guide ): npm init npm install hardhat @nomicfoundation/hardhat-toolbox npx hardhat init You will not be using the sample project, therefore: Remove contracts/Lock.sol Remove test/Lock.js Add Flare's Periphery Package as a dependency with: npm install @flarenetwork/flare-periphery-contracts Copy the Solidity code above into a new file called GettingDataFeeds.sol in the contracts folder. Compile with npx hardhat compile . Testing with Hardhat Testing smart contracts before deploying them is typically performed by forking the network or by using mock contracts . These instructions quickly show you how to use the former. Build the Hardhat project following the previous instructions. Modify your hardhat.config.js to look like this: hardhat.config.js require ( \"@nomicfoundation/hardhat-toolbox\" ); /** @type import('hardhat/config').HardhatUserConfig */ module . exports = { solidity : \"0.8.19\" , networks : { hardhat : { forking : { url : 'https://flare-api.flare.network/ext/C/rpc' , }, }, }, }; Copy the code below into a new file called TestGettingDataFeeds.js in the test folder. TestGettingDataFeeds.js const { expect } = require ( \"chai\" ); describe ( \"GettingDataFeeds\" , async function () { let contract ; beforeEach ( async function () { contract = await ethers . deployContract ( \"GettingDataFeeds\" ); }); it ( \"Should return sensible values\" , async function () { const res = await contract . getTokenPriceWei ( \"BTC\" ); expect ( res . _timestamp ). to . greaterThan ( 1695817332 ); expect ( res . _decimals ). to . within ( 0 , 18 ); expect ( res . _price ). to . within ( 0 , 1000000 * 10 ** Number ( res . _decimals )); }); }); Run the test with npx hardhat test . GettingDataFeeds.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 const FLARE_PACKAGE = \"@flarenetwork/flare-periphery-contract-artifacts\" ; const FLARE_RPC = \"https://flare-api.flare.network/ext/C/rpc\" ; async function GettingDataFeeds_run ( _symbol ) { console . log ( `Retrieving current price of ${ _symbol } ...` ); // 1. Import dependencies var ethers , flare ; if ( typeof window === \"undefined\" ) { // Node.js ethers = await import ( \"ethers\" ); flare = await import ( FLARE_PACKAGE ); } else { // Browser ethers = await import ( \"https://esm.run/ethers@6.3\" ); flare = await import ( `https://esm.run/ ${ FLARE_PACKAGE } ` ); } // Node to submit queries to. const provider = new ethers . JsonRpcProvider ( FLARE_RPC ); // 2. Access the Contract Registry const flareContractRegistry = new ethers . Contract ( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\" , flare . nameToAbi ( \"FlareContractRegistry\" , \"flare\" ). data , provider ); // 3. Retrieve the FTSO Registry const ftsoRegistryAddr = await flareContractRegistry . getContractAddressByName ( \"FtsoRegistry\" ); const ftsoRegistry = new ethers . Contract ( ftsoRegistryAddr , flare . nameToAbi ( \"FtsoRegistry\" , \"flare\" ). data , provider ); // 4. Get latest price const [ _price , _timestamp , _decimals ] = await ftsoRegistry [ \"getCurrentPriceWithDecimals(string)\" ]( _symbol ); console . log ( ` ${ Number ( _price ) / Math . pow ( 10 , Number ( _decimals )) } USD` ); console . log ( `Calculated at ${ new Date ( Number ( _timestamp ) * 1000 ) } ` ); } GettingDataFeeds_run ( \"BTC\" ); Source code license async function GettingDataFeeds_runner() { console.old_log = console.log; if (!document.getElementById('GettingDataFeeds-run-me-button').hasAttribute('open')) { console.log = console.old_log; return; } console.old_log = console.log; output = document.getElementById('GettingDataFeeds-output').getElementsByTagName('code')[0]; output.innerHTML = \"\"; console.log = function(message) { output.innerHTML += (typeof message == 'object' ? JSON.stringify(message, null, 2) : message) + \"\\n\"; }; await GettingDataFeeds_run('BTC'); console.log = console.old_log; } Run with Node.js This tutorial has been tested with npm v9.5 and Node.js v18.16 . Create a new folder and move into it. Copy & paste the code above into a new file called GettingDataFeeds.js . Install dependencies with: npm init npm install ethers @flarenetwork/flare-periphery-contract-artifacts Run the program with: node GettingDataFeeds.js Run in browser const FLARE_PACKAGE = \"@flarenetwork/flare-periphery-contract-artifacts\"; const FLARE_RPC = \"https://flare-api.flare.network/ext/C/rpc\"; async function GettingDataFeeds_run(_symbol) { console.log(`Retrieving current price of ${_symbol}...`); // 1. Import dependencies var ethers, flare; if (typeof window === \"undefined\") { // Node.js ethers = await import(\"ethers\"); flare = await import(FLARE_PACKAGE); } else { // Browser ethers = await import(\"https://esm.run/ethers@6.3\"); flare = await import(`https://esm.run/${FLARE_PACKAGE}`); } // Node to submit queries to. const provider = new ethers.JsonRpcProvider(FLARE_RPC); // 2. Access the Contract Registry const flareContractRegistry = new ethers.Contract( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\", flare.nameToAbi(\"FlareContractRegistry\", \"flare\").data, provider); // 3. Retrieve the FTSO Registry const ftsoRegistryAddr = await flareContractRegistry.getContractAddressByName(\"FtsoRegistry\"); const ftsoRegistry = new ethers.Contract( ftsoRegistryAddr, flare.nameToAbi(\"FtsoRegistry\", \"flare\").data, provider); // 4. Get latest price const [_price, _timestamp, _decimals] = await ftsoRegistry[\"getCurrentPriceWithDecimals(string)\"](_symbol); console.log(`${Number(_price) / Math.pow(10, Number(_decimals))} USD`); console.log(`Calculated at ${new Date(Number(_timestamp) * 1000)}`); }","title":"Code"},{"location":"dev/tutorials/ftso/getting-data-feeds/#tutorial","text":"","title":"Tutorial"},{"location":"dev/tutorials/ftso/getting-data-feeds/#1-import-dependencies","text":"The tutorial uses the following dependencies: The Flare Periphery Package for Solidity and the Flare Periphery Artifacts Package for JavaScript, which provide the API for all Flare smart contracts. If you use JavaScript, the ethers package is also needed to work with smart contracts. Solidity JavaScript 6 7 import \"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\" ; import \"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\" ; 8 9 10 11 12 13 14 15 16 17 var ethers , flare ; if ( typeof window === \"undefined\" ) { // Node.js ethers = await import ( \"ethers\" ); flare = await import ( FLARE_PACKAGE ); } else { // Browser ethers = await import ( \"https://esm.run/ethers@6.3\" ); flare = await import ( `https://esm.run/ ${ FLARE_PACKAGE } ` ); } The Periphery Packages simplify working with the Flare smart contracts significantly. If you remove this dependency, you must manually provide the signatures for all the methods you want to use.","title":"1. Import Dependencies"},{"location":"dev/tutorials/ftso/getting-data-feeds/#2-access-the-contract-registry","text":"The FlareContractRegistry contains the current addresses for all Flare smart contracts, and it is the only recommended way to retrieve them. Its address is the same on all of Flare's networks , and it is the only Flare address that needs to be hard-coded into any program. Solidity JavaScript 20 21 IFlareContractRegistry contractRegistry = IFlareContractRegistry ( FLARE_CONTRACT_REGISTRY ); 23 24 25 26 const flareContractRegistry = new ethers . Contract ( \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\" , flare . nameToAbi ( \"FlareContractRegistry\" , \"flare\" ). data , provider );","title":"2. Access the Contract Registry"},{"location":"dev/tutorials/ftso/getting-data-feeds/#3-retrieve-the-ftso-registry","text":"Prices for all assets tracked by the FTSO system are recovered through the FtsoRegistry contract. Use the getContractAddressByName() method from the FlareContractRegistry to retrieve the address of the FtsoRegistry . Solidity JavaScript 24 25 IFtsoRegistry ftsoRegistry = IFtsoRegistry ( contractRegistry . getContractAddressByName ( 'FtsoRegistry' )); 29 30 31 32 33 34 const ftsoRegistryAddr = await flareContractRegistry . getContractAddressByName ( \"FtsoRegistry\" ); const ftsoRegistry = new ethers . Contract ( ftsoRegistryAddr , flare . nameToAbi ( \"FtsoRegistry\" , \"flare\" ). data , provider ); This address can be retrieved in the initialization phase of your program and used afterward. There is no need to fetch it every time it must be used.","title":"3. Retrieve the FTSO Registry"},{"location":"dev/tutorials/ftso/getting-data-feeds/#4-get-latest-price","text":"Finally, the asset's price is fetched from the FtsoRegistry using getCurrentPriceWithDecimals . Solidity JavaScript 28 29 ( _price , _timestamp , _decimals ) = ftsoRegistry . getCurrentPriceWithDecimals ( _symbol ); 37 38 39 40 41 const [ _price , _timestamp , _decimals ] = await ftsoRegistry [ \"getCurrentPriceWithDecimals(string)\" ]( _symbol ); console . log ( ` ${ Number ( _price ) / Math . pow ( 10 , Number ( _decimals )) } USD` ); console . log ( `Calculated at ${ new Date ( Number ( _timestamp ) * 1000 ) } ` ); The only parameter of this method is the symbol for the asset being queried, like \"FLR\" or \"BTC\" . You can use getSupportedSymbols() to retrieve the list of all supported symbols. Given that Solidity does not support numbers with decimals, this method returns the requested price as an integer and the number of decimal places by which the comma must be shifted. For example, if it returns 1234 for the price and 2 for the decimals, the actual price of the asset in USD is 12.34 . It also returns the time when the price was calculated by the FTSO system as a UNIX timestamp . You can use an online tool like EpochConverter to turn the timestamp into a human-readable form, or use Date as in the JavaScript example. JavaScript note on overloaded methods The call to the getCurrentPriceWithDecimals method is a bit cumbersome in JavaScript: 37 38 const [ _price , _timestamp , _decimals ] = await ftsoRegistry [ \"getCurrentPriceWithDecimals(string)\" ]( _symbol ); The call needs to be like this because this method is overloaded. getCurrentPriceWithDecimals has two versions: one accepting a string for the symbol and another one accepting an integer for the asset's index in the FTSO system. Therefore, the call needs to disambiguate both versions. The vast majority of methods are not overloaded and allow a more natural call format. For example: await ftsoRegistry . getSupportedSymbols ();","title":"4. Get Latest Price"},{"location":"dev/tutorials/ftso/getting-data-feeds/#conclusion","text":"This tutorial served as the Hello World program for the FTSO system . It has shown: How to use the Flare Periphery Package, both from Solidity and from JavaScript . How to retrieve the latest price for a given asset from the FTSO system.","title":"Conclusion"},{"location":"dev/tutorials/network-access/","text":"Accessing the Network # The following tutorials deal with common problems encountered when accessing the Flare networks, like sending transactions or reading events. Tutorials # Checking Transaction Finalization Reliable Event Reading Obtaining a Transaction's Revert Reason","title":"Accessing the Network"},{"location":"dev/tutorials/network-access/#accessing-the-network","text":"The following tutorials deal with common problems encountered when accessing the Flare networks, like sending transactions or reading events.","title":"Accessing the Network"},{"location":"dev/tutorials/network-access/#tutorials","text":"Checking Transaction Finalization Reliable Event Reading Obtaining a Transaction's Revert Reason","title":"Tutorials"},{"location":"dev/tutorials/network-access/obtaining-revert-reason/","text":"Obtaining a Transaction's Revert Reason # Sometimes contract calls revert and throw a generic \"Transaction has been reverted\" exception which is not very helpful, since it does not contain the revert reason. In this case, simulating the call in the EVM without sending any transaction, using the .call() syntax, can provide the missing information, assuming the blockchain's state has not changed much between calls. The whole process is: Catch the exception, and check if the revert reason is part of the exception data. If not: Repeat the same contract call using .call() syntax and parse the revert reason. Note that the second step should be performed as soon as possible, to ensure that the chain has a similar state in both calls. The function below demonstrates this process. async function contractCall ( account , to , gas , gasPrice , fnToEncode , nonce ) { let tx = { from : account . address , to , gas , gasPrice , data : fnToEncode . encodeABI (), nonce }; let signedTx = await account . signTransaction ( tx ); try { return await web3 . eth . sendSignedTransaction ( signedTx . rawTransaction ); } catch ( e ) { if ( e . message . indexOf ( \"Transaction has been reverted by the EVM\" ) >= 0 ) { // This call should throw a new exception containing the revert reason await fnToEncode . call ({ from : account . address }); } // Otherwise, either revert reason was already part of the original error or // we failed to get any additional information. throw e ; } } Where account and fnToEncode are obtained, for example, as follows: let account = web3 . eth . accounts . privateKeyToAccount ( privateKey ); let fnToEncode = web3Contract . methods . someMethodOnContract ( param1 , param2 );","title":"Obtaining a Transaction's Revert Reason"},{"location":"dev/tutorials/network-access/obtaining-revert-reason/#obtaining-a-transactions-revert-reason","text":"Sometimes contract calls revert and throw a generic \"Transaction has been reverted\" exception which is not very helpful, since it does not contain the revert reason. In this case, simulating the call in the EVM without sending any transaction, using the .call() syntax, can provide the missing information, assuming the blockchain's state has not changed much between calls. The whole process is: Catch the exception, and check if the revert reason is part of the exception data. If not: Repeat the same contract call using .call() syntax and parse the revert reason. Note that the second step should be performed as soon as possible, to ensure that the chain has a similar state in both calls. The function below demonstrates this process. async function contractCall ( account , to , gas , gasPrice , fnToEncode , nonce ) { let tx = { from : account . address , to , gas , gasPrice , data : fnToEncode . encodeABI (), nonce }; let signedTx = await account . signTransaction ( tx ); try { return await web3 . eth . sendSignedTransaction ( signedTx . rawTransaction ); } catch ( e ) { if ( e . message . indexOf ( \"Transaction has been reverted by the EVM\" ) >= 0 ) { // This call should throw a new exception containing the revert reason await fnToEncode . call ({ from : account . address }); } // Otherwise, either revert reason was already part of the original error or // we failed to get any additional information. throw e ; } } Where account and fnToEncode are obtained, for example, as follows: let account = web3 . eth . accounts . privateKeyToAccount ( privateKey ); let fnToEncode = web3Contract . methods . someMethodOnContract ( param1 , param2 );","title":"Obtaining a Transaction's Revert Reason"},{"location":"dev/tutorials/network-access/reliable-event-reading/","text":"Reliable Event Reading # Subscription to events, for example using listeners, has proved to be unreliable, especially when high traffic exists on the network. To reliably read events it is recommended to use the getPastEvents function on web3 contracts. This function has parameters fromBlock and toBlock so the caller has to keep track of which blocks have already been requested. The number of blocks the user can request in a single RPC call depends on the configuration of the RPC node being used. In particular, if the node is run with the environment variable WEB3_API set to debug (a so-called \"full node\"), usually 100 blocks of events can be read in one call. On the other hand, if WEB3_API is set to enabled (a \"light node\") only 1 block of events can be read.","title":"Reliable Event Reading"},{"location":"dev/tutorials/network-access/reliable-event-reading/#reliable-event-reading","text":"Subscription to events, for example using listeners, has proved to be unreliable, especially when high traffic exists on the network. To reliably read events it is recommended to use the getPastEvents function on web3 contracts. This function has parameters fromBlock and toBlock so the caller has to keep track of which blocks have already been requested. The number of blocks the user can request in a single RPC call depends on the configuration of the RPC node being used. In particular, if the node is run with the environment variable WEB3_API set to debug (a so-called \"full node\"), usually 100 blocks of events can be read in one call. On the other hand, if WEB3_API is set to enabled (a \"light node\") only 1 block of events can be read.","title":"Reliable Event Reading"},{"location":"dev/tutorials/network-access/transaction-finalization/","text":"Checking Transaction Finalization # On Flare and Songbird, obtaining the receipt of a submitted transaction does not guarantee that the transaction is finalized. One has to wait until the sender's account nonce (the total number of sent transactions) increases. The following function shows how to send a signed transaction and wait for its finalization. The function polls the current nonce up to 8 times before giving up, using an exponential backoff. This means that the time spent between successive polls of the nonce is increased exponentially to avoid taxing the network too much. async function sendAndFinalize ( senderAddress , signedTx , delay = 1000 ) { let oldNonce = await web3 . eth . getTransactionCount ( senderAddress ); let receipt = await web3 . eth . sendSignedTransaction ( signedTx . rawTransaction ) let backoff = 1.5 ; let maxRetries = 8 ; while (( await web3 . eth . getTransactionCount ( senderAddress )) == oldNonce ) { await new Promise (( resolve ) => { setTimeout (()=>{ resolve ()}, delay )}) maxRetries -- ; if ( maxRetries == 0 ) { throw new Error ( \"Response timeout\" ); } delay = Math . floor ( delay * backoff ); } return receipt ; }","title":"Checking Transaction Finalization"},{"location":"dev/tutorials/network-access/transaction-finalization/#checking-transaction-finalization","text":"On Flare and Songbird, obtaining the receipt of a submitted transaction does not guarantee that the transaction is finalized. One has to wait until the sender's account nonce (the total number of sent transactions) increases. The following function shows how to send a signed transaction and wait for its finalization. The function polls the current nonce up to 8 times before giving up, using an exponential backoff. This means that the time spent between successive polls of the nonce is increased exponentially to avoid taxing the network too much. async function sendAndFinalize ( senderAddress , signedTx , delay = 1000 ) { let oldNonce = await web3 . eth . getTransactionCount ( senderAddress ); let receipt = await web3 . eth . sendSignedTransaction ( signedTx . rawTransaction ) let backoff = 1.5 ; let maxRetries = 8 ; while (( await web3 . eth . getTransactionCount ( senderAddress )) == oldNonce ) { await new Promise (( resolve ) => { setTimeout (()=>{ resolve ()}, delay )}) maxRetries -- ; if ( maxRetries == 0 ) { throw new Error ( \"Response timeout\" ); } delay = Math . floor ( delay * backoff ); } return receipt ; }","title":"Checking Transaction Finalization"},{"location":"exchange/","text":"Exchange Guides # This section contains information and bits of advice for Exchanges willing to support the Flare blockchain. The first thing you should know is that: Flare is used just like Ethereum! Even though the node code is different, Flare offers the same API as Ethereum so you can integrate with it in the same way. Deploy a Flare Observer node to access the network. Use the appropriate Chain ID . Use standard Ethereum libraries like web3.js if you want. Quick Information about Flare # Website address flare.network Brand assets Google Drive Rosetta API endpoint https://flare-rosetta-api.flare.network/ Node source code github.com/flare-foundation/flare Node installation documentation docs.flare.network/infra/observation/deploying Node requirements 8 CPU, 16 GB RAM, 2 TB disk space Maximum block rate 1 block/second. Token names FLARE , SONGBIRD Tickers FLR , SGB Tokens precision 18 decimal places Supported wallets docs.flare.network/user/wallets Network configuration information, including: Flare Networks Configuration Values RPC Nodes for Connected Chains Note The $FLR and $SGB tokens are not ERC-20 tokens: they are the native currency of Flare (the Main network ) and Songbird (The Canary network ) respectively. As such, these tokens are handled the same way $ETH is handled on the Ethereum blockchain. Select one of the topics below: Architecture of an Exchange Delegating on the User's Behalf Troubleshooting Guide","title":"Exchange Guides"},{"location":"exchange/#exchange-guides","text":"This section contains information and bits of advice for Exchanges willing to support the Flare blockchain. The first thing you should know is that: Flare is used just like Ethereum! Even though the node code is different, Flare offers the same API as Ethereum so you can integrate with it in the same way. Deploy a Flare Observer node to access the network. Use the appropriate Chain ID . Use standard Ethereum libraries like web3.js if you want.","title":"Exchange Guides"},{"location":"exchange/#quick-information-about-flare","text":"Website address flare.network Brand assets Google Drive Rosetta API endpoint https://flare-rosetta-api.flare.network/ Node source code github.com/flare-foundation/flare Node installation documentation docs.flare.network/infra/observation/deploying Node requirements 8 CPU, 16 GB RAM, 2 TB disk space Maximum block rate 1 block/second. Token names FLARE , SONGBIRD Tickers FLR , SGB Tokens precision 18 decimal places Supported wallets docs.flare.network/user/wallets Network configuration information, including: Flare Networks Configuration Values RPC Nodes for Connected Chains Note The $FLR and $SGB tokens are not ERC-20 tokens: they are the native currency of Flare (the Main network ) and Songbird (The Canary network ) respectively. As such, these tokens are handled the same way $ETH is handled on the Ethereum blockchain. Select one of the topics below: Architecture of an Exchange Delegating on the User's Behalf Troubleshooting Guide","title":"Quick Information about Flare"},{"location":"exchange/architecture/","text":"Architecture of an Exchange # What follows is the suggested architecture for a centralized Exchange. Even if your Exchange does not adopt this exact design, it defines the concepts that are used throughout the other pages in this section. General Structure # The suggested architecture uses a Central Exchange wallet with multiple User reception wallets controlled by the Exchange. General structure of an Exchange. Exchange's Central Wallet (Hot) # This account contains the Exchange's funds required to perform user operations: Users' deposits are ultimately routed here, and users' withdrawals are taken from here. The private keys to this account need to be on an online machine (the Exchange server ) so this is considered a hot wallet . For security reasons, it is recommended that the hot wallet only contains enough funds to perform daily operations, whereas the bulk of the funds are kept in the cold wallet . Exchange's Central Wallet (Cold) # The private keys to this account are kept in an offline machine so it is less vulnerable to attacks. Moreover, it is recommended that this is a multi-signature account so the approval of more than one administrator is required to move funds from it. Periodically (e.g., once a day) funds are transferred from or to the hot wallet so it can continue operating while the bulk of the funds are protected in the cold wallet. Users' Reception Wallets # When users sign up with the Exchange, a reception wallet is created for them in order to perform deposits. The reception wallets are usually empty: as soon as they receive funds these are transferred to the Exchange's hot wallet . The private keys to the reception wallets always remain under the Exchange's control; these wallets are offered to users as a convenience only. Users cannot perform any operation on these wallets other than deposits. User's Wallet # This is the origin of deposits made to the Exchange and the receiver of withdrawals made from the Exchange. It can be a wallet in control of the user (the user holds its private key), a custodial wallet or another Exchange, for example. Exchange Server # This is an online server, part of the Exchange's infrastructure, that receives withdrawal requests from users and monitors the reception wallets to detect incoming deposits. It holds the private keys to the hot wallet and to all the reception wallets so it can move funds from them in response to user's requests. Caution This server must be available 24/7 so it is a clear target for malicious actors. Balances DB # This database keeps track of every user's funds, since the actual tokens from all users are pooled together in the hot and cold wallets. The Exchange server updates this DB in response to user's deposits and withdrawals. Flare Observer Node # An observer node is a regular Flare node that does not partake in consensus but is still aware of the current state of the blockchain and allows submitting transactions. It is highly recommended that Exchanges deploy their own observer nodes to access the network, instead of relying on third-party services. Read the Deploying an Observer Node guide to learn how to do this. Detecting Deposits # The Exchange server must be continuously monitoring transfers into ALL reception wallets to detect incoming deposits. Here's a summary of the process: Depositing to an Exchange. The user deposits (transfers) funds to their assigned reception wallet . The transaction is detected by the Exchange server monitoring the wallets. The server can discover a new transaction as soon as it is submitted by subscribing to the pendingTransactions event. This allows showing the transaction as \"pending\" in the UI, but there is still a chance that it is reverted. To avoid problems, the Exchange should only act on transactions appearing on blocks old enough for the chance of them being reverted to be negligible. This can be done by subscribing to the newBlockHeaders event and examining the transactions in a previous block (for example, 5 blocks behind). The code below exemplifies this process ( See the web3.js documentation for the API details): // https://web3js.readthedocs.io const Web3 = require ( 'web3' ); // Use your own node URL // https://docs.flare.network/dev/reference/coston-testnet/ const web3 = new Web3 ( \"wss://coston-api.flare.network/ext/bc/C/ws\" ); // Use your receiving wallet address const receivingAddress = \"0x947c76694491d3fD67a73688003c4d36C8780A97\" ; web3 . eth . subscribe ( \"pendingTransactions\" ) . on ( \"data\" , async ( transactionHash ) => { // New transaction hash received. // Retrieve the actual transaction. let tx = await web3 . eth . getTransaction ( transactionHash ); // If it is directed to our address... if ( tx . to === receivingAddress ) { // Mark it as pending. console . log ( \"Transaction\" , tx . hash , \"is pending\" ); } }). on ( \"error\" , console . error ); web3 . eth . subscribe ( \"newBlockHeaders\" ) . on ( \"data\" , async ( blockHeader ) => { // New block has been produced. // Retrieve a block old enough to be considered confirmed. let block = await web3 . eth . getBlock ( blockHeader . number - 5 ); // Get all its transactions. block . transactions . forEach ( async ( transactionHash ) => { // Retrieve the actual transaction. let tx = await web3 . eth . getTransaction ( transactionHash ); // If it is directed to our address... if ( tx . to === receivingAddress ) { // Mark it as confirmed. console . log ( \"Transaction\" , tx . hash , \"is confirmed in block\" , block . number ); } }); }). on ( \"error\" , console . error ); Caution Note that all transactions from a block are retrieved simultaneously and this can easily trigger a rate limit on the node. A proper implementation should avoid this by serializing requests or managing the request rate manually . The server then checks the wallet address to find which user account it belongs to, and adds the received amount to the user's balance . The server announces a transaction to the network (through the Exchange's own observer node ) to move the received funds to the hot wallet . See a JavaScript example in the Ethereum documentation . Since you will be using your own node, you can skip the Alchemy part and directly use the web3 package as in the example above. The received funds are transferred to the hot wallet when the transaction is approved by the network. The reception wallets always remain empty. Performing Withdrawals # Users must request withdrawals directly to the Exchange server through its user interface . After checking that the user has the required balance, the funds are transferred from the Exchange's hot wallet directly to the user's wallet. Here's a summary of the process: Withdrawing from an Exchange. The user requests a withdrawal to the Exchange server . The request includes some kind of user ID, the requested amount and the destination wallet's address. The server checks that the user has the required balance to perform the withdrawal. The server announces a transaction to the network (through the Exchange's own observer node ) to move the requested funds from the hot wallet to the requested destination address. See a JavaScript example in the Ethereum documentation . Since you will be using your own node, you can skip the Alchemy part and directly use the web3 package as in the example above. Caution Please make sure you sign the transaction before submitting it, as shown in the example. Unsigned transactions are ignored by the network. The requested funds are transferred to the user's wallet when the transaction is approved by the network.","title":"Architecture of an Exchange"},{"location":"exchange/architecture/#architecture-of-an-exchange","text":"What follows is the suggested architecture for a centralized Exchange. Even if your Exchange does not adopt this exact design, it defines the concepts that are used throughout the other pages in this section.","title":"Architecture of an Exchange"},{"location":"exchange/architecture/#general-structure","text":"The suggested architecture uses a Central Exchange wallet with multiple User reception wallets controlled by the Exchange. General structure of an Exchange.","title":"General Structure"},{"location":"exchange/architecture/#exchanges-central-wallet-hot","text":"This account contains the Exchange's funds required to perform user operations: Users' deposits are ultimately routed here, and users' withdrawals are taken from here. The private keys to this account need to be on an online machine (the Exchange server ) so this is considered a hot wallet . For security reasons, it is recommended that the hot wallet only contains enough funds to perform daily operations, whereas the bulk of the funds are kept in the cold wallet .","title":"Exchange's Central Wallet (Hot)"},{"location":"exchange/architecture/#exchanges-central-wallet-cold","text":"The private keys to this account are kept in an offline machine so it is less vulnerable to attacks. Moreover, it is recommended that this is a multi-signature account so the approval of more than one administrator is required to move funds from it. Periodically (e.g., once a day) funds are transferred from or to the hot wallet so it can continue operating while the bulk of the funds are protected in the cold wallet.","title":"Exchange's Central Wallet (Cold)"},{"location":"exchange/architecture/#users-reception-wallets","text":"When users sign up with the Exchange, a reception wallet is created for them in order to perform deposits. The reception wallets are usually empty: as soon as they receive funds these are transferred to the Exchange's hot wallet . The private keys to the reception wallets always remain under the Exchange's control; these wallets are offered to users as a convenience only. Users cannot perform any operation on these wallets other than deposits.","title":"Users' Reception Wallets"},{"location":"exchange/architecture/#users-wallet","text":"This is the origin of deposits made to the Exchange and the receiver of withdrawals made from the Exchange. It can be a wallet in control of the user (the user holds its private key), a custodial wallet or another Exchange, for example.","title":"User's Wallet"},{"location":"exchange/architecture/#exchange-server","text":"This is an online server, part of the Exchange's infrastructure, that receives withdrawal requests from users and monitors the reception wallets to detect incoming deposits. It holds the private keys to the hot wallet and to all the reception wallets so it can move funds from them in response to user's requests. Caution This server must be available 24/7 so it is a clear target for malicious actors.","title":"Exchange Server"},{"location":"exchange/architecture/#balances-db","text":"This database keeps track of every user's funds, since the actual tokens from all users are pooled together in the hot and cold wallets. The Exchange server updates this DB in response to user's deposits and withdrawals.","title":"Balances DB"},{"location":"exchange/architecture/#flare-observer-node","text":"An observer node is a regular Flare node that does not partake in consensus but is still aware of the current state of the blockchain and allows submitting transactions. It is highly recommended that Exchanges deploy their own observer nodes to access the network, instead of relying on third-party services. Read the Deploying an Observer Node guide to learn how to do this.","title":"Flare Observer Node"},{"location":"exchange/architecture/#detecting-deposits","text":"The Exchange server must be continuously monitoring transfers into ALL reception wallets to detect incoming deposits. Here's a summary of the process: Depositing to an Exchange. The user deposits (transfers) funds to their assigned reception wallet . The transaction is detected by the Exchange server monitoring the wallets. The server can discover a new transaction as soon as it is submitted by subscribing to the pendingTransactions event. This allows showing the transaction as \"pending\" in the UI, but there is still a chance that it is reverted. To avoid problems, the Exchange should only act on transactions appearing on blocks old enough for the chance of them being reverted to be negligible. This can be done by subscribing to the newBlockHeaders event and examining the transactions in a previous block (for example, 5 blocks behind). The code below exemplifies this process ( See the web3.js documentation for the API details): // https://web3js.readthedocs.io const Web3 = require ( 'web3' ); // Use your own node URL // https://docs.flare.network/dev/reference/coston-testnet/ const web3 = new Web3 ( \"wss://coston-api.flare.network/ext/bc/C/ws\" ); // Use your receiving wallet address const receivingAddress = \"0x947c76694491d3fD67a73688003c4d36C8780A97\" ; web3 . eth . subscribe ( \"pendingTransactions\" ) . on ( \"data\" , async ( transactionHash ) => { // New transaction hash received. // Retrieve the actual transaction. let tx = await web3 . eth . getTransaction ( transactionHash ); // If it is directed to our address... if ( tx . to === receivingAddress ) { // Mark it as pending. console . log ( \"Transaction\" , tx . hash , \"is pending\" ); } }). on ( \"error\" , console . error ); web3 . eth . subscribe ( \"newBlockHeaders\" ) . on ( \"data\" , async ( blockHeader ) => { // New block has been produced. // Retrieve a block old enough to be considered confirmed. let block = await web3 . eth . getBlock ( blockHeader . number - 5 ); // Get all its transactions. block . transactions . forEach ( async ( transactionHash ) => { // Retrieve the actual transaction. let tx = await web3 . eth . getTransaction ( transactionHash ); // If it is directed to our address... if ( tx . to === receivingAddress ) { // Mark it as confirmed. console . log ( \"Transaction\" , tx . hash , \"is confirmed in block\" , block . number ); } }); }). on ( \"error\" , console . error ); Caution Note that all transactions from a block are retrieved simultaneously and this can easily trigger a rate limit on the node. A proper implementation should avoid this by serializing requests or managing the request rate manually . The server then checks the wallet address to find which user account it belongs to, and adds the received amount to the user's balance . The server announces a transaction to the network (through the Exchange's own observer node ) to move the received funds to the hot wallet . See a JavaScript example in the Ethereum documentation . Since you will be using your own node, you can skip the Alchemy part and directly use the web3 package as in the example above. The received funds are transferred to the hot wallet when the transaction is approved by the network. The reception wallets always remain empty.","title":"Detecting Deposits"},{"location":"exchange/architecture/#performing-withdrawals","text":"Users must request withdrawals directly to the Exchange server through its user interface . After checking that the user has the required balance, the funds are transferred from the Exchange's hot wallet directly to the user's wallet. Here's a summary of the process: Withdrawing from an Exchange. The user requests a withdrawal to the Exchange server . The request includes some kind of user ID, the requested amount and the destination wallet's address. The server checks that the user has the required balance to perform the withdrawal. The server announces a transaction to the network (through the Exchange's own observer node ) to move the requested funds from the hot wallet to the requested destination address. See a JavaScript example in the Ethereum documentation . Since you will be using your own node, you can skip the Alchemy part and directly use the web3 package as in the example above. Caution Please make sure you sign the transaction before submitting it, as shown in the example. Unsigned transactions are ignored by the network. The requested funds are transferred to the user's wallet when the transaction is approved by the network.","title":"Performing Withdrawals"},{"location":"exchange/delegation/","text":"Delegating on the User's Behalf # Delegation is one of the multiple ways in which the Flare blockchain rewards participants of the ecosystem. In particular, delegation allows token holders to put their stake behind an FTSO data provider to increase its relative weight (See the FTSO page for more information). In return, each time a data provider submits useful information it shares its reward with all the token holders that delegated to it . The Delegation Guide details this process for users. However, since Exchanges keep user's tokens, only Exchanges can perform delegation. If you are an Exchange and want to offer your users the ability to earn rewards by delegation, this page summarizes the process and explains how to perform it on the user's behalf. Introduction # Flare (and Songbird) accounts can delegate any percentage they choose of their tokens to one or two FTSO data providers . This limitation means that, if your Exchange keeps all users' tokens in a single wallet (as described in the Architecture of an Exchange page), you cannot give your users the option to select the data provider they want to delegate to: The wallet containing all tokens can only delegate to one (or two) data providers . Keeping this in mind, this page explains how to delegate the users' tokens and collect the rewards. Reward Epochs As shown later, several features of the delegation mechanism are timed in Reward Epochs . On Songbird, these epochs last 7 days and start every Saturday at around 8:40AM UTC . On Flare, they last 3.5 days and start roughly every Monday at 7:00 UTC and Thursday at 19:00 UTC . Selecting a Data Provider # It is the Exchange that must select the FTSO data provider upon which to delegate, so the first step is to choose the one you are most confident to provide consistently good data (and therefore higher rewards). Anyone can become an FTSO data provider, but only the ones that had the most voting power during the previous reward epoch are available for delegation. The list of available data providers for the current reward epoch can be retrieved from the VoterWhitelister smart contract, method getFtsoWhitelistedPriceProviders . There exist a number of websites like flaremetrics.io or ftso-signal-providers that display this information in a far more convenient way. Note Data providers take a fee before sharing their rewards with their delegators. An Exchange can decide to run its own data provider to avoid paying this fee to an external entity, at the cost of having to develop a good price prediction algorithm . Keep in mind that FTSO data providing is already a very competitive business, and only the most successful algorithms are being rewarded. Lastly, delegations can be changed at any time, but they are only taken into account once per reward epoch (See more details in the FTSO page). Therefore, depending on the time it is submitted, a new delegation will not take effect until the beginning of the next reward epoch, or the one after that . Furthermore, rewards cannot be collected until another reward epoch has elapsed . Delegation Process # See Manual Delegation and Claiming in the FTSO page.","title":"Delegating on the User's Behalf"},{"location":"exchange/delegation/#delegating-on-the-users-behalf","text":"Delegation is one of the multiple ways in which the Flare blockchain rewards participants of the ecosystem. In particular, delegation allows token holders to put their stake behind an FTSO data provider to increase its relative weight (See the FTSO page for more information). In return, each time a data provider submits useful information it shares its reward with all the token holders that delegated to it . The Delegation Guide details this process for users. However, since Exchanges keep user's tokens, only Exchanges can perform delegation. If you are an Exchange and want to offer your users the ability to earn rewards by delegation, this page summarizes the process and explains how to perform it on the user's behalf.","title":"Delegating on the User's Behalf"},{"location":"exchange/delegation/#introduction","text":"Flare (and Songbird) accounts can delegate any percentage they choose of their tokens to one or two FTSO data providers . This limitation means that, if your Exchange keeps all users' tokens in a single wallet (as described in the Architecture of an Exchange page), you cannot give your users the option to select the data provider they want to delegate to: The wallet containing all tokens can only delegate to one (or two) data providers . Keeping this in mind, this page explains how to delegate the users' tokens and collect the rewards. Reward Epochs As shown later, several features of the delegation mechanism are timed in Reward Epochs . On Songbird, these epochs last 7 days and start every Saturday at around 8:40AM UTC . On Flare, they last 3.5 days and start roughly every Monday at 7:00 UTC and Thursday at 19:00 UTC .","title":"Introduction"},{"location":"exchange/delegation/#selecting-a-data-provider","text":"It is the Exchange that must select the FTSO data provider upon which to delegate, so the first step is to choose the one you are most confident to provide consistently good data (and therefore higher rewards). Anyone can become an FTSO data provider, but only the ones that had the most voting power during the previous reward epoch are available for delegation. The list of available data providers for the current reward epoch can be retrieved from the VoterWhitelister smart contract, method getFtsoWhitelistedPriceProviders . There exist a number of websites like flaremetrics.io or ftso-signal-providers that display this information in a far more convenient way. Note Data providers take a fee before sharing their rewards with their delegators. An Exchange can decide to run its own data provider to avoid paying this fee to an external entity, at the cost of having to develop a good price prediction algorithm . Keep in mind that FTSO data providing is already a very competitive business, and only the most successful algorithms are being rewarded. Lastly, delegations can be changed at any time, but they are only taken into account once per reward epoch (See more details in the FTSO page). Therefore, depending on the time it is submitted, a new delegation will not take effect until the beginning of the next reward epoch, or the one after that . Furthermore, rewards cannot be collected until another reward epoch has elapsed .","title":"Selecting a Data Provider"},{"location":"exchange/delegation/#delegation-process","text":"See Manual Delegation and Claiming in the FTSO page.","title":"Delegation Process"},{"location":"exchange/troubleshooting/","text":"Troubleshooting Guide # This page contains links to other sections answering the most common support requests received when integrating with the Flare network. Regarding Node Deployment Regarding Delegation Regarding Reward Claiming","title":"Troubleshooting Guide"},{"location":"exchange/troubleshooting/#troubleshooting-guide","text":"This page contains links to other sections answering the most common support requests received when integrating with the Flare network. Regarding Node Deployment Regarding Delegation Regarding Reward Claiming","title":"Troubleshooting Guide"},{"location":"infra/","text":"Infrastructure Guides # This section contains step-by-step guides on how to deploy the different components that make up the Flare ecosystem, and be rewarded for it. Select one of the topics below: Becoming an Attestation Provider FTSO Data Providers Observer Nodes Validator Nodes","title":"Infrastructure Guides"},{"location":"infra/#infrastructure-guides","text":"This section contains step-by-step guides on how to deploy the different components that make up the Flare ecosystem, and be rewarded for it. Select one of the topics below: Becoming an Attestation Provider FTSO Data Providers Observer Nodes Validator Nodes","title":"Infrastructure Guides"},{"location":"infra/attestation/","text":"Attestation Providers # Select one of the topics below: Operating an Attestation Provider","title":"Attestation Providers"},{"location":"infra/attestation/#attestation-providers","text":"Select one of the topics below: Operating an Attestation Provider","title":"Attestation Providers"},{"location":"infra/attestation/operating/","text":"Operating an Attestation Provider # Anyone may operate an attestation provider without any capital requirement (see the attestation-client repository for deployment information), which can readily be used as a local provider on validators that trust it. To be included in the default set , though, the same operator must run one of the top-performing FTSO data providers to prove its commitment to the network's well-being. More details will be added soon.","title":"Operating an Attestation Provider"},{"location":"infra/attestation/operating/#operating-an-attestation-provider","text":"Anyone may operate an attestation provider without any capital requirement (see the attestation-client repository for deployment information), which can readily be used as a local provider on validators that trust it. To be included in the default set , though, the same operator must run one of the top-performing FTSO data providers to prove its commitment to the network's well-being. More details will be added soon.","title":"Operating an Attestation Provider"},{"location":"infra/data/","text":"FTSO Data Providers # Select one of the topics below: Operating a Data Provider Working with Whitelists Managing the Ecosystem","title":"FTSO Data Providers"},{"location":"infra/data/#ftso-data-providers","text":"Select one of the topics below: Operating a Data Provider Working with Whitelists Managing the Ecosystem","title":"FTSO Data Providers"},{"location":"infra/data/operating/","text":"Operating a Data Provider # Introduction # Quick links NPM Kickoff package Reference implementation Data providers play an essential role in the decentralized oracle system by submitting data to on-chain contracts deployed on the Flare and Songbird networks. Operating a data provider generates rewards in $FLR , $SGB , or both for you and the people who delegate tokens to you. To maximize your rewards, your data provider needs to be constantly available and operating. If your data provider is unavailable and doesn't send data during a specific epoch, you and your delegators won't earn rewards during that epoch. If all the submission and reveal transactions are successful, the cost is approximately 3 - 4 $FLR or $SGB per day. Data providers consist of the following code components, and you can write them in any language: FTSO interface : The code that submits data to the FTSO. This code is all the necessary logic to determine which data epoch you want to submit data in and to assess when and what to submit throughout all reward epochs. Data algorithm : The code that runs the algorithm that collects and processes data. The more efficient this code is the better advantage over competing data providers you will have. Consider these tips for maximizing your advantage . The rest of this guide explains how to deploy and operate a data provider. Prerequisites # While none of the listed prerequisites are required, you will be more successful if you have them before you try to deploy an FTSO data provider: Familiarity with smart contracts, signal processing, game theory, and prompt data submission on blockchains Experience with a coding language that has a web3 library, for example: Language Web3 Library Go go-web3 Java web3.j JavaScript ethers.js , web3.js Node.js ethers.js , web3.js Python web3.py Rust rust-web3 Getting Started # To start building your data provider, use the npm kick-off package . It showcases the main contracts related to whitelisting a data provider and submitting data, and it enables you to deploy FTSO mock contracts in a local setup and submit data to those contracts. Providing data by using this package is like providing data on-chain. The following aspects work identically in the package and on-chain: Smart-contract APIs Events Timing aspects in the package work similarly but not identically to timing aspects on-chain. The package does not run the weighted-median algorithm or do calculations to distribute rewards like the FTSO smart contract deployed on-chain does. The Flare Network price provider repository shows an example of a data-provider implementation. This implementation shows the FTSO interface and a sample data algorithm. To earn rewards, you must write your own data algorithm. Interacting with Smart Contracts # Data providers interact primarily with the PriceSubmitter contract and the different FTSO contracts. Other useful contracts are: FtsoRegistry : Holds information about specific FTSOs, their symbols, indices, and addresses. To see supported tickers, query the getSupportedSymbols method. New tickers can be added by a governance vote. FtsoManager : Holds epoch and voting-related configuration data, oversees all FTSOs, and gives access to additional useful contracts, such as the Inflation and Supply contracts. VoterWhitelister : Accepts the names of data providers that list themselves to submit data. Find these contract's addresses in the Contract Addresses page. Generating Random Numbers # The data-providing process is structured as a commit-and-reveal scheme to prevent users from copying another user's submitted data. The commit-and-reveal phases are restricted to only a few minutes in duration. With each reveal the data provider also provides a random number. The random number is used first as a salt in the commit-and-reveal scheme and later during the reward calculation process. Strong random numbers are important for network security because they are the only true source of randomness on the network, and they make the commit-and-reveal scheme resilient to attacks. Random numbers below 2 128 are considered weak and unsafe, and they are rejected when they are revealed. To provide strong, cryptographically secure, random numbers with high entropy and sufficient range, consider implementing the following strategies: Use available random-number generators, such as the csprng library for Node.js applications or the web3.utils.toBN(web3.utils.randomHex(32)) function in the web3.utils package for JavaScript. Submit 256-bit random numbers. Calculating Hash for the Commit-and-Reveal Scheme # The FTSO price provider shows the complete specification for the commit-and-reveal scheme. The following code snippets show how to generate hashes in Typescript and Python using publicly available web3 libraries: Typescript Python import BN from \"bn.js\" ; import { BigNumber } from \"ethers\" ; import { ethers } from \"hardhat\" ; const MIN_RANDOM = web3 . utils . toBN ( 2 ). pow ( web3 . utils . toBN ( 128 )); function submitHash ( ftsoIndices : ( number | BN | BigNumber )[], prices : ( number | BN | BigNumber )[], random : number | BN | BigNumber , address : string ) : string { return ethers . utils . keccak256 ( web3 . eth . abi . encodeParameters ( [ \"uint256[]\" , \"uint256[]\" , \"uint256\" , \"address\" ], [ ftsoIndices , prices , random , address ])); } const ftsoIndices = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const randoms = [ MIN_RANDOM , MIN_RANDOM . addn ( 5 ), MIN_RANDOM . addn ( 1059 ), MIN_RANDOM . addn ( 10682 ), MIN_RANDOM . addn ( 159726 ) ]; const prices = [ 0 , 1 , 2 , 3 , 5 , 10 , 50 , 100 , 101 , 10 ** 5 + 1 , 10 ** 8 ]; const addrs = [ accounts [ 10 ], accounts [ 11 ], accounts [ 12 ], accounts [ 13 ]]; console . log ( `Prices: ${ prices } ` ); for ( let addr of addrs ) { console . log ( `Address: ${ addr } ` ); for ( let random of randoms ) { console . log ( `\\tRandom: ${ random } ` ) const hash = submitHash ( ftsoIndices , prices , random , addr ); console . log ( `\\t\\t ${ hash } ` ); } } from typing import List from web3 import Web3 import eth_abi minimal_random = 2 ** 128 def submit_price_hash ( ftsoIndices : List [ int ], prices : List [ int ], random : int , address : str ) -> str : assert len ( ftsoIndices ) == len ( prices ) assert list ( sorted ( ftsoIndices )) == ftsoIndices and len ( set ( ftsoIndices ) ) == len ( ftsoIndices ), \"Indices are non increasing\" return Web3 . keccak ( eth_abi . encode_abi ( [ \"uint256[]\" , \"uint256[]\" , \"uint256\" , \"address\" ], [ ftsoIndices , prices , random , address ], ) ) . hex () def test_fun ( prices : List [ int ], random : int , address = \"0xD7de703D9BBC4602242D0f3149E5fFCD30Eb3ADF\" , ) -> List [ str ]: return submit_price_hash ( list ( range ( len ( prices ))), prices , random , address ) addrs = [ \"0xD7de703D9BBC4602242D0f3149E5fFCD30Eb3ADF\" , \"0xEa960515F8b4C237730F028cBAcF0a28E7F45dE0\" , \"0x3d91185a02774C70287F6c74Dd26d13DFB58ff16\" , ] prices = [ 0 , 1 , 2 , 3 , 5 , 10 , 50 , 100 , 101 , 10 ** 5 + 1 , 10 ** 8 ] randoms = [ min_random + r for r in [ 0 , 1 , 100 , 101 , 100000000000000000000 ] ] for addr in addrs : print ( f \"Address: { addr } \" ) for rand in randoms : print ( f \" Random: { rand } \" ) print ( \" hash:\" , test_fun ( prices , rand , addr )) print () Info To see sample code for calculating submit hashes using the web3.py library, see the hasher.py gist . Retrieving Information About Rewarded Data # Listen for PriceFinalized events, which contain information about calculated median data and rewarding bounds. Each FTSO emits these events. Managing Vote Power # To check your vote power in a specific vote power block, use the votePowerOfAt method in the WNat contract. To find the vote-power block of the current reward epoch, use the getCurrentRewardEpoch method in the FtsoManager contract. Then, use the getRewardEpochVotePowerBlock method in the same contract. Vote power delegated to you belongs to only you; you cannot redelegate it. To retrieve information about delegations you receive, listen to Delegate events because this information is not contained in any on-chain structure. Retrieving Price Epoch Information # Use the getPriceEpochConfiguration method in the FtsoManager contract to retrieve: When the first price epoch started, as a UNIX timestamp. The duration of every price epoch, in seconds. The duration of every reveal phase, in seconds. These numbers allow you to calculate the price epoch number from any timestamp. The duration of price epochs is fixed and can only change through a governance decision. Submitting Data On-Chain # After you feel comfortable running the local npm package, you can start submitting your data on the real network. To run on the real network, you need to: Gain vote power : You can whitelist yourself as a data provider only if you have enough vote power. Optimize your timing : Align with the on-chain time data. Because the network is decentralized, the on-chain timestamp might skew up to 30 - 40 seconds from the real-world time. To avoid missing commit-and-reveal periods, synchronize local time with global time through the Network Time Protocol (NTP) . The later you submit, the more time you have to gather data. However, if you submit too late, you might miss the epoch window. Find the balance that works best for you. Claim rewards : Ensure you regularly claim your rewards and wrap them to earn more vote power. Each FTSO emits a PriceFinalized event that contains information about calculated median data and rewarding bounds. Set the gas limit of your commit-and-reveal transactions to around 2'500'000 gwei so that you provide enough gas. Maximizing Your Data Algorithm's Performance # Use the following tips: Run your own observer node and submit all your data through it. This will allow you to more efficiently and securely operate your data provider. Gather your data directly from each source instead of using APIs provided by data aggregators. Write your own code instead of relying entirely on third-party code. Keep an open mind, and try new strategies to find your advantage over other data providers and keep it. If your submissions are reverted, ensure the node you submit them through is healthy and has enough peers, and review the above tips.","title":"Operating a Data Provider"},{"location":"infra/data/operating/#operating-a-data-provider","text":"","title":"Operating a Data Provider"},{"location":"infra/data/operating/#introduction","text":"Quick links NPM Kickoff package Reference implementation Data providers play an essential role in the decentralized oracle system by submitting data to on-chain contracts deployed on the Flare and Songbird networks. Operating a data provider generates rewards in $FLR , $SGB , or both for you and the people who delegate tokens to you. To maximize your rewards, your data provider needs to be constantly available and operating. If your data provider is unavailable and doesn't send data during a specific epoch, you and your delegators won't earn rewards during that epoch. If all the submission and reveal transactions are successful, the cost is approximately 3 - 4 $FLR or $SGB per day. Data providers consist of the following code components, and you can write them in any language: FTSO interface : The code that submits data to the FTSO. This code is all the necessary logic to determine which data epoch you want to submit data in and to assess when and what to submit throughout all reward epochs. Data algorithm : The code that runs the algorithm that collects and processes data. The more efficient this code is the better advantage over competing data providers you will have. Consider these tips for maximizing your advantage . The rest of this guide explains how to deploy and operate a data provider.","title":"Introduction"},{"location":"infra/data/operating/#prerequisites","text":"While none of the listed prerequisites are required, you will be more successful if you have them before you try to deploy an FTSO data provider: Familiarity with smart contracts, signal processing, game theory, and prompt data submission on blockchains Experience with a coding language that has a web3 library, for example: Language Web3 Library Go go-web3 Java web3.j JavaScript ethers.js , web3.js Node.js ethers.js , web3.js Python web3.py Rust rust-web3","title":"Prerequisites"},{"location":"infra/data/operating/#getting-started","text":"To start building your data provider, use the npm kick-off package . It showcases the main contracts related to whitelisting a data provider and submitting data, and it enables you to deploy FTSO mock contracts in a local setup and submit data to those contracts. Providing data by using this package is like providing data on-chain. The following aspects work identically in the package and on-chain: Smart-contract APIs Events Timing aspects in the package work similarly but not identically to timing aspects on-chain. The package does not run the weighted-median algorithm or do calculations to distribute rewards like the FTSO smart contract deployed on-chain does. The Flare Network price provider repository shows an example of a data-provider implementation. This implementation shows the FTSO interface and a sample data algorithm. To earn rewards, you must write your own data algorithm.","title":"Getting Started"},{"location":"infra/data/operating/#interacting-with-smart-contracts","text":"Data providers interact primarily with the PriceSubmitter contract and the different FTSO contracts. Other useful contracts are: FtsoRegistry : Holds information about specific FTSOs, their symbols, indices, and addresses. To see supported tickers, query the getSupportedSymbols method. New tickers can be added by a governance vote. FtsoManager : Holds epoch and voting-related configuration data, oversees all FTSOs, and gives access to additional useful contracts, such as the Inflation and Supply contracts. VoterWhitelister : Accepts the names of data providers that list themselves to submit data. Find these contract's addresses in the Contract Addresses page.","title":"Interacting with Smart Contracts"},{"location":"infra/data/operating/#generating-random-numbers","text":"The data-providing process is structured as a commit-and-reveal scheme to prevent users from copying another user's submitted data. The commit-and-reveal phases are restricted to only a few minutes in duration. With each reveal the data provider also provides a random number. The random number is used first as a salt in the commit-and-reveal scheme and later during the reward calculation process. Strong random numbers are important for network security because they are the only true source of randomness on the network, and they make the commit-and-reveal scheme resilient to attacks. Random numbers below 2 128 are considered weak and unsafe, and they are rejected when they are revealed. To provide strong, cryptographically secure, random numbers with high entropy and sufficient range, consider implementing the following strategies: Use available random-number generators, such as the csprng library for Node.js applications or the web3.utils.toBN(web3.utils.randomHex(32)) function in the web3.utils package for JavaScript. Submit 256-bit random numbers.","title":"Generating Random Numbers"},{"location":"infra/data/operating/#calculating-hash-for-the-commit-and-reveal-scheme","text":"The FTSO price provider shows the complete specification for the commit-and-reveal scheme. The following code snippets show how to generate hashes in Typescript and Python using publicly available web3 libraries: Typescript Python import BN from \"bn.js\" ; import { BigNumber } from \"ethers\" ; import { ethers } from \"hardhat\" ; const MIN_RANDOM = web3 . utils . toBN ( 2 ). pow ( web3 . utils . toBN ( 128 )); function submitHash ( ftsoIndices : ( number | BN | BigNumber )[], prices : ( number | BN | BigNumber )[], random : number | BN | BigNumber , address : string ) : string { return ethers . utils . keccak256 ( web3 . eth . abi . encodeParameters ( [ \"uint256[]\" , \"uint256[]\" , \"uint256\" , \"address\" ], [ ftsoIndices , prices , random , address ])); } const ftsoIndices = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const randoms = [ MIN_RANDOM , MIN_RANDOM . addn ( 5 ), MIN_RANDOM . addn ( 1059 ), MIN_RANDOM . addn ( 10682 ), MIN_RANDOM . addn ( 159726 ) ]; const prices = [ 0 , 1 , 2 , 3 , 5 , 10 , 50 , 100 , 101 , 10 ** 5 + 1 , 10 ** 8 ]; const addrs = [ accounts [ 10 ], accounts [ 11 ], accounts [ 12 ], accounts [ 13 ]]; console . log ( `Prices: ${ prices } ` ); for ( let addr of addrs ) { console . log ( `Address: ${ addr } ` ); for ( let random of randoms ) { console . log ( `\\tRandom: ${ random } ` ) const hash = submitHash ( ftsoIndices , prices , random , addr ); console . log ( `\\t\\t ${ hash } ` ); } } from typing import List from web3 import Web3 import eth_abi minimal_random = 2 ** 128 def submit_price_hash ( ftsoIndices : List [ int ], prices : List [ int ], random : int , address : str ) -> str : assert len ( ftsoIndices ) == len ( prices ) assert list ( sorted ( ftsoIndices )) == ftsoIndices and len ( set ( ftsoIndices ) ) == len ( ftsoIndices ), \"Indices are non increasing\" return Web3 . keccak ( eth_abi . encode_abi ( [ \"uint256[]\" , \"uint256[]\" , \"uint256\" , \"address\" ], [ ftsoIndices , prices , random , address ], ) ) . hex () def test_fun ( prices : List [ int ], random : int , address = \"0xD7de703D9BBC4602242D0f3149E5fFCD30Eb3ADF\" , ) -> List [ str ]: return submit_price_hash ( list ( range ( len ( prices ))), prices , random , address ) addrs = [ \"0xD7de703D9BBC4602242D0f3149E5fFCD30Eb3ADF\" , \"0xEa960515F8b4C237730F028cBAcF0a28E7F45dE0\" , \"0x3d91185a02774C70287F6c74Dd26d13DFB58ff16\" , ] prices = [ 0 , 1 , 2 , 3 , 5 , 10 , 50 , 100 , 101 , 10 ** 5 + 1 , 10 ** 8 ] randoms = [ min_random + r for r in [ 0 , 1 , 100 , 101 , 100000000000000000000 ] ] for addr in addrs : print ( f \"Address: { addr } \" ) for rand in randoms : print ( f \" Random: { rand } \" ) print ( \" hash:\" , test_fun ( prices , rand , addr )) print () Info To see sample code for calculating submit hashes using the web3.py library, see the hasher.py gist .","title":"Calculating Hash for the Commit-and-Reveal Scheme"},{"location":"infra/data/operating/#retrieving-information-about-rewarded-data","text":"Listen for PriceFinalized events, which contain information about calculated median data and rewarding bounds. Each FTSO emits these events.","title":"Retrieving Information About Rewarded Data"},{"location":"infra/data/operating/#managing-vote-power","text":"To check your vote power in a specific vote power block, use the votePowerOfAt method in the WNat contract. To find the vote-power block of the current reward epoch, use the getCurrentRewardEpoch method in the FtsoManager contract. Then, use the getRewardEpochVotePowerBlock method in the same contract. Vote power delegated to you belongs to only you; you cannot redelegate it. To retrieve information about delegations you receive, listen to Delegate events because this information is not contained in any on-chain structure.","title":"Managing Vote Power"},{"location":"infra/data/operating/#retrieving-price-epoch-information","text":"Use the getPriceEpochConfiguration method in the FtsoManager contract to retrieve: When the first price epoch started, as a UNIX timestamp. The duration of every price epoch, in seconds. The duration of every reveal phase, in seconds. These numbers allow you to calculate the price epoch number from any timestamp. The duration of price epochs is fixed and can only change through a governance decision.","title":"Retrieving Price Epoch Information"},{"location":"infra/data/operating/#submitting-data-on-chain","text":"After you feel comfortable running the local npm package, you can start submitting your data on the real network. To run on the real network, you need to: Gain vote power : You can whitelist yourself as a data provider only if you have enough vote power. Optimize your timing : Align with the on-chain time data. Because the network is decentralized, the on-chain timestamp might skew up to 30 - 40 seconds from the real-world time. To avoid missing commit-and-reveal periods, synchronize local time with global time through the Network Time Protocol (NTP) . The later you submit, the more time you have to gather data. However, if you submit too late, you might miss the epoch window. Find the balance that works best for you. Claim rewards : Ensure you regularly claim your rewards and wrap them to earn more vote power. Each FTSO emits a PriceFinalized event that contains information about calculated median data and rewarding bounds. Set the gas limit of your commit-and-reveal transactions to around 2'500'000 gwei so that you provide enough gas.","title":"Submitting Data On-Chain"},{"location":"infra/data/operating/#maximizing-your-data-algorithms-performance","text":"Use the following tips: Run your own observer node and submit all your data through it. This will allow you to more efficiently and securely operate your data provider. Gather your data directly from each source instead of using APIs provided by data aggregators. Write your own code instead of relying entirely on third-party code. Keep an open mind, and try new strategies to find your advantage over other data providers and keep it. If your submissions are reverted, ensure the node you submit them through is healthy and has enough peers, and review the above tips.","title":"Maximizing Your Data Algorithm's Performance"},{"location":"infra/data/whitelisting/","text":"Working with Whitelists # Introduction # To be a data provider, you must be whitelisted . Only the top 100 data providers with the most vote power per FTSO can submit data. No minimum amount of vote power is required. Per FTSO, a data provider's vote power is based on its balance of $WFLR or $WSGB . When a data provider tries to whitelist itself, its vote power is calculated by the vote-power block of the current reward epoch. Increased vote power on a different block will not enable your address to be whitelisted. Vote power is only read and whitelists updated once per reward epoch. Reward epochs start roughly on Saturdays at 8:40AM UTC on Songbird, and on Monday at 7:00 UTC and Thursday at 19:00 UTC on Flare. Whitelisting a data provider is a fully decentralized process facilitated by the VoterWhitelister contract. To retrieve this contract, see Contract Addresses . To be added to the whitelist, submit a request for your address by using one of the functions listed in the next section. When the whitelist is not full, your address is immediately added to it. If both the list is full and your vote power is greater than the data provider with the lowest vote power, your address replaces that data provider's address on the whitelist. If the number of spaces for data providers is ever reduced by governance, addresses will be removed from the whitelist one by one, beginning with the address with the lowest vote power. Events are emitted to notify providers about changes of their status on the whitelist. Once an address is delisted, submissions will also start reverting. Requesting to be Added to the Whitelist or Relisted # Use the following methods in the VoterWhitelister contract: requestWhitelistingVoter() : Requests whitelisting for a specific asset index. requestFullVoterWhitelisting() : Requests whitelisting for all assets. Ensure you have more delegations and vote power than the data provider that has the lowest amount before the vote power block is chosen and before you submit the request to be relisted. Reading Whitelists # Each FTSO contains an array of whitelisted addresses. Use the functions in the following contracts to determine whether you are on the list and eligible to submit data: VoterWhitelister contract The getFtsoWhitelistedPriceProviders function returns a list of addresses for all data providers on the whitelist. Specify the required index, run the query, and search for your address. PriceSubmitter contract The voterWhitelistBitmap function returns a bitmap corresponding to allowed FTSO indices in big-endian format. Specify your address, run the query and examine the returned bitmap. E.g., if you were allowed to submit prices for FTSOs with indices 0, 2 and 3, the returned bitmap would be 13 ( 1101 in binary). Monitoring Your Whitelist Status # When you are added to a whitelist, the VoterWhitelisted event is emitted from the VoterWhitelister contract. When you are removed from a whitelist, the VoterRemovedFromWhitelist event is emitted, and your subsequent submissions fail. To stay aware of your whitelist status, consider listening to events that notify you about additions and removals when they happen.","title":"Working with Whitelists"},{"location":"infra/data/whitelisting/#working-with-whitelists","text":"","title":"Working with Whitelists"},{"location":"infra/data/whitelisting/#introduction","text":"To be a data provider, you must be whitelisted . Only the top 100 data providers with the most vote power per FTSO can submit data. No minimum amount of vote power is required. Per FTSO, a data provider's vote power is based on its balance of $WFLR or $WSGB . When a data provider tries to whitelist itself, its vote power is calculated by the vote-power block of the current reward epoch. Increased vote power on a different block will not enable your address to be whitelisted. Vote power is only read and whitelists updated once per reward epoch. Reward epochs start roughly on Saturdays at 8:40AM UTC on Songbird, and on Monday at 7:00 UTC and Thursday at 19:00 UTC on Flare. Whitelisting a data provider is a fully decentralized process facilitated by the VoterWhitelister contract. To retrieve this contract, see Contract Addresses . To be added to the whitelist, submit a request for your address by using one of the functions listed in the next section. When the whitelist is not full, your address is immediately added to it. If both the list is full and your vote power is greater than the data provider with the lowest vote power, your address replaces that data provider's address on the whitelist. If the number of spaces for data providers is ever reduced by governance, addresses will be removed from the whitelist one by one, beginning with the address with the lowest vote power. Events are emitted to notify providers about changes of their status on the whitelist. Once an address is delisted, submissions will also start reverting.","title":"Introduction"},{"location":"infra/data/whitelisting/#requesting-to-be-added-to-the-whitelist-or-relisted","text":"Use the following methods in the VoterWhitelister contract: requestWhitelistingVoter() : Requests whitelisting for a specific asset index. requestFullVoterWhitelisting() : Requests whitelisting for all assets. Ensure you have more delegations and vote power than the data provider that has the lowest amount before the vote power block is chosen and before you submit the request to be relisted.","title":"Requesting to be Added to the Whitelist or Relisted"},{"location":"infra/data/whitelisting/#reading-whitelists","text":"Each FTSO contains an array of whitelisted addresses. Use the functions in the following contracts to determine whether you are on the list and eligible to submit data: VoterWhitelister contract The getFtsoWhitelistedPriceProviders function returns a list of addresses for all data providers on the whitelist. Specify the required index, run the query, and search for your address. PriceSubmitter contract The voterWhitelistBitmap function returns a bitmap corresponding to allowed FTSO indices in big-endian format. Specify your address, run the query and examine the returned bitmap. E.g., if you were allowed to submit prices for FTSOs with indices 0, 2 and 3, the returned bitmap would be 13 ( 1101 in binary).","title":"Reading Whitelists"},{"location":"infra/data/whitelisting/#monitoring-your-whitelist-status","text":"When you are added to a whitelist, the VoterWhitelisted event is emitted from the VoterWhitelister contract. When you are removed from a whitelist, the VoterRemovedFromWhitelist event is emitted, and your subsequent submissions fail. To stay aware of your whitelist status, consider listening to events that notify you about additions and removals when they happen.","title":"Monitoring Your Whitelist Status"},{"location":"infra/data/managing-ecosystem/","text":"Managing the Ecosystem # The following information explains how to manage the FTSO ecosystem by participating in the FTSO Management Group, as described in FIP.02 , which was accepted on March 6, 2023. To prevent malicious behaviors that impair the FTSO ecosystem, the FTSO Management Group reports possible infractions committed by FTSO data providers and determines whether to punish them . Punished data providers are chilled , which means they are removed from the whitelist , either temporarily or permanently, depending on the quantity of infractions they have committed. Any address can request to be a member of the group, but only upstanding FTSO data providers are accepted. As a security measure to be used only when absolutely necessary, the Flare Foundation reserves the right to add and remove members on its own accord. Management Process # The group adheres to the following management process . For complete details about each step in the process, click each hyperlink. Discuss possible infractions (section 2.2.1). Submit a chill proposal (section 2.2.2). Vote on the proposal (sections 2.2.2 - 2.2.4). Depending on the outcome of the vote, the provider might be chilled (section 2.3). Discussing Infractions # When you suspect a data provider is harming the ecosystem, you must discuss the malicious behavior with other group members in the Flare FTSO Self-Policing Forum to inform the FTSO community about the problem and gather the necessary quorum for a potential vote. It facilitates the decision about whether to submit a formal proposal to chill the attacker. The discussion is not binding. Retrieving the PollingFtso contract # The PollingFtso contract handles interactions such as managing group members, submitting proposals, voting, and more. The following procedure explains how to interact directly with this contract. However, if you prefer a simpler interface, the Flare community is developing front-ends to facilitate the interactions, such as Flaremetrics . Open a block explorer for the appropriate network. Follow the Retrieval from Blockchain procedure to find and open the PollingFtso contract. The Contract Address Details page is displayed. Optional: If you need to call a method in the Write tab, click the Write Contract tab, click Connect Wallet , and complete the steps to connect your wallet. After the PollingFtso contract is open in the explorer, you can complete operations to manage members and chill proposals. Managing Group Members # To be a member you need to be an upstanding data provider , which means: You have received FTSO rewards for the last 20 reward epochs. You have not been chilled in the last 20 reward epochs. You have not been removed from the group in the last week. After the PollingFtso contract is open in the explorer, you can do the following operations, among others. Adding Members # Anyone can request to become a member of the FTSO Management Group. In the Write tab, locate the addMember method, and click Write to call it. Follow the steps to complete the transaction in your wallet. Your request to be added to the group is submitted. If you meet the conditions of an upstanding data provider , you are automatically added to the group. Removing Members # Anyone can ask for a member of the FTSO Management Group to be removed. In the Write tab, locate the removeMember method, and specify a value for this parameter: _account(address) : The address of the member you want to remove from the group. Click Write to call the removeMember method. Follow the steps to complete the transaction in your wallet. Your request to remove a member from the group is submitted. If the member no longer meets the conditions of an upstanding data provider , the member is immediately removed. Managing Chill Proposals # After the PollingFtso contract is open in the explorer, you can do the following operations, among others. Submitting a Proposal # If you are a member of the FTSO Management Group or a member's proxy , you can submit a chill proposal. In the Write tab, locate the propose method, and specify values for these parameters: _description(string) : A free-form description of the problem to be voted on. It does not have a fixed structure, but it must contain at least the URL for the discussion in the forum (section 2.2.2.d) value(FLR or SGB) : The cost to call the propose method to submit the proposal, which you must specify as the value. The current cost is 100 $FLR or $SGB . Because this cost can fluctuate, retrieve the current cost by locating the proposalFeeValueWei method in the Read tab, which automatically displays the cost. Click Write to call the propose method. Follow the steps to complete the transaction in your wallet. Your proposal is submitted, and the proposalId is returned. Post the proposalId in the discussion thread so that members of the group can use it to vote on the proposal. Voting on a Proposal # You can vote on a proposal when the following conditions are met: You are a member of the FTSO Management Group or a member's proxy . The proposal is active. To vote on a proposal: In the Write tab, locate the castVote method, and specify values for these parameters: _proposalId(uint256) : The proposal ID posted by the proponent in the discussion thread. This ID was obtained by proponent when the proposal was submitted. If you specify nonexistent IDs or IDs for proposals that have completed, the transaction reverts, and the explorer returns empty results. _support(uint8) : Specify one of the following values. 0 : Vote against the proposal. 1 : Vote in favor of the proposal. If you specify values other than 0 or 1 , the transaction reverts. Click Write to call the castVote method. Follow the steps to complete the transaction in your wallet. Your vote is cast. Setting a Proxy Voter # If you are a member of the group, you can declare one address that can manage proposals and vote on them on your behalf. This address is known as your proxy. Your proxy can submit proposals and vote on them. In the Write tab, locate the setProxyVoter method, and specify the value for this parameter: _proxyVoter(address) : The address you want to declare as your proxy. Click Write to call the setProxyVoter method. Follow the steps to complete the transaction in your wallet. The specified address is set as your proxy voter. Removing a Proxy Voter # In the Write tab, locate the setProxyVoter method, and specify the value for this parameter: _proxyVoter(address) : Specify the zero address 0x0000000000000000000000000000000000000000 . Click Write to call the setProxyVoter method. Follow the steps to complete the transaction in your wallet. The previously specified proxy address is revoked. Determining Your Proxy Voter's Address # In the Read tab, locate the providerToProxy method, and specify the value for this parameter: (address) : The address that declared the proxy. Click Query to call the providerToProxy method. The address of the proxy voter is returned. Retrieving the Last Proposal # In the Read tab, locate the getLastProposal method. The number of the most recent proposal and its description are displayed. Retrieving a List of Group Members # In the Read tab, locate the getManagementGroupMembers method. A list of the addresses of members is displayed. Retrieving a Proposal Description # In the Read tab, locate the getProposalDescription method, and specify the value for this parameter: proposalId(uint256) : The ID of the proposal whose description you want. If you don't know the proposal ID, refer to the proposal's discussion thread. Click Query to call the getProposalDescription method. The description of the specified proposal ID is returned. If you specified a nonexistent ID for the proposalId parameter, an empty string is returned. Retrieving a Vote Count # In the Read tab, locate the getProposalVotes method, and specify the value for this parameter: proposalId(uint256) : The ID of the proposal whose vote count you want. Proposal IDs are posted in its corresponding discussion thread. Click Query to call the getProposalVotes method. The number of votes in favor of the proposal and the number of votes against it are returned. If you specified a nonexistent ID for the proposalId parameter, 0 is returned as the number of votes for the proposal and as the number of votes against it. Determining a Member's Vote Status # In the Read tab, locate the hasVoted method, and specify the value for these parameters: proposalId(uint256) : The ID of the proposal for which you want to determine a member's vote status. voter(address) : The address of the member. If you do not know the address, refer to the list of addresses for all group members . Click Query to call the hasVoted method. A boolean value indicating whether the member has voted is returned. If you specified a nonexistent ID for the proposalId parameter, false is returned. Related Guides # Exploring Collusion Monitoring Price History","title":"Managing the Ecosystem"},{"location":"infra/data/managing-ecosystem/#managing-the-ecosystem","text":"The following information explains how to manage the FTSO ecosystem by participating in the FTSO Management Group, as described in FIP.02 , which was accepted on March 6, 2023. To prevent malicious behaviors that impair the FTSO ecosystem, the FTSO Management Group reports possible infractions committed by FTSO data providers and determines whether to punish them . Punished data providers are chilled , which means they are removed from the whitelist , either temporarily or permanently, depending on the quantity of infractions they have committed. Any address can request to be a member of the group, but only upstanding FTSO data providers are accepted. As a security measure to be used only when absolutely necessary, the Flare Foundation reserves the right to add and remove members on its own accord.","title":"Managing the Ecosystem"},{"location":"infra/data/managing-ecosystem/#management-process","text":"The group adheres to the following management process . For complete details about each step in the process, click each hyperlink. Discuss possible infractions (section 2.2.1). Submit a chill proposal (section 2.2.2). Vote on the proposal (sections 2.2.2 - 2.2.4). Depending on the outcome of the vote, the provider might be chilled (section 2.3).","title":"Management Process"},{"location":"infra/data/managing-ecosystem/#discussing-infractions","text":"When you suspect a data provider is harming the ecosystem, you must discuss the malicious behavior with other group members in the Flare FTSO Self-Policing Forum to inform the FTSO community about the problem and gather the necessary quorum for a potential vote. It facilitates the decision about whether to submit a formal proposal to chill the attacker. The discussion is not binding.","title":"Discussing Infractions"},{"location":"infra/data/managing-ecosystem/#retrieving-the-pollingftso-contract","text":"The PollingFtso contract handles interactions such as managing group members, submitting proposals, voting, and more. The following procedure explains how to interact directly with this contract. However, if you prefer a simpler interface, the Flare community is developing front-ends to facilitate the interactions, such as Flaremetrics . Open a block explorer for the appropriate network. Follow the Retrieval from Blockchain procedure to find and open the PollingFtso contract. The Contract Address Details page is displayed. Optional: If you need to call a method in the Write tab, click the Write Contract tab, click Connect Wallet , and complete the steps to connect your wallet. After the PollingFtso contract is open in the explorer, you can complete operations to manage members and chill proposals.","title":"Retrieving the PollingFtso contract"},{"location":"infra/data/managing-ecosystem/#managing-group-members","text":"To be a member you need to be an upstanding data provider , which means: You have received FTSO rewards for the last 20 reward epochs. You have not been chilled in the last 20 reward epochs. You have not been removed from the group in the last week. After the PollingFtso contract is open in the explorer, you can do the following operations, among others.","title":"Managing Group Members"},{"location":"infra/data/managing-ecosystem/#adding-members","text":"Anyone can request to become a member of the FTSO Management Group. In the Write tab, locate the addMember method, and click Write to call it. Follow the steps to complete the transaction in your wallet. Your request to be added to the group is submitted. If you meet the conditions of an upstanding data provider , you are automatically added to the group.","title":"Adding Members"},{"location":"infra/data/managing-ecosystem/#removing-members","text":"Anyone can ask for a member of the FTSO Management Group to be removed. In the Write tab, locate the removeMember method, and specify a value for this parameter: _account(address) : The address of the member you want to remove from the group. Click Write to call the removeMember method. Follow the steps to complete the transaction in your wallet. Your request to remove a member from the group is submitted. If the member no longer meets the conditions of an upstanding data provider , the member is immediately removed.","title":"Removing Members"},{"location":"infra/data/managing-ecosystem/#managing-chill-proposals","text":"After the PollingFtso contract is open in the explorer, you can do the following operations, among others.","title":"Managing Chill Proposals"},{"location":"infra/data/managing-ecosystem/#submitting-a-proposal","text":"If you are a member of the FTSO Management Group or a member's proxy , you can submit a chill proposal. In the Write tab, locate the propose method, and specify values for these parameters: _description(string) : A free-form description of the problem to be voted on. It does not have a fixed structure, but it must contain at least the URL for the discussion in the forum (section 2.2.2.d) value(FLR or SGB) : The cost to call the propose method to submit the proposal, which you must specify as the value. The current cost is 100 $FLR or $SGB . Because this cost can fluctuate, retrieve the current cost by locating the proposalFeeValueWei method in the Read tab, which automatically displays the cost. Click Write to call the propose method. Follow the steps to complete the transaction in your wallet. Your proposal is submitted, and the proposalId is returned. Post the proposalId in the discussion thread so that members of the group can use it to vote on the proposal.","title":"Submitting a Proposal"},{"location":"infra/data/managing-ecosystem/#voting-on-a-proposal","text":"You can vote on a proposal when the following conditions are met: You are a member of the FTSO Management Group or a member's proxy . The proposal is active. To vote on a proposal: In the Write tab, locate the castVote method, and specify values for these parameters: _proposalId(uint256) : The proposal ID posted by the proponent in the discussion thread. This ID was obtained by proponent when the proposal was submitted. If you specify nonexistent IDs or IDs for proposals that have completed, the transaction reverts, and the explorer returns empty results. _support(uint8) : Specify one of the following values. 0 : Vote against the proposal. 1 : Vote in favor of the proposal. If you specify values other than 0 or 1 , the transaction reverts. Click Write to call the castVote method. Follow the steps to complete the transaction in your wallet. Your vote is cast.","title":"Voting on a Proposal"},{"location":"infra/data/managing-ecosystem/#setting-a-proxy-voter","text":"If you are a member of the group, you can declare one address that can manage proposals and vote on them on your behalf. This address is known as your proxy. Your proxy can submit proposals and vote on them. In the Write tab, locate the setProxyVoter method, and specify the value for this parameter: _proxyVoter(address) : The address you want to declare as your proxy. Click Write to call the setProxyVoter method. Follow the steps to complete the transaction in your wallet. The specified address is set as your proxy voter.","title":"Setting a Proxy Voter"},{"location":"infra/data/managing-ecosystem/#removing-a-proxy-voter","text":"In the Write tab, locate the setProxyVoter method, and specify the value for this parameter: _proxyVoter(address) : Specify the zero address 0x0000000000000000000000000000000000000000 . Click Write to call the setProxyVoter method. Follow the steps to complete the transaction in your wallet. The previously specified proxy address is revoked.","title":"Removing a Proxy Voter"},{"location":"infra/data/managing-ecosystem/#determining-your-proxy-voters-address","text":"In the Read tab, locate the providerToProxy method, and specify the value for this parameter: (address) : The address that declared the proxy. Click Query to call the providerToProxy method. The address of the proxy voter is returned.","title":"Determining Your Proxy Voter's Address"},{"location":"infra/data/managing-ecosystem/#retrieving-the-last-proposal","text":"In the Read tab, locate the getLastProposal method. The number of the most recent proposal and its description are displayed.","title":"Retrieving the Last Proposal"},{"location":"infra/data/managing-ecosystem/#retrieving-a-list-of-group-members","text":"In the Read tab, locate the getManagementGroupMembers method. A list of the addresses of members is displayed.","title":"Retrieving a List of Group Members"},{"location":"infra/data/managing-ecosystem/#retrieving-a-proposal-description","text":"In the Read tab, locate the getProposalDescription method, and specify the value for this parameter: proposalId(uint256) : The ID of the proposal whose description you want. If you don't know the proposal ID, refer to the proposal's discussion thread. Click Query to call the getProposalDescription method. The description of the specified proposal ID is returned. If you specified a nonexistent ID for the proposalId parameter, an empty string is returned.","title":"Retrieving a Proposal Description"},{"location":"infra/data/managing-ecosystem/#retrieving-a-vote-count","text":"In the Read tab, locate the getProposalVotes method, and specify the value for this parameter: proposalId(uint256) : The ID of the proposal whose vote count you want. Proposal IDs are posted in its corresponding discussion thread. Click Query to call the getProposalVotes method. The number of votes in favor of the proposal and the number of votes against it are returned. If you specified a nonexistent ID for the proposalId parameter, 0 is returned as the number of votes for the proposal and as the number of votes against it.","title":"Retrieving a Vote Count"},{"location":"infra/data/managing-ecosystem/#determining-a-members-vote-status","text":"In the Read tab, locate the hasVoted method, and specify the value for these parameters: proposalId(uint256) : The ID of the proposal for which you want to determine a member's vote status. voter(address) : The address of the member. If you do not know the address, refer to the list of addresses for all group members . Click Query to call the hasVoted method. A boolean value indicating whether the member has voted is returned. If you specified a nonexistent ID for the proposalId parameter, false is returned.","title":"Determining a Member's Vote Status"},{"location":"infra/data/managing-ecosystem/#related-guides","text":"Exploring Collusion Monitoring Price History","title":"Related Guides"},{"location":"infra/data/managing-ecosystem/exploring-collusion/","text":"Exploring Collusion # Members of the FTSO Management Group are responsible for monitoring the FTSO ecosystem for malicious behaviors, such as collusion. Collusion in the FTSO ecosystem is a problem for several reasons: It artificially raises the power of the colluding data providers, which endangers the quality of the FTSO data. It is specifically forbidden by FIP.02 . In a healthy ecosystem, submissions from data providers are chasing the median, and they are close to the reward band. Collusion is possibly evident in this environment when multiple data providers submit similar data that is relatively distant from the median. To explore possible collusion between data providers in the ecosystem, use the collusion tool in the Flare FTSO Monitor . Collusion Tool Dashboard # The following image shows the dashboard of the collusion tool : FTSO Monitor Collusion Tool. The elements of the collusion tool are: Threshold : Scans for the percentage of similarity that you want to see between the data providers for which you search. Details about how to specify the percentage are in step 2 of the procedure to identify data providers . Search : Locates data providers within the FTSO ecosystem. Details about how to specify names of data providers are in step 3 of the procedure to identify data providers . End time : Sets the date you want to view. Cluster map of data providers : Illustrates data providers that might be colluding by linking them with weighted connectors. The map is generated based on the data submitted during 00:00 - 24:00 UTC on the date you select in the End time field. Heavier weights suggest more potential for collusion than lighter weights. For example, the following image of part of the cluster map shows a pair of data providers weighted heavily enough to suggest a case of collusion. Heavily Weighted Data Providers. Identifying Colluding Data Providers # For exploratory purposes only Use this tool only for exploratory purposes. Do not exclusively rely on this tool to infer that collusion has occurred. Open the collusion tool in the FTSO Monitor . The collusion tool dashboard is displayed. In the Threshold field, specify the percentage of similarity you want to see. For example, if you specify .98 , 98% of the weakest similarities are omitted, and the strongest 2% of the similarities are displayed. Use one of the following search methods: If you know the names of the data providers you want to compare, specify them in a comma-separated series in the Search field. The field is case-sensitive and accepts partial names of providers. For example, if you specify FTSO , the tool selects all providers that have FTSO in their names, regardless of case. In the cluster map, locate data provider nodes linked with heavily weighted connectors by zooming in. Zoom in and out by using the appropriate method on your device, such as spinning a mouse wheel. After you zoom in, you can center a node or a group of them on the screen by clicking the map and dragging it. Select at least two providers you want to compare by pressing and holding the Control key while you click each data provider node. Optional: Explore a previous date by changing the End time option to a date other than the current date. Click Compare . As shown in the following image, the Prices tab opens, displaying a line graph that shows the data submitted by each specified data provider during the most recent 30-minute interval on the date you selected in the End time field. Price History. Comparing Price History # In the price history , analyze the data for multiple providers consistently submitting prices that are distant from the median but near each other. In your analysis, consider anomalous situations, such as an exchange going offline, a vast region of the internet becoming disconnected, or a stablecoin depegging from its reference asset. In these situations, submitted data from providers is expected to be wildly different. If multiple providers still manage to submit similar data, carefully examine them. Although a depegged stablecoin should not affect FTSO prices, because price pairs use USD instead of a stablecoin, prices have been affected in the past, and the evidence is noticeable in the line graph. This situation reveals data providers who were using a stablecoin instead of USD in their submissions. As shown in the image in each tab below, additional details about the data providers and the submitted data are provided beneath the price-history dashboard. The details on Songbird are different from the details on Flare because of the secondary reward band implemented by STP.02 . Use these details to more deeply explore the similarities between the data submitted by the providers you selected. Flare Songbird Details About Specified Data Providers. Address : The hexadecimal identifier of the data provider. The circle beside the address corresponds with the address in the graph. The correspondence between the circle and the address works for up to five addresses. Number of cases : The quantity of data samples during the specified interval. High : The percentage of samples above the reward band. Low : The percentage of samples below the reward band. Out : The total percentage of high combined with low. Border : The percentage of samples on the border of the reward band. Inner : The percentage of samples inside the reward band. Expected : The success rate of the data. The value is represented as a percentage and calculated by the formula Inner + 0.5(Border) . In the following image, the percentage of samples are color-coded in the following ways: IQR reward band : Interquartile range percentages are blue. Pct reward band : Percentage range percentages are red. Details About Specified Data Providers. Address : The hexadecimal identifier of the data provider. The circle beside the address corresponds with the address in the graph. The correspondence between the circle and the address works for up to five addresses. Number of cases : The quantity of data samples during the specified interval. High : The percentage of samples above the reward bands. Low : The percentage of samples below the reward bands. Out : The total percentage of high combined with low. Border : The percentage of samples on the borders of the reward bands. Inner : The percentage of samples inside the reward bands. Expected : The success rate of the data. The value is represented as a percentage and calculated by the formula Inner + 0.5(Border) . The Similarity Metric # This section describes the similarity metric used to obtain the cluster map . To estimate collusion, the similarity metric assigns a value of similarity between data submitted by pairs of data providers. As previously stated, collusion between data providers is evident when they submit similar data that is relatively distant from the median because similar algorithms will make similar mistakes. For data providers DP1 and DP2 during a given range of price epoch for comparison, the prices P1 and P2 submitted for each cryptocurrency pair and epoch are checked. If both prices are available alongside the median price M , the contribution to the collusion metric is calculated in the following way: diff = abs ( P2 - P1 ) diff1 = abs ( P1 - M ) diff2 = abs ( P2 - M ) relativePriceDiff = max ( diff / M , threshold ) relativeOffset = scale ( min ( diff1 , diff2 ) / M ) contribution = relativeOffset / relativePriceDiff where threshold = 0.00000001 scale ( x ) = 20000 x + 1 , if x < 0.0001 and 3 otherwise The threshold is selected to avoid a division by zero when the two providers submit exactly the same data, and scale displays the data more clearly.","title":"Exploring Collusion"},{"location":"infra/data/managing-ecosystem/exploring-collusion/#exploring-collusion","text":"Members of the FTSO Management Group are responsible for monitoring the FTSO ecosystem for malicious behaviors, such as collusion. Collusion in the FTSO ecosystem is a problem for several reasons: It artificially raises the power of the colluding data providers, which endangers the quality of the FTSO data. It is specifically forbidden by FIP.02 . In a healthy ecosystem, submissions from data providers are chasing the median, and they are close to the reward band. Collusion is possibly evident in this environment when multiple data providers submit similar data that is relatively distant from the median. To explore possible collusion between data providers in the ecosystem, use the collusion tool in the Flare FTSO Monitor .","title":"Exploring Collusion"},{"location":"infra/data/managing-ecosystem/exploring-collusion/#collusion-tool-dashboard","text":"The following image shows the dashboard of the collusion tool : FTSO Monitor Collusion Tool. The elements of the collusion tool are: Threshold : Scans for the percentage of similarity that you want to see between the data providers for which you search. Details about how to specify the percentage are in step 2 of the procedure to identify data providers . Search : Locates data providers within the FTSO ecosystem. Details about how to specify names of data providers are in step 3 of the procedure to identify data providers . End time : Sets the date you want to view. Cluster map of data providers : Illustrates data providers that might be colluding by linking them with weighted connectors. The map is generated based on the data submitted during 00:00 - 24:00 UTC on the date you select in the End time field. Heavier weights suggest more potential for collusion than lighter weights. For example, the following image of part of the cluster map shows a pair of data providers weighted heavily enough to suggest a case of collusion. Heavily Weighted Data Providers.","title":"Collusion Tool Dashboard"},{"location":"infra/data/managing-ecosystem/exploring-collusion/#identifying-colluding-data-providers","text":"For exploratory purposes only Use this tool only for exploratory purposes. Do not exclusively rely on this tool to infer that collusion has occurred. Open the collusion tool in the FTSO Monitor . The collusion tool dashboard is displayed. In the Threshold field, specify the percentage of similarity you want to see. For example, if you specify .98 , 98% of the weakest similarities are omitted, and the strongest 2% of the similarities are displayed. Use one of the following search methods: If you know the names of the data providers you want to compare, specify them in a comma-separated series in the Search field. The field is case-sensitive and accepts partial names of providers. For example, if you specify FTSO , the tool selects all providers that have FTSO in their names, regardless of case. In the cluster map, locate data provider nodes linked with heavily weighted connectors by zooming in. Zoom in and out by using the appropriate method on your device, such as spinning a mouse wheel. After you zoom in, you can center a node or a group of them on the screen by clicking the map and dragging it. Select at least two providers you want to compare by pressing and holding the Control key while you click each data provider node. Optional: Explore a previous date by changing the End time option to a date other than the current date. Click Compare . As shown in the following image, the Prices tab opens, displaying a line graph that shows the data submitted by each specified data provider during the most recent 30-minute interval on the date you selected in the End time field. Price History.","title":"Identifying Colluding Data Providers"},{"location":"infra/data/managing-ecosystem/exploring-collusion/#comparing-price-history","text":"In the price history , analyze the data for multiple providers consistently submitting prices that are distant from the median but near each other. In your analysis, consider anomalous situations, such as an exchange going offline, a vast region of the internet becoming disconnected, or a stablecoin depegging from its reference asset. In these situations, submitted data from providers is expected to be wildly different. If multiple providers still manage to submit similar data, carefully examine them. Although a depegged stablecoin should not affect FTSO prices, because price pairs use USD instead of a stablecoin, prices have been affected in the past, and the evidence is noticeable in the line graph. This situation reveals data providers who were using a stablecoin instead of USD in their submissions. As shown in the image in each tab below, additional details about the data providers and the submitted data are provided beneath the price-history dashboard. The details on Songbird are different from the details on Flare because of the secondary reward band implemented by STP.02 . Use these details to more deeply explore the similarities between the data submitted by the providers you selected. Flare Songbird Details About Specified Data Providers. Address : The hexadecimal identifier of the data provider. The circle beside the address corresponds with the address in the graph. The correspondence between the circle and the address works for up to five addresses. Number of cases : The quantity of data samples during the specified interval. High : The percentage of samples above the reward band. Low : The percentage of samples below the reward band. Out : The total percentage of high combined with low. Border : The percentage of samples on the border of the reward band. Inner : The percentage of samples inside the reward band. Expected : The success rate of the data. The value is represented as a percentage and calculated by the formula Inner + 0.5(Border) . In the following image, the percentage of samples are color-coded in the following ways: IQR reward band : Interquartile range percentages are blue. Pct reward band : Percentage range percentages are red. Details About Specified Data Providers. Address : The hexadecimal identifier of the data provider. The circle beside the address corresponds with the address in the graph. The correspondence between the circle and the address works for up to five addresses. Number of cases : The quantity of data samples during the specified interval. High : The percentage of samples above the reward bands. Low : The percentage of samples below the reward bands. Out : The total percentage of high combined with low. Border : The percentage of samples on the borders of the reward bands. Inner : The percentage of samples inside the reward bands. Expected : The success rate of the data. The value is represented as a percentage and calculated by the formula Inner + 0.5(Border) .","title":"Comparing Price History"},{"location":"infra/data/managing-ecosystem/exploring-collusion/#the-similarity-metric","text":"This section describes the similarity metric used to obtain the cluster map . To estimate collusion, the similarity metric assigns a value of similarity between data submitted by pairs of data providers. As previously stated, collusion between data providers is evident when they submit similar data that is relatively distant from the median because similar algorithms will make similar mistakes. For data providers DP1 and DP2 during a given range of price epoch for comparison, the prices P1 and P2 submitted for each cryptocurrency pair and epoch are checked. If both prices are available alongside the median price M , the contribution to the collusion metric is calculated in the following way: diff = abs ( P2 - P1 ) diff1 = abs ( P1 - M ) diff2 = abs ( P2 - M ) relativePriceDiff = max ( diff / M , threshold ) relativeOffset = scale ( min ( diff1 , diff2 ) / M ) contribution = relativeOffset / relativePriceDiff where threshold = 0.00000001 scale ( x ) = 20000 x + 1 , if x < 0.0001 and 3 otherwise The threshold is selected to avoid a division by zero when the two providers submit exactly the same data, and scale displays the data more clearly.","title":"The Similarity Metric"},{"location":"infra/data/managing-ecosystem/monitoring-price-history/","text":"Monitoring Price History # Work in Progress Some functions for monitoring price history are works in progress. In the FTSO system, price histories show the evolution of submitted and calculated prices over time on a line graph. The data plotted on the line graph enables you to study in detail the relationship between suspicious data providers, which you can first observe by using the collusion tool . The data on the graph includes: Median prices. Quantity of votes. This information helps you locate outage periods in which a large-enough number of providers failed to submit data to impact the graph. Reward bands. This information indicates the dispersion of the submitted values. Additionally, if the price history is displayed because you selected data providers by using the collusion tool , the graph includes submissions by those providers, enabling you to see: Whether a submission is inside or outside of the reward band and by how much. Whether multiple providers were chasing each other instead of the median, which could imply collusion. Price-History Dashboard # Price-History Dashboard. The elements of the dashboard are: Navigation Bar : The main functions of the Flare FTSO Monitor. Network Selector : Toggles between FTSO Monitors for other Flare networks. Line Graph : Displays the price history and the number of votes when you are not comparing specific data providers. Cryptocurrency Selector : Toggles between supported cryptocurrencies. Exchange Selector : Feature is currently not enabled. Date and Time Selector : Isolates the price history for the date and time you specify. View Selector : Toggles to relative view, which typically makes reward bands on the graph more apparent. Time Frame Slider : Changes the time frame displayed in the graph based on selections you make by moving the slider. Interval Selector : Toggles the interval during which you want to view price history. The default settings are: Cryptocurrency symbol : XRP Time frame : 30m End time : The current date and time when you opened the Prices tab. Comparing Price History # Open the price-history dashboard in the FTSO Monitor . The price-history dashboard, which is based on the default settings, is displayed. Optional: If you need to monitor the FTSO ecosystem on a different network, click the Network Selector , as shown in the price-history dashboard , and select a different network. For more specific comparisons, change the default settings by using the various elements in the dashboard to further express the data: Toggle the currencies and interval. Adjust the date and time. Add or remove from the graph some data, such as an address, a currency's median price, the voter count, and the award area. If the price-history dashboard opened because you compared data providers using the collusion tool, the list of data providers is also displayed below the dashboard.","title":"Monitoring Price History"},{"location":"infra/data/managing-ecosystem/monitoring-price-history/#monitoring-price-history","text":"Work in Progress Some functions for monitoring price history are works in progress. In the FTSO system, price histories show the evolution of submitted and calculated prices over time on a line graph. The data plotted on the line graph enables you to study in detail the relationship between suspicious data providers, which you can first observe by using the collusion tool . The data on the graph includes: Median prices. Quantity of votes. This information helps you locate outage periods in which a large-enough number of providers failed to submit data to impact the graph. Reward bands. This information indicates the dispersion of the submitted values. Additionally, if the price history is displayed because you selected data providers by using the collusion tool , the graph includes submissions by those providers, enabling you to see: Whether a submission is inside or outside of the reward band and by how much. Whether multiple providers were chasing each other instead of the median, which could imply collusion.","title":"Monitoring Price History"},{"location":"infra/data/managing-ecosystem/monitoring-price-history/#price-history-dashboard","text":"Price-History Dashboard. The elements of the dashboard are: Navigation Bar : The main functions of the Flare FTSO Monitor. Network Selector : Toggles between FTSO Monitors for other Flare networks. Line Graph : Displays the price history and the number of votes when you are not comparing specific data providers. Cryptocurrency Selector : Toggles between supported cryptocurrencies. Exchange Selector : Feature is currently not enabled. Date and Time Selector : Isolates the price history for the date and time you specify. View Selector : Toggles to relative view, which typically makes reward bands on the graph more apparent. Time Frame Slider : Changes the time frame displayed in the graph based on selections you make by moving the slider. Interval Selector : Toggles the interval during which you want to view price history. The default settings are: Cryptocurrency symbol : XRP Time frame : 30m End time : The current date and time when you opened the Prices tab.","title":"Price-History Dashboard"},{"location":"infra/data/managing-ecosystem/monitoring-price-history/#comparing-price-history","text":"Open the price-history dashboard in the FTSO Monitor . The price-history dashboard, which is based on the default settings, is displayed. Optional: If you need to monitor the FTSO ecosystem on a different network, click the Network Selector , as shown in the price-history dashboard , and select a different network. For more specific comparisons, change the default settings by using the various elements in the dashboard to further express the data: Toggle the currencies and interval. Adjust the date and time. Add or remove from the graph some data, such as an address, a currency's median price, the voter count, and the award area. If the price-history dashboard opened because you compared data providers using the collusion tool, the list of data providers is also displayed below the dashboard.","title":"Comparing Price History"},{"location":"infra/observation/","text":"Observer Nodes # Select one of the topics below: Deploying an Observer Node FAQ","title":"Observer Nodes"},{"location":"infra/observation/#observer-nodes","text":"Select one of the topics below: Deploying an Observer Node FAQ","title":"Observer Nodes"},{"location":"infra/observation/deploying/","text":"Deploying an Observer Node # Introduction # Observer nodes enable anyone to observe the network and submit transactions. Unlike validator nodes , which provide state consensus and add blocks, observer nodes remain outside the network and have no effect on consensus or blocks. Running an observer node is optional. However, submitting transactions through your own node offers a number of benefits: Transactions are sent directly to the network instead of through a third party, removing a potential security risk. Public nodes are usually rate-limited (the amount of requests they accept per second is restricted). Your own node does not have such restriction. The time savings described above allow FTSO data providers to submit their data a few seconds later, thus having more time to gather data before submitting. This guide explains how to deploy your own observer node so you can reap these benefits. Prerequisites # This guide contains different instructions depending on which Flare network you want to deploy to, so make sure you are aware of the available networks . Flare Songbird Coston Coston 2 Hardware Software CPU cores 8 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 32 GB Dependencies Go (>= 1.18.5) Disk space 1 TB SSD gcc Disk growth 2.5 TB/year g++ jq Hardware Software CPU cores 8 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 32 GB Dependencies Go (>= 1.16.8) Disk space 3.5 TB SSD gcc Disk growth 2.5 TB/year g++ jq Hardware Software CPU cores 4 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 16 GB Dependencies Go (>= 1.16.8) Disk space 500 GB SSD gcc Disk growth 250 GB/year g++ jq Hardware Software CPU cores 4 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 16 GB Dependencies Go (>= 1.18.5) Disk space 500 GB SSD gcc Disk growth 250 GB/year g++ jq Plus a reliable IPv4 or IPv6 network connection, with an open public port. Keep in mind that enabling pruning as described below can reduce the required disk space by as much as 60%. Guide # 1. Installation # Flare & Coston 2 Songbird & Coston Clone the go-flare repository and run the build.sh script: git clone https://github.com/flare-foundation/go-flare.git cd go-flare/avalanchego ./scripts/build.sh The resulting executable will be build/avalanchego . Note You can verify the installation by running: go test $( go list ./... | grep -v /tests/ ) # avalanchego unit tests cd ../coreth go test ./... # coreth unit tests cd ../avalanchego Clone the go-songbird repository and run the build.sh script: git clone https://github.com/flare-foundation/go-songbird.git cd go-songbird/avalanchego ./scripts/build.sh The resulting executable will be build/flare . Note You can verify the installation by running: go test $( go list ./... | grep -v /tests/ ) # avalanchego unit tests cd coreth go test ./... # coreth unit tests cd .. 2. Songbird Node Whitelisting # While Songbird network is being tested, all nodes wanting to peer with it (including observer nodes) need to have their IP address whitelisted . To do this, please contact Tom T. over Discord ( Tom T#7603 ), Telegram ( @TampaBay7 ) or email ( tom@flare.network ) and request to be whitelisted. Checking the status of your Songbird whitelisting request curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://songbird.flare.network/ext/info If your IP address is whitelisted, this command returns a JSON response. Otherwise you will get a 403 error (\"Forbidden\"). Please note that whitelisting is not needed on the Flare network or any of the Coston networks . 3. Run the Node # This is the minimum command to quickly get your node up and running. To understand each parameter read the following step before launching the node. Flare Songbird Coston Coston 2 ./build/avalanchego --network-id = flare --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://flare.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://flare.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" ./build/flare --network-id = songbird --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://songbird.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://songbird.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" ./build/flare --network-id = coston --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://coston.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://coston.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" ./build/avalanchego --network-id = costwo --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://coston2.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://coston2.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" After a lot of log messages the node should start synchronizing with the network, which might take a long time (currently about 4 hours for Flare, over a week for Songbird, depending on network speed and machine specs). You can stop the node at any time by pressing Ctrl-C . Use the same command line as before to restart the node. Synchronization will resume where it left if it is interrupted. You will know your node is fully booted and accepting transactions when the output of this command: curl http://127.0.0.1:9650/ext/health Contains the field \"healthy\":true in the returned JSON object. Note If the node gets stuck during bootstrap (it takes far longer than the estimates given above), try to add the parameter --bootstrap-retry-enabled=false . 4. Additional Configuration # These are some of the most relevant command line parameters you can use. You can read about all of them in the Avalanche documentation . --bootstrap-ips , --bootstrap-ids : IP address and node ID of the peer used to connect to the rest of the network for bootstrapping. You can use Flare's public nodes for this, as shown in the quick start command given above: Flare Songbird Coston Coston 2 Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://flare.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://flare.flare.network/ext/info | jq -r \".result.nodeID\" Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://songbird.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://songbird.flare.network/ext/info | jq -r \".result.nodeID\" Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://coston.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://coston.flare.network/ext/info | jq -r \".result.nodeID\" Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://coston2.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://coston2.flare.network/ext/info | jq -r \".result.nodeID\" Remember that you need to whitelist your node's IP address or your queries will always be answered with 403 error codes. --http-host : Use --http-host= (empty) to allow connections from other machines. Otherwise, only connections from localhost are accepted. --http-port : The port through which the node will listen to API requests. The default value is 9650 . --staking-port : The port through which the network peers will connect to this node externally. Having this port accessible from the internet is required for correct node operation. The default value is 9651 . --db-dir : Directory where the database is stored. Make sure to use a disk with enough space as recommended in the Hardware prerequisites section. It defaults to ~/.avalanchego/db on Flare and Coston 2, and to ~/.flare/db on Songbird and Coston. You can use this option to store the database on an external drive, for example. --chain-config-dir : Optional JSON configuration file, in case you want to use lots of non-default values. Sample configuration file for observer nodes These are the most common configuration options. Put them in a file in the {chain-config-dir}/C/config.json folder. { \"snowman-api-enabled\" : false , \"coreth-admin-api-enabled\" : false , \"eth-apis\" : [ \"public-eth\" , \"public-eth-filter\" , \"net\" , \"web3\" , \"internal-public-eth\" , \"internal-public-blockchain\" , \"internal-public-transaction-pool\" ], \"rpc-gas-cap\" : 50000000 , \"rpc-tx-fee-cap\" : 100 , \"pruning-enabled\" : true , \"local-txs-enabled\" : false , \"api-max-duration\" : 0 , \"api-max-blocks-per-request\" : 0 , \"allow-unfinalized-queries\" : false , \"allow-unprotected-txs\" : false , \"remote-tx-gossip-only-enabled\" : false , \"log-level\" : \"info\" } Archival nodes : An archival node keeps the whole history of the blockchain, instead of pruning old transactions which is the default setting. Use the pruning-enabled configuration setting to control whether your node performs pruning or not. Archival nodes have significantly increased disk requirements.","title":"Deploying an Observer Node"},{"location":"infra/observation/deploying/#deploying-an-observer-node","text":"","title":"Deploying an Observer Node"},{"location":"infra/observation/deploying/#introduction","text":"Observer nodes enable anyone to observe the network and submit transactions. Unlike validator nodes , which provide state consensus and add blocks, observer nodes remain outside the network and have no effect on consensus or blocks. Running an observer node is optional. However, submitting transactions through your own node offers a number of benefits: Transactions are sent directly to the network instead of through a third party, removing a potential security risk. Public nodes are usually rate-limited (the amount of requests they accept per second is restricted). Your own node does not have such restriction. The time savings described above allow FTSO data providers to submit their data a few seconds later, thus having more time to gather data before submitting. This guide explains how to deploy your own observer node so you can reap these benefits.","title":"Introduction"},{"location":"infra/observation/deploying/#prerequisites","text":"This guide contains different instructions depending on which Flare network you want to deploy to, so make sure you are aware of the available networks . Flare Songbird Coston Coston 2 Hardware Software CPU cores 8 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 32 GB Dependencies Go (>= 1.18.5) Disk space 1 TB SSD gcc Disk growth 2.5 TB/year g++ jq Hardware Software CPU cores 8 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 32 GB Dependencies Go (>= 1.16.8) Disk space 3.5 TB SSD gcc Disk growth 2.5 TB/year g++ jq Hardware Software CPU cores 4 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 16 GB Dependencies Go (>= 1.16.8) Disk space 500 GB SSD gcc Disk growth 250 GB/year g++ jq Hardware Software CPU cores 4 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 16 GB Dependencies Go (>= 1.18.5) Disk space 500 GB SSD gcc Disk growth 250 GB/year g++ jq Plus a reliable IPv4 or IPv6 network connection, with an open public port. Keep in mind that enabling pruning as described below can reduce the required disk space by as much as 60%.","title":"Prerequisites"},{"location":"infra/observation/deploying/#guide","text":"","title":"Guide"},{"location":"infra/observation/deploying/#1-installation","text":"Flare & Coston 2 Songbird & Coston Clone the go-flare repository and run the build.sh script: git clone https://github.com/flare-foundation/go-flare.git cd go-flare/avalanchego ./scripts/build.sh The resulting executable will be build/avalanchego . Note You can verify the installation by running: go test $( go list ./... | grep -v /tests/ ) # avalanchego unit tests cd ../coreth go test ./... # coreth unit tests cd ../avalanchego Clone the go-songbird repository and run the build.sh script: git clone https://github.com/flare-foundation/go-songbird.git cd go-songbird/avalanchego ./scripts/build.sh The resulting executable will be build/flare . Note You can verify the installation by running: go test $( go list ./... | grep -v /tests/ ) # avalanchego unit tests cd coreth go test ./... # coreth unit tests cd ..","title":"1. Installation"},{"location":"infra/observation/deploying/#2-songbird-node-whitelisting","text":"While Songbird network is being tested, all nodes wanting to peer with it (including observer nodes) need to have their IP address whitelisted . To do this, please contact Tom T. over Discord ( Tom T#7603 ), Telegram ( @TampaBay7 ) or email ( tom@flare.network ) and request to be whitelisted. Checking the status of your Songbird whitelisting request curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://songbird.flare.network/ext/info If your IP address is whitelisted, this command returns a JSON response. Otherwise you will get a 403 error (\"Forbidden\"). Please note that whitelisting is not needed on the Flare network or any of the Coston networks .","title":"2. Songbird Node Whitelisting"},{"location":"infra/observation/deploying/#3-run-the-node","text":"This is the minimum command to quickly get your node up and running. To understand each parameter read the following step before launching the node. Flare Songbird Coston Coston 2 ./build/avalanchego --network-id = flare --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://flare.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://flare.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" ./build/flare --network-id = songbird --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://songbird.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://songbird.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" ./build/flare --network-id = coston --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://coston.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://coston.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" ./build/avalanchego --network-id = costwo --http-host = \\ --bootstrap-ips = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' https://coston2.flare.network/ext/info \\ | jq -r \".result.ip\" ) \" \\ --bootstrap-ids = \" $( curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' https://coston2.flare.network/ext/info \\ | jq -r \".result.nodeID\" ) \" After a lot of log messages the node should start synchronizing with the network, which might take a long time (currently about 4 hours for Flare, over a week for Songbird, depending on network speed and machine specs). You can stop the node at any time by pressing Ctrl-C . Use the same command line as before to restart the node. Synchronization will resume where it left if it is interrupted. You will know your node is fully booted and accepting transactions when the output of this command: curl http://127.0.0.1:9650/ext/health Contains the field \"healthy\":true in the returned JSON object. Note If the node gets stuck during bootstrap (it takes far longer than the estimates given above), try to add the parameter --bootstrap-retry-enabled=false .","title":"3. Run the Node"},{"location":"infra/observation/deploying/#4-additional-configuration","text":"These are some of the most relevant command line parameters you can use. You can read about all of them in the Avalanche documentation . --bootstrap-ips , --bootstrap-ids : IP address and node ID of the peer used to connect to the rest of the network for bootstrapping. You can use Flare's public nodes for this, as shown in the quick start command given above: Flare Songbird Coston Coston 2 Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://flare.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://flare.flare.network/ext/info | jq -r \".result.nodeID\" Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://songbird.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://songbird.flare.network/ext/info | jq -r \".result.nodeID\" Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://coston.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://coston.flare.network/ext/info | jq -r \".result.nodeID\" Peer's IP address: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' \\ -H 'content-type:application/json;' \\ https://coston2.flare.network/ext/info | jq -r \".result.ip\" Peer's node ID: curl -m 10 -sX POST \\ --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' \\ -H 'content-type:application/json;' \\ https://coston2.flare.network/ext/info | jq -r \".result.nodeID\" Remember that you need to whitelist your node's IP address or your queries will always be answered with 403 error codes. --http-host : Use --http-host= (empty) to allow connections from other machines. Otherwise, only connections from localhost are accepted. --http-port : The port through which the node will listen to API requests. The default value is 9650 . --staking-port : The port through which the network peers will connect to this node externally. Having this port accessible from the internet is required for correct node operation. The default value is 9651 . --db-dir : Directory where the database is stored. Make sure to use a disk with enough space as recommended in the Hardware prerequisites section. It defaults to ~/.avalanchego/db on Flare and Coston 2, and to ~/.flare/db on Songbird and Coston. You can use this option to store the database on an external drive, for example. --chain-config-dir : Optional JSON configuration file, in case you want to use lots of non-default values. Sample configuration file for observer nodes These are the most common configuration options. Put them in a file in the {chain-config-dir}/C/config.json folder. { \"snowman-api-enabled\" : false , \"coreth-admin-api-enabled\" : false , \"eth-apis\" : [ \"public-eth\" , \"public-eth-filter\" , \"net\" , \"web3\" , \"internal-public-eth\" , \"internal-public-blockchain\" , \"internal-public-transaction-pool\" ], \"rpc-gas-cap\" : 50000000 , \"rpc-tx-fee-cap\" : 100 , \"pruning-enabled\" : true , \"local-txs-enabled\" : false , \"api-max-duration\" : 0 , \"api-max-blocks-per-request\" : 0 , \"allow-unfinalized-queries\" : false , \"allow-unprotected-txs\" : false , \"remote-tx-gossip-only-enabled\" : false , \"log-level\" : \"info\" } Archival nodes : An archival node keeps the whole history of the blockchain, instead of pruning old transactions which is the default setting. Use the pruning-enabled configuration setting to control whether your node performs pruning or not. Archival nodes have significantly increased disk requirements.","title":"4. Additional Configuration"},{"location":"infra/observation/faq/","text":"FAQ # Do I need to re-whitelist my peering node IP? # No, you do not need to re-whitelist the IP address. I want to have greater redundancy and would like to whitelist multiple nodes, can I do that? # Yes, you can whitelist multiple IPs per single provider. Can an unhealthy node cause my transactions to revert? # Yes, at times, not enough connected peers can cause your transactions to revert. Make sure your node state is healthy and that it has enough connected peers. How do I check the number of connected peers? # curl http://127.0.0.1:9650/ext/health | jq And look for the line containing connectedPeers . If you want to automate the process you can use: curl -s http://127.0.0.1:9650/ext/health | \\ jq -r \".checks.network.message.connectedPeers\" What is the required number of connected peers? # If the number of peers falls below 16, chances are your node will not work correctly. While the network is being decentralized, any number below 20 is indication of a problem. In any case, try restarting the node. The node does not sync after a long time and dies abruptly, what should I do? # Make sure, that the database location has sufficient disk space (database size might change a lot during bootstrapping). I am getting strange errors on submission and revert messages are cryptic # This might be a symptom of a node connection error. Try to restart the node and make sure you have enough disk space. I am getting a strange error related to GetAcceptedFrontier during bootstrapping # failed to send GetAcceptedFrontier(MtF8bVH241hetCQJgsKEdKyJBs8vhp1BC, 11111111111111111111111111111111LpoYY, NUMBER) It looks like your node got disconnected during bootstrapping. Try restarting the node. I have synced the node but it does not become healthy. What can I do? # It often happens that a new node gets synced but stays unhealthy for no apparent reason. A restart usually helps.","title":"FAQ"},{"location":"infra/observation/faq/#faq","text":"","title":"FAQ"},{"location":"infra/observation/faq/#do-i-need-to-re-whitelist-my-peering-node-ip","text":"No, you do not need to re-whitelist the IP address.","title":"Do I need to re-whitelist my peering node IP?"},{"location":"infra/observation/faq/#i-want-to-have-greater-redundancy-and-would-like-to-whitelist-multiple-nodes-can-i-do-that","text":"Yes, you can whitelist multiple IPs per single provider.","title":"I want to have greater redundancy and would like to whitelist multiple nodes, can I do that?"},{"location":"infra/observation/faq/#can-an-unhealthy-node-cause-my-transactions-to-revert","text":"Yes, at times, not enough connected peers can cause your transactions to revert. Make sure your node state is healthy and that it has enough connected peers.","title":"Can an unhealthy node cause my transactions to revert?"},{"location":"infra/observation/faq/#how-do-i-check-the-number-of-connected-peers","text":"curl http://127.0.0.1:9650/ext/health | jq And look for the line containing connectedPeers . If you want to automate the process you can use: curl -s http://127.0.0.1:9650/ext/health | \\ jq -r \".checks.network.message.connectedPeers\"","title":"How do I check the number of connected peers?"},{"location":"infra/observation/faq/#what-is-the-required-number-of-connected-peers","text":"If the number of peers falls below 16, chances are your node will not work correctly. While the network is being decentralized, any number below 20 is indication of a problem. In any case, try restarting the node.","title":"What is the required number of connected peers?"},{"location":"infra/observation/faq/#the-node-does-not-sync-after-a-long-time-and-dies-abruptly-what-should-i-do","text":"Make sure, that the database location has sufficient disk space (database size might change a lot during bootstrapping).","title":"The node does not sync after a long time and dies abruptly, what should I do?"},{"location":"infra/observation/faq/#i-am-getting-strange-errors-on-submission-and-revert-messages-are-cryptic","text":"This might be a symptom of a node connection error. Try to restart the node and make sure you have enough disk space.","title":"I am getting strange errors on submission and revert messages are cryptic"},{"location":"infra/observation/faq/#i-am-getting-a-strange-error-related-to-getacceptedfrontier-during-bootstrapping","text":"failed to send GetAcceptedFrontier(MtF8bVH241hetCQJgsKEdKyJBs8vhp1BC, 11111111111111111111111111111111LpoYY, NUMBER) It looks like your node got disconnected during bootstrapping. Try restarting the node.","title":"I am getting a strange error related to GetAcceptedFrontier during bootstrapping"},{"location":"infra/observation/faq/#i-have-synced-the-node-but-it-does-not-become-healthy-what-can-i-do","text":"It often happens that a new node gets synced but stays unhealthy for no apparent reason. A restart usually helps.","title":"I have synced the node but it does not become healthy. What can I do?"},{"location":"infra/validation/","text":"Validator Nodes # Select the topic below: Deploying a Validator Node","title":"Validator Nodes"},{"location":"infra/validation/#validator-nodes","text":"Select the topic below: Deploying a Validator Node","title":"Validator Nodes"},{"location":"infra/validation/deploying/","text":"Deploying a Validator Node # Introduction # As explained in the Validator Nodes page, these servers fulfill a critical role in securing the network: They check that all received transactions are valid. They run a consensus algorithm so that all validators in the network agree on the transactions to add to the blockchain. Finally, they add the agreed-upon transactions to their copy of the ledger . Additionally, all blockchains must employ measures against Sybil attacks and the Flare network is planning two such measures: Validators will need to stake native tokens, just like in regular Proof of Stake . Validators will also need to be FTSO Data Providers , and their performance in this role will have an impact on their validation rewards, leading to a meritocratic system. However, given the importance of the validator role and the novelty of the meritocratic approach, these measures are being implemented in phases: Implementation phases Phase 0 : Only validators with preregistered keys can be deployed. Some users will receive preregistered validator keys , this is, the keys required to launch a node which has already been registered as a validator . This is the only way to deploy a validator node during this phase. Phase 1 : Candidate FTSO validators. FTSO data providers that wish to become validators need to undergo a KYC process (Contact Tom T. over Discord ( Tom T#7603 ), Telegram ( @TampaBay7 ) or email ) and operate an Observer node . Random security scans will be performed on the node, and if all of them are successful (see Mandatory security measures below) validator rewards will be accrued. Validator rewards are split evenly among all candidate validators that passed the security scans. More phases will be added as the process is refined. Information affecting only specific phases is indicated in this guide with colored boxes like this one. This guide explains how to deploy your own validator node so you can participate in the consensus and collect the rewards that the network provides to those who help secure it. The following instructions apply to the Flare network only. Prerequisites # Validators run the same software as regular observer nodes , therefore, this guide assumes you have already read the Deploying an Observer Node guide. The requirements to deploy a validator node are the same as for observer nodes, except on the CPU and RAM front which are heavier due to the extra work required: Hardware Software CPU cores 16 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 64 GB Dependencies Go (>= 1.18.5) Disk space 1 TB SSD gcc Disk growth 2.5 TB/year g++ jq npm (>= 8.11) Guide # 1. Configure the Node # A validator node is deployed like an observer node, but there are some additional considerations. Firstly, validators do more work than plain observer nodes so please consider the recommended hardware specifications above. And secondly, validator security impacts the whole network. Please consider the following items carefully: Mandatory security measures # Ensure port 9650 is not externally reachable. This is the port used to answer API requests and validators should not be doing that. Disallow password authentication over SSH. Don't run any non-validator services on the same IP (website, mail server, etc). Warning A monitoring tool run by Flare periodically checks that the above measures are followed by all validators. Failure to comply impacts the validator's rewards. Phase 1 exemption To ease the deployment of candidate validators during phase 1 port 9650, used to answer API requests, might be left open. This allows running the candidate validator on the same machine currently running the observer node used to submit FTSO data. Suggested security measures # Disallow any ICMP traffic. Have the machine firewalled . Only the ports required for validator operation should be open (i.e. only the staking port, which defaults to 9651). If you use a virtual server, use only its web interface for management and close the SSH port. If the SSH port must be open, it should ideally be restricted to a private IP (i.e. only accessible through VPN) or only temporarily open to the operator's office/home static IP or a bastion SSH VM that can be turned off between use. The node should only act as a validator , and not accept RPC API calls. You should deploy a separate observer node for tasks requiring RPC API access. Additionally, this observer node can point to your validator for peering and bootstrapping. The validator should only enable the minimum set of EVM APIs by adding this line to a configuration file : \"eth-apis\" : [ \"web3\" ] Sample configuration file for validator nodes { \"snowman-api-enabled\" : false , \"coreth-admin-api-enabled\" : false , \"coreth-admin-api-dir\" : \"\" , \"eth-apis\" : [ \"web3\" ], \"continuous-profiler-dir\" : \"\" , \"continuous-profiler-frequency\" : 900000000000 , \"continuous-profiler-max-files\" : 5 , \"rpc-gas-cap\" : 50000000 , \"rpc-tx-fee-cap\" : 100 , \"preimages-enabled\" : false , \"pruning-enabled\" : false , \"snapshot-async\" : true , \"snapshot-verification-enabled\" : false , \"metrics-enabled\" : true , \"metrics-expensive-enabled\" : false , \"local-txs-enabled\" : false , \"api-max-duration\" : 30000000000 , \"ws-cpu-refill-rate\" : 0 , \"ws-cpu-max-stored\" : 0 , \"api-max-blocks-per-request\" : 30 , \"allow-unfinalized-queries\" : false , \"allow-unprotected-txs\" : false , \"keystore-directory\" : \"\" , \"keystore-external-signer\" : \"\" , \"keystore-insecure-unlock-allowed\" : false , \"remote-tx-gossip-only-enabled\" : false , \"tx-regossip-frequency\" : 60000000000 , \"tx-regossip-max-size\" : 15 , \"log-level\" : \"info\" , \"offline-pruning-enabled\" : false , \"offline-pruning-bloom-filter-size\" : 512 , \"offline-pruning-data-directory\" : \"\" } 2. Run the Node # After taking the above considerations into account, you can now start up your node by following the Deploying an Observation Node guide. Preregistered validator keys Some users have received preregistered validator keys , this is, the keys required to deploy a node which has already been registered as a validator. If that is your case, you just need to add these parameters to the launch command line: --staking-tls-cert-file = <NODE_CRT_PATH> \\ --staking-tls-key-file = <NODE_KEY_PATH>","title":"Deploying a Validator Node"},{"location":"infra/validation/deploying/#deploying-a-validator-node","text":"","title":"Deploying a Validator Node"},{"location":"infra/validation/deploying/#introduction","text":"As explained in the Validator Nodes page, these servers fulfill a critical role in securing the network: They check that all received transactions are valid. They run a consensus algorithm so that all validators in the network agree on the transactions to add to the blockchain. Finally, they add the agreed-upon transactions to their copy of the ledger . Additionally, all blockchains must employ measures against Sybil attacks and the Flare network is planning two such measures: Validators will need to stake native tokens, just like in regular Proof of Stake . Validators will also need to be FTSO Data Providers , and their performance in this role will have an impact on their validation rewards, leading to a meritocratic system. However, given the importance of the validator role and the novelty of the meritocratic approach, these measures are being implemented in phases: Implementation phases Phase 0 : Only validators with preregistered keys can be deployed. Some users will receive preregistered validator keys , this is, the keys required to launch a node which has already been registered as a validator . This is the only way to deploy a validator node during this phase. Phase 1 : Candidate FTSO validators. FTSO data providers that wish to become validators need to undergo a KYC process (Contact Tom T. over Discord ( Tom T#7603 ), Telegram ( @TampaBay7 ) or email ) and operate an Observer node . Random security scans will be performed on the node, and if all of them are successful (see Mandatory security measures below) validator rewards will be accrued. Validator rewards are split evenly among all candidate validators that passed the security scans. More phases will be added as the process is refined. Information affecting only specific phases is indicated in this guide with colored boxes like this one. This guide explains how to deploy your own validator node so you can participate in the consensus and collect the rewards that the network provides to those who help secure it. The following instructions apply to the Flare network only.","title":"Introduction"},{"location":"infra/validation/deploying/#prerequisites","text":"Validators run the same software as regular observer nodes , therefore, this guide assumes you have already read the Deploying an Observer Node guide. The requirements to deploy a validator node are the same as for observer nodes, except on the CPU and RAM front which are heavier due to the extra work required: Hardware Software CPU cores 16 Operating System Ubuntu (18.04 or 20.04) or macOS (>= 10.15 Catalina) RAM 64 GB Dependencies Go (>= 1.18.5) Disk space 1 TB SSD gcc Disk growth 2.5 TB/year g++ jq npm (>= 8.11)","title":"Prerequisites"},{"location":"infra/validation/deploying/#guide","text":"","title":"Guide"},{"location":"infra/validation/deploying/#1-configure-the-node","text":"A validator node is deployed like an observer node, but there are some additional considerations. Firstly, validators do more work than plain observer nodes so please consider the recommended hardware specifications above. And secondly, validator security impacts the whole network. Please consider the following items carefully:","title":"1. Configure the Node"},{"location":"infra/validation/deploying/#mandatory-security-measures","text":"Ensure port 9650 is not externally reachable. This is the port used to answer API requests and validators should not be doing that. Disallow password authentication over SSH. Don't run any non-validator services on the same IP (website, mail server, etc). Warning A monitoring tool run by Flare periodically checks that the above measures are followed by all validators. Failure to comply impacts the validator's rewards. Phase 1 exemption To ease the deployment of candidate validators during phase 1 port 9650, used to answer API requests, might be left open. This allows running the candidate validator on the same machine currently running the observer node used to submit FTSO data.","title":"Mandatory security measures"},{"location":"infra/validation/deploying/#suggested-security-measures","text":"Disallow any ICMP traffic. Have the machine firewalled . Only the ports required for validator operation should be open (i.e. only the staking port, which defaults to 9651). If you use a virtual server, use only its web interface for management and close the SSH port. If the SSH port must be open, it should ideally be restricted to a private IP (i.e. only accessible through VPN) or only temporarily open to the operator's office/home static IP or a bastion SSH VM that can be turned off between use. The node should only act as a validator , and not accept RPC API calls. You should deploy a separate observer node for tasks requiring RPC API access. Additionally, this observer node can point to your validator for peering and bootstrapping. The validator should only enable the minimum set of EVM APIs by adding this line to a configuration file : \"eth-apis\" : [ \"web3\" ] Sample configuration file for validator nodes { \"snowman-api-enabled\" : false , \"coreth-admin-api-enabled\" : false , \"coreth-admin-api-dir\" : \"\" , \"eth-apis\" : [ \"web3\" ], \"continuous-profiler-dir\" : \"\" , \"continuous-profiler-frequency\" : 900000000000 , \"continuous-profiler-max-files\" : 5 , \"rpc-gas-cap\" : 50000000 , \"rpc-tx-fee-cap\" : 100 , \"preimages-enabled\" : false , \"pruning-enabled\" : false , \"snapshot-async\" : true , \"snapshot-verification-enabled\" : false , \"metrics-enabled\" : true , \"metrics-expensive-enabled\" : false , \"local-txs-enabled\" : false , \"api-max-duration\" : 30000000000 , \"ws-cpu-refill-rate\" : 0 , \"ws-cpu-max-stored\" : 0 , \"api-max-blocks-per-request\" : 30 , \"allow-unfinalized-queries\" : false , \"allow-unprotected-txs\" : false , \"keystore-directory\" : \"\" , \"keystore-external-signer\" : \"\" , \"keystore-insecure-unlock-allowed\" : false , \"remote-tx-gossip-only-enabled\" : false , \"tx-regossip-frequency\" : 60000000000 , \"tx-regossip-max-size\" : 15 , \"log-level\" : \"info\" , \"offline-pruning-enabled\" : false , \"offline-pruning-bloom-filter-size\" : 512 , \"offline-pruning-data-directory\" : \"\" }","title":"Suggested security measures"},{"location":"infra/validation/deploying/#2-run-the-node","text":"After taking the above considerations into account, you can now start up your node by following the Deploying an Observation Node guide. Preregistered validator keys Some users have received preregistered validator keys , this is, the keys required to deploy a node which has already been registered as a validator. If that is your case, you just need to add these parameters to the launch command line: --staking-tls-cert-file = <NODE_CRT_PATH> \\ --staking-tls-key-file = <NODE_KEY_PATH>","title":"2. Run the Node"},{"location":"tech/","text":"Flare Fundamentals # This section contains in-depth descriptions of Flare's key concepts, technology and tools. Select one of the topics below: What Is Flare? Automatic Claiming The FlareDrop Flare Beta Flare API Portal FTSO Governance Personal Delegation Accounts State Connector Validator Nodes Glossary Archive","title":"Flare Fundamentals"},{"location":"tech/#flare-fundamentals","text":"This section contains in-depth descriptions of Flare's key concepts, technology and tools. Select one of the topics below: What Is Flare? Automatic Claiming The FlareDrop Flare Beta Flare API Portal FTSO Governance Personal Delegation Accounts State Connector Validator Nodes Glossary Archive","title":"Flare Fundamentals"},{"location":"tech/api-portal/","text":"Flare API Portal # Flare's API Portal is a paid product that gives developers access to a number of private nodes running on different blockchains, including Flare, Songbird and Coston , but also other networks like Bitcoin or XRPL. These nodes are not rate-limited , so it is typically more convenient to connect your apps to them than to deploy your own nodes, or connect to public nodes. This is one more step towards Flare's goal to connect all blockchains . Visit Flare's API Portal website Visit the API Portal's FAQ if you are having authentication issues!","title":"Flare API Portal"},{"location":"tech/api-portal/#flare-api-portal","text":"Flare's API Portal is a paid product that gives developers access to a number of private nodes running on different blockchains, including Flare, Songbird and Coston , but also other networks like Bitcoin or XRPL. These nodes are not rate-limited , so it is typically more convenient to connect your apps to them than to deploy your own nodes, or connect to public nodes. This is one more step towards Flare's goal to connect all blockchains . Visit Flare's API Portal website Visit the API Portal's FAQ if you are having authentication issues!","title":"Flare API Portal"},{"location":"tech/automatic-claiming/","text":"Automatic Claiming # Automatic claiming enables users to appoint an executor to claim rewards on their behalf. Introduction # The Flare network rewards users that contribute to it, for example, by delegating to an FTSO data provider . Delegation rewards accrue every 3.5 days when users have delegated wrapped Flare tokens (WFLR) to FTSO data providers. These rewards must be claimed periodically by users, since rewards expire after a few months. For users, claiming rewards can be inconvenient and can risk losing rewards and compound interest if overlooked. If users are claiming rewards from a cold wallet, they can expose the wallet more often than necessary. Instead, users can enlist the services of executors to claim for them, putting the responsibility of remembering to claim on the executor. Automatic claiming through an executor saves user time and inconvenience, optimizes the opportunity for compound interest, and avoids unnecessary exposure of users' cold wallets. Automatic claiming is secure because the executor cannot claim to any address but the ones the user provides. It is trustless (does not require trust) because it is managed by a smart contract, not the executor. For executors, automatic claiming is an opportunity to earn a fee for performing claiming as a service to users. How Automatic Claiming Works # Without an executor, users need to claim twice a week if they want to benefit from the rewards as soon as possible. The claiming process without an executor. With an executor, a third party can claim for users, for an optional fee. The claiming process with an executor. There are two ways to claim with an executor: manual and registered. They both provide \"automatic claiming\" for the user in the sense that claiming rewards requires no intervention from the user once the executor takes over. However, when the executor does not register, several parts of the process are not automated, such as finding each other and paying the fee. The \"manual\" version is less automated. The registered version is highly automated. Manual Claiming Process # If an executor account is not registered, claiming is said to be Manual . With Manual claiming users only need to provide the executor's address, which authorizes the executor to claim on the user's behalf. How the user discovers the executor's address and whether they will pay a service fee can only be settled off-chain. Example For example, executors could create a dapp where users pay a fee (in fiat or spot) and sign the transaction that sets the executor's address. Only reward claiming remains automated, whereby rewards are sent directly to the user's address. Executors do not receive a fee automatically. Here is how the process works when executor claiming is manual: Users who have accrued rewards and want an executor to claim on their behalf can identify an executor known to them off-chain. These users then make an off-chain agreement with the executor and they exchange addresses. Agreeing to a fee is optional and off-chain. If they do agree to a fee, they pay manually. Executors claim rewards for one or more users. Their fees are not automatically deducted from the claimed rewards. Executors notify users off-chain if they discontinue providing this service. Registered Claiming Process # On the other hand, the process can be simplified if the executor address is Registered . Registration allows accounts to list themselves on-chain as registered executors and post their service fees. Registration simplifies both the user task of finding a suitable executor and the executor's task, since its fee is automatically transferred when user rewards are claimed. The users pay a fee to set an executor to claim their rewards and their rewards are claimed automatically, i.e., without their intervention. With a registered executor, all agreements happen on-chain. Here is how the registered claiming process works, with applications performing these actions on behalf of executors and users: Executors who want to make themselves publicly available to users register as executors, paying a registration fee. The fee to register as an executor is burned. Registered executors post their fee for claiming rewards. Users who have accrued rewards and want an executor to claim on their behalf can choose from the list of registered executors. These users pay a setup fee to enable a registered executor to claim their rewards. The fee to enable a registered executor is sent to the executor. Executors claim rewards for one or more users, and their fees are automatically deducted from the claimed rewards. Executors notify users off-chain if they discontinue providing this service. Throughout the process: Users and executors can see reports on which addresses executors are claiming for and which executors are registered. Registered executors can change fees or unregister, and users can change the registered executors claiming on their behalf or disable automatic claiming. Other Use Cases # Cold Wallets # Many users claim from a cold wallet because they can reap the most rewards where they store the greatest share of their holdings. When they claim from a cold wallet, they are exposing it online. Setting an executor can protect the cold wallet, as the executor would claim the rewards and pass them on to the user's account automatically without putting the cold wallet online. Your Own Executor # If a user has multiple addresses, it may be convenient to designate one of their own addresses as an executor, and claim for all of them from it. Additionally, this avoids the fee that a public executor will typically charge. Warning By using the automatic claiming feature, neither Flare Foundation nor any of the contracts published on the Flare network guarantee that the selected executor will actually claim any or all of the user\u2019s rewards. This agreement is solely between the user and the selected executor. The Flare network offers only the possibility of setting up an automatic execution service and is not liable for any damages if this service is not performed. For more information, see FLARE TERMS OF SERVICE & PRIVACY POLICY . Developing autoclaiming functionality For information on how to develop an executor, or how to write an application that supports autoclaiming, see Automatic Claiming in the Developer section. Related User Guides # Automatic claiming Related Developer Docs # Automatic claiming","title":"Automatic Claiming"},{"location":"tech/automatic-claiming/#automatic-claiming","text":"Automatic claiming enables users to appoint an executor to claim rewards on their behalf.","title":"Automatic Claiming"},{"location":"tech/automatic-claiming/#introduction","text":"The Flare network rewards users that contribute to it, for example, by delegating to an FTSO data provider . Delegation rewards accrue every 3.5 days when users have delegated wrapped Flare tokens (WFLR) to FTSO data providers. These rewards must be claimed periodically by users, since rewards expire after a few months. For users, claiming rewards can be inconvenient and can risk losing rewards and compound interest if overlooked. If users are claiming rewards from a cold wallet, they can expose the wallet more often than necessary. Instead, users can enlist the services of executors to claim for them, putting the responsibility of remembering to claim on the executor. Automatic claiming through an executor saves user time and inconvenience, optimizes the opportunity for compound interest, and avoids unnecessary exposure of users' cold wallets. Automatic claiming is secure because the executor cannot claim to any address but the ones the user provides. It is trustless (does not require trust) because it is managed by a smart contract, not the executor. For executors, automatic claiming is an opportunity to earn a fee for performing claiming as a service to users.","title":"Introduction"},{"location":"tech/automatic-claiming/#how-automatic-claiming-works","text":"Without an executor, users need to claim twice a week if they want to benefit from the rewards as soon as possible. The claiming process without an executor. With an executor, a third party can claim for users, for an optional fee. The claiming process with an executor. There are two ways to claim with an executor: manual and registered. They both provide \"automatic claiming\" for the user in the sense that claiming rewards requires no intervention from the user once the executor takes over. However, when the executor does not register, several parts of the process are not automated, such as finding each other and paying the fee. The \"manual\" version is less automated. The registered version is highly automated.","title":"How Automatic Claiming Works"},{"location":"tech/automatic-claiming/#manual-claiming-process","text":"If an executor account is not registered, claiming is said to be Manual . With Manual claiming users only need to provide the executor's address, which authorizes the executor to claim on the user's behalf. How the user discovers the executor's address and whether they will pay a service fee can only be settled off-chain. Example For example, executors could create a dapp where users pay a fee (in fiat or spot) and sign the transaction that sets the executor's address. Only reward claiming remains automated, whereby rewards are sent directly to the user's address. Executors do not receive a fee automatically. Here is how the process works when executor claiming is manual: Users who have accrued rewards and want an executor to claim on their behalf can identify an executor known to them off-chain. These users then make an off-chain agreement with the executor and they exchange addresses. Agreeing to a fee is optional and off-chain. If they do agree to a fee, they pay manually. Executors claim rewards for one or more users. Their fees are not automatically deducted from the claimed rewards. Executors notify users off-chain if they discontinue providing this service.","title":"Manual Claiming Process"},{"location":"tech/automatic-claiming/#registered-claiming-process","text":"On the other hand, the process can be simplified if the executor address is Registered . Registration allows accounts to list themselves on-chain as registered executors and post their service fees. Registration simplifies both the user task of finding a suitable executor and the executor's task, since its fee is automatically transferred when user rewards are claimed. The users pay a fee to set an executor to claim their rewards and their rewards are claimed automatically, i.e., without their intervention. With a registered executor, all agreements happen on-chain. Here is how the registered claiming process works, with applications performing these actions on behalf of executors and users: Executors who want to make themselves publicly available to users register as executors, paying a registration fee. The fee to register as an executor is burned. Registered executors post their fee for claiming rewards. Users who have accrued rewards and want an executor to claim on their behalf can choose from the list of registered executors. These users pay a setup fee to enable a registered executor to claim their rewards. The fee to enable a registered executor is sent to the executor. Executors claim rewards for one or more users, and their fees are automatically deducted from the claimed rewards. Executors notify users off-chain if they discontinue providing this service. Throughout the process: Users and executors can see reports on which addresses executors are claiming for and which executors are registered. Registered executors can change fees or unregister, and users can change the registered executors claiming on their behalf or disable automatic claiming.","title":"Registered Claiming Process"},{"location":"tech/automatic-claiming/#other-use-cases","text":"","title":"Other Use Cases"},{"location":"tech/automatic-claiming/#cold-wallets","text":"Many users claim from a cold wallet because they can reap the most rewards where they store the greatest share of their holdings. When they claim from a cold wallet, they are exposing it online. Setting an executor can protect the cold wallet, as the executor would claim the rewards and pass them on to the user's account automatically without putting the cold wallet online.","title":"Cold Wallets"},{"location":"tech/automatic-claiming/#your-own-executor","text":"If a user has multiple addresses, it may be convenient to designate one of their own addresses as an executor, and claim for all of them from it. Additionally, this avoids the fee that a public executor will typically charge. Warning By using the automatic claiming feature, neither Flare Foundation nor any of the contracts published on the Flare network guarantee that the selected executor will actually claim any or all of the user\u2019s rewards. This agreement is solely between the user and the selected executor. The Flare network offers only the possibility of setting up an automatic execution service and is not liable for any damages if this service is not performed. For more information, see FLARE TERMS OF SERVICE & PRIVACY POLICY . Developing autoclaiming functionality For information on how to develop an executor, or how to write an application that supports autoclaiming, see Automatic Claiming in the Developer section.","title":"Your Own Executor"},{"location":"tech/automatic-claiming/#related-user-guides","text":"Automatic claiming","title":"Related User Guides"},{"location":"tech/automatic-claiming/#related-developer-docs","text":"Automatic claiming","title":"Related Developer Docs"},{"location":"tech/flare-beta/","text":"Flare Beta # Decentralization will be achieved by moving the transaction validation duty from the Flare Foundation to community-run FTSO data providers , but this will not happen instantly. Instead, to ensure a safe transition, a number of professional validators were initially enabled and continue to be employed. The professional validators were chosen among companies with proven experience running blockchain infrastructure and at first held most of the validation power . This power, though, will be progressively shifted onto the community-run validators until they run the network on their own. This initial period is called Flare Beta , and it will span several launch phases . Flare Beta Details # The Flare Beta began at the same time as the token distribution event (TDE). During this period: 20 total validators with equal validation power (20K FLR each, initially) are enabled. 4 run by the Flare Foundation. 16 run by 4 professional validators. Each FTSO running an observation node will be a candidate to become a validator node later. These nodes are regularly scanned to ensure they meet security standards. If they meet the security standards, they enable the node operators to receive rewards. Validator rewards are split 50% for the professional validators and 50% for the FTSOs running observation nodes. Estimated duration: 6 - 9 months, depending on the evolution of the network.","title":"Flare Beta"},{"location":"tech/flare-beta/#flare-beta","text":"Decentralization will be achieved by moving the transaction validation duty from the Flare Foundation to community-run FTSO data providers , but this will not happen instantly. Instead, to ensure a safe transition, a number of professional validators were initially enabled and continue to be employed. The professional validators were chosen among companies with proven experience running blockchain infrastructure and at first held most of the validation power . This power, though, will be progressively shifted onto the community-run validators until they run the network on their own. This initial period is called Flare Beta , and it will span several launch phases .","title":"Flare Beta"},{"location":"tech/flare-beta/#flare-beta-details","text":"The Flare Beta began at the same time as the token distribution event (TDE). During this period: 20 total validators with equal validation power (20K FLR each, initially) are enabled. 4 run by the Flare Foundation. 16 run by 4 professional validators. Each FTSO running an observation node will be a candidate to become a validator node later. These nodes are regularly scanned to ensure they meet security standards. If they meet the security standards, they enable the node operators to receive rewards. Validator rewards are split 50% for the professional validators and 50% for the FTSOs running observation nodes. Estimated duration: 6 - 9 months, depending on the evolution of the network.","title":"Flare Beta Details"},{"location":"tech/flare/","text":"What Is Flare? # Flare is the blockchain for data. It is a layer 1 , EVM smart contract platform designed to expand the utility of blockchain. Flare's aim is to provide data as a public good, meaning that data is not controlled by a centralized entity and is available to all. The infrastructure providers, which perform doubly as validators and data providers , enable two native oracles, the FTSO and the State Connector . This native processing provides developers on Flare with efficient access to large amounts of data and data proofs at minimal cost. By giving developers trustless access to the broadest range of data, Flare can advance the development of more blockchain use cases where data is important, such as in DeFi, gaming, NFT, music, and social networks. Flare Protocols # Flare has the following native data acquisition protocols at these stages of development: The Flare Time-Series Oracle (FTSO) provides continuous estimations of changing data, such as price pairs. The State Connector allows querying of verifiable, non-changing data from other chains and the internet. Flare LayerCake is being developed by Flare Labs to provide a decentralized, trustless bridging system between smart contract networks. For an overview of trustless bridges, see LayerCake . Developing on Flare # Flare developers can work in a familiar Ethereum-like environment. It offers the same API and uses the Ethereum Virtual Machine ( EVM ), so Ethereum's Solidity smart contracts can be used directly. Like Ethereum, Flare supports other assets, such as NFTs . See Developer Docs . The Flare native currency, $FLR , works the same as $ETH on the Ethereum blockchain. For those contracts that can only work with ERC-20 tokens, $FLR can be easily wrapped as $WFLR , which is an ERC-20 representation of $FLR . Flare's FTSO delegation and Flare governance are examples of such apps. Common blockchain tools like wallets , a token management portal , and block explorers are available on Flare. Flare is actively seeking developers eager to discover what new utility can be brought to the blockchain industry when acquiring data is possible in a decentralized way. To start, since Flare is EVM-compatible, you can migrate Ethereum smart-contract dapps to Flare. Then consider, for example, creating DeFi, gaming, NFT, music, or social network dapps. See Start Building , for more information. Flare Networks # Flare has 4 networks with different purposes: Flare is the main network , where $FLR is the native currency. Songbird is the canary network , where $SGB is the native currency. Created with users in mind, it is meant for testing features under \"real fire\" conditions, before deploying them on the main network. Coston is Songbird's public test network , created with developers in mind. Coston2 is Flare's public test network , created with developers in mind. General feature adoption flow. Flare Chains # Flare uses two chains and is developing a built-in interoperability mechanism between them. C-Chain: The contract chain that is used for smart contracts. It is where the Ethereum Virtual Machine operates, and is the chain where the vast bulk of the community currently interact. P-Chain: The platform chain that accommodates staking and provides rewards to its validators.","title":"What Is Flare?"},{"location":"tech/flare/#what-is-flare","text":"Flare is the blockchain for data. It is a layer 1 , EVM smart contract platform designed to expand the utility of blockchain. Flare's aim is to provide data as a public good, meaning that data is not controlled by a centralized entity and is available to all. The infrastructure providers, which perform doubly as validators and data providers , enable two native oracles, the FTSO and the State Connector . This native processing provides developers on Flare with efficient access to large amounts of data and data proofs at minimal cost. By giving developers trustless access to the broadest range of data, Flare can advance the development of more blockchain use cases where data is important, such as in DeFi, gaming, NFT, music, and social networks.","title":"What Is Flare?"},{"location":"tech/flare/#flare-protocols","text":"Flare has the following native data acquisition protocols at these stages of development: The Flare Time-Series Oracle (FTSO) provides continuous estimations of changing data, such as price pairs. The State Connector allows querying of verifiable, non-changing data from other chains and the internet. Flare LayerCake is being developed by Flare Labs to provide a decentralized, trustless bridging system between smart contract networks. For an overview of trustless bridges, see LayerCake .","title":"Flare Protocols"},{"location":"tech/flare/#developing-on-flare","text":"Flare developers can work in a familiar Ethereum-like environment. It offers the same API and uses the Ethereum Virtual Machine ( EVM ), so Ethereum's Solidity smart contracts can be used directly. Like Ethereum, Flare supports other assets, such as NFTs . See Developer Docs . The Flare native currency, $FLR , works the same as $ETH on the Ethereum blockchain. For those contracts that can only work with ERC-20 tokens, $FLR can be easily wrapped as $WFLR , which is an ERC-20 representation of $FLR . Flare's FTSO delegation and Flare governance are examples of such apps. Common blockchain tools like wallets , a token management portal , and block explorers are available on Flare. Flare is actively seeking developers eager to discover what new utility can be brought to the blockchain industry when acquiring data is possible in a decentralized way. To start, since Flare is EVM-compatible, you can migrate Ethereum smart-contract dapps to Flare. Then consider, for example, creating DeFi, gaming, NFT, music, or social network dapps. See Start Building , for more information.","title":"Developing on Flare"},{"location":"tech/flare/#flare-networks","text":"Flare has 4 networks with different purposes: Flare is the main network , where $FLR is the native currency. Songbird is the canary network , where $SGB is the native currency. Created with users in mind, it is meant for testing features under \"real fire\" conditions, before deploying them on the main network. Coston is Songbird's public test network , created with developers in mind. Coston2 is Flare's public test network , created with developers in mind. General feature adoption flow.","title":"Flare Networks"},{"location":"tech/flare/#flare-chains","text":"Flare uses two chains and is developing a built-in interoperability mechanism between them. C-Chain: The contract chain that is used for smart contracts. It is where the Ethereum Virtual Machine operates, and is the chain where the vast bulk of the community currently interact. P-Chain: The platform chain that accommodates staking and provides rewards to its validators.","title":"Flare Chains"},{"location":"tech/ftso/","text":"FTSO # The Flare Time Series Oracle (FTSO) is a smart contract running on the Flare network that provides continuous estimations for different types of data . It does so in a decentralized manner (no single party is in control of the process) and securely (it takes a lot of effort to disrupt the process). To achieve a secure, decentralized system, a set of independent data providers retrieves data from external sources, like centralized and decentralized exchanges, and supplies the data to the FTSO system. Then, this information is weighted according to each provider's vote power , and a median is calculated to produce the final estimate. Important When FTSOs were initially designed, they supported only cryptocurrency price pairs. Now, they support all types of data. However, contract names and methods still refer to prices and price epochs, and price pairs are used in the following information to show how FTSOs work. The following diagram shows how price pairs are submitted to and filtered by the FTSO system. FTSO summary. Data providers that supply useful information , such as price pairs that are not removed as outliers because they are too far away from the median value, are rewarded , and the resulting data estimates are finally published on-chain . The following information describes: The FTSO workflow How results are calculated Vote power Delegation Procedure Overview # Using price data as an example, the procedure in the following diagram runs continuously. It produces new data estimates during every price epoch , which is 3 minutes long . FTSO workflow. Any user with an account (address) on the Flare network can act as an FTSO data provider, submit data , and collect rewards . During each epoch, only submissions from the 100 data providers with the most vote power are considered. An account's vote power is based on its wrapped $FLR or $SGB balance and the delegations made to it (see Vote Power below). Submitted data must be the current price (in $USD ) for one or more of the supported price pairs, currently: $ADA , $ALGO , $ARB , $AVAX , $BNB , $BTC , $DOGE , $ETH , $FIL , $FLR , $LTC , $MATIC , $SOL , $USDC , $USDT , $XDC , $XLM , and $XRP . On Songbird, replace $FLR with $SGB . More general data types might be added in the future. FTSO data providers submit data in rounds in a commit-and-reveal process, so they cannot see each other's submissions until a round is over. This process is like submitting data in a closed envelope, and when the round is over, all envelopes are opened. During a 3-minute price epoch, providers fetch the information, run their algorithms, and submit a hash of the data ( commit ). Then, during the first half of the following price epoch ( 1.5 minutes ), providers submit the actual data ( reveal ). See technical details about the data-submission process in the developer reference section. The FTSO system calculates the resulting median , taking into account each provider's vote power (see How Results are Calculated below). Results are publicly available for 5 price epochs for any app or contract to read. Previous epochs can always be retrieved from an archival node. For each price epoch in which the submitted data is close enough to the median value, data providers and their delegators are rewarded . Rewards are accumulated in reward epochs , which last 3.5 days on the Flare network and 7 days on Songbird, and you can claim them after the epoch finishes. See Rewards below. How Results are Calculated # The following example uses price pairs to show the filtering process that turns all submitted data into a single estimate. See all details in the Flare whitepaper . FTSO price calculation. The contract in charge of each price pair calculates the resulting price for a price epoch using the submissions received from all data providers during that epoch. Price epochs are 3 minutes long. Each submission has a price and a weight . Weight is based on the data provider's vote power , as explained below. The weighted median of the prices is the resulting price for the price epoch. Submissions in the top and bottom 25% range are not rewarded . Vote Power # FTSO delegation weight calculation. As explained above, an FTSO data provider's submissions are weighted by its vote power . A data provider's vote power is proportional to the amount of wrapped Flare or Songbird tokens ( $WFLR or $WSGB ) it holds, plus any amount delegated to it . A data provider's influence is limited A vote-power cap limits the influence of individual data providers to 2.5% of the total vote power on both Flare and Songbird. Any vote power above this cap is ignored. If vote power exceeds the limit, consider delegating those $WFLR or $WSGB to a different data provider. A snapshot of each data provider's vote power is taken once per reward epoch, and the resulting weight is then used throughout the next reward epoch . The actual snapshot block is called the vote-power block , and it is randomly chosen from the last blocks of the previous epoch. On Flare, the vote-power block is randomly chosen from roughly the last 50% of the blocks, and on Songbird, it is randomly chosen from roughly the last 25%. The random selection only roughly corresponds to the last 50% or 25% of the time because block production times are not constant. Reward epochs The first reward epoch on Songbird started on Saturday, 18 September 2021 08:41:39 (GMT), 1631954499 in Unix time and repeats every 7 days. Therefore, all Songbird reward epochs start on Saturday morning (GMT) . The first reward epoch on Flare started on Thursday, 21 July 2022 19:00:05 (GMT), 1658430005 in Unix time and repeats every 3.5 days. Therefore, all Flare reward epochs start on Thursday evening (GMT) and Monday morning (GMT) . Delegation # If you hold $FLR or $SGB tokens, you can delegate them to an FTSO data provider to increase its vote power and earn a share of its rewards , resulting in a mutually beneficial arrangement . When you delegate your vote power, you not only earn rewards but also support reliable data providers, which strengthens the stability of the FTSO and the whole ecosystem. Before you can delegate your native $FLR and $SGB tokens, you must wrap these tokens into ERC-20 $WFLR and $WSGB tokens, an operation you can reverse at any time. After you wrap your tokens, you will have the vote power that is equivalent to the wrapped token balance, and you can delegate 100% of this vote power to 1 or 2 data providers. Delegating 100% of your vote power to reliable data providers committed to providing accurate data maximizes your rewards and enhances the stability of the ecosystem. The reward rate (for advanced users) As you explore data providers, consider the expected reward rate each one offers. The reward rate describes how many tokens were earned by a data provider during a reward epoch for every 100 tokens delegated. The reward rate is calculated as \\(total\\_reward / vote\\_power * (100 - fee)\\) , where: \\(total\\_reward\\) : All accumulated rewards for the data provider and its delegators in the reward epoch. \\(vote\\_power\\) : All the data provider's $WFLR and all the $WFLR delegated to it in the vote-power block selected for the reward epoch. \\(fee\\) : The amount kept by the data provider as compensation for the service it provides. The value is specified as a percentage. For example, if the data provider's fee is 21.3%, specify 21.3 to calculate the reward rate. Because rewards are distributed in units of $FLR , the reward rate is calculated in units of $FLR . For the duration of the delegation, you will earn rewards that are commensurate with vote power and the performance of the chosen data providers. Rewards accumulate, and they become claimable for each reward epoch that is finalized. Inflation is distributed to everyone who participates in the FTSO system, which includes data providers and entities that delegate their vote power to the data providers. Delegated tokens are not locked , meaning that they remain in the user's control and the delegation can be removed at any time. Any $WFLR or $WSGB that is newly wrapped, sent, or received will automatically update your actual delegated vote power. However, if you receive native tokens, you must wrap them before you contribute to existing delegations. Immediate Delegation Revocation # Sometimes, a data provider might maliciously attack the FTSO system to skew the reported data. If this type of attack occurs, the vote power of a data provider can be revoked immediately instead of in the next reward epoch. In this situation, an off-chain process, such as a Twitter storm, calls for users to revoke vote power from the data provider that has attacked the system. When vote power is revoked, the revocation occurs immediately. Learn how to perform this operation from the block explorer. Effects of the Vote-Power Block Snapshot on Delegations # The following table shows when new, changed, and revoked delegations take effect in relation to the vote-power block snapshot. Delegation Type Before or After Vote-Power Block Snapshot When Delegation Takes Effect New or changed Before In the next reward epoch After After the next reward epoch ends Revoked N/A Immediately Delegation Procedure # You can delegate your tokens using the Flare Portal , a supported wallet like Bifrost , or a dapp . Some FTSO data providers have already started providing these dapps as a convenience. Take a look at flaremetrics.io and pick the one you prefer. If you are an advanced user, you can delegate manually by interacting directly with the FTSO smart contracts. Rewards # A percentage of the annual network inflation is reserved to reward FTSO data providers and distributed uniformly among the year's reward epochs. The mechanism that distributes rewards to data providers consists of several bands: Primary reward band : This band rewards 50% of submitted data, weighted by vote power and centered around the median price . That is, the primary reward band fixes the rewarded vote power at 50%, which makes the width of the primary reward band in each epoch variable. Secondary reward band : This band rewards submitted data that falls within a fixed percentage around the calculated median . That is, the width of the secondary reward band is fixed, which makes the rewarded vote power in each epoch variable. Submitted data in each reward epoch belongs to one of the following: Primary reward band Primary and secondary reward band Neither reward band On Flare, reward epochs are 3.5 days. On Songbird, reward epochs are 7 days. In each reward epoch, rewards are distributed to providers whose submission falls within the primary or secondary reward bands. Because the secondary reward band is wider, it rewards more data providers than the primary band. However, submissions still must be close enough to the median to be included. If a submission falls within both bands, it receives both rewards because each reward band is independent. The secondary reward band receives 30% of all FTSO rewards, and the primary reward band receives the remaining 70%. As the FTSO system evolves, these reward percentages might be revised later, in accordance with an accepted proposal that requests changes to the secondary reward band. After the band rewards are distributed, each provider can take an optional, configurable fee , which is set to 20% by default, and distributes the rest of the reward among all contributors to its vote power , i.e., itself and all its delegators, according to the delegated amounts. If you delegated to a data provider, the amount of your rewards depends on multiple factors: The percentage of vote power you delegated The data providers to which you delegated your vote power The performance of those data providers The fee charged by those data providers Whether the total vote power of one or both of those data providers exceeded the vote power cap You can claim your rewards at the end of each reward epoch. You must claim your rewards within 90 days of their availability. After 90 days, unclaimed rewards on Flare are burned, and on Songbird, they are reallocated. Reward-Claiming Procedure # FTSO rewards are not automatically transferred to their recipients. Instead, the amounts are accumulated in a smart contract and must be claimed once the reward epoch is finished . You can claim your rewards using the Flare Portal , a supported wallet like Bifrost , or a dapp . Take a look at flaremetrics.io and pick the one you prefer. If you are an advanced user, you can claim manually by interacting directly with the FTSO smart contracts. To save on gas costs, rewards from multiple reward epochs are claimed simultaneously when you use the Portal. However, be aware that rewards expire after 90 days . Moreover, you probably want to claim soon, to redelegate the received amount and obtain compounded rewards. It is also worth noting that: Rewards are paid in the network's native currency. On Flare, the native token is $FLR , and on Songbird, the native token is $SGB . Data providers and their delegators must claim independently. Related User Guides # Managing delegations Managing rewards Wrapping tokens Related Infrastructure Guides # Operating a Data Provider Working with Whitelists Managing the Ecosystem Related Developer Docs # FTSO Reference FTSO Tutorials","title":"FTSO"},{"location":"tech/ftso/#ftso","text":"The Flare Time Series Oracle (FTSO) is a smart contract running on the Flare network that provides continuous estimations for different types of data . It does so in a decentralized manner (no single party is in control of the process) and securely (it takes a lot of effort to disrupt the process). To achieve a secure, decentralized system, a set of independent data providers retrieves data from external sources, like centralized and decentralized exchanges, and supplies the data to the FTSO system. Then, this information is weighted according to each provider's vote power , and a median is calculated to produce the final estimate. Important When FTSOs were initially designed, they supported only cryptocurrency price pairs. Now, they support all types of data. However, contract names and methods still refer to prices and price epochs, and price pairs are used in the following information to show how FTSOs work. The following diagram shows how price pairs are submitted to and filtered by the FTSO system. FTSO summary. Data providers that supply useful information , such as price pairs that are not removed as outliers because they are too far away from the median value, are rewarded , and the resulting data estimates are finally published on-chain . The following information describes: The FTSO workflow How results are calculated Vote power Delegation","title":"FTSO"},{"location":"tech/ftso/#procedure-overview","text":"Using price data as an example, the procedure in the following diagram runs continuously. It produces new data estimates during every price epoch , which is 3 minutes long . FTSO workflow. Any user with an account (address) on the Flare network can act as an FTSO data provider, submit data , and collect rewards . During each epoch, only submissions from the 100 data providers with the most vote power are considered. An account's vote power is based on its wrapped $FLR or $SGB balance and the delegations made to it (see Vote Power below). Submitted data must be the current price (in $USD ) for one or more of the supported price pairs, currently: $ADA , $ALGO , $ARB , $AVAX , $BNB , $BTC , $DOGE , $ETH , $FIL , $FLR , $LTC , $MATIC , $SOL , $USDC , $USDT , $XDC , $XLM , and $XRP . On Songbird, replace $FLR with $SGB . More general data types might be added in the future. FTSO data providers submit data in rounds in a commit-and-reveal process, so they cannot see each other's submissions until a round is over. This process is like submitting data in a closed envelope, and when the round is over, all envelopes are opened. During a 3-minute price epoch, providers fetch the information, run their algorithms, and submit a hash of the data ( commit ). Then, during the first half of the following price epoch ( 1.5 minutes ), providers submit the actual data ( reveal ). See technical details about the data-submission process in the developer reference section. The FTSO system calculates the resulting median , taking into account each provider's vote power (see How Results are Calculated below). Results are publicly available for 5 price epochs for any app or contract to read. Previous epochs can always be retrieved from an archival node. For each price epoch in which the submitted data is close enough to the median value, data providers and their delegators are rewarded . Rewards are accumulated in reward epochs , which last 3.5 days on the Flare network and 7 days on Songbird, and you can claim them after the epoch finishes. See Rewards below.","title":"Procedure Overview"},{"location":"tech/ftso/#how-results-are-calculated","text":"The following example uses price pairs to show the filtering process that turns all submitted data into a single estimate. See all details in the Flare whitepaper . FTSO price calculation. The contract in charge of each price pair calculates the resulting price for a price epoch using the submissions received from all data providers during that epoch. Price epochs are 3 minutes long. Each submission has a price and a weight . Weight is based on the data provider's vote power , as explained below. The weighted median of the prices is the resulting price for the price epoch. Submissions in the top and bottom 25% range are not rewarded .","title":"How Results are Calculated"},{"location":"tech/ftso/#vote-power","text":"FTSO delegation weight calculation. As explained above, an FTSO data provider's submissions are weighted by its vote power . A data provider's vote power is proportional to the amount of wrapped Flare or Songbird tokens ( $WFLR or $WSGB ) it holds, plus any amount delegated to it . A data provider's influence is limited A vote-power cap limits the influence of individual data providers to 2.5% of the total vote power on both Flare and Songbird. Any vote power above this cap is ignored. If vote power exceeds the limit, consider delegating those $WFLR or $WSGB to a different data provider. A snapshot of each data provider's vote power is taken once per reward epoch, and the resulting weight is then used throughout the next reward epoch . The actual snapshot block is called the vote-power block , and it is randomly chosen from the last blocks of the previous epoch. On Flare, the vote-power block is randomly chosen from roughly the last 50% of the blocks, and on Songbird, it is randomly chosen from roughly the last 25%. The random selection only roughly corresponds to the last 50% or 25% of the time because block production times are not constant. Reward epochs The first reward epoch on Songbird started on Saturday, 18 September 2021 08:41:39 (GMT), 1631954499 in Unix time and repeats every 7 days. Therefore, all Songbird reward epochs start on Saturday morning (GMT) . The first reward epoch on Flare started on Thursday, 21 July 2022 19:00:05 (GMT), 1658430005 in Unix time and repeats every 3.5 days. Therefore, all Flare reward epochs start on Thursday evening (GMT) and Monday morning (GMT) .","title":"Vote Power"},{"location":"tech/ftso/#delegation","text":"If you hold $FLR or $SGB tokens, you can delegate them to an FTSO data provider to increase its vote power and earn a share of its rewards , resulting in a mutually beneficial arrangement . When you delegate your vote power, you not only earn rewards but also support reliable data providers, which strengthens the stability of the FTSO and the whole ecosystem. Before you can delegate your native $FLR and $SGB tokens, you must wrap these tokens into ERC-20 $WFLR and $WSGB tokens, an operation you can reverse at any time. After you wrap your tokens, you will have the vote power that is equivalent to the wrapped token balance, and you can delegate 100% of this vote power to 1 or 2 data providers. Delegating 100% of your vote power to reliable data providers committed to providing accurate data maximizes your rewards and enhances the stability of the ecosystem. The reward rate (for advanced users) As you explore data providers, consider the expected reward rate each one offers. The reward rate describes how many tokens were earned by a data provider during a reward epoch for every 100 tokens delegated. The reward rate is calculated as \\(total\\_reward / vote\\_power * (100 - fee)\\) , where: \\(total\\_reward\\) : All accumulated rewards for the data provider and its delegators in the reward epoch. \\(vote\\_power\\) : All the data provider's $WFLR and all the $WFLR delegated to it in the vote-power block selected for the reward epoch. \\(fee\\) : The amount kept by the data provider as compensation for the service it provides. The value is specified as a percentage. For example, if the data provider's fee is 21.3%, specify 21.3 to calculate the reward rate. Because rewards are distributed in units of $FLR , the reward rate is calculated in units of $FLR . For the duration of the delegation, you will earn rewards that are commensurate with vote power and the performance of the chosen data providers. Rewards accumulate, and they become claimable for each reward epoch that is finalized. Inflation is distributed to everyone who participates in the FTSO system, which includes data providers and entities that delegate their vote power to the data providers. Delegated tokens are not locked , meaning that they remain in the user's control and the delegation can be removed at any time. Any $WFLR or $WSGB that is newly wrapped, sent, or received will automatically update your actual delegated vote power. However, if you receive native tokens, you must wrap them before you contribute to existing delegations.","title":"Delegation"},{"location":"tech/ftso/#immediate-delegation-revocation","text":"Sometimes, a data provider might maliciously attack the FTSO system to skew the reported data. If this type of attack occurs, the vote power of a data provider can be revoked immediately instead of in the next reward epoch. In this situation, an off-chain process, such as a Twitter storm, calls for users to revoke vote power from the data provider that has attacked the system. When vote power is revoked, the revocation occurs immediately. Learn how to perform this operation from the block explorer.","title":"Immediate Delegation Revocation"},{"location":"tech/ftso/#effects-of-the-vote-power-block-snapshot-on-delegations","text":"The following table shows when new, changed, and revoked delegations take effect in relation to the vote-power block snapshot. Delegation Type Before or After Vote-Power Block Snapshot When Delegation Takes Effect New or changed Before In the next reward epoch After After the next reward epoch ends Revoked N/A Immediately","title":"Effects of the Vote-Power Block Snapshot on Delegations"},{"location":"tech/ftso/#delegation-procedure","text":"You can delegate your tokens using the Flare Portal , a supported wallet like Bifrost , or a dapp . Some FTSO data providers have already started providing these dapps as a convenience. Take a look at flaremetrics.io and pick the one you prefer. If you are an advanced user, you can delegate manually by interacting directly with the FTSO smart contracts.","title":"Delegation Procedure"},{"location":"tech/ftso/#rewards","text":"A percentage of the annual network inflation is reserved to reward FTSO data providers and distributed uniformly among the year's reward epochs. The mechanism that distributes rewards to data providers consists of several bands: Primary reward band : This band rewards 50% of submitted data, weighted by vote power and centered around the median price . That is, the primary reward band fixes the rewarded vote power at 50%, which makes the width of the primary reward band in each epoch variable. Secondary reward band : This band rewards submitted data that falls within a fixed percentage around the calculated median . That is, the width of the secondary reward band is fixed, which makes the rewarded vote power in each epoch variable. Submitted data in each reward epoch belongs to one of the following: Primary reward band Primary and secondary reward band Neither reward band On Flare, reward epochs are 3.5 days. On Songbird, reward epochs are 7 days. In each reward epoch, rewards are distributed to providers whose submission falls within the primary or secondary reward bands. Because the secondary reward band is wider, it rewards more data providers than the primary band. However, submissions still must be close enough to the median to be included. If a submission falls within both bands, it receives both rewards because each reward band is independent. The secondary reward band receives 30% of all FTSO rewards, and the primary reward band receives the remaining 70%. As the FTSO system evolves, these reward percentages might be revised later, in accordance with an accepted proposal that requests changes to the secondary reward band. After the band rewards are distributed, each provider can take an optional, configurable fee , which is set to 20% by default, and distributes the rest of the reward among all contributors to its vote power , i.e., itself and all its delegators, according to the delegated amounts. If you delegated to a data provider, the amount of your rewards depends on multiple factors: The percentage of vote power you delegated The data providers to which you delegated your vote power The performance of those data providers The fee charged by those data providers Whether the total vote power of one or both of those data providers exceeded the vote power cap You can claim your rewards at the end of each reward epoch. You must claim your rewards within 90 days of their availability. After 90 days, unclaimed rewards on Flare are burned, and on Songbird, they are reallocated.","title":"Rewards"},{"location":"tech/ftso/#reward-claiming-procedure","text":"FTSO rewards are not automatically transferred to their recipients. Instead, the amounts are accumulated in a smart contract and must be claimed once the reward epoch is finished . You can claim your rewards using the Flare Portal , a supported wallet like Bifrost , or a dapp . Take a look at flaremetrics.io and pick the one you prefer. If you are an advanced user, you can claim manually by interacting directly with the FTSO smart contracts. To save on gas costs, rewards from multiple reward epochs are claimed simultaneously when you use the Portal. However, be aware that rewards expire after 90 days . Moreover, you probably want to claim soon, to redelegate the received amount and obtain compounded rewards. It is also worth noting that: Rewards are paid in the network's native currency. On Flare, the native token is $FLR , and on Songbird, the native token is $SGB . Data providers and their delegators must claim independently.","title":"Reward-Claiming Procedure"},{"location":"tech/ftso/#related-user-guides","text":"Managing delegations Managing rewards Wrapping tokens","title":"Related User Guides"},{"location":"tech/ftso/#related-infrastructure-guides","text":"Operating a Data Provider Working with Whitelists Managing the Ecosystem","title":"Related Infrastructure Guides"},{"location":"tech/ftso/#related-developer-docs","text":"FTSO Reference FTSO Tutorials","title":"Related Developer Docs"},{"location":"tech/glossary/","text":"Glossary # Attestation A data proof provided to the State Connector by a decentralized set of Attestation Providers that confirms the validity or otherwise of any request. Autoclaiming Automatic claiming enables users to appoint an executor to claim rewards on their behalf. Read more... Avalanche An open-source blockchain using the Snow family of consensus protocols and Proof of Stake for Sybil resistance . It is advertised as the fastest smart contract platform. Read more... Block For performance reasons, blockchains do not process transactions one by one. Instead, transactions are grouped together in blocks which are then validated by the consensus algorithm. Block Explorer A tool that enables its users to analyze transactions and interact with addresses on blockchains. Read more... Blockchain Digital ledger storing data and transactions on a distributed network of computers to make it more robust. Cryptography protects against information tampering, and a consensus algorithm ensures that the majority of the network agrees on the stored data even if some of its nodes act maliciously. Bootstrapping Node An observation node associated with a validator node and acting as its bastion: the bootstrapping node exposes a minimum RPC interface, so the validator does not have to. The nodeID and nodeIP returned by the bootstrapping node's RPC allow an external node to connect and peer with the core network of validators. The bootstrapping node also gossips the core network's validators nodeIDs and nodeIPs to the external node to peer to. The main purpose of a bootstrapping node is to allow new nodes to connect to the network (hence the name \"bootstrapping\") while reducing its associated validator node attack surface. Flare offers some public bootstrapping nodes . Byzantine Fault Tolerance Property of a distributed system that is capable of continuous operation even when some of its participants are unreliable. Participants acting against the interest of the whole system, by accident or on purpose, are said to have \u201cgone Byzantine\u201d. Canary Network A network used for testing features under \u201creal fire\u201d conditions, before deploying them on the main network . All users of the canary network are real users, but they are aware of the experimental nature of the platform. The name comes from the time when actual miners used actual canaries to detect the presence of poisonous gas in the mines. Flare's canary network is called Songbird . Consensus Algorithm that makes nodes on a blockchain\u2019s network agree on the validity of a given transaction, even if some of the nodes provide invalid transactions or try to disrupt the network ( Byzantine Fault Tolerance ). Coston The name given to both of Flare's public test networks (Coston and Coston2), in remembrance and celebration of a great inventor, Martha J. Coston (1826-1904). Cross-chain (or inter-ecosystem) interoperability Communication between two or more disparate blockchain ecosystems that are technologically incompatible due to the lack of shared systems, protocols or code (e.g. Ethereum and Solana). DAO A Decentralized Autonomous Organization is an entity with no central authority. Its governance is mandated by rules encoded on a blockchain so it is tamper-proof. Dapp A Decentralized Application is a computer program that makes use of blockchain technology and therefore the information it uses or stores has the same benefits (trustlessness, censorship resistance, geographical redundancy, etc). The dapp itself may or may not be hosted on a blockchain. Data Provider Each of the multiple programs supplying external information to an FTSO running on the Flare network, and getting rewarded for it. Token holders can delegate their stake to a data provider and receive a share of the rewards. DeFi Decentralized Finance is a form of finance that does not rely on a central financial institution. DeFi is commonly based on blockchain technology. Delegate To assign a duty to someone else, so they do it for you. On the Flare network, an address can delegate any fraction of the votes associated with the tokens it holds to another address, for the purpose of FTSO weighting or governance participation. Note that no tokens are transferred. ERC-20 The Ethereum Request for Comments 20, proposed in November 2015, is an Ethereum token standard that implements an API for tokens within smart contracts. It is a standard for fungible (exchangeable) tokens, which have a property that makes each token exactly the same (in type and value) as another token. For example, an ERC-20 token acts just like Ethereum's ETH token, meaning that 1 token is and will always be equal to all the other tokens. Read more... EVM The Ethereum Virtual Machine allows executing smart contracts on the Ethereum network, regardless of the kind of computer that executes it. Multiple blockchain networks, including Flare, support EVM contracts. Read more... Executor Users who do not want to claim rewards themselves can set an executor to claim rewards for them and send them directly to their users' accounts. Read more... Faucet A dapp that distributes test tokens to anyone that requests them. Used only on test networks , obviously. See the Network Configuration page to learn about Flare's faucets. FBA Federated Byzantine Agreement is a form of Byzantine fault tolerance where each node keeps its own list of trusted nodes. It does not require nodes to invest stake or computing power as Proof of Stake or Proof of Work protocols do. FCP The Flare Consensus Protocol is an asynchronous, ordered and leaderless version of Federated Byzantine Agreement ( FBA ) consensus. The whitepaper is already available and it is currently in the process of being implemented. Read more... Flare Token (FLR) The native currency of the Flare's main network . FTSO The Flare Time Series Oracles provide external information to the Flare network in a decentralized manner, by using multiple independent data providers that are rewarded for providing accurate information. Read more... Governance Mechanism to propose, vote and implement changes on a blockchain protocol. On Flare, anybody can propose updates and token holders vote to accept them. Know Your Customer The process an entity completes to verify the identities of its users to comply with global requirements. Layer 1 An L1 is a blockchain in the classical sense, in that it comprises a network of nodes that exchange information to guarantee the integrity of a shared ledger and offer functionality like token exchange and programmability. Compare it to an L2, which is built on top of an existing L1. Layer 2 An L2 is a blockchain built on top of an existing L1 making use of its programmability. L2 chains add extra functionality to the L1, like scalability. Ledger Historically, a book where financial transactions are recorded. In blockchain technology, a ledger can contain any kind of information, which has multiple copies distributed among several computers, kept in sync by a consensus algorithm. Light Client Relay A simplified communication mechanism built for speed that only queries the header data of any transaction and therefore lacks the security that comes from querying a full node with full history (e.g. SPV ). Liquidity Pool A collection of funds locked in a smart contract for the purpose of facilitating trading, lending and other functionality in a decentralized manner. Main Network (MAINNET) The computer network that supports a blockchain in its production stage, i.e., the real thing (instead of a Canary or Test network). Metaverse An old concept, at times called Virtual Reality or Cyberspace, that translates human interaction to virtual (i.e. non-physical) worlds. Currently in vogue again because blockchain technology promises to link the physical and the virtual worlds and thus bring a degree of reality to the latter. Multi-chain (or intra-ecosystem) interoperability Communication between two or more technologically compatible blockchains that exist within the same ecosystem and share systems, protocols and code (e.g. Polkadot Parachains , Cosmos Tendermint chains or Ethereum layer 2 protocols). NFT Non-Fungible Tokens are digital representations of assets which are unique and therefore non-mergeable (non-fungible), made impossible to copy by blockchain technology. Common use cases are certificates of authenticity or ownership, or limited edition collectibles. Most NFT tokens are built on the Ethereum network using standards ERC-721 and ERC-1155 . Oracle A mechanism to provide external information to a blockchain, so that it can be used by smart contracts , for example. Flare oracles are called FTSO . Proof of Stake A kind of Sybil resistance based on staking assets to participate in consensus. The rationale is that a participant investing enough assets will not be interested in attacking the network that supports such assets. Moreover, if malicious behavior is detected part of the assets can be taken as punishment. Proof of Work A kind of Sybil resistance based on spending computer power to participate in consensus. The rationale is that attacking the network becomes prohibitively expensive in terms of computer power. Pruning A blockchain database reduction technique, which keeps the state of all addresses (like their balance) and the transactions that led to that state, but removes any old transaction that does not impact the current state anymore. Quantum Resistance The ability of a cryptographic algorithm (and therefore of a blockchain) to resist an attack from a theoretical quantum computer. Quorum Set of participants on a consensus algorithm that must agree on a result for the whole network to accept that result. On a blockchain, once consensus is reached about a block , it is added to the ledger and the next block is processed. Quorum Slice In FBA consensus each node has multiple lists of other nodes which it voluntarily decides to trust, forming its quorum slices. All nodes in a quorum slice agreeing on a result are enough to convince the node of that result. If the quorum slices are correctly built, global quorum emerges from these local quorum slices. RPC Remote Procedure Call is a protocol that allows a program executing on a computer to request a service from another program, typically running on a different computer. Flare offers some public and private nodes with RPC capabilities . Smart Contract Computer program running on a blockchain, typically one based on the EVM . The blockchain\u2019s immutability ensures that the contract is not tampered with, and running it on several machines bound together by a consensus algorithm ensures faithful execution. Smart contracts are said to be self-enforcing. Songbird Flare's canary network , launched in September 2021. State Connector Piece of the Flare network that keeps track of the state of other networks, facilitating the implementation of advanced mechanisms like the FAssets. The State Connector uses several independent Attestation Providers that are rewarded for providing correct information. Read more... Sybil Resistance The ability of a distributed system to overcome a Sybil attack, in which a malicious actor creates multiple identities to gain voting or mining power. Resistance is typically gained by making voting or mining too costly for the attack to be worth it (as in Proof of Work or Proof of Stake ) or by requiring new entities to be approved by existing actors (as in FBA ). Test Network (TESTNET) The computer network that supports a blockchain in its development stage. It is intended for testing purposes and should not store valuable assets, as its contents might be deleted (purposely or by accident) at any time. Among other facilities, testnets typically provide faucets . Compare to a Canary or a Main network. Flare's testnets are Coston for Songbird and Coston2 for Flare. Transaction A request to add information to the blockchain, which is then analyzed by the network and accepted when consensus is reached about its validity. It can be a movement of funds between two accounts, or the execution of a contract, for example. Transaction Fee Amount of cryptocurrency that must be paid by anybody submitting a transaction for inclusion on a blockchain. These fees reward block producers for their work processing transactions, and typically vary depending on network congestion. Token A digital representation of an asset. Fungible tokens are indistinguishable from one another so they can be merged together (e.g. a cryptocurrency). Non-fungible tokens ( NFT ) are unique and therefore cannot be merged. Turing-completeness The ability of a machine to solve any computational problem, no matter how complex, given the necessary steps and enough time and memory. This is a mandatory feature of any general-purpose processor like a CPU or the EVM . Validator A validator node is a machine connected to a blockchain network that verifies transactions and emits a vote. When there is a quorum among all validators regarding a given block of transactions, they are accepted into the blockchain. Voting Power Weight proportional to the tokens held by an address plus the tokens delegated to it. This weight is used during FTSO operation and governance votes, for example. Wen flare The war cry of all the impatient that would like to see the Flare network launch before it is fully tested. Pay no heed to them. Zero address A special address represented as 0x0000000000000000000000000000 . Also known as the null address, it is typically used as a return value from functions to indicate an error condition. /*Glossary links from within the glossary page*/ a[href^=\"#\"] { text-decoration-style: dotted; text-decoration-thickness: 1px; } /*Separating line for the glossary nav link from within the glossary page*/ .md-nav__link.md-nav__link--active { border-top: solid 1px var(--md-default-fg-color--lightest); padding-top: 8px; }","title":"Glossary"},{"location":"tech/glossary/#glossary","text":"Attestation A data proof provided to the State Connector by a decentralized set of Attestation Providers that confirms the validity or otherwise of any request. Autoclaiming Automatic claiming enables users to appoint an executor to claim rewards on their behalf. Read more... Avalanche An open-source blockchain using the Snow family of consensus protocols and Proof of Stake for Sybil resistance . It is advertised as the fastest smart contract platform. Read more... Block For performance reasons, blockchains do not process transactions one by one. Instead, transactions are grouped together in blocks which are then validated by the consensus algorithm. Block Explorer A tool that enables its users to analyze transactions and interact with addresses on blockchains. Read more... Blockchain Digital ledger storing data and transactions on a distributed network of computers to make it more robust. Cryptography protects against information tampering, and a consensus algorithm ensures that the majority of the network agrees on the stored data even if some of its nodes act maliciously. Bootstrapping Node An observation node associated with a validator node and acting as its bastion: the bootstrapping node exposes a minimum RPC interface, so the validator does not have to. The nodeID and nodeIP returned by the bootstrapping node's RPC allow an external node to connect and peer with the core network of validators. The bootstrapping node also gossips the core network's validators nodeIDs and nodeIPs to the external node to peer to. The main purpose of a bootstrapping node is to allow new nodes to connect to the network (hence the name \"bootstrapping\") while reducing its associated validator node attack surface. Flare offers some public bootstrapping nodes . Byzantine Fault Tolerance Property of a distributed system that is capable of continuous operation even when some of its participants are unreliable. Participants acting against the interest of the whole system, by accident or on purpose, are said to have \u201cgone Byzantine\u201d. Canary Network A network used for testing features under \u201creal fire\u201d conditions, before deploying them on the main network . All users of the canary network are real users, but they are aware of the experimental nature of the platform. The name comes from the time when actual miners used actual canaries to detect the presence of poisonous gas in the mines. Flare's canary network is called Songbird . Consensus Algorithm that makes nodes on a blockchain\u2019s network agree on the validity of a given transaction, even if some of the nodes provide invalid transactions or try to disrupt the network ( Byzantine Fault Tolerance ). Coston The name given to both of Flare's public test networks (Coston and Coston2), in remembrance and celebration of a great inventor, Martha J. Coston (1826-1904). Cross-chain (or inter-ecosystem) interoperability Communication between two or more disparate blockchain ecosystems that are technologically incompatible due to the lack of shared systems, protocols or code (e.g. Ethereum and Solana). DAO A Decentralized Autonomous Organization is an entity with no central authority. Its governance is mandated by rules encoded on a blockchain so it is tamper-proof. Dapp A Decentralized Application is a computer program that makes use of blockchain technology and therefore the information it uses or stores has the same benefits (trustlessness, censorship resistance, geographical redundancy, etc). The dapp itself may or may not be hosted on a blockchain. Data Provider Each of the multiple programs supplying external information to an FTSO running on the Flare network, and getting rewarded for it. Token holders can delegate their stake to a data provider and receive a share of the rewards. DeFi Decentralized Finance is a form of finance that does not rely on a central financial institution. DeFi is commonly based on blockchain technology. Delegate To assign a duty to someone else, so they do it for you. On the Flare network, an address can delegate any fraction of the votes associated with the tokens it holds to another address, for the purpose of FTSO weighting or governance participation. Note that no tokens are transferred. ERC-20 The Ethereum Request for Comments 20, proposed in November 2015, is an Ethereum token standard that implements an API for tokens within smart contracts. It is a standard for fungible (exchangeable) tokens, which have a property that makes each token exactly the same (in type and value) as another token. For example, an ERC-20 token acts just like Ethereum's ETH token, meaning that 1 token is and will always be equal to all the other tokens. Read more... EVM The Ethereum Virtual Machine allows executing smart contracts on the Ethereum network, regardless of the kind of computer that executes it. Multiple blockchain networks, including Flare, support EVM contracts. Read more... Executor Users who do not want to claim rewards themselves can set an executor to claim rewards for them and send them directly to their users' accounts. Read more... Faucet A dapp that distributes test tokens to anyone that requests them. Used only on test networks , obviously. See the Network Configuration page to learn about Flare's faucets. FBA Federated Byzantine Agreement is a form of Byzantine fault tolerance where each node keeps its own list of trusted nodes. It does not require nodes to invest stake or computing power as Proof of Stake or Proof of Work protocols do. FCP The Flare Consensus Protocol is an asynchronous, ordered and leaderless version of Federated Byzantine Agreement ( FBA ) consensus. The whitepaper is already available and it is currently in the process of being implemented. Read more... Flare Token (FLR) The native currency of the Flare's main network . FTSO The Flare Time Series Oracles provide external information to the Flare network in a decentralized manner, by using multiple independent data providers that are rewarded for providing accurate information. Read more... Governance Mechanism to propose, vote and implement changes on a blockchain protocol. On Flare, anybody can propose updates and token holders vote to accept them. Know Your Customer The process an entity completes to verify the identities of its users to comply with global requirements. Layer 1 An L1 is a blockchain in the classical sense, in that it comprises a network of nodes that exchange information to guarantee the integrity of a shared ledger and offer functionality like token exchange and programmability. Compare it to an L2, which is built on top of an existing L1. Layer 2 An L2 is a blockchain built on top of an existing L1 making use of its programmability. L2 chains add extra functionality to the L1, like scalability. Ledger Historically, a book where financial transactions are recorded. In blockchain technology, a ledger can contain any kind of information, which has multiple copies distributed among several computers, kept in sync by a consensus algorithm. Light Client Relay A simplified communication mechanism built for speed that only queries the header data of any transaction and therefore lacks the security that comes from querying a full node with full history (e.g. SPV ). Liquidity Pool A collection of funds locked in a smart contract for the purpose of facilitating trading, lending and other functionality in a decentralized manner. Main Network (MAINNET) The computer network that supports a blockchain in its production stage, i.e., the real thing (instead of a Canary or Test network). Metaverse An old concept, at times called Virtual Reality or Cyberspace, that translates human interaction to virtual (i.e. non-physical) worlds. Currently in vogue again because blockchain technology promises to link the physical and the virtual worlds and thus bring a degree of reality to the latter. Multi-chain (or intra-ecosystem) interoperability Communication between two or more technologically compatible blockchains that exist within the same ecosystem and share systems, protocols and code (e.g. Polkadot Parachains , Cosmos Tendermint chains or Ethereum layer 2 protocols). NFT Non-Fungible Tokens are digital representations of assets which are unique and therefore non-mergeable (non-fungible), made impossible to copy by blockchain technology. Common use cases are certificates of authenticity or ownership, or limited edition collectibles. Most NFT tokens are built on the Ethereum network using standards ERC-721 and ERC-1155 . Oracle A mechanism to provide external information to a blockchain, so that it can be used by smart contracts , for example. Flare oracles are called FTSO . Proof of Stake A kind of Sybil resistance based on staking assets to participate in consensus. The rationale is that a participant investing enough assets will not be interested in attacking the network that supports such assets. Moreover, if malicious behavior is detected part of the assets can be taken as punishment. Proof of Work A kind of Sybil resistance based on spending computer power to participate in consensus. The rationale is that attacking the network becomes prohibitively expensive in terms of computer power. Pruning A blockchain database reduction technique, which keeps the state of all addresses (like their balance) and the transactions that led to that state, but removes any old transaction that does not impact the current state anymore. Quantum Resistance The ability of a cryptographic algorithm (and therefore of a blockchain) to resist an attack from a theoretical quantum computer. Quorum Set of participants on a consensus algorithm that must agree on a result for the whole network to accept that result. On a blockchain, once consensus is reached about a block , it is added to the ledger and the next block is processed. Quorum Slice In FBA consensus each node has multiple lists of other nodes which it voluntarily decides to trust, forming its quorum slices. All nodes in a quorum slice agreeing on a result are enough to convince the node of that result. If the quorum slices are correctly built, global quorum emerges from these local quorum slices. RPC Remote Procedure Call is a protocol that allows a program executing on a computer to request a service from another program, typically running on a different computer. Flare offers some public and private nodes with RPC capabilities . Smart Contract Computer program running on a blockchain, typically one based on the EVM . The blockchain\u2019s immutability ensures that the contract is not tampered with, and running it on several machines bound together by a consensus algorithm ensures faithful execution. Smart contracts are said to be self-enforcing. Songbird Flare's canary network , launched in September 2021. State Connector Piece of the Flare network that keeps track of the state of other networks, facilitating the implementation of advanced mechanisms like the FAssets. The State Connector uses several independent Attestation Providers that are rewarded for providing correct information. Read more... Sybil Resistance The ability of a distributed system to overcome a Sybil attack, in which a malicious actor creates multiple identities to gain voting or mining power. Resistance is typically gained by making voting or mining too costly for the attack to be worth it (as in Proof of Work or Proof of Stake ) or by requiring new entities to be approved by existing actors (as in FBA ). Test Network (TESTNET) The computer network that supports a blockchain in its development stage. It is intended for testing purposes and should not store valuable assets, as its contents might be deleted (purposely or by accident) at any time. Among other facilities, testnets typically provide faucets . Compare to a Canary or a Main network. Flare's testnets are Coston for Songbird and Coston2 for Flare. Transaction A request to add information to the blockchain, which is then analyzed by the network and accepted when consensus is reached about its validity. It can be a movement of funds between two accounts, or the execution of a contract, for example. Transaction Fee Amount of cryptocurrency that must be paid by anybody submitting a transaction for inclusion on a blockchain. These fees reward block producers for their work processing transactions, and typically vary depending on network congestion. Token A digital representation of an asset. Fungible tokens are indistinguishable from one another so they can be merged together (e.g. a cryptocurrency). Non-fungible tokens ( NFT ) are unique and therefore cannot be merged. Turing-completeness The ability of a machine to solve any computational problem, no matter how complex, given the necessary steps and enough time and memory. This is a mandatory feature of any general-purpose processor like a CPU or the EVM . Validator A validator node is a machine connected to a blockchain network that verifies transactions and emits a vote. When there is a quorum among all validators regarding a given block of transactions, they are accepted into the blockchain. Voting Power Weight proportional to the tokens held by an address plus the tokens delegated to it. This weight is used during FTSO operation and governance votes, for example. Wen flare The war cry of all the impatient that would like to see the Flare network launch before it is fully tested. Pay no heed to them. Zero address A special address represented as 0x0000000000000000000000000000 . Also known as the null address, it is typically used as a return value from functions to indicate an error condition. /*Glossary links from within the glossary page*/ a[href^=\"#\"] { text-decoration-style: dotted; text-decoration-thickness: 1px; } /*Separating line for the glossary nav link from within the glossary page*/ .md-nav__link.md-nav__link--active { border-top: solid 1px var(--md-default-fg-color--lightest); padding-top: 8px; }","title":"Glossary"},{"location":"tech/governance/","text":"Governance # Introduction # Flare governance gives everyone in the ecosystem the opportunity to collaborate on decision-making on the Flare and Songbird networks, making governance an important element of decentralization. This process enables the Flare Foundation and Flare and Songbird community members to: Propose policy changes. Vote on them. Execute them if accepted. The following sections detail the different kinds of proposals Flare allows and the process for each of them. If you are already familiar with Flare's governance and just need to know how to cast your vote through the Flare Portal, check the Voting User Guide . Flare's Governance # Excluding the testnets Coston and Coston2, Flare currently has two networks: Flare and Songbird. Moreover, two kinds of proposals are planned, depending on who initiates them: those proposed by the community and those proposed by the Flare Foundation. This situation leads to four types of proposals, of which only two are currently supported and detailed next. Flare Improvement Proposals and Songbird Test Proposals # Flare Improvement Proposals (FIPs) and Songbird Test Proposals (STPs) are initiated by the Flare Foundation and are aimed at improving the Flare and Songbird networks. Community-initiated proposals will be supported later. To increase its stability, FIPs are rejected by default, meaning that they are accepted only if enough votes are cast in their favor. To increase the swiftness at which new proposals can be tested on Songbird, STPs are accepted by default, meaning that they are rejected only if enough votes are cast against them. See Voting Outcomes below for more details. Who Votes # To vote on a proposal on a network, you must have the valid wrapped token: Network Proposal Type Token Wrapped Token Flare FIP $FLR $WFLR Songbird STP $SGB $WSGB Important Available votes depend on the amount of valid wrapped tokens you have, not the native tokens. Therefore, remember to wrap your tokens . Don't wrap all your tokens. Keep some of them to pay for transaction fees . To vote with your tokens, they must be wrapped before the proposal is submitted. The Flare Foundation announces proposals in advance, so that users can read them and wrap their tokens if they have to. Vote Transfer Votes can be transferred to another account while the wrapped tokens remain in your possession. Being able to transfer votes is useful, for example, if you have wrapped tokens in multiple self-custody wallets, because voting can then be simplified by transferring all the votes to a single wallet and voting from there. Votes can only be transferred to one address, but it can receive votes from multiple addresses. Received votes cannot be transferred again to a third address. Once activated, vote transfers always send 100% of an account's votes to the selected address and remain active until they are canceled. As an example, if you have 100 $WSGB before a proposal and you activate the transfer, you will transfer 100 votes. If you later add 100 more $WSGB , for the next proposal you will automatically transfer 200 votes, since the transfer remains active until you cancel it. The following is a more complex example, showing the changes produced by vote transfers, and token wrapping and unwrapping on Songbird: Changes in the number of votes on Songbird. Note Transferring votes has no connection with FTSO delegation: Wrapped tokens can be delegated to an FTSO data provider and at the same time the votes they grant can be transferred to a different address. The Vote Count Block # Since the amount of wrapped tokens an account holds varies over time, a snapshot of all accounts is taken before each voting period starts. The amount of wrapped tokens held by an account at the snapshot then dictates the number of votes available later. The block at which the snapshot is taken is called the vote count block . To encourage users to use their tokens and keep them in the network, instead of just acquiring them for voting and then disposing of them, the vote count block is randomly selected. The next section details when this happens. Voting Process # The image in this section shows the voting process, which includes several conditions: Threshold condition : A minimum quorum must be reached, meaning that enough votes must be cast, or no minimum quorum is required. Majority condition : More than 50% of the votes cast, must be for or against the proposal. Voting process. Announcement : The Flare Foundation publishes the proposal online and announces it through social media channels (linked on the footer of this page) and the Flare website . Notice period : Once the proposal is published, the Flare Foundation allows a notice period before voting can start, typically lasting one week. During this time the proposal can be discussed, clarified, commented on, and even cancelled if serious issues are found with it. For security reasons only, the Foundation may reduce the timeframe of this period. Block selection period : The vote count block is selected at a random time during this period. The duration of this period is also random. Warning If you need to wrap tokens, do so before this period starts since tokens wrapped after the selected vote count block will not result in additional votes. Voting period : The proposal is submitted to the Flare Portal , and it is immediately available for voting. Voting concludes after a week, and final results are presented on the portal. Voting Outcomes # FIPs # Voting on FIPs is acceptance-based. For an FIP to be accepted, a simple majority of the votes cast must be in favor of it. No minimum quorum is required. Therefore, an FIP will be rejected only if less than half of the cast votes are for it. STPs # Voting on STPs is rejection-based. For an STP to be rejected, both of the following conditions must be true: Threshold condition : The minimum quorum is at least 75% of all $SGB tokens circulation (excluding the Flare Foundation's tokens) at the vote count block . Note that the quorum is specified as a fraction of the circulating native $SGB tokens instead of the wrapped tokens $WSGB used for voting. This measure tries, again, to encourage users to wrap their tokens and use them in the network. Majority condition : More than 50% of the votes cast, must be against the proposal. Therefore, an STP will be accepted if the quorum threshold is not reached or if less than half of the cast votes are against it. Execution # Once a proposal is accepted, Flare's governance contracts allow for its automatic execution via a contract call. However, some proposals might require changes that are not implementable through a smart contract and therefore automatic execution is disabled for them. Both FIPs and STPs are manually executed by the Flare Foundation. Related User Guides # Voting","title":"Governance"},{"location":"tech/governance/#governance","text":"","title":"Governance"},{"location":"tech/governance/#introduction","text":"Flare governance gives everyone in the ecosystem the opportunity to collaborate on decision-making on the Flare and Songbird networks, making governance an important element of decentralization. This process enables the Flare Foundation and Flare and Songbird community members to: Propose policy changes. Vote on them. Execute them if accepted. The following sections detail the different kinds of proposals Flare allows and the process for each of them. If you are already familiar with Flare's governance and just need to know how to cast your vote through the Flare Portal, check the Voting User Guide .","title":"Introduction"},{"location":"tech/governance/#flares-governance","text":"Excluding the testnets Coston and Coston2, Flare currently has two networks: Flare and Songbird. Moreover, two kinds of proposals are planned, depending on who initiates them: those proposed by the community and those proposed by the Flare Foundation. This situation leads to four types of proposals, of which only two are currently supported and detailed next.","title":"Flare's Governance"},{"location":"tech/governance/#flare-improvement-proposals-and-songbird-test-proposals","text":"Flare Improvement Proposals (FIPs) and Songbird Test Proposals (STPs) are initiated by the Flare Foundation and are aimed at improving the Flare and Songbird networks. Community-initiated proposals will be supported later. To increase its stability, FIPs are rejected by default, meaning that they are accepted only if enough votes are cast in their favor. To increase the swiftness at which new proposals can be tested on Songbird, STPs are accepted by default, meaning that they are rejected only if enough votes are cast against them. See Voting Outcomes below for more details.","title":"Flare Improvement Proposals and Songbird Test Proposals"},{"location":"tech/governance/#who-votes","text":"To vote on a proposal on a network, you must have the valid wrapped token: Network Proposal Type Token Wrapped Token Flare FIP $FLR $WFLR Songbird STP $SGB $WSGB Important Available votes depend on the amount of valid wrapped tokens you have, not the native tokens. Therefore, remember to wrap your tokens . Don't wrap all your tokens. Keep some of them to pay for transaction fees . To vote with your tokens, they must be wrapped before the proposal is submitted. The Flare Foundation announces proposals in advance, so that users can read them and wrap their tokens if they have to. Vote Transfer Votes can be transferred to another account while the wrapped tokens remain in your possession. Being able to transfer votes is useful, for example, if you have wrapped tokens in multiple self-custody wallets, because voting can then be simplified by transferring all the votes to a single wallet and voting from there. Votes can only be transferred to one address, but it can receive votes from multiple addresses. Received votes cannot be transferred again to a third address. Once activated, vote transfers always send 100% of an account's votes to the selected address and remain active until they are canceled. As an example, if you have 100 $WSGB before a proposal and you activate the transfer, you will transfer 100 votes. If you later add 100 more $WSGB , for the next proposal you will automatically transfer 200 votes, since the transfer remains active until you cancel it. The following is a more complex example, showing the changes produced by vote transfers, and token wrapping and unwrapping on Songbird: Changes in the number of votes on Songbird. Note Transferring votes has no connection with FTSO delegation: Wrapped tokens can be delegated to an FTSO data provider and at the same time the votes they grant can be transferred to a different address.","title":"Who Votes"},{"location":"tech/governance/#the-vote-count-block","text":"Since the amount of wrapped tokens an account holds varies over time, a snapshot of all accounts is taken before each voting period starts. The amount of wrapped tokens held by an account at the snapshot then dictates the number of votes available later. The block at which the snapshot is taken is called the vote count block . To encourage users to use their tokens and keep them in the network, instead of just acquiring them for voting and then disposing of them, the vote count block is randomly selected. The next section details when this happens.","title":"The Vote Count Block"},{"location":"tech/governance/#voting-process","text":"The image in this section shows the voting process, which includes several conditions: Threshold condition : A minimum quorum must be reached, meaning that enough votes must be cast, or no minimum quorum is required. Majority condition : More than 50% of the votes cast, must be for or against the proposal. Voting process. Announcement : The Flare Foundation publishes the proposal online and announces it through social media channels (linked on the footer of this page) and the Flare website . Notice period : Once the proposal is published, the Flare Foundation allows a notice period before voting can start, typically lasting one week. During this time the proposal can be discussed, clarified, commented on, and even cancelled if serious issues are found with it. For security reasons only, the Foundation may reduce the timeframe of this period. Block selection period : The vote count block is selected at a random time during this period. The duration of this period is also random. Warning If you need to wrap tokens, do so before this period starts since tokens wrapped after the selected vote count block will not result in additional votes. Voting period : The proposal is submitted to the Flare Portal , and it is immediately available for voting. Voting concludes after a week, and final results are presented on the portal.","title":"Voting Process"},{"location":"tech/governance/#voting-outcomes","text":"","title":"Voting Outcomes"},{"location":"tech/governance/#fips","text":"Voting on FIPs is acceptance-based. For an FIP to be accepted, a simple majority of the votes cast must be in favor of it. No minimum quorum is required. Therefore, an FIP will be rejected only if less than half of the cast votes are for it.","title":"FIPs"},{"location":"tech/governance/#stps","text":"Voting on STPs is rejection-based. For an STP to be rejected, both of the following conditions must be true: Threshold condition : The minimum quorum is at least 75% of all $SGB tokens circulation (excluding the Flare Foundation's tokens) at the vote count block . Note that the quorum is specified as a fraction of the circulating native $SGB tokens instead of the wrapped tokens $WSGB used for voting. This measure tries, again, to encourage users to wrap their tokens and use them in the network. Majority condition : More than 50% of the votes cast, must be against the proposal. Therefore, an STP will be accepted if the quorum threshold is not reached or if less than half of the cast votes are against it.","title":"STPs"},{"location":"tech/governance/#execution","text":"Once a proposal is accepted, Flare's governance contracts allow for its automatic execution via a contract call. However, some proposals might require changes that are not implementable through a smart contract and therefore automatic execution is disabled for them. Both FIPs and STPs are manually executed by the Flare Foundation.","title":"Execution"},{"location":"tech/governance/#related-user-guides","text":"Voting","title":"Related User Guides"},{"location":"tech/personal-delegation-account/","text":"Personal Delegation Accounts # Flare token holders are eligible to receive a number of rewards, for example through FTSO Delegation . The Flare network offers the option to set up Personal Delegation Accounts (PDAs) to temporarily receive and store rewards to track which funds are from rewards, for example, for personal or tax purposes. In certain jurisdictions, delaying the realization of earnings for a specified time can lead to a reduced tax rate. Each Flare address can be associated with one PDA, which behaves like a regular account in many respects. For example, it can receive funds from any address. Like regular accounts, it is under control of the owner and can perform functions such as delegation and claiming. Here are some of the differences from a regular account: A PDA cannot have another PDA of its own. PDA addresses cannot participate in governance directly, but their owners can transfer all their votes to another address (their main account or someone else's). A PDA automatically converts any $FLR tokens transferred to it to wrapped Flare tokens ( $WFLR ), which are more useful for functions such as delegation. Only the owner of the main account can transfer funds from the PDA and only to the main account. When an executor is configured, it will claim rewards both from the main account and the PDA, and send them to the PDA. Warning The Flare Foundation is not liable for any damages, especially pertaining to tax related issues when using this service. Check your local tax laws. Developing PDA functionality For information on how to develop a PDA, or how to write an application that supports a PDA, see Personal Delegation Accounts in the Developer section. Related User Guides # Managing your PDA Related Developer Docs # Managing PDAs in applications","title":"Personal Delegation Accounts"},{"location":"tech/personal-delegation-account/#personal-delegation-accounts","text":"Flare token holders are eligible to receive a number of rewards, for example through FTSO Delegation . The Flare network offers the option to set up Personal Delegation Accounts (PDAs) to temporarily receive and store rewards to track which funds are from rewards, for example, for personal or tax purposes. In certain jurisdictions, delaying the realization of earnings for a specified time can lead to a reduced tax rate. Each Flare address can be associated with one PDA, which behaves like a regular account in many respects. For example, it can receive funds from any address. Like regular accounts, it is under control of the owner and can perform functions such as delegation and claiming. Here are some of the differences from a regular account: A PDA cannot have another PDA of its own. PDA addresses cannot participate in governance directly, but their owners can transfer all their votes to another address (their main account or someone else's). A PDA automatically converts any $FLR tokens transferred to it to wrapped Flare tokens ( $WFLR ), which are more useful for functions such as delegation. Only the owner of the main account can transfer funds from the PDA and only to the main account. When an executor is configured, it will claim rewards both from the main account and the PDA, and send them to the PDA. Warning The Flare Foundation is not liable for any damages, especially pertaining to tax related issues when using this service. Check your local tax laws. Developing PDA functionality For information on how to develop a PDA, or how to write an application that supports a PDA, see Personal Delegation Accounts in the Developer section.","title":"Personal Delegation Accounts"},{"location":"tech/personal-delegation-account/#related-user-guides","text":"Managing your PDA","title":"Related User Guides"},{"location":"tech/personal-delegation-account/#related-developer-docs","text":"Managing PDAs in applications","title":"Related Developer Docs"},{"location":"tech/state-connector/","text":"State Connector # Introduction # The State Connector is a smart contract running on the Flare network that allows anyone to query non-changing, verifiable information (such as blockchain or geographic data) from outside the Flare network . Data that changes, such as the latest BTC to USD conversion rate, and non-verifiable data, such as data behind a paywall, are not available through the State Connector. The State Connector accesses data in a decentralized manner (no single party is in control of the process) and securely (it takes a lot of effort to disrupt the process). This is accomplished by using a set of independent attestation providers which fetch the required information from the world and deliver it to the Flare network. The State Connector smart contract then checks if there is enough consensus among the received answers and publishes the results if so. As an added security measure, individual validators can also define local attestation providers which, when in disagreement with the rest, cause the validator to branch into an idle, safe state while the situation is resolved. The State Connector. The State Connector can, for instance, check whether a deposit has been made on another blockchain , opening the door to more advanced mechanisms like the FAsset or the Layer Cake bridges. This page gives technical details about the whole procedure, the different security and scalability measures that have been taken into account in its design and the kind of queries that can be performed. Procedure Overview # This is how user queries are processed. The following sections contain more details. State Connector procedure overview. 1. Request # Anybody, be it a smart contract running on Flare or an application, can request the attestation of a specific event from the State Connector. Requests are yes/no questions regarding things that happened outside the Flare network, for example, \"Has transaction 0xABC been confirmed on the Bitcoin network enough times?\". The answers, though, might contain any kind of additional data attached, like the content of transaction 0xABC, for example. Requests must adhere to one of the available request types , which have been designed to be strictly decidable , i.e., the answers are objective and cannot be argued. Otherwise, queries like \"What is the weather like in Paris?\" would have a hard time reaching consensus among the different attestation providers. Section Adding New Attestation Types below contains more details. Making a request (for App developers) Make your requests using the requestAttestations method (#2) of the StateConnector contract : function requestAttestations ( bytes calldata data ) external ; The requestAttestations method has a single parameter, data , which is a byte array with a content that depends on the desired request type . You can learn how to build this array in the state-connector-attestation-types repository . 2. Request forwarding # The State Connector simply forwards the request to all connected attestation providers through an EVM event. Therefore, the request is not stored on the blockchain and its gas cost is very low for the requester. 3. Data retrieval # Attestation providers fetch the requested data by means that depend on the type of attestation, for example, retrieving data from another blockchain or public API. Keep in mind that attestation providers are not controlled by Flare in any way. Anybody can listen to the request events and provide answers using any combination of hardware, software, and code they see fit. 4. Attestation # To prevent attestation providers from peeking at each other's answers, these are submitted in a \"Commit and Reveal\" fashion called the CCCR protocol and detailed below. Submitting an attestation (For attestation provider developers) Attestation providers use the submitAttestation method (#3) of the StateConnector contract : function submitAttestation ( uint256 _bufferNumber , bytes32 _commitHash , bytes32 _merkleRoot , bytes32 _randomNumber ) external returns ( bool _isInitialBufferSlot ); Keep reading to understand the meaning of the parameters. More information in the Attestation Client repository . 5. Consensus # If at least 50% of the attestation providers submitted the same answer, it is made public. Otherwise, no consensus is achieved : requests remain unanswered and must be issued again. The answers are stored in the State Connector smart contract for a week , where anybody can read them, including the original requester. Retrieving your request's answer (for App developers) To retrieve the stored answers just read the merkleRoots public array (#8) in the StateConnector contract . More information on how to retrieve a particular answer in the State Connector contract source code . As shown below, multiple answers are actually packed into a single Merkle root. The Attestation Packing section explains how to retrieve an individual answer. Attestation Protocols # For simplicity, the above description omitted two very important mechanisms , reviewed here. The main one is Attestation packing , which decouples the number of requests from the number of answers, effectively providing unbounded scalability. It requires requests to be first collected and then answered all at once , so a protocol called CCCR is used. Overlapped CCCR Protocol # Requests and answers are submitted sequentially in attestation rounds . Each attestation round has 4 consecutive phases, called Collect, Choose, Commit and Reveal. Phases happen in 90-second windows, and the Choose and Commit phases share the same window, so a whole attestation round takes 4.5 minutes. The Collect-Choose-Commit-Reveal (CCCR) protocol. Collect phase : Users send their requests to the State Connector contract which forwards them to every attestation provider. Choose phase : Attestation Providers vote on which requests they will be able to answer in the current round. Commit phase : Attestation providers send obfuscated answers to the State Connector, so they cannot cheat by peeking at each other's submissions. Reveal phase : Attestation providers send the deobfuscation key so their previous answers are revealed. When all data is available, answers are made public if there is enough consensus. The CCCR protocol is akin to making submissions in a closed envelope which is not opened until all submissions are received. Results are available at the end of the Reveal phase, so the answer to a particular request can take anywhere from 3 to 4.5 minutes , depending on the time in which the request was made inside the Collect phase. Furthermore, the phases of the CCCR protocol are actually overlapped , so while requests are being collected for round \\((n+2)\\) , answers are being simultaneously committed for the previous round \\((n+1)\\) , and revealed for the round prior to that \\((n)\\) . The CCCR protocol with overlapped phases. This means that new requests can be made without waiting for the previous ones to be completed. Attestation Packing # Each round, attestation providers build a Merkle tree with the hashes of all valid answers to the requests that were agreed upon during the \"Choose\" phase . The obtained Merkle root is then called the Attestation Proof , since it is proof of the presence of each individual answer. Finally, the attestation proof is submitted to the State Connector for consensus evaluation. Attestation Proof packing using a Merkle tree. This allows any number of requests to be answered with a single hash , greatly improving scalability . Furthermore, the gas cost for attestation providers is constant each round, no matter how many requests they are answering. A request is only valid (and therefore added to the proof) if it is well-formed and it matches reality . Different providers might have different views on what reality is, and this is why the State Connector runs a consensus algorithm on the received answers. Additionally, the allowed request types are carefully designed to minimize the probability of contention . For example, requiring some time for transactions to settle before inquiring about them, and forcing requests to include the hash of a later block that confirms the transaction. Attestation providers keep the actual retrieved data for a week, in case it contains additional information beyond the yes/no result. Users can request this data directly from the providers through the Proof API . Note Please note that this data is safe to use even though it is obtained directly from the provider, because its hash is consistent with the Attestation Proof agreed upon by the State Connector's consensus. See the \"Proof unpacking\" box below to learn how to verify the data. Additional points worth noting: If two attestation providers observe a different validity for any of the requests in the round, they will submit a completely different Attestation Proof. Attestation providers must answer all agreed-upon queries in the round or abstain from participating in the round , otherwise, their Merkle tree root will not match other providers and will probably be discarded by consensus. Hashes are sorted before being added to the tree, just to have a consistent ordering (albeit arbitrary). The exact way in which the root hash is calculated can be changed without impacting the State Connector contract, which will continue to vote only on the hash value. Proof Unpacking (for App developers) The procedure for apps to check whether the State Connector answered yes or no to their request is detailed in the Attestation Client repository . What follows is an illustrative summary. The basic idea is that you must retrieve all data (both requests and answers) for the round from an attestation provider. You then rebuild the Merkle tree with this data and check that it matches the Attestation Proof provided by the State Connector. Proof unpacking. In the attestation round after you made the request (3 attestation phases, so from 3 to 4.5 minutes) the Attestation Proof for the round should be available in the State Connector. Retrieve it using method getAttestation (#7) of the StateConnector contract . Select any attestation provider you want and use the Proof API path api/proof/votes-for-round/{roundId} to retrieve all data for the round . Rebuild the Merkle tree for the retrieved data. There are tools to help you, like the MerkleTree.ts library. Check that the tree's root matches the Attestation Proof from step 1. If it does not match, this provider did not submit the answer agreed by the majority. Choose another provider in step 2. Conversely, you can use the api/proof/get-specific-proof API in step 2 which does steps 2, 3 and 4 for you. This API returns the JSON response data, including the attestation proof, if the attestation request was successfully verified in the given round. Now that you know that the retrieved data has been agreed upon by the consensus, you can use it. Look for your request inside the returned data . If it is not present, your request was deemed invalid (for example, the queried transaction was not present). Otherwise, your request is valid and you can find any extra information about it in the data array. Branching Protocol # Besides the consensus algorithm that runs on all received attestations, the State Connector provides one further security mechanism : the ability of any individual validator node to fork and halt execution if attestation providers specially trusted by it disagree with the majority. Attestation Provider Sets # To achieve this, two sets of attestation providers are defined: Default attestation providers set Anybody can submit attestations to the State Connector, but the contract will only accept submissions from attestation providers in the default set . Every validator node in the Flare network relies on this set. Local attestation providers set Additionally, each node operator can provide a list of local attestation providers to be accepted besides the ones from the default set. Local providers are the same kind of nodes as default providers, and they are treated exactly the same by the State Connector. Furthermore, providers can belong to both sets. Default and Local attestation providers. Then, for an attestation round to succeed these three conditions must be met: The default set must agree on a result (50% consensus inside the set). The local set must agree on a result too (50% consensus inside the set). Both results must match . Otherwise, the round is undecided and no answer is made public. This gives local attestation providers the capacity to stop results from being approved if they don't agree with their own observations. Ideally, local providers are managed by the same entity controlling the validator node using them, so they can be trusted implicitly . As a consequence of different validators using different attestation providers, sometimes State Connector queries can get different results on some validators, which naturally leads to chain forks . Typically, blockchains allow every branch in a fork to coexist and grow independently , until the discrepancy is detected and resolved. At that point, any branches deemed invalid are removed and all the validators that were following them experience a rollback : All transactions that happened after the fork are reverted and the state of those validators is synchronized with the rest of the network. When dealing with forks caused by the State Connector, the Flare network implements an extra security measure : Validators whose local attestation providers disagree with the default set halt execution after the fork , ensuring that they will not suffer any rollback once the fork is resolved. In other words, these validators remain in a safe state in which the disputed query is undecided and therefore no action is taken based on it. Example State Connector forks. In the example picture , all validator nodes use the attestation providers from the default set (not shown), but validators on the rightmost column, additionally, employ local providers . One of them returns a different answer for one of the queries, which leads to a fork of the chain since that validator's state does not match the rest of the network (the divergent ledger, depicted in red). The next section shows how forks are resolved and halted nodes restarted. Branch Resolution # The two states of the branching protocol. The picture above shows the state of the network after a fork. The default network state is the one followed by validators which only use the default set of attestation providers . The alternate network state is where validators go if they use local attestation providers , and they disagree with the default set. In the alternate state no queries are answered and no blocks are produced , so it is a safe state for validators to wait for forks to be resolved. This resolution must come from operators when they are alerted that a validator node has stopped. To understand how to do this, note that attestations are designed to be objectively decidable , meaning that in the event of a fork one branch matches reality and the other does not . There are therefore only two ways to resolve a fork: When local providers are wrong : The operator of the separated validator needs to find out why the local attestation providers failed and either fix them or remove them from the local set of the validator. Once this is fixed, the node simply rewinds its state to where it split and quickly fast-forward to rejoin the default state. Fork resolution when local providers are wrong. Note that no transactions need to be rolled back , on either branch. In the event of this kind of fork, dapps depending on information from a separated validator just have to wait longer to get their result. When the default set is wrong : First off, this is a very delicate situation and it should be rare . The default set uses consensus among attestation providers which have been chosen due to their merits as FTSO data providers. The fact that more than 50% of them are reporting data inconsistent with reality can be considered a 51% attack . The operator of the separated validator, upon convincing themselves that their branch is the correct one (it matches reality) they need to bring the fork to the attention of the misbehaving attestation providers' operators. All validators in the default state then need to roll back to the last correct state (reverting transactions) and continue from there on the forked branch, which becomes the new default state. Fork resolution when the default set is wrong. Note that stopped nodes can resume now, and they never had to roll back any transaction . In summary, validators using at least one reliable local attestation provider do not have to worry about rollbacks, even in the face of 51% attacks . Attestation Types # Some attestation types are already defined. Attestation providers provide attestations for these types of defined requests: Payment : Whether a payment transaction occurred in which funds were sent from one address to another address. Balance-decreasing transaction : Whether a transaction that might have decreased a balance occurred. This type allows for several possibilities: During a transaction, funds, including fees, were deducted from the balance at an address. As a result, the final balance at the address is less than the balance was before the transaction. During a transaction, funds to pay for fees were deducted from the balance at an address at the same time as more funds arrived. As a result, the balance at the address experienced a decrease, but the final balance is more than the balance was before the transaction. Confirmed block height : Whether a block on a certain height exists and was confirmed. Referenced payment nonexistence : Whether an account did not receive funds from a different account by a specific deadline. This type can serve as proof that a user's payment obligations to a DeFi protocol have been breached, considering the following cases: The required transaction was not confirmed on time. The required transaction was confirmed on time but failed because of an error made by the sender. Adding New Attestation Types # New real-world event-type integrations are introduced to the State Connector via acceptance by the default attestation providers, without requiring any changes to the core voting or branching protocols described above. This enables rapid deployment of new use-cases without any validator-level code changes. See the state-connector-attestation-types repository for more information.","title":"State Connector"},{"location":"tech/state-connector/#state-connector","text":"","title":"State Connector"},{"location":"tech/state-connector/#introduction","text":"The State Connector is a smart contract running on the Flare network that allows anyone to query non-changing, verifiable information (such as blockchain or geographic data) from outside the Flare network . Data that changes, such as the latest BTC to USD conversion rate, and non-verifiable data, such as data behind a paywall, are not available through the State Connector. The State Connector accesses data in a decentralized manner (no single party is in control of the process) and securely (it takes a lot of effort to disrupt the process). This is accomplished by using a set of independent attestation providers which fetch the required information from the world and deliver it to the Flare network. The State Connector smart contract then checks if there is enough consensus among the received answers and publishes the results if so. As an added security measure, individual validators can also define local attestation providers which, when in disagreement with the rest, cause the validator to branch into an idle, safe state while the situation is resolved. The State Connector. The State Connector can, for instance, check whether a deposit has been made on another blockchain , opening the door to more advanced mechanisms like the FAsset or the Layer Cake bridges. This page gives technical details about the whole procedure, the different security and scalability measures that have been taken into account in its design and the kind of queries that can be performed.","title":"Introduction"},{"location":"tech/state-connector/#procedure-overview","text":"This is how user queries are processed. The following sections contain more details. State Connector procedure overview.","title":"Procedure Overview"},{"location":"tech/state-connector/#1-request","text":"Anybody, be it a smart contract running on Flare or an application, can request the attestation of a specific event from the State Connector. Requests are yes/no questions regarding things that happened outside the Flare network, for example, \"Has transaction 0xABC been confirmed on the Bitcoin network enough times?\". The answers, though, might contain any kind of additional data attached, like the content of transaction 0xABC, for example. Requests must adhere to one of the available request types , which have been designed to be strictly decidable , i.e., the answers are objective and cannot be argued. Otherwise, queries like \"What is the weather like in Paris?\" would have a hard time reaching consensus among the different attestation providers. Section Adding New Attestation Types below contains more details. Making a request (for App developers) Make your requests using the requestAttestations method (#2) of the StateConnector contract : function requestAttestations ( bytes calldata data ) external ; The requestAttestations method has a single parameter, data , which is a byte array with a content that depends on the desired request type . You can learn how to build this array in the state-connector-attestation-types repository .","title":"1. Request"},{"location":"tech/state-connector/#2-request-forwarding","text":"The State Connector simply forwards the request to all connected attestation providers through an EVM event. Therefore, the request is not stored on the blockchain and its gas cost is very low for the requester.","title":"2. Request forwarding"},{"location":"tech/state-connector/#3-data-retrieval","text":"Attestation providers fetch the requested data by means that depend on the type of attestation, for example, retrieving data from another blockchain or public API. Keep in mind that attestation providers are not controlled by Flare in any way. Anybody can listen to the request events and provide answers using any combination of hardware, software, and code they see fit.","title":"3. Data retrieval"},{"location":"tech/state-connector/#4-attestation","text":"To prevent attestation providers from peeking at each other's answers, these are submitted in a \"Commit and Reveal\" fashion called the CCCR protocol and detailed below. Submitting an attestation (For attestation provider developers) Attestation providers use the submitAttestation method (#3) of the StateConnector contract : function submitAttestation ( uint256 _bufferNumber , bytes32 _commitHash , bytes32 _merkleRoot , bytes32 _randomNumber ) external returns ( bool _isInitialBufferSlot ); Keep reading to understand the meaning of the parameters. More information in the Attestation Client repository .","title":"4. Attestation"},{"location":"tech/state-connector/#5-consensus","text":"If at least 50% of the attestation providers submitted the same answer, it is made public. Otherwise, no consensus is achieved : requests remain unanswered and must be issued again. The answers are stored in the State Connector smart contract for a week , where anybody can read them, including the original requester. Retrieving your request's answer (for App developers) To retrieve the stored answers just read the merkleRoots public array (#8) in the StateConnector contract . More information on how to retrieve a particular answer in the State Connector contract source code . As shown below, multiple answers are actually packed into a single Merkle root. The Attestation Packing section explains how to retrieve an individual answer.","title":"5. Consensus"},{"location":"tech/state-connector/#attestation-protocols","text":"For simplicity, the above description omitted two very important mechanisms , reviewed here. The main one is Attestation packing , which decouples the number of requests from the number of answers, effectively providing unbounded scalability. It requires requests to be first collected and then answered all at once , so a protocol called CCCR is used.","title":"Attestation Protocols"},{"location":"tech/state-connector/#overlapped-cccr-protocol","text":"Requests and answers are submitted sequentially in attestation rounds . Each attestation round has 4 consecutive phases, called Collect, Choose, Commit and Reveal. Phases happen in 90-second windows, and the Choose and Commit phases share the same window, so a whole attestation round takes 4.5 minutes. The Collect-Choose-Commit-Reveal (CCCR) protocol. Collect phase : Users send their requests to the State Connector contract which forwards them to every attestation provider. Choose phase : Attestation Providers vote on which requests they will be able to answer in the current round. Commit phase : Attestation providers send obfuscated answers to the State Connector, so they cannot cheat by peeking at each other's submissions. Reveal phase : Attestation providers send the deobfuscation key so their previous answers are revealed. When all data is available, answers are made public if there is enough consensus. The CCCR protocol is akin to making submissions in a closed envelope which is not opened until all submissions are received. Results are available at the end of the Reveal phase, so the answer to a particular request can take anywhere from 3 to 4.5 minutes , depending on the time in which the request was made inside the Collect phase. Furthermore, the phases of the CCCR protocol are actually overlapped , so while requests are being collected for round \\((n+2)\\) , answers are being simultaneously committed for the previous round \\((n+1)\\) , and revealed for the round prior to that \\((n)\\) . The CCCR protocol with overlapped phases. This means that new requests can be made without waiting for the previous ones to be completed.","title":"Overlapped CCCR Protocol"},{"location":"tech/state-connector/#attestation-packing","text":"Each round, attestation providers build a Merkle tree with the hashes of all valid answers to the requests that were agreed upon during the \"Choose\" phase . The obtained Merkle root is then called the Attestation Proof , since it is proof of the presence of each individual answer. Finally, the attestation proof is submitted to the State Connector for consensus evaluation. Attestation Proof packing using a Merkle tree. This allows any number of requests to be answered with a single hash , greatly improving scalability . Furthermore, the gas cost for attestation providers is constant each round, no matter how many requests they are answering. A request is only valid (and therefore added to the proof) if it is well-formed and it matches reality . Different providers might have different views on what reality is, and this is why the State Connector runs a consensus algorithm on the received answers. Additionally, the allowed request types are carefully designed to minimize the probability of contention . For example, requiring some time for transactions to settle before inquiring about them, and forcing requests to include the hash of a later block that confirms the transaction. Attestation providers keep the actual retrieved data for a week, in case it contains additional information beyond the yes/no result. Users can request this data directly from the providers through the Proof API . Note Please note that this data is safe to use even though it is obtained directly from the provider, because its hash is consistent with the Attestation Proof agreed upon by the State Connector's consensus. See the \"Proof unpacking\" box below to learn how to verify the data. Additional points worth noting: If two attestation providers observe a different validity for any of the requests in the round, they will submit a completely different Attestation Proof. Attestation providers must answer all agreed-upon queries in the round or abstain from participating in the round , otherwise, their Merkle tree root will not match other providers and will probably be discarded by consensus. Hashes are sorted before being added to the tree, just to have a consistent ordering (albeit arbitrary). The exact way in which the root hash is calculated can be changed without impacting the State Connector contract, which will continue to vote only on the hash value. Proof Unpacking (for App developers) The procedure for apps to check whether the State Connector answered yes or no to their request is detailed in the Attestation Client repository . What follows is an illustrative summary. The basic idea is that you must retrieve all data (both requests and answers) for the round from an attestation provider. You then rebuild the Merkle tree with this data and check that it matches the Attestation Proof provided by the State Connector. Proof unpacking. In the attestation round after you made the request (3 attestation phases, so from 3 to 4.5 minutes) the Attestation Proof for the round should be available in the State Connector. Retrieve it using method getAttestation (#7) of the StateConnector contract . Select any attestation provider you want and use the Proof API path api/proof/votes-for-round/{roundId} to retrieve all data for the round . Rebuild the Merkle tree for the retrieved data. There are tools to help you, like the MerkleTree.ts library. Check that the tree's root matches the Attestation Proof from step 1. If it does not match, this provider did not submit the answer agreed by the majority. Choose another provider in step 2. Conversely, you can use the api/proof/get-specific-proof API in step 2 which does steps 2, 3 and 4 for you. This API returns the JSON response data, including the attestation proof, if the attestation request was successfully verified in the given round. Now that you know that the retrieved data has been agreed upon by the consensus, you can use it. Look for your request inside the returned data . If it is not present, your request was deemed invalid (for example, the queried transaction was not present). Otherwise, your request is valid and you can find any extra information about it in the data array.","title":"Attestation Packing"},{"location":"tech/state-connector/#branching-protocol","text":"Besides the consensus algorithm that runs on all received attestations, the State Connector provides one further security mechanism : the ability of any individual validator node to fork and halt execution if attestation providers specially trusted by it disagree with the majority.","title":"Branching Protocol"},{"location":"tech/state-connector/#attestation-provider-sets","text":"To achieve this, two sets of attestation providers are defined: Default attestation providers set Anybody can submit attestations to the State Connector, but the contract will only accept submissions from attestation providers in the default set . Every validator node in the Flare network relies on this set. Local attestation providers set Additionally, each node operator can provide a list of local attestation providers to be accepted besides the ones from the default set. Local providers are the same kind of nodes as default providers, and they are treated exactly the same by the State Connector. Furthermore, providers can belong to both sets. Default and Local attestation providers. Then, for an attestation round to succeed these three conditions must be met: The default set must agree on a result (50% consensus inside the set). The local set must agree on a result too (50% consensus inside the set). Both results must match . Otherwise, the round is undecided and no answer is made public. This gives local attestation providers the capacity to stop results from being approved if they don't agree with their own observations. Ideally, local providers are managed by the same entity controlling the validator node using them, so they can be trusted implicitly . As a consequence of different validators using different attestation providers, sometimes State Connector queries can get different results on some validators, which naturally leads to chain forks . Typically, blockchains allow every branch in a fork to coexist and grow independently , until the discrepancy is detected and resolved. At that point, any branches deemed invalid are removed and all the validators that were following them experience a rollback : All transactions that happened after the fork are reverted and the state of those validators is synchronized with the rest of the network. When dealing with forks caused by the State Connector, the Flare network implements an extra security measure : Validators whose local attestation providers disagree with the default set halt execution after the fork , ensuring that they will not suffer any rollback once the fork is resolved. In other words, these validators remain in a safe state in which the disputed query is undecided and therefore no action is taken based on it. Example State Connector forks. In the example picture , all validator nodes use the attestation providers from the default set (not shown), but validators on the rightmost column, additionally, employ local providers . One of them returns a different answer for one of the queries, which leads to a fork of the chain since that validator's state does not match the rest of the network (the divergent ledger, depicted in red). The next section shows how forks are resolved and halted nodes restarted.","title":"Attestation Provider Sets"},{"location":"tech/state-connector/#branch-resolution","text":"The two states of the branching protocol. The picture above shows the state of the network after a fork. The default network state is the one followed by validators which only use the default set of attestation providers . The alternate network state is where validators go if they use local attestation providers , and they disagree with the default set. In the alternate state no queries are answered and no blocks are produced , so it is a safe state for validators to wait for forks to be resolved. This resolution must come from operators when they are alerted that a validator node has stopped. To understand how to do this, note that attestations are designed to be objectively decidable , meaning that in the event of a fork one branch matches reality and the other does not . There are therefore only two ways to resolve a fork: When local providers are wrong : The operator of the separated validator needs to find out why the local attestation providers failed and either fix them or remove them from the local set of the validator. Once this is fixed, the node simply rewinds its state to where it split and quickly fast-forward to rejoin the default state. Fork resolution when local providers are wrong. Note that no transactions need to be rolled back , on either branch. In the event of this kind of fork, dapps depending on information from a separated validator just have to wait longer to get their result. When the default set is wrong : First off, this is a very delicate situation and it should be rare . The default set uses consensus among attestation providers which have been chosen due to their merits as FTSO data providers. The fact that more than 50% of them are reporting data inconsistent with reality can be considered a 51% attack . The operator of the separated validator, upon convincing themselves that their branch is the correct one (it matches reality) they need to bring the fork to the attention of the misbehaving attestation providers' operators. All validators in the default state then need to roll back to the last correct state (reverting transactions) and continue from there on the forked branch, which becomes the new default state. Fork resolution when the default set is wrong. Note that stopped nodes can resume now, and they never had to roll back any transaction . In summary, validators using at least one reliable local attestation provider do not have to worry about rollbacks, even in the face of 51% attacks .","title":"Branch Resolution"},{"location":"tech/state-connector/#attestation-types","text":"Some attestation types are already defined. Attestation providers provide attestations for these types of defined requests: Payment : Whether a payment transaction occurred in which funds were sent from one address to another address. Balance-decreasing transaction : Whether a transaction that might have decreased a balance occurred. This type allows for several possibilities: During a transaction, funds, including fees, were deducted from the balance at an address. As a result, the final balance at the address is less than the balance was before the transaction. During a transaction, funds to pay for fees were deducted from the balance at an address at the same time as more funds arrived. As a result, the balance at the address experienced a decrease, but the final balance is more than the balance was before the transaction. Confirmed block height : Whether a block on a certain height exists and was confirmed. Referenced payment nonexistence : Whether an account did not receive funds from a different account by a specific deadline. This type can serve as proof that a user's payment obligations to a DeFi protocol have been breached, considering the following cases: The required transaction was not confirmed on time. The required transaction was confirmed on time but failed because of an error made by the sender.","title":"Attestation Types"},{"location":"tech/state-connector/#adding-new-attestation-types","text":"New real-world event-type integrations are introduced to the State Connector via acceptance by the default attestation providers, without requiring any changes to the core voting or branching protocols described above. This enables rapid deployment of new use-cases without any validator-level code changes. See the state-connector-attestation-types repository for more information.","title":"Adding New Attestation Types"},{"location":"tech/the-flaredrop/","text":"The FlareDrop # The FlareDrop, previously called the Delegation Incentive Pool in the FIP.01 , is a distribution method for the 24.25B remaining $FLR tokens after the original airdrop . It will last for 36 months and is destined for any holder of wrapped $FLR ( $WFLR ) that participates in the network as per the FIP.01. If you enabled your PDA and it contains $WFLR , it is also eligible to receive the FlareDrop distribution. Make sure to check both your Main Account and your Delegation Account for FlareDrop to claim. How Is the FlareDrop Distributed? # The FlareDrop is distributed monthly over 36 30-day bank months to those that wrap their $FLR tokens. Each of the first 35 monthly allocations constitute 2.37% of the total FlareDrop, and the last one 2.05%. The total amount of $WFLR is calculated each month, and the monthly allocation is distributed among all $WFLR holders proportionally to the sampled average of their $WFLR balance. Users then receive an amount equal to their month's sampled $WFLR holdings divided by the month's total $WFLR , multiplied by the monthly allocation. Calculating an address's sampled average balance As each bank month passes, the FlareDrop receives a trigger to choose 3 random blocks in the previous 23 days. The FlareDrop smart contract then finds the average of the total $WFLR reported in those blocks and determines each address's percentage of the FlareDrop. 3-week average of wrapped $FLR . Upon claiming, the entitlement is sent directly to the account you claimed from. It is sent as $FLR to your Main Account and as $WFLR to your Personal Delegation Account (PDA) . Each distribution expires two bank months and a week (67 days) after it becomes claimable and expired tokens are burned. To ensure having no effect on the amount of $FLR that each claiming address receives, Flare Foundation and team addresses opt out of the FlareDrop distribution. Two steps to ensure receiving all your $FLR ! You must: Wrap $FLR to receive it. Rewards are proportional to the $WFLR balance, not $FLR , so always wrap as much $FLR as you can! Wrapping has no downside: Wrapped tokens continue to be available for delegation and governance voting , for example, and they can be unwrapped at any time. Claim before the distribution expires. After the distribution becomes claimable, it expires in two bank months and a week (67 days). You can also enable automatic claiming to make sure you don't miss any FlareDrop! Autoclaiming will claim for both your main account and your PDA if you enabled it. Related User Guides # Claiming the FlareDrop Wrapping tokens Related Developer Docs # The FlareDrop","title":"The FlareDrop"},{"location":"tech/the-flaredrop/#the-flaredrop","text":"The FlareDrop, previously called the Delegation Incentive Pool in the FIP.01 , is a distribution method for the 24.25B remaining $FLR tokens after the original airdrop . It will last for 36 months and is destined for any holder of wrapped $FLR ( $WFLR ) that participates in the network as per the FIP.01. If you enabled your PDA and it contains $WFLR , it is also eligible to receive the FlareDrop distribution. Make sure to check both your Main Account and your Delegation Account for FlareDrop to claim.","title":"The FlareDrop"},{"location":"tech/the-flaredrop/#how-is-the-flaredrop-distributed","text":"The FlareDrop is distributed monthly over 36 30-day bank months to those that wrap their $FLR tokens. Each of the first 35 monthly allocations constitute 2.37% of the total FlareDrop, and the last one 2.05%. The total amount of $WFLR is calculated each month, and the monthly allocation is distributed among all $WFLR holders proportionally to the sampled average of their $WFLR balance. Users then receive an amount equal to their month's sampled $WFLR holdings divided by the month's total $WFLR , multiplied by the monthly allocation. Calculating an address's sampled average balance As each bank month passes, the FlareDrop receives a trigger to choose 3 random blocks in the previous 23 days. The FlareDrop smart contract then finds the average of the total $WFLR reported in those blocks and determines each address's percentage of the FlareDrop. 3-week average of wrapped $FLR . Upon claiming, the entitlement is sent directly to the account you claimed from. It is sent as $FLR to your Main Account and as $WFLR to your Personal Delegation Account (PDA) . Each distribution expires two bank months and a week (67 days) after it becomes claimable and expired tokens are burned. To ensure having no effect on the amount of $FLR that each claiming address receives, Flare Foundation and team addresses opt out of the FlareDrop distribution. Two steps to ensure receiving all your $FLR ! You must: Wrap $FLR to receive it. Rewards are proportional to the $WFLR balance, not $FLR , so always wrap as much $FLR as you can! Wrapping has no downside: Wrapped tokens continue to be available for delegation and governance voting , for example, and they can be unwrapped at any time. Claim before the distribution expires. After the distribution becomes claimable, it expires in two bank months and a week (67 days). You can also enable automatic claiming to make sure you don't miss any FlareDrop! Autoclaiming will claim for both your main account and your PDA if you enabled it.","title":"How Is the FlareDrop Distributed?"},{"location":"tech/the-flaredrop/#related-user-guides","text":"Claiming the FlareDrop Wrapping tokens","title":"Related User Guides"},{"location":"tech/the-flaredrop/#related-developer-docs","text":"The FlareDrop","title":"Related Developer Docs"},{"location":"tech/validators/","text":"Validator Nodes # Blockchain Validation # Validator nodes are online servers running a blockchain's client software. They all keep their own copy of the ledger and are constantly talking to other nodes to make sure the copies are consistent with each other as new data is added. A network of validator nodes, each one with an identical copy of the ledger. The fact that the ledger is not under control of a single entity but distributed among a network of independent validators is what makes blockchains: Require less trust than traditional options. Censorship resistant. Byzantine fault-tolerant . Validators agree on the state of the ledger using a consensus algorithm that varies for each blockchain. For example, Flare uses the Snowman++ consensus protocol from Avalanche . Snowman++ During each round, a validator is randomly selected to act as the leader and propose new blocks to be added to the ledger, which are then validated by the rest of nodes. To provide Sybil resistance , the probability that a node is elected the leader is proportional to the node's stake , effectively enacting a proof-of-stake consensus. With its vision to be the blockchain for data, Flare adds the FTSO Data provider and Attestation Provider roles to validators, creating a single infrastructure entity . When fully operational, these decentralized infrastructure entities are responsible for: Securing the network through proof-of-stake consensus. Providing continuous data to the FTSO system. Answering the State Connector's queries for attestations. In this way, the stake required to operate these entities secures all three functions. Infrastructure entities are rewarded for each one of these roles, a process that involves staking on the P-chain and rewards that are calculated on smart contracts running on the C-chain . Deployment Phases # Deployment will occur in different phases for a number of reasons: Infrastructure entities will be onboarded progressively, to ensure the uninterrupted working of the network. Current FTSO data providers need to build a minimum stake to act as validators. Current validators need to upgrade their capabilities to act as data providers. Each phase will increasingly relinquish control, so more network validation will happen independently of the Flare Foundation. Initial State # Upon network launch on July 14th 2022, a set of 20 validators had their node IDs hard-coded into the client software, so no other validators could participate. The Flare Foundation managed these nodes and gradually reassigned 16 of them to 4 external entities to achieve greater decentralization. These entities, known as professional validators, are infrastructure providers with experience managing blockchain nodes. During this period FTSO data providers operated completely independently of validators. The State Connector protocol was still being developed, so no attestation providers were available. Phase 1 # On July 2023 a network fork enabled Avalanche's proof-of-stake mechanism. From this moment, validation was open to everybody. At the same time, all the stake from the original validators expired. The Flare Foundation loaned all the stake for the initial validators, so the distribution of validation power remained the same while proof-of-stake was being tested. Later, after some FTSO data providers went through a KYC process, the Flare Foundation loaned enough funds to them to deploy validation nodes and act as validators. Because staking happens on the P-chain , staked tokens cannot access the rewards managed by smart contracts running on the C-chain . To solve this problem, a communication mechanism between the two chains is being developed. All staking rewards are manually calculated off-chain, and then distributed on-chain. The calculations will initially be private while they are fine-tuned, and the script will be made public in phase 2 so that anybody can verify them. Phase 2 # Once FTSO data providers have gathered enough stake to ensure the network's continued working, all stake loaned by the Flare Foundation to the validators in the initial state will be withdrawn. Professional validators are expected to cease operating at this point, unless they provide their own stake. The Flare Foundation might delegate stake to FTSO data providers that went through the KYC process, to help kick-start the system. This is known as stake boosting and will run only for a limited amount of time. Staked funds can earn FlareDrops and participate in governance , but not earn FTSO rewards . Staking rewards will: Take into account validator uptime, which can be publicly monitored. Take into account staked amount. Require that the validator is also an FTSO data provider that is being constantly rewarded for providing good enough prices. Be manually calculated off-chain using a public script, and then distributed on-chain. Phase 3 # After secure communication between the P- and C-chains is available, staking rewards will be managed entirely on-chain. The goal is that funds staked on the P-chain will have the same rights as wrapped $FLR on the C-chain, opening the possibility to earn FTSO rewards , FlareDrops and participate in governance . Summary # Launch Phase 1 Phase 2 Phase 3 Validation open to everybody \u2718 \u2714 \u2714 \u2714 Validators must provide own stake \u2718 \u2718 \u2714 \u2714 Validators must be data providers to earn rewards \u2718 \u2718 \u2714 \u2714 Locked stake can earn staking rewards \u2718 \u2718 \u2714 \u2714 Staking rewards are handled on-chain \u2718 \u2718 \u2718 \u2714 Same rights for staked and wrapped tokens \u2718 \u2718 \u2718 \u2714 Related Infrastructure Guides # Deploying a Validator Node const btables = document.getElementsByClassName('boolean-table'); if (btables) { for (var i=0; i<btables.length; i++) { const bcells = btables[i].getElementsByTagName('td'); for (var j=0; j<bcells.length; j++) { if (bcells[j].innerHTML == '\u2718') bcells[j].className = 'boolean-false'; if (bcells[j].innerHTML == '\u2714') bcells[j].className = 'boolean-true'; } } }","title":"Validator Nodes"},{"location":"tech/validators/#validator-nodes","text":"","title":"Validator Nodes"},{"location":"tech/validators/#blockchain-validation","text":"Validator nodes are online servers running a blockchain's client software. They all keep their own copy of the ledger and are constantly talking to other nodes to make sure the copies are consistent with each other as new data is added. A network of validator nodes, each one with an identical copy of the ledger. The fact that the ledger is not under control of a single entity but distributed among a network of independent validators is what makes blockchains: Require less trust than traditional options. Censorship resistant. Byzantine fault-tolerant . Validators agree on the state of the ledger using a consensus algorithm that varies for each blockchain. For example, Flare uses the Snowman++ consensus protocol from Avalanche . Snowman++ During each round, a validator is randomly selected to act as the leader and propose new blocks to be added to the ledger, which are then validated by the rest of nodes. To provide Sybil resistance , the probability that a node is elected the leader is proportional to the node's stake , effectively enacting a proof-of-stake consensus. With its vision to be the blockchain for data, Flare adds the FTSO Data provider and Attestation Provider roles to validators, creating a single infrastructure entity . When fully operational, these decentralized infrastructure entities are responsible for: Securing the network through proof-of-stake consensus. Providing continuous data to the FTSO system. Answering the State Connector's queries for attestations. In this way, the stake required to operate these entities secures all three functions. Infrastructure entities are rewarded for each one of these roles, a process that involves staking on the P-chain and rewards that are calculated on smart contracts running on the C-chain .","title":"Blockchain Validation"},{"location":"tech/validators/#deployment-phases","text":"Deployment will occur in different phases for a number of reasons: Infrastructure entities will be onboarded progressively, to ensure the uninterrupted working of the network. Current FTSO data providers need to build a minimum stake to act as validators. Current validators need to upgrade their capabilities to act as data providers. Each phase will increasingly relinquish control, so more network validation will happen independently of the Flare Foundation.","title":"Deployment Phases"},{"location":"tech/validators/#initial-state","text":"Upon network launch on July 14th 2022, a set of 20 validators had their node IDs hard-coded into the client software, so no other validators could participate. The Flare Foundation managed these nodes and gradually reassigned 16 of them to 4 external entities to achieve greater decentralization. These entities, known as professional validators, are infrastructure providers with experience managing blockchain nodes. During this period FTSO data providers operated completely independently of validators. The State Connector protocol was still being developed, so no attestation providers were available.","title":"Initial State"},{"location":"tech/validators/#phase-1","text":"On July 2023 a network fork enabled Avalanche's proof-of-stake mechanism. From this moment, validation was open to everybody. At the same time, all the stake from the original validators expired. The Flare Foundation loaned all the stake for the initial validators, so the distribution of validation power remained the same while proof-of-stake was being tested. Later, after some FTSO data providers went through a KYC process, the Flare Foundation loaned enough funds to them to deploy validation nodes and act as validators. Because staking happens on the P-chain , staked tokens cannot access the rewards managed by smart contracts running on the C-chain . To solve this problem, a communication mechanism between the two chains is being developed. All staking rewards are manually calculated off-chain, and then distributed on-chain. The calculations will initially be private while they are fine-tuned, and the script will be made public in phase 2 so that anybody can verify them.","title":"Phase 1"},{"location":"tech/validators/#phase-2","text":"Once FTSO data providers have gathered enough stake to ensure the network's continued working, all stake loaned by the Flare Foundation to the validators in the initial state will be withdrawn. Professional validators are expected to cease operating at this point, unless they provide their own stake. The Flare Foundation might delegate stake to FTSO data providers that went through the KYC process, to help kick-start the system. This is known as stake boosting and will run only for a limited amount of time. Staked funds can earn FlareDrops and participate in governance , but not earn FTSO rewards . Staking rewards will: Take into account validator uptime, which can be publicly monitored. Take into account staked amount. Require that the validator is also an FTSO data provider that is being constantly rewarded for providing good enough prices. Be manually calculated off-chain using a public script, and then distributed on-chain.","title":"Phase 2"},{"location":"tech/validators/#phase-3","text":"After secure communication between the P- and C-chains is available, staking rewards will be managed entirely on-chain. The goal is that funds staked on the P-chain will have the same rights as wrapped $FLR on the C-chain, opening the possibility to earn FTSO rewards , FlareDrops and participate in governance .","title":"Phase 3"},{"location":"tech/validators/#summary","text":"Launch Phase 1 Phase 2 Phase 3 Validation open to everybody \u2718 \u2714 \u2714 \u2714 Validators must provide own stake \u2718 \u2718 \u2714 \u2714 Validators must be data providers to earn rewards \u2718 \u2718 \u2714 \u2714 Locked stake can earn staking rewards \u2718 \u2718 \u2714 \u2714 Staking rewards are handled on-chain \u2718 \u2718 \u2718 \u2714 Same rights for staked and wrapped tokens \u2718 \u2718 \u2718 \u2714","title":"Summary"},{"location":"tech/validators/#related-infrastructure-guides","text":"Deploying a Validator Node const btables = document.getElementsByClassName('boolean-table'); if (btables) { for (var i=0; i<btables.length; i++) { const bcells = btables[i].getElementsByTagName('td'); for (var j=0; j<bcells.length; j++) { if (bcells[j].innerHTML == '\u2718') bcells[j].className = 'boolean-false'; if (bcells[j].innerHTML == '\u2714') bcells[j].className = 'boolean-true'; } } }","title":"Related Infrastructure Guides"},{"location":"tech/archive/","text":"Archive # This section archives old information. Select one of the topics below: Flare Launch Process","title":"Archive"},{"location":"tech/archive/#archive","text":"This section archives old information. Select one of the topics below: Flare Launch Process","title":"Archive"},{"location":"tech/archive/flare-launch-process/","text":"Flare Launch Process # The Flare launch included a rather large airdrop , a community vote , and the deployment of a novel meritocratic consensus system. Because of its complexity, it was divided into a series of sequential phases with clearly-defined triggers that signaled each transition. The following information was intended to remove any confusion around the launch process by clearly describing the purpose of each phase and what happened in them. Click on a phase to navigate to its description. Definitions # The following definitions make the rest of this page clear and unambiguous. FIP.01 : A governance proposal that, among other things, changed the initial token distributions as explained below. This proposal needed to be voted on according to the schedule described in this page. Flare Airdrop for XRP Holders : Certain holders of XRP tokens on Dec 12, 2020, were eligible to register for the FLR token distribution (then called Spark tokens) once the Flare network launched. The FIP.01 proposal modified the way in which the airdrop worked. Original Airdrop : 28.53B FLR tokens, which in the original distribution plan went to those who registered for the distribution. New Airdrop : 4.28B FLR tokens destined for those that registered for the distribution. Delegation Incentive Pool (DIP) : 24.25B FLR tokens destined for any Flare holder that participated in the network over 36 months as per the FIP.01 distribution plan. Note that the New Airdrop plus the DIP match the Original Airdrop. Token Distribution Event (TDE) : The moment when the initial $FLR tokens were distributed to those who registered for the $FLR token distribution. These tokens were minted and locked when the network was created, and they were released when it was sufficiently decentralized. Token Distribution Plans # The following distribution plans were offered. The FIP.01 Distribution Plan was implemented after FIP.01 was approved. Original Distribution Plan : 15% of the original airdrop would have been sent to those who registered for the $FLR distribution upon the TDE, and the rest would have been delivered monthly over the subsequent 36 months. Inflation would have been 10% of the fully diluted supply, per annum. FIP.01 Distribution Plan : The new airdrop was sent to those who registered for the $FLR distribution upon the TDE, and the DIP was distributed to all $FLR token holders (actually, wrapped $FLR holders) over 36 months. Flare employees and companies were excluded. Inflation is 10% of available supply in the first year, then 7% the following year, 5% the year after and in perpetuity, except that from year 3 onwards inflation is capped at 5bn $FLR per year. Inflation distribution: 70% to FTSO rewards, 20% to validator rewards and 10% to the default Attestation Provider Set of the state connector . Launch Phases # Private Observation Mode # Trigger: The Flare network launches On July 14, 2022, the network started centralized, with only 21 validators, run by the Flare Foundation. Flare validator source code was not available yet. FTSO data providers: Could submit data, as they do on Songbird, but did not act as validators because they could not run nodes. Were not rewarded. All inflation would be burned during observation mode . Public Observation Mode # Trigger: The Flare validator source code becomes publicly available During this mode, professional validators started onboarding, so the network started to become decentralized. FTSO data providers: Could submit data, as they do on Songbird, but did not act as validators because they would not have funds to stake until the TDE. Were not rewarded. All inflation was burned during observation mode . Initial Distribution Period # Trigger: 66% of validator power is independent of Flare, AND Exchanges agree to distribute the $FLR token to their customers within a few days of the TDE Token Distribution Event (TDE) happens The new airdrop was sent to the Flare addresses provided by $XRP token holders when they claimed. Part of the airdrop went to Exchange accounts, which distributed it to the users that originally claimed (the intended recipients ). During this period, Flare monitored how many of the airdrop tokens reached the intended recipients, by following the Exchange's communication channels. FTSO data providers: Could deploy their own validator nodes. Acted as validators and their voting power depended on their FTSO performance and stake . FTSO and validator rewards were enabled. Inflation was not burned anymore. FIP.01 Notice Period # Trigger: 66% of the new airdrop reaches its intended recipients FIP.01 proposed to modify how the rest of the tokens (after the TDE) would be distributed, so it required the community to vote. Users voted with their $FLR token stake, so voting could not start until enough tokens had reached the intended recipients. After 66% of the FLR tokens distributed during the TDE reached these users, a 1-week notice period began. Flare announced to the community that enough tokens were distributed and the notice period had started. FIP.01 Voting Period # Trigger: 1 week after Notice Period starts All $FLR token holders (obtained either from the new airdrop or bought at Exchanges) could vote on FIP.01 using a voting front-end. Flare announced to the community that the Voting Period had started and relayed instructions about how to vote. Voting Period lasted 1 week. Regular Operation (Beta) # Trigger: FIP.01 is approved after 1 week of voting The changes proposed in FIP.01 were implemented . The DIP will be distributed to ALL holders of FLR during 37 months. Flare Beta is still in operation, but community-run validators are gradually gaining more power. Regular Operation # Trigger: Community-run FTSO validators are deemed reliable enough Flare Beta will end. FTSO validators' validation power is not artificially reduced anymore and validator rewards (20% of inflation) will be distributed equally among all validators according to their performance and stake.","title":"Flare Launch Process"},{"location":"tech/archive/flare-launch-process/#flare-launch-process","text":"The Flare launch included a rather large airdrop , a community vote , and the deployment of a novel meritocratic consensus system. Because of its complexity, it was divided into a series of sequential phases with clearly-defined triggers that signaled each transition. The following information was intended to remove any confusion around the launch process by clearly describing the purpose of each phase and what happened in them. Click on a phase to navigate to its description.","title":"Flare Launch Process"},{"location":"tech/archive/flare-launch-process/#definitions","text":"The following definitions make the rest of this page clear and unambiguous. FIP.01 : A governance proposal that, among other things, changed the initial token distributions as explained below. This proposal needed to be voted on according to the schedule described in this page. Flare Airdrop for XRP Holders : Certain holders of XRP tokens on Dec 12, 2020, were eligible to register for the FLR token distribution (then called Spark tokens) once the Flare network launched. The FIP.01 proposal modified the way in which the airdrop worked. Original Airdrop : 28.53B FLR tokens, which in the original distribution plan went to those who registered for the distribution. New Airdrop : 4.28B FLR tokens destined for those that registered for the distribution. Delegation Incentive Pool (DIP) : 24.25B FLR tokens destined for any Flare holder that participated in the network over 36 months as per the FIP.01 distribution plan. Note that the New Airdrop plus the DIP match the Original Airdrop. Token Distribution Event (TDE) : The moment when the initial $FLR tokens were distributed to those who registered for the $FLR token distribution. These tokens were minted and locked when the network was created, and they were released when it was sufficiently decentralized.","title":"Definitions"},{"location":"tech/archive/flare-launch-process/#token-distribution-plans","text":"The following distribution plans were offered. The FIP.01 Distribution Plan was implemented after FIP.01 was approved. Original Distribution Plan : 15% of the original airdrop would have been sent to those who registered for the $FLR distribution upon the TDE, and the rest would have been delivered monthly over the subsequent 36 months. Inflation would have been 10% of the fully diluted supply, per annum. FIP.01 Distribution Plan : The new airdrop was sent to those who registered for the $FLR distribution upon the TDE, and the DIP was distributed to all $FLR token holders (actually, wrapped $FLR holders) over 36 months. Flare employees and companies were excluded. Inflation is 10% of available supply in the first year, then 7% the following year, 5% the year after and in perpetuity, except that from year 3 onwards inflation is capped at 5bn $FLR per year. Inflation distribution: 70% to FTSO rewards, 20% to validator rewards and 10% to the default Attestation Provider Set of the state connector .","title":"Token Distribution Plans"},{"location":"tech/archive/flare-launch-process/#launch-phases","text":"","title":"Launch Phases"},{"location":"tech/archive/flare-launch-process/#private-observation-mode","text":"Trigger: The Flare network launches On July 14, 2022, the network started centralized, with only 21 validators, run by the Flare Foundation. Flare validator source code was not available yet. FTSO data providers: Could submit data, as they do on Songbird, but did not act as validators because they could not run nodes. Were not rewarded. All inflation would be burned during observation mode .","title":"Private Observation Mode"},{"location":"tech/archive/flare-launch-process/#public-observation-mode","text":"Trigger: The Flare validator source code becomes publicly available During this mode, professional validators started onboarding, so the network started to become decentralized. FTSO data providers: Could submit data, as they do on Songbird, but did not act as validators because they would not have funds to stake until the TDE. Were not rewarded. All inflation was burned during observation mode .","title":"Public Observation Mode"},{"location":"tech/archive/flare-launch-process/#initial-distribution-period","text":"Trigger: 66% of validator power is independent of Flare, AND Exchanges agree to distribute the $FLR token to their customers within a few days of the TDE Token Distribution Event (TDE) happens The new airdrop was sent to the Flare addresses provided by $XRP token holders when they claimed. Part of the airdrop went to Exchange accounts, which distributed it to the users that originally claimed (the intended recipients ). During this period, Flare monitored how many of the airdrop tokens reached the intended recipients, by following the Exchange's communication channels. FTSO data providers: Could deploy their own validator nodes. Acted as validators and their voting power depended on their FTSO performance and stake . FTSO and validator rewards were enabled. Inflation was not burned anymore.","title":"Initial Distribution Period"},{"location":"tech/archive/flare-launch-process/#fip01-notice-period","text":"Trigger: 66% of the new airdrop reaches its intended recipients FIP.01 proposed to modify how the rest of the tokens (after the TDE) would be distributed, so it required the community to vote. Users voted with their $FLR token stake, so voting could not start until enough tokens had reached the intended recipients. After 66% of the FLR tokens distributed during the TDE reached these users, a 1-week notice period began. Flare announced to the community that enough tokens were distributed and the notice period had started.","title":"FIP.01 Notice Period"},{"location":"tech/archive/flare-launch-process/#fip01-voting-period","text":"Trigger: 1 week after Notice Period starts All $FLR token holders (obtained either from the new airdrop or bought at Exchanges) could vote on FIP.01 using a voting front-end. Flare announced to the community that the Voting Period had started and relayed instructions about how to vote. Voting Period lasted 1 week.","title":"FIP.01 Voting Period"},{"location":"tech/archive/flare-launch-process/#regular-operation-beta","text":"Trigger: FIP.01 is approved after 1 week of voting The changes proposed in FIP.01 were implemented . The DIP will be distributed to ALL holders of FLR during 37 months. Flare Beta is still in operation, but community-run validators are gradually gaining more power.","title":"Regular Operation (Beta)"},{"location":"tech/archive/flare-launch-process/#regular-operation","text":"Trigger: Community-run FTSO validators are deemed reliable enough Flare Beta will end. FTSO validators' validation power is not artificially reduced anymore and validator rewards (20% of inflation) will be distributed equally among all validators according to their performance and stake.","title":"Regular Operation"},{"location":"user/","text":"User Guides # This section contains step-by-step guides on how to use tools like the Block Explorer or the different wallets. Select one of the topics below: Automatic Claiming Block Explorers Claiming the FlareDrop FTSO Delegation Governance Personal Delegation Accounts Staking on Validators Wallets Wrapping Tokens","title":"User Guides"},{"location":"user/#user-guides","text":"This section contains step-by-step guides on how to use tools like the Block Explorer or the different wallets. Select one of the topics below: Automatic Claiming Block Explorers Claiming the FlareDrop FTSO Delegation Governance Personal Delegation Accounts Staking on Validators Wallets Wrapping Tokens","title":"User Guides"},{"location":"user/automatic-claiming/","text":"Automatic Claiming # To save time, maximize compound interest, and avoid unnecessary exposure of a cold wallet, you can set an executor to claim rewards for you. Executors then use automatic claiming to send rewards directly to your account. Introduction # To set an executor you only need to enter its address in the Flare Portal . However, the Flare Portal does not help you find executor addresses, so you must find them in different ways, depending on whether they are manual or registered: Manual executors are ones that you locate yourself. Whether they charge a fee or not and how you pay it is between you and the executor. Registered executors are listed in a smart contract and can be retrieved, for instance, using the block explorer or third-party applications. These executors charge a fee when you set them up and every time they claim for you. Overview of autoclaiming functionality For an overview of what is available for the entire autoclaiming feature, see Automatic Claiming in the Flare Fundamentals section. Prerequisite # To enable an executor, obtain its address off-chain or, for registered executors, on-chain. The list of registered executors has not been added yet to the Flare Portal, but a manual method is given below using the block explorer (recommended for advanced users). Find a registered executor (using the Block Explorer) To find an executor you will need to use the ClaimSetupManager contract. See the Contract Addresses page to learn how to find the address of this contract. In the Block Explorer , paste the address of the ClaimSetupManager contract and scroll down to select the Read Contract tab. To get the available executors' addresses, scroll down to getRegisteredExecutors and enter a range of how many addresses to check, for example, 0 in the _start field and 10 in the _end field. Click Query . The Block Explorer returns the addresses and the total number available, so you can know if you've gotten them all. To get the executor's fee, copy one address at a time and enter it in the executor field for getExecutorCurrentFeeValue . Click Query . In the future, there will be more criteria to help with making this decision. Choose an executor and copy its address. Enabling Automatic Claiming # Now that you have your desired executor's address, you can set it as the executor for your account. Open the Flare Portal . Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Flare Portal Main Account interface. In the Executor section, click Add or Change . Paste the executor's address. A message confirms the executor's fee, whether it is a registered executor, and whether rewards go to your Main Account or your Personal Delegation Account (PDA) . Set an executor. To set this executor, click Confirm . Your wallet opens with the details of the transaction. Review the transaction and confirm it. If you confirm the executor, the Flare Portal displays the executor address you have selected, whether it is registered, and its fee. Note also that the Add button now reads Change , enabling you to remove or change the executor any time you choose. The executor is confirmed. Reward must be high enough to pay the executor's fee If the reward amount is too low to accommodate the fee, automatic claims won't occur, so you may see small amounts of unclaimed rewards even if you have autoclaiming set up. Disabling Automatic Claiming # To disable automatic claiming and stop paying the executor fees, go through the above process again and clear the Executor address field in Step 4. This is, confirm an empty address. Once you confirm the transaction in your wallet, automatic claiming will be disabled. Checking for Accrued Rewards # To check if you have accrued rewards, go to the Flare Portal : Click Connect to Wallet and log into your wallet. Select your Main Account or Delegation Account , if you have enabled a PDA. At the bottom of the screen, see the Claim x FLR button, where x is the number of $FLR rewards you can claim. Note If the configured executor is doing its job correctly, you should never see any pending rewards.","title":"Automatic Claiming"},{"location":"user/automatic-claiming/#automatic-claiming","text":"To save time, maximize compound interest, and avoid unnecessary exposure of a cold wallet, you can set an executor to claim rewards for you. Executors then use automatic claiming to send rewards directly to your account.","title":"Automatic Claiming"},{"location":"user/automatic-claiming/#introduction","text":"To set an executor you only need to enter its address in the Flare Portal . However, the Flare Portal does not help you find executor addresses, so you must find them in different ways, depending on whether they are manual or registered: Manual executors are ones that you locate yourself. Whether they charge a fee or not and how you pay it is between you and the executor. Registered executors are listed in a smart contract and can be retrieved, for instance, using the block explorer or third-party applications. These executors charge a fee when you set them up and every time they claim for you. Overview of autoclaiming functionality For an overview of what is available for the entire autoclaiming feature, see Automatic Claiming in the Flare Fundamentals section.","title":"Introduction"},{"location":"user/automatic-claiming/#prerequisite","text":"To enable an executor, obtain its address off-chain or, for registered executors, on-chain. The list of registered executors has not been added yet to the Flare Portal, but a manual method is given below using the block explorer (recommended for advanced users). Find a registered executor (using the Block Explorer) To find an executor you will need to use the ClaimSetupManager contract. See the Contract Addresses page to learn how to find the address of this contract. In the Block Explorer , paste the address of the ClaimSetupManager contract and scroll down to select the Read Contract tab. To get the available executors' addresses, scroll down to getRegisteredExecutors and enter a range of how many addresses to check, for example, 0 in the _start field and 10 in the _end field. Click Query . The Block Explorer returns the addresses and the total number available, so you can know if you've gotten them all. To get the executor's fee, copy one address at a time and enter it in the executor field for getExecutorCurrentFeeValue . Click Query . In the future, there will be more criteria to help with making this decision. Choose an executor and copy its address.","title":"Prerequisite"},{"location":"user/automatic-claiming/#enabling-automatic-claiming","text":"Now that you have your desired executor's address, you can set it as the executor for your account. Open the Flare Portal . Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Flare Portal Main Account interface. In the Executor section, click Add or Change . Paste the executor's address. A message confirms the executor's fee, whether it is a registered executor, and whether rewards go to your Main Account or your Personal Delegation Account (PDA) . Set an executor. To set this executor, click Confirm . Your wallet opens with the details of the transaction. Review the transaction and confirm it. If you confirm the executor, the Flare Portal displays the executor address you have selected, whether it is registered, and its fee. Note also that the Add button now reads Change , enabling you to remove or change the executor any time you choose. The executor is confirmed. Reward must be high enough to pay the executor's fee If the reward amount is too low to accommodate the fee, automatic claims won't occur, so you may see small amounts of unclaimed rewards even if you have autoclaiming set up.","title":"Enabling Automatic Claiming"},{"location":"user/automatic-claiming/#disabling-automatic-claiming","text":"To disable automatic claiming and stop paying the executor fees, go through the above process again and clear the Executor address field in Step 4. This is, confirm an empty address. Once you confirm the transaction in your wallet, automatic claiming will be disabled.","title":"Disabling Automatic Claiming"},{"location":"user/automatic-claiming/#checking-for-accrued-rewards","text":"To check if you have accrued rewards, go to the Flare Portal : Click Connect to Wallet and log into your wallet. Select your Main Account or Delegation Account , if you have enabled a PDA. At the bottom of the screen, see the Claim x FLR button, where x is the number of $FLR rewards you can claim. Note If the configured executor is doing its job correctly, you should never see any pending rewards.","title":"Checking for Accrued Rewards"},{"location":"user/claiming-the-flaredrop/","text":"Claiming the FlareDrop # Claiming the FlareDrop is available every 30 days and is based on the average balance from the last 23 days of each 30-day month. Therefore, it is advised that each address claim its funds during the first 7 days of each 30-day round. See The FlareDrop concept page for further explanation. FlareDrop distribution dates. There are several ways to claim. You can claim: Using the Flare Portal . Through an executor , which you can configure using the Portal, or Directly against a smart contract (for advanced users). Two steps to ensure receiving all your $FLR ! You must: Wrap $FLR to receive it. Rewards are proportional to the $WFLR balance, not $FLR , so always wrap as much $FLR as you can! Wrapping has no downside: Wrapped tokens continue to be available for delegation and governance voting , for example, and they can be unwrapped at any time. See Wrapping Flare Tokens . Claim before the distribution expires. After the distribution becomes claimable, it expires in two bank months and a week (67 days). Claiming from the Flare Portal # Claim manually from the Flare Portal. From there, you can see how many $FLR tokens you have to claim and you can claim them. Go to the Flare Portal . Click Connect to Wallet and log into your wallet. Your Main Account is open by default. If you enabled a PDA and want to claim for it instead, click Delegation Account . Under Claim your FlareDrop distribution , any $FLR you have to claim displays on the button. Claim Your FlareDrop Distribution. Click the Claim button to claim your $FLR . A confirmation dialog opens. FlareDrop claiming confirmation. As a convenience, you have the choice to wrap your tokens after claiming them. In this way they are ready for the next FlareDrop or to be delegated to the FTSO system , for example. Click on the Claim All Distribution button and confirm the transaction on your wallet. Nominating Executors # Alternatively, you can assign an executor to claim the FlareDrop for you. This is useful for cold wallets but also for any users wishing to reduce their operational burden. See Automatic Claiming to learn how.","title":"Claiming the FlareDrop"},{"location":"user/claiming-the-flaredrop/#claiming-the-flaredrop","text":"Claiming the FlareDrop is available every 30 days and is based on the average balance from the last 23 days of each 30-day month. Therefore, it is advised that each address claim its funds during the first 7 days of each 30-day round. See The FlareDrop concept page for further explanation. FlareDrop distribution dates. There are several ways to claim. You can claim: Using the Flare Portal . Through an executor , which you can configure using the Portal, or Directly against a smart contract (for advanced users). Two steps to ensure receiving all your $FLR ! You must: Wrap $FLR to receive it. Rewards are proportional to the $WFLR balance, not $FLR , so always wrap as much $FLR as you can! Wrapping has no downside: Wrapped tokens continue to be available for delegation and governance voting , for example, and they can be unwrapped at any time. See Wrapping Flare Tokens . Claim before the distribution expires. After the distribution becomes claimable, it expires in two bank months and a week (67 days).","title":"Claiming the FlareDrop"},{"location":"user/claiming-the-flaredrop/#claiming-from-the-flare-portal","text":"Claim manually from the Flare Portal. From there, you can see how many $FLR tokens you have to claim and you can claim them. Go to the Flare Portal . Click Connect to Wallet and log into your wallet. Your Main Account is open by default. If you enabled a PDA and want to claim for it instead, click Delegation Account . Under Claim your FlareDrop distribution , any $FLR you have to claim displays on the button. Claim Your FlareDrop Distribution. Click the Claim button to claim your $FLR . A confirmation dialog opens. FlareDrop claiming confirmation. As a convenience, you have the choice to wrap your tokens after claiming them. In this way they are ready for the next FlareDrop or to be delegated to the FTSO system , for example. Click on the Claim All Distribution button and confirm the transaction on your wallet.","title":"Claiming from the Flare Portal"},{"location":"user/claiming-the-flaredrop/#nominating-executors","text":"Alternatively, you can assign an executor to claim the FlareDrop for you. This is useful for cold wallets but also for any users wishing to reduce their operational burden. See Automatic Claiming to learn how.","title":"Nominating Executors"},{"location":"user/personal-delegation-account/","text":"Personal Delegation Accounts # You can receive $WFLR rewards for making contributions to the Flare community, for example, by delegating your tokens to FTSO data providers. A Personal Delegation Account (PDA) allows you to keep these rewards temporarily separate from your main account, so that you can track them, for example, as a personal record or for tax purposes. In certain jurisdictions, delaying the realization of earnings for a specified time can lead to a reduced tax rate. See the Concept page for more detail. Particularly, the balance of a PDA can still be redelegated to earn compounded interest and the governance votes it grants can be transferred to another address. If a PDA is enabled and you configured an executor , it automatically claims rewards for the main account and the PDA, and sends them to the PDA. Enabling a PDA # You can enable and disable your PDA at any time in the Flare Portal without any ill-effect, except the cost of the transaction fee. Open the Flare Portal . Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Main Account opens. To switch from the Main Account to your PDA, click Delegation Account . Click Enable . Enable a PDA. A popup appears with a short description of what a PDA is. Confirm enabling the PDA. Click Enable . Your wallet shows the details of the transaction. Review the transaction and confirm it. Once the PDA is enabled, the Flare Portal displays the PDA address and the initial 0.0 $WFLR balance. Your PDA is now ready to receive rewards! The PDA address is enabled. If a PDA is enabled and you configured an executor , it automatically claims rewards for the main account and the PDA, and sends them to the PDA. Operations available in a PDA # Other operations available are: Operation Description Disable You can Disable the PDA at any time. Disabling sends all $WFLR back to the main account to your $WFLR balance. Automatic claims from executors will go to the main account as well. Withdraw You can withdraw from your PDA at any time. Click Withdraw , enter the amount of $WFLR to withdraw, and click Withdraw again. The amount is sent to your main account to your $WFLR balance. Delegate You can delegate your rewards to FTSO data providers for compounded rewards. Transfer votes A PDA cannot vote on governance proposals directly, but it can transfer its votes to another address, including its main account. Click Transfer votes , click main account or enter an address to transfer to, and click Confirm . Claim FLR The Claim FLR button shows how many rewards you have to claim. Use this button to claim rewards yourself, or configure an executor from the main account tab to do that for you.","title":"Personal Delegation Accounts"},{"location":"user/personal-delegation-account/#personal-delegation-accounts","text":"You can receive $WFLR rewards for making contributions to the Flare community, for example, by delegating your tokens to FTSO data providers. A Personal Delegation Account (PDA) allows you to keep these rewards temporarily separate from your main account, so that you can track them, for example, as a personal record or for tax purposes. In certain jurisdictions, delaying the realization of earnings for a specified time can lead to a reduced tax rate. See the Concept page for more detail. Particularly, the balance of a PDA can still be redelegated to earn compounded interest and the governance votes it grants can be transferred to another address. If a PDA is enabled and you configured an executor , it automatically claims rewards for the main account and the PDA, and sends them to the PDA.","title":"Personal Delegation Accounts"},{"location":"user/personal-delegation-account/#enabling-a-pda","text":"You can enable and disable your PDA at any time in the Flare Portal without any ill-effect, except the cost of the transaction fee. Open the Flare Portal . Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Main Account opens. To switch from the Main Account to your PDA, click Delegation Account . Click Enable . Enable a PDA. A popup appears with a short description of what a PDA is. Confirm enabling the PDA. Click Enable . Your wallet shows the details of the transaction. Review the transaction and confirm it. Once the PDA is enabled, the Flare Portal displays the PDA address and the initial 0.0 $WFLR balance. Your PDA is now ready to receive rewards! The PDA address is enabled. If a PDA is enabled and you configured an executor , it automatically claims rewards for the main account and the PDA, and sends them to the PDA.","title":"Enabling a PDA"},{"location":"user/personal-delegation-account/#operations-available-in-a-pda","text":"Other operations available are: Operation Description Disable You can Disable the PDA at any time. Disabling sends all $WFLR back to the main account to your $WFLR balance. Automatic claims from executors will go to the main account as well. Withdraw You can withdraw from your PDA at any time. Click Withdraw , enter the amount of $WFLR to withdraw, and click Withdraw again. The amount is sent to your main account to your $WFLR balance. Delegate You can delegate your rewards to FTSO data providers for compounded rewards. Transfer votes A PDA cannot vote on governance proposals directly, but it can transfer its votes to another address, including its main account. Click Transfer votes , click main account or enter an address to transfer to, and click Confirm . Claim FLR The Claim FLR button shows how many rewards you have to claim. Use this button to claim rewards yourself, or configure an executor from the main account tab to do that for you.","title":"Operations available in a PDA"},{"location":"user/wrapping-tokens/","text":"Wrapping Flare Tokens # This information explains how to wrap and unwrap native tokens on various Flare networks using the Flare Portal or the block explorer. Wrapped tokens are required to delegate your vote power to FTSO data providers and to vote on decisions that affect how Flare networks operate. When you complete the following steps for wrapping, your native tokens, such as $FLR and $SGB , are wrapped into $WFLR and $WSGB , respectively, so that you can participate in FTSO delegation and governance. When you need to convert your wrapped tokens into native tokens again, unwrap the wrapped tokens using similar steps, as described below. Using the Flare Portal # Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. Choose one of the following options: Wrap : Locate your balance of native tokens, and click Wrap . Never wrap all your tokens Wrapping and unwrapping tokens are transactions with fees to be paid in native tokens. Always leave some unwrapped tokens to pay for transaction fees. Specify the amount to wrap, and click Wrap again. Unwrap : Locate your balance of wrapped tokens, and click Unwrap . Specify the amount to unwrap, and click Unwrap again. Follow the steps to complete the transaction in your wallet. Your wrapped token balance is updated and displayed in the Flare Portal and your wallet. If your wrapped token balance is not displayed in your wallet, you must manually add the wrapped token so that your wallet recognizes it. Using the Block Explorer # This section is for advanced users. Open a block explorer . From the block explorer, follow the Retrieval from Blockchain procedure to find and open the WNat contract. Click Connect Wallet , and complete the steps to connect your wallet, ensuring you are on the network on which you will wrap tokens. Click the Write Contract tab, and use the following methods to wrap and unwrap tokens: deposit : Wraps the amount of native tokens you specify in the field. withdraw : Unwraps the amount of native tokens you specify in the field. Your token balance is updated and displayed in your wallet. If your wrapped token balance is not displayed in your wallet, you must manually add the wrapped token so that your wallet recognizes it. Adding Wrapped Tokens to Wallets # Your wrapped tokens are stored on the blockchain in a special ERC-20 smart contract called WNat , for Wrapped Native tokens. Some wallets, like the Bifrost Wallet , are aware of this contract and are therefore preconfigured to display $WFLR and $WSGB balances. Some other wallets, though, require you to configure them so that they can display wrapped-token balances. If your wallet doesn't display your wrapped-token balance, you need to configure it, either automatically or manually as described in the following procedures. Automatically # This is typically the fastest procedure, but might not work with all wallets. Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. On the Main Account tab, locate the Account heading and the Help icon, identified by a question mark. Flare Portal Account Help. Click the Help icon and click How do I add Wrapped Flare token to my wallet? . A Click here link for adding $WFLR to your wallet is displayed. Flare Portal Wrapping Help. Click Click here . Your wallet opens. Wallets typically ask you to accept the token. The exact instructions depend on your wallet. Follow the prompts in your wallet to add the wrapped token. Your wrapped token balance is displayed in your wallet. Manually # This section is for advanced users. If the automatic method did not work for you, most wallets can still be configured to recognize ERC-20 tokens through an Import tokens or Add custom asset menu, for example. The exact instructions depend on your wallet, but they generally just require you to locate the aforementioned menu and provide the address of the WNat contract. The wallet can usually then retrieve the token name, symbol, and number of decimals directly from the contract. See the Contract Addresses page to find the address of the WNat contract.","title":"Wrapping Flare Tokens"},{"location":"user/wrapping-tokens/#wrapping-flare-tokens","text":"This information explains how to wrap and unwrap native tokens on various Flare networks using the Flare Portal or the block explorer. Wrapped tokens are required to delegate your vote power to FTSO data providers and to vote on decisions that affect how Flare networks operate. When you complete the following steps for wrapping, your native tokens, such as $FLR and $SGB , are wrapped into $WFLR and $WSGB , respectively, so that you can participate in FTSO delegation and governance. When you need to convert your wrapped tokens into native tokens again, unwrap the wrapped tokens using similar steps, as described below.","title":"Wrapping Flare Tokens"},{"location":"user/wrapping-tokens/#using-the-flare-portal","text":"Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. Choose one of the following options: Wrap : Locate your balance of native tokens, and click Wrap . Never wrap all your tokens Wrapping and unwrapping tokens are transactions with fees to be paid in native tokens. Always leave some unwrapped tokens to pay for transaction fees. Specify the amount to wrap, and click Wrap again. Unwrap : Locate your balance of wrapped tokens, and click Unwrap . Specify the amount to unwrap, and click Unwrap again. Follow the steps to complete the transaction in your wallet. Your wrapped token balance is updated and displayed in the Flare Portal and your wallet. If your wrapped token balance is not displayed in your wallet, you must manually add the wrapped token so that your wallet recognizes it.","title":"Using the Flare Portal"},{"location":"user/wrapping-tokens/#using-the-block-explorer","text":"This section is for advanced users. Open a block explorer . From the block explorer, follow the Retrieval from Blockchain procedure to find and open the WNat contract. Click Connect Wallet , and complete the steps to connect your wallet, ensuring you are on the network on which you will wrap tokens. Click the Write Contract tab, and use the following methods to wrap and unwrap tokens: deposit : Wraps the amount of native tokens you specify in the field. withdraw : Unwraps the amount of native tokens you specify in the field. Your token balance is updated and displayed in your wallet. If your wrapped token balance is not displayed in your wallet, you must manually add the wrapped token so that your wallet recognizes it.","title":"Using the Block Explorer"},{"location":"user/wrapping-tokens/#adding-wrapped-tokens-to-wallets","text":"Your wrapped tokens are stored on the blockchain in a special ERC-20 smart contract called WNat , for Wrapped Native tokens. Some wallets, like the Bifrost Wallet , are aware of this contract and are therefore preconfigured to display $WFLR and $WSGB balances. Some other wallets, though, require you to configure them so that they can display wrapped-token balances. If your wallet doesn't display your wrapped-token balance, you need to configure it, either automatically or manually as described in the following procedures.","title":"Adding Wrapped Tokens to Wallets"},{"location":"user/wrapping-tokens/#automatically","text":"This is typically the fastest procedure, but might not work with all wallets. Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. On the Main Account tab, locate the Account heading and the Help icon, identified by a question mark. Flare Portal Account Help. Click the Help icon and click How do I add Wrapped Flare token to my wallet? . A Click here link for adding $WFLR to your wallet is displayed. Flare Portal Wrapping Help. Click Click here . Your wallet opens. Wallets typically ask you to accept the token. The exact instructions depend on your wallet. Follow the prompts in your wallet to add the wrapped token. Your wrapped token balance is displayed in your wallet.","title":"Automatically"},{"location":"user/wrapping-tokens/#manually","text":"This section is for advanced users. If the automatic method did not work for you, most wallets can still be configured to recognize ERC-20 tokens through an Import tokens or Add custom asset menu, for example. The exact instructions depend on your wallet, but they generally just require you to locate the aforementioned menu and provide the address of the WNat contract. The wallet can usually then retrieve the token name, symbol, and number of decimals directly from the contract. See the Contract Addresses page to find the address of the WNat contract.","title":"Manually"},{"location":"user/block-explorers/","text":"Block Explorers # Block explorers enable you to analyze transactions and interact with addresses on blockchains. Flare provides a block explorer for each of the networks in its ecosystem: Flare Explorer Songbird Explorer Coston Explorer Coston2 Explorer Topics # Finding the Reward Epoch Managing Delegations Managing Rewards Verifying the Vote-Power Block Viewing NFTs Viewing Token Balances Viewing Token Transfers Viewing Transactions Block Explorer Dashboard","title":"Block Explorers"},{"location":"user/block-explorers/#block-explorers","text":"Block explorers enable you to analyze transactions and interact with addresses on blockchains. Flare provides a block explorer for each of the networks in its ecosystem: Flare Explorer Songbird Explorer Coston Explorer Coston2 Explorer","title":"Block Explorers"},{"location":"user/block-explorers/#topics","text":"Finding the Reward Epoch Managing Delegations Managing Rewards Verifying the Vote-Power Block Viewing NFTs Viewing Token Balances Viewing Token Transfers Viewing Transactions Block Explorer Dashboard","title":"Topics"},{"location":"user/block-explorers/finding-reward-epoch/","text":"Finding the Reward Epoch # This page is for advanced users. Reward epochs are periods during which delegations rewards are accrued. Use the block explorer to find the current reward epoch, which you can use to find the epoch for which you can claim rewards and to determine the vote-power block for the next epoch. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. From the block explorer, follow the Retrieval from Blockchain procedure to find and open the FtsoManager contract. The Contract Address Details page is displayed. Click the Read Contract tab, and locate the getCurrentRewardEpoch method. The current reward epoch number is already displayed beside the function, as shown in the following example: Current Reward Epoch. In this example, the FTSO reward epoch is 80.","title":"Finding the Reward Epoch"},{"location":"user/block-explorers/finding-reward-epoch/#finding-the-reward-epoch","text":"This page is for advanced users. Reward epochs are periods during which delegations rewards are accrued. Use the block explorer to find the current reward epoch, which you can use to find the epoch for which you can claim rewards and to determine the vote-power block for the next epoch. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. From the block explorer, follow the Retrieval from Blockchain procedure to find and open the FtsoManager contract. The Contract Address Details page is displayed. Click the Read Contract tab, and locate the getCurrentRewardEpoch method. The current reward epoch number is already displayed beside the function, as shown in the following example: Current Reward Epoch. In this example, the FTSO reward epoch is 80.","title":"Finding the Reward Epoch"},{"location":"user/block-explorers/managing-delegations/","text":"Managing Delegations Using the Block Explorer # This page is for advanced users. When you make delegations to FTSO data providers , you increase their vote power, reinforce the stability of the FTSO ecosystem, and earn monetary rewards. Use the following information to manage your vote-power delegations with the the block explorer, which provides many options but is more complex. Alternatively, if you prefer a simpler interface, use the Flare Portal . Prerequisites # Before you delegate your vote power, you must: Wrap your native tokens . Wrapped tokens are required to delegate your vote power to data providers. Choose 1 or 2 data providers. Multiple lists of data providers are available online, such as FlareMetrics . As you browse the lists, consider the factors that affect the potential for rewards . Understand how the timing of delegations affects rewards , and consider the implications about the vote-power snapshot that will affect your rewards. Delegating Your Vote Power # After you choose your data provider from the list of data providers , locate its address beneath its name, and copy it. To verify the address of the data provider, open a block explorer , paste the address in the search field, and click the same address displayed as the result. On the Transactions tab, a list of recently submitted SubmitHash and RevealPrices transactions are displayed to confirm that the data provider is operating. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the delegate method, and specify values for these parameters: _to(address) : The address for the data provider you copied in Step 1. _bips(uin256) : The percentage in basis points. For example, 10000 bips = 100%, and 5000 bips = 50%. Click Write to run the delegate method. Follow the steps to complete the transaction in your wallet. Delegation is complete. In the next reward epoch, your newly delegated tokens will be included in the calculation of your selected data provider's weight. If the data provider submits useful data and garners any rewards, you will be able to claim your share of the rewards when the reward epoch is over. Removing Delegations # Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the delegate method, change the value of _bips(uin256) for the data provider's address to 0, and click Write to run the method. Follow the steps to complete the transaction in your wallet. Redelegating Vote Power # Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the undelegateAll method, and click Write to run the method. Follow the steps to complete the transaction in your wallet. All your delegations are removed. Delegate to the data providers you've chosen by following the previous set of steps to delegate . Revoking Vote Power # You can immediately revoke your vote power from a malicious data provider. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the revokeDelegationAt method, and specify values for the following parameters: _who(address) : The address of the data provider from whom you will revoke your delegation. _blockNumber(uint256) : The block number at which your delegation will be revoked. Click Write to run the method. Follow the steps to complete the transaction in your wallet. Your delegation is immediately revoked.","title":"Managing Delegations"},{"location":"user/block-explorers/managing-delegations/#managing-delegations-using-the-block-explorer","text":"This page is for advanced users. When you make delegations to FTSO data providers , you increase their vote power, reinforce the stability of the FTSO ecosystem, and earn monetary rewards. Use the following information to manage your vote-power delegations with the the block explorer, which provides many options but is more complex. Alternatively, if you prefer a simpler interface, use the Flare Portal .","title":"Managing Delegations Using the Block Explorer"},{"location":"user/block-explorers/managing-delegations/#prerequisites","text":"Before you delegate your vote power, you must: Wrap your native tokens . Wrapped tokens are required to delegate your vote power to data providers. Choose 1 or 2 data providers. Multiple lists of data providers are available online, such as FlareMetrics . As you browse the lists, consider the factors that affect the potential for rewards . Understand how the timing of delegations affects rewards , and consider the implications about the vote-power snapshot that will affect your rewards.","title":"Prerequisites"},{"location":"user/block-explorers/managing-delegations/#delegating-your-vote-power","text":"After you choose your data provider from the list of data providers , locate its address beneath its name, and copy it. To verify the address of the data provider, open a block explorer , paste the address in the search field, and click the same address displayed as the result. On the Transactions tab, a list of recently submitted SubmitHash and RevealPrices transactions are displayed to confirm that the data provider is operating. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the delegate method, and specify values for these parameters: _to(address) : The address for the data provider you copied in Step 1. _bips(uin256) : The percentage in basis points. For example, 10000 bips = 100%, and 5000 bips = 50%. Click Write to run the delegate method. Follow the steps to complete the transaction in your wallet. Delegation is complete. In the next reward epoch, your newly delegated tokens will be included in the calculation of your selected data provider's weight. If the data provider submits useful data and garners any rewards, you will be able to claim your share of the rewards when the reward epoch is over.","title":"Delegating Your Vote Power"},{"location":"user/block-explorers/managing-delegations/#removing-delegations","text":"Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the delegate method, change the value of _bips(uin256) for the data provider's address to 0, and click Write to run the method. Follow the steps to complete the transaction in your wallet.","title":"Removing Delegations"},{"location":"user/block-explorers/managing-delegations/#redelegating-vote-power","text":"Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the undelegateAll method, and click Write to run the method. Follow the steps to complete the transaction in your wallet. All your delegations are removed. Delegate to the data providers you've chosen by following the previous set of steps to delegate .","title":"Redelegating Vote Power"},{"location":"user/block-explorers/managing-delegations/#revoking-vote-power","text":"You can immediately revoke your vote power from a malicious data provider. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the WNat contract. The Contract Address Details page is displayed. Click the Write Contract tab, and then click Connect Wallet , as shown in the following image: Write Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the revokeDelegationAt method, and specify values for the following parameters: _who(address) : The address of the data provider from whom you will revoke your delegation. _blockNumber(uint256) : The block number at which your delegation will be revoked. Click Write to run the method. Follow the steps to complete the transaction in your wallet. Your delegation is immediately revoked.","title":"Revoking Vote Power"},{"location":"user/block-explorers/managing-rewards/","text":"Managing Rewards Using the Block Explorer # This page is for advanced users. Rewards are accrued from your delegations to FTSO data providers whose submitted data is close to the calculated median value in a price epoch. Use the following information to check your reward balance and claim your rewards with the block explorer, which provides many options but is more complex. Alternatively, if you prefer a simple interface, use the Flare Portal . Checking Your Reward Balance # Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the FtsoRewardManager contract. The Contract Address Details page is displayed. Click the Read Contract tab, and then click Connect Wallet , as shown in the following image: Read Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the getStateOfRewards method, and specify values for the following parameters: _beneficiary(address) : The address to check for rewards. _rewardEpoch(uint256) : The epoch in which you want to check the address for rewards. To check rewards for the epoch currently in progress, get the current reward epoch . Click Query to run the getStateOfRewards method. The following information is returned: _dataProviders : List of providers to which the address delegated vote power during this epoch. _rewardAmounts : List of reward amounts from each delegation. _claimed : List of boolean values indicating whether each of the amounts has already been claimed. _claimable : Boolean value indicating whether rewards for the address are claimable. Rewards are claimable if they are not expired and the epoch has ended. The value of _claimable is independent of the value of _claimed. Claiming Your Rewards # Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the FtsoRewardManager contract. The Contract Address Details page is displayed. Click the Read Contract tab, and then click Connect Wallet , as shown in the following image: Read Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. In the next steps, you will check this wallet for accrued rewards. You can disconnect this wallet and connect a different wallet as frequently as necessary. Run the getEpochsWithUnclaimedRewards(beneficiary_address) method by clicking Query . A list of previous epochs with pending rewards to be claimed is returned. On the Write Contract tab, locate the claimReward method, and specify values for the following parameters: _recipient(address) : The address to which you want claimed rewards to be sent. It can be the address you used to connect your wallet to the block explorer or a different address. _rewardEpochs(uint256[]) : One or more epoch numbers retrieved in Step 5. Specify multiple epoch numbers in a comma-separated list enclosed by square brackets, such as [59,60] . Click Write to run the claimReward method. One of the following results occurs: The claimReward method prompts you to confirm the transaction. Go to Step 8. The claimReward method fails. For security reasons, the FtsoRewardManager contract contains a limited amount of tokens and is replenished periodically. Sometimes, all delegators claim their rewards in a short period of time immediately after the reward epoch ends, and the contract becomes empty. If you are unable to claim your rewards because the contract is empty, try again the next day . Follow the steps to confirm the transaction in your wallet. Your rewards are claimed, and your updated balance of native tokens is displayed.","title":"Managing Rewards"},{"location":"user/block-explorers/managing-rewards/#managing-rewards-using-the-block-explorer","text":"This page is for advanced users. Rewards are accrued from your delegations to FTSO data providers whose submitted data is close to the calculated median value in a price epoch. Use the following information to check your reward balance and claim your rewards with the block explorer, which provides many options but is more complex. Alternatively, if you prefer a simple interface, use the Flare Portal .","title":"Managing Rewards Using the Block Explorer"},{"location":"user/block-explorers/managing-rewards/#checking-your-reward-balance","text":"Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the FtsoRewardManager contract. The Contract Address Details page is displayed. Click the Read Contract tab, and then click Connect Wallet , as shown in the following image: Read Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. Locate the getStateOfRewards method, and specify values for the following parameters: _beneficiary(address) : The address to check for rewards. _rewardEpoch(uint256) : The epoch in which you want to check the address for rewards. To check rewards for the epoch currently in progress, get the current reward epoch . Click Query to run the getStateOfRewards method. The following information is returned: _dataProviders : List of providers to which the address delegated vote power during this epoch. _rewardAmounts : List of reward amounts from each delegation. _claimed : List of boolean values indicating whether each of the amounts has already been claimed. _claimable : Boolean value indicating whether rewards for the address are claimable. Rewards are claimable if they are not expired and the epoch has ended. The value of _claimable is independent of the value of _claimed.","title":"Checking Your Reward Balance"},{"location":"user/block-explorers/managing-rewards/#claiming-your-rewards","text":"Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Follow the Retrieval from Blockchain procedure to find and open the FtsoRewardManager contract. The Contract Address Details page is displayed. Click the Read Contract tab, and then click Connect Wallet , as shown in the following image: Read Contract Tab and Connect Your Wallet. Complete the steps to connect your wallet. In the next steps, you will check this wallet for accrued rewards. You can disconnect this wallet and connect a different wallet as frequently as necessary. Run the getEpochsWithUnclaimedRewards(beneficiary_address) method by clicking Query . A list of previous epochs with pending rewards to be claimed is returned. On the Write Contract tab, locate the claimReward method, and specify values for the following parameters: _recipient(address) : The address to which you want claimed rewards to be sent. It can be the address you used to connect your wallet to the block explorer or a different address. _rewardEpochs(uint256[]) : One or more epoch numbers retrieved in Step 5. Specify multiple epoch numbers in a comma-separated list enclosed by square brackets, such as [59,60] . Click Write to run the claimReward method. One of the following results occurs: The claimReward method prompts you to confirm the transaction. Go to Step 8. The claimReward method fails. For security reasons, the FtsoRewardManager contract contains a limited amount of tokens and is replenished periodically. Sometimes, all delegators claim their rewards in a short period of time immediately after the reward epoch ends, and the contract becomes empty. If you are unable to claim your rewards because the contract is empty, try again the next day . Follow the steps to confirm the transaction in your wallet. Your rewards are claimed, and your updated balance of native tokens is displayed.","title":"Claiming Your Rewards"},{"location":"user/block-explorers/user-interface/","text":"Block Explorer Dashboard # Each block explorer provides a dashboard that includes the following elements: Block Explorer Dashboard. Navigation Bar Metrics Blocks Transactions Navigation Bar # Use the options in the navigation bar to explore the blockchain and toggle light and dark modes. Blocks : View recently created blocks and their constituent transactions. Transactions : View validated or pending transactions. Tokens : View a list of all the tokens on the blockchain or the addresses of wallets that hold a specific token. APIs : For web3 developers to retrieve blockchain data. Network : View the explorers for other networks in the Flare ecosystem. Display theme : Toggle between light and dark mode. Search : Search the blockchain by address, token symbol, token name, transaction hash, or block number. Metrics # The metrics section displays the following information: Gas tracker : The average amount of gas required to process a transaction on a Flare network. Gas is denominated in units of gwei, where 1,000,000,000 gwei equals one token on a Flare network. Average block time : The average time required to confirm a block. Total transactions : The total amount of verified transactions. Total blocks : The total amount of confirmed blocks. Wallet addresses : The total amount of wallets created on the network. Blocks # A block is a group of transactions submitted, validated, and recorded on the blockchain. Each block has a sequential ID and a number of transactions aggregated in the block. To view details about a block and the transactions it contains, click the block ID. Alternatively, view a continuous list of confirmed blocks as they occur by clicking View All Blocks . Blocks. Transactions # Transactions are the various actions you can take on a blockchain. They are categorized by the following types: Standard : Transfers of tokens between two wallets. Contract : Interactions between two smart contracts or a wallet and a smart contract. Contract transactions include delegating tokens, transferring tokens, wrapping and unwrapping tokens, and so on. Interactions between two smart contracts are internal transactions . Transaction Types.","title":"Block Explorer Dashboard"},{"location":"user/block-explorers/user-interface/#block-explorer-dashboard","text":"Each block explorer provides a dashboard that includes the following elements: Block Explorer Dashboard. Navigation Bar Metrics Blocks Transactions","title":"Block Explorer Dashboard"},{"location":"user/block-explorers/user-interface/#navigation-bar","text":"Use the options in the navigation bar to explore the blockchain and toggle light and dark modes. Blocks : View recently created blocks and their constituent transactions. Transactions : View validated or pending transactions. Tokens : View a list of all the tokens on the blockchain or the addresses of wallets that hold a specific token. APIs : For web3 developers to retrieve blockchain data. Network : View the explorers for other networks in the Flare ecosystem. Display theme : Toggle between light and dark mode. Search : Search the blockchain by address, token symbol, token name, transaction hash, or block number.","title":"Navigation Bar"},{"location":"user/block-explorers/user-interface/#metrics","text":"The metrics section displays the following information: Gas tracker : The average amount of gas required to process a transaction on a Flare network. Gas is denominated in units of gwei, where 1,000,000,000 gwei equals one token on a Flare network. Average block time : The average time required to confirm a block. Total transactions : The total amount of verified transactions. Total blocks : The total amount of confirmed blocks. Wallet addresses : The total amount of wallets created on the network.","title":"Metrics"},{"location":"user/block-explorers/user-interface/#blocks","text":"A block is a group of transactions submitted, validated, and recorded on the blockchain. Each block has a sequential ID and a number of transactions aggregated in the block. To view details about a block and the transactions it contains, click the block ID. Alternatively, view a continuous list of confirmed blocks as they occur by clicking View All Blocks . Blocks.","title":"Blocks"},{"location":"user/block-explorers/user-interface/#transactions","text":"Transactions are the various actions you can take on a blockchain. They are categorized by the following types: Standard : Transfers of tokens between two wallets. Contract : Interactions between two smart contracts or a wallet and a smart contract. Contract transactions include delegating tokens, transferring tokens, wrapping and unwrapping tokens, and so on. Interactions between two smart contracts are internal transactions . Transaction Types.","title":"Transactions"},{"location":"user/block-explorers/verifying-vote-power-block/","text":"Verifying the Vote-Power Block # This page is for advanced users. Use the block explorer to verify the vote-power block snapshot for a specific epoch. The snapshot indicates when your delegations are enacted. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. From the block explorer, follow the Retrieval from Blockchain procedure to find and open the FtsoManager contract. The Contract Address Details page is displayed. Click the Read Contract tab. On the Read Contract tab, locate the getRewardEpochVotePowerBlock method, and specify the epoch number. Click Query to run the getRewardEpochVotePowerBlock method. The block number that was used to determine the vote power for the next epoch is returned. Copy this block number, paste it into the Search field, and press Enter. The Block Details page is displayed. The timestamp is displayed, as shown in the following image: Vote-Power Block Snapshot. The displayed timestamp is the exact date and UTC time when vote power was locked during the epoch you specified.","title":"Verifying the Vote-Power Block"},{"location":"user/block-explorers/verifying-vote-power-block/#verifying-the-vote-power-block","text":"This page is for advanced users. Use the block explorer to verify the vote-power block snapshot for a specific epoch. The snapshot indicates when your delegations are enacted. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. From the block explorer, follow the Retrieval from Blockchain procedure to find and open the FtsoManager contract. The Contract Address Details page is displayed. Click the Read Contract tab. On the Read Contract tab, locate the getRewardEpochVotePowerBlock method, and specify the epoch number. Click Query to run the getRewardEpochVotePowerBlock method. The block number that was used to determine the vote power for the next epoch is returned. Copy this block number, paste it into the Search field, and press Enter. The Block Details page is displayed. The timestamp is displayed, as shown in the following image: Vote-Power Block Snapshot. The displayed timestamp is the exact date and UTC time when vote power was locked during the epoch you specified.","title":"Verifying the Vote-Power Block"},{"location":"user/block-explorers/viewing-nfts/","text":"Viewing NFTs # This page is for advanced users. Use the block explorer to view NFTs. Before you begin, ensure the status of the transaction to mint the NFT is Confirmed . Retrieve the transaction hash for the NFT. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Specify the NFT transaction hash from Step 1 in the Search field, and click the result. The Transaction Details page is displayed. Locate the Tokens Minted section. The value of the For parameter is the numerical ID for the NFT. Click the ID. The NFT collection page is displayed. In most cases, your NFT is displayed in the upper-right hand side of the page. However, if the NFT creator used public IPFS gateways or did not create the NFT according to the ERC-721 or ERC-1155 standards, the NFT might not display.","title":"Viewing NFTs"},{"location":"user/block-explorers/viewing-nfts/#viewing-nfts","text":"This page is for advanced users. Use the block explorer to view NFTs. Before you begin, ensure the status of the transaction to mint the NFT is Confirmed . Retrieve the transaction hash for the NFT. Open a block explorer for the appropriate network. The block explorer dashboard is displayed. Specify the NFT transaction hash from Step 1 in the Search field, and click the result. The Transaction Details page is displayed. Locate the Tokens Minted section. The value of the For parameter is the numerical ID for the NFT. Click the ID. The NFT collection page is displayed. In most cases, your NFT is displayed in the upper-right hand side of the page. However, if the NFT creator used public IPFS gateways or did not create the NFT according to the ERC-721 or ERC-1155 standards, the NFT might not display.","title":"Viewing NFTs"},{"location":"user/block-explorers/viewing-token-balances/","text":"Viewing Token Balances # This page is for advanced users. Use the block explorer to view the list of token balances at an address. Retrieve the address whose tokens you want to view. Open the block explorer for the appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed. Click the Tokens tab, as shown in the following image: Tokens. The address's $FLR balance and a list of the non-native tokens it contains are displayed. The list can include ERC-20, ERC-721, and ERC-1155 tokens. Balance History # Use the block explorer to view a historical chart of the native-token balance at the address. Retrieve the address whose tokens you want to view. Open the block explorer for the network appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed. Click the Coin Balance History tab, as shown in the following image: Coin Balance History. A chart that shows the history of the native token at the address and a list of associated blocks is displayed, as shown in the following image: Coin Balance Chart.","title":"Viewing Token Balances"},{"location":"user/block-explorers/viewing-token-balances/#viewing-token-balances","text":"This page is for advanced users. Use the block explorer to view the list of token balances at an address. Retrieve the address whose tokens you want to view. Open the block explorer for the appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed. Click the Tokens tab, as shown in the following image: Tokens. The address's $FLR balance and a list of the non-native tokens it contains are displayed. The list can include ERC-20, ERC-721, and ERC-1155 tokens.","title":"Viewing Token Balances"},{"location":"user/block-explorers/viewing-token-balances/#balance-history","text":"Use the block explorer to view a historical chart of the native-token balance at the address. Retrieve the address whose tokens you want to view. Open the block explorer for the network appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed. Click the Coin Balance History tab, as shown in the following image: Coin Balance History. A chart that shows the history of the native token at the address and a list of associated blocks is displayed, as shown in the following image: Coin Balance Chart.","title":"Balance History"},{"location":"user/block-explorers/viewing-token-transfers/","text":"Viewing Token Transfers # This page is for advanced users. Use the block explorer to view token transfers to and from an address. Retrieve the address whose token transfers you want to view. Open the block explorer for the appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed. Click the Token Transfers tab, as shown in the following image: Token Transfers. The Token Transfers list is displayed. Click the transaction hash for the token transfer you want to view. The following details about the transfer are displayed: Transaction Hash : A unique identifier that proves a transaction is verified and added to the blockchain. Result : The state of the transaction. The state is either Success , Pending , or Failed . Status : The status of the transaction. The status is either Confirmed or Unconfirmed . Block : The number of the block that contains the transaction. Timestamp : The date and time when the transaction was added to the blockchain and the amount of time required to confirm it. From : The address of the transaction sender. Interacted With (To) : The address of the contract that handles the transaction. Tokens Transferred From : The address that initiated the transaction with the contract. To : The address of the recipient of the token in the transaction. For : The symbol of the token and its quantity in the transaction. Value : The quantity of tokens sent. Transaction Fee : The total cost of the transaction. Gas Price : The price per unit of gas specified by the sender. Units are measured in gwei. Transaction Type : Gas Limit : The maximum amount of gas approved for the transaction. Max Fee Per Gas : The maximum total amount per unit of gas the sender would pay, including the base fee and priority fee. Max Priority Fee per Gas : The maximum fee per unit of gas specified by the sender to pay a validator to prioritize the transaction. This fee is also called a tip. Priority Fee/Tip : The priority fee specified by the sender to pay a validator to prioritize the transaction. Transaction Burnt Fee : The amount of $FLR burned for the transaction. Gas Used by Transaction : The actual amount of gas used by the transaction. Nonce Position : The transaction number from the sender's address. Each transaction made by an address increases the nonce by one. Raw Input : The hashed input of a transaction. This input accompanies the transaction to process it. Input : The relevant functions that were called and parameters used in the transaction.","title":"Viewing Token Transfers"},{"location":"user/block-explorers/viewing-token-transfers/#viewing-token-transfers","text":"This page is for advanced users. Use the block explorer to view token transfers to and from an address. Retrieve the address whose token transfers you want to view. Open the block explorer for the appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed. Click the Token Transfers tab, as shown in the following image: Token Transfers. The Token Transfers list is displayed. Click the transaction hash for the token transfer you want to view. The following details about the transfer are displayed: Transaction Hash : A unique identifier that proves a transaction is verified and added to the blockchain. Result : The state of the transaction. The state is either Success , Pending , or Failed . Status : The status of the transaction. The status is either Confirmed or Unconfirmed . Block : The number of the block that contains the transaction. Timestamp : The date and time when the transaction was added to the blockchain and the amount of time required to confirm it. From : The address of the transaction sender. Interacted With (To) : The address of the contract that handles the transaction. Tokens Transferred From : The address that initiated the transaction with the contract. To : The address of the recipient of the token in the transaction. For : The symbol of the token and its quantity in the transaction. Value : The quantity of tokens sent. Transaction Fee : The total cost of the transaction. Gas Price : The price per unit of gas specified by the sender. Units are measured in gwei. Transaction Type : Gas Limit : The maximum amount of gas approved for the transaction. Max Fee Per Gas : The maximum total amount per unit of gas the sender would pay, including the base fee and priority fee. Max Priority Fee per Gas : The maximum fee per unit of gas specified by the sender to pay a validator to prioritize the transaction. This fee is also called a tip. Priority Fee/Tip : The priority fee specified by the sender to pay a validator to prioritize the transaction. Transaction Burnt Fee : The amount of $FLR burned for the transaction. Gas Used by Transaction : The actual amount of gas used by the transaction. Nonce Position : The transaction number from the sender's address. Each transaction made by an address increases the nonce by one. Raw Input : The hashed input of a transaction. This input accompanies the transaction to process it. Input : The relevant functions that were called and parameters used in the transaction.","title":"Viewing Token Transfers"},{"location":"user/block-explorers/viewing-transactions/","text":"Viewing Transactions # This page is for advanced users. Use the block explorer to view transaction details that explain where the transactions exist on the blockchain, when they were processed, how much gas they consumed, and more. Retrieve the address whose transactions you want to view. Open the block explorer for the appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed, as shown in the following image. The preselected Transactions tab lists the transactions associated with the address. Transactions. Click the transaction hash, as shown in the following image, which highlights in sequence a standard transaction and a contract transaction . The listed transactions were made by the address you specified. Details about a transaction are displayed when you click a transaction hash. Transaction Hash. The Transaction Details page is displayed, as shown in the following image: Transaction Details. Transaction Details # The following transaction information is provided: Transaction Hash : A unique identifier that proves a transaction is verified and added to the blockchain. Result : The state of the transaction. The state is either Success , Pending , or Failed . Status : The status of the transaction. The status is either Confirmed or Unconfirmed . Block : The number of the block that contains the transaction. Timestamp : The date and time when the transaction was added to the blockchain and the amount of time required to confirm it. From : The address of the transaction sender. To : The address of the transaction recipient. Value : The quantity of tokens sent. Transaction Fee : The total cost of the transaction. Gas Price : The price per unit of gas specified by the sender. Units are measured in gwei. Transaction Type : Gas Limit : The maximum amount of gas approved for the transaction. Max Fee Per Gas : The maximum total amount per unit of gas the sender would pay, including the base fee and priority fee. Max Priority Fee per Gas : The maximum fee per unit of gas specified by the sender to pay a validator to prioritize the transaction. This fee is also called a tip. Priority Fee/Tip : The priority fee specified by the sender to pay a validator to prioritize the transaction. Transaction Burnt Fee : The amount of $FLR burned for the transaction. Gas Used by Transaction : The actual amount of gas used by the transaction. Nonce Position : The transaction number from the sender's address. Each transaction made by an address increases the nonce by one. The following elements are specific to contract transactions: Interacted With (To) : The address of the contract that handles the transaction. Tokens Minted From : The address that initiated the transaction with the contract. To : The address of the recipient of the token in the transaction. For : The symbol of the token and its quantity in the transaction. Raw Input : The hashed input of a transaction. This input accompanies the transaction to process it. Input # The Input section shows the methods that were called and the parameters used in the transaction. Internal Transactions # Internal transactions occur between multiple smart contracts. In some cases, tokens are transferred to a smart contract during an internal transaction. Locate the Internal Transactions tab, as shown in the following image: Internal Transactions. Click the transaction hash, as shown in the following image: Transaction Hash. The transaction details are displayed. Logs # Transaction logs show events that were trigged by smart contracts during a transaction and information related to those events. Click the Logs tab, as shown in the following image: Logs. The logs are displayed. Raw Trace # The raw trace shows all parameters and data related to a transaction. If errors occurred during the transaction, this information can be used to debug them. Click the Raw Trace tab, as shown in the following image: Raw Trace. The raw trace is displayed in JSON format.","title":"Viewing Transactions"},{"location":"user/block-explorers/viewing-transactions/#viewing-transactions","text":"This page is for advanced users. Use the block explorer to view transaction details that explain where the transactions exist on the blockchain, when they were processed, how much gas they consumed, and more. Retrieve the address whose transactions you want to view. Open the block explorer for the appropriate network. The block explorer dashboard is displayed. Insert the address from Step 1 into the Search field. If the address exists, it is highlighted in the results list. Click the highlighted address. The Address Details page is displayed, as shown in the following image. The preselected Transactions tab lists the transactions associated with the address. Transactions. Click the transaction hash, as shown in the following image, which highlights in sequence a standard transaction and a contract transaction . The listed transactions were made by the address you specified. Details about a transaction are displayed when you click a transaction hash. Transaction Hash. The Transaction Details page is displayed, as shown in the following image: Transaction Details.","title":"Viewing Transactions"},{"location":"user/block-explorers/viewing-transactions/#transaction-details","text":"The following transaction information is provided: Transaction Hash : A unique identifier that proves a transaction is verified and added to the blockchain. Result : The state of the transaction. The state is either Success , Pending , or Failed . Status : The status of the transaction. The status is either Confirmed or Unconfirmed . Block : The number of the block that contains the transaction. Timestamp : The date and time when the transaction was added to the blockchain and the amount of time required to confirm it. From : The address of the transaction sender. To : The address of the transaction recipient. Value : The quantity of tokens sent. Transaction Fee : The total cost of the transaction. Gas Price : The price per unit of gas specified by the sender. Units are measured in gwei. Transaction Type : Gas Limit : The maximum amount of gas approved for the transaction. Max Fee Per Gas : The maximum total amount per unit of gas the sender would pay, including the base fee and priority fee. Max Priority Fee per Gas : The maximum fee per unit of gas specified by the sender to pay a validator to prioritize the transaction. This fee is also called a tip. Priority Fee/Tip : The priority fee specified by the sender to pay a validator to prioritize the transaction. Transaction Burnt Fee : The amount of $FLR burned for the transaction. Gas Used by Transaction : The actual amount of gas used by the transaction. Nonce Position : The transaction number from the sender's address. Each transaction made by an address increases the nonce by one. The following elements are specific to contract transactions: Interacted With (To) : The address of the contract that handles the transaction. Tokens Minted From : The address that initiated the transaction with the contract. To : The address of the recipient of the token in the transaction. For : The symbol of the token and its quantity in the transaction. Raw Input : The hashed input of a transaction. This input accompanies the transaction to process it.","title":"Transaction Details"},{"location":"user/block-explorers/viewing-transactions/#input","text":"The Input section shows the methods that were called and the parameters used in the transaction.","title":"Input"},{"location":"user/block-explorers/viewing-transactions/#internal-transactions","text":"Internal transactions occur between multiple smart contracts. In some cases, tokens are transferred to a smart contract during an internal transaction. Locate the Internal Transactions tab, as shown in the following image: Internal Transactions. Click the transaction hash, as shown in the following image: Transaction Hash. The transaction details are displayed.","title":"Internal Transactions"},{"location":"user/block-explorers/viewing-transactions/#logs","text":"Transaction logs show events that were trigged by smart contracts during a transaction and information related to those events. Click the Logs tab, as shown in the following image: Logs. The logs are displayed.","title":"Logs"},{"location":"user/block-explorers/viewing-transactions/#raw-trace","text":"The raw trace shows all parameters and data related to a transaction. If errors occurred during the transaction, this information can be used to debug them. Click the Raw Trace tab, as shown in the following image: Raw Trace. The raw trace is displayed in JSON format.","title":"Raw Trace"},{"location":"user/delegation/","text":"FTSO Delegation # Select one of the topics below: Managing Delegations Managing Rewards","title":"FTSO Delegation"},{"location":"user/delegation/#ftso-delegation","text":"Select one of the topics below: Managing Delegations Managing Rewards","title":"FTSO Delegation"},{"location":"user/delegation/managing-delegations/","text":"Managing Delegations Using the Flare Portal # When you make delegations to data providers, you increase their vote power, reinforce the stability of the FTSO ecosystem, and earn monetary rewards. This information explains how to manage your delegations using the Flare Portal . Alternatively, if you have used block explorers for other networks and are competent interacting with smart contracts without a user interface, you can use the block explorer , which provides more options but can be more complex. Using it is intended for advanced users. Prerequisites # Before you delegate your vote power, you must: Wrap your native tokens . Wrapped tokens are required to delegate your vote power to data providers. Choose 1 or 2 data providers. Multiple lists of data providers are available online, such as FlareMetrics . As you browse the lists, consider the factors that affect the potential for rewards . Understand how the timing of delegations affects rewards , and consider the following implications about the vote-power snapshot that will affect your rewards. Delegating Your Vote Power # Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. On the Main Account tab, locate the FTSO provider delegations field, and click Delegate . The Delegate FTSO providers window is displayed. Click the Main provider dropdown menu, click the data provider you want, and drag the slider to select the percentage of your vote power you want to delegate to the data provider. Delegate FTSO providers window. Optional : If you want to delegate to a second data provider, locate the Second (optional) provider field, and repeat step 3. Click Submit . Follow the steps to confirm the transaction in your wallet. Removing Delegations # Open the Flare Portal , connect your wallet, and ensure you are connected to the network you want. On the Main Account tab, locate the FTSO provider delegations field, and click Delegate . The Delegate FTSO providers window is displayed. Drag the slider to 0% for one or both of the data providers, and click Submit . Follow the steps to confirm the transaction in your wallet.","title":"Managing Delegations"},{"location":"user/delegation/managing-delegations/#managing-delegations-using-the-flare-portal","text":"When you make delegations to data providers, you increase their vote power, reinforce the stability of the FTSO ecosystem, and earn monetary rewards. This information explains how to manage your delegations using the Flare Portal . Alternatively, if you have used block explorers for other networks and are competent interacting with smart contracts without a user interface, you can use the block explorer , which provides more options but can be more complex. Using it is intended for advanced users.","title":"Managing Delegations Using the Flare Portal"},{"location":"user/delegation/managing-delegations/#prerequisites","text":"Before you delegate your vote power, you must: Wrap your native tokens . Wrapped tokens are required to delegate your vote power to data providers. Choose 1 or 2 data providers. Multiple lists of data providers are available online, such as FlareMetrics . As you browse the lists, consider the factors that affect the potential for rewards . Understand how the timing of delegations affects rewards , and consider the following implications about the vote-power snapshot that will affect your rewards.","title":"Prerequisites"},{"location":"user/delegation/managing-delegations/#delegating-your-vote-power","text":"Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. On the Main Account tab, locate the FTSO provider delegations field, and click Delegate . The Delegate FTSO providers window is displayed. Click the Main provider dropdown menu, click the data provider you want, and drag the slider to select the percentage of your vote power you want to delegate to the data provider. Delegate FTSO providers window. Optional : If you want to delegate to a second data provider, locate the Second (optional) provider field, and repeat step 3. Click Submit . Follow the steps to confirm the transaction in your wallet.","title":"Delegating Your Vote Power"},{"location":"user/delegation/managing-delegations/#removing-delegations","text":"Open the Flare Portal , connect your wallet, and ensure you are connected to the network you want. On the Main Account tab, locate the FTSO provider delegations field, and click Delegate . The Delegate FTSO providers window is displayed. Drag the slider to 0% for one or both of the data providers, and click Submit . Follow the steps to confirm the transaction in your wallet.","title":"Removing Delegations"},{"location":"user/delegation/managing-rewards/","text":"Managing Rewards Using the Flare Portal # Rewards are accrued from your delegations to FTSO data providers whose submitted data is close to the calculated median value in a price epoch. Use this information to claim FTSO delegation rewards by using the Flare Portal. Alternatively, if you have used block explorers for other networks and are competent interacting with smart contracts without a user interface, you can use the block explorer , which provides more options but can be more complex. Using it is intended for advanced users. Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. On the Main Account tab, locate the Claim your delegation rewards section to determine whether you have claimable rewards and whether those rewards can currently be claimed: If you have rewards to claim and the reward manager contains enough tokens, the Claim button is enabled and shows the amount of rewards you can claim. Go to Step 5. If you have rewards to claim, but the reward manager currently does not contain enough tokens, the Claim button shows the amount of rewards you can claim but is disabled. For security reasons, a limited amount of tokens is stored at a given time in the reward manager contract. Sometimes, all delegators claim their rewards in a short period of time immediately after the reward epoch ends, and the token storage is depleted. The storage is replenished periodically. If you are currently unable to claim your rewards because the storage is empty, try again the next day . If you don't have claimable rewards, the Claim button shows 0 and is disabled. The following image shows an account with claimable rewards: An account with claimable rewards. Click the Claim button. The Claim your delegation rewards window is displayed. Claim your delegation rewards. Optional : If you have enabled your personal delegation account , the option to send your rewards to the PDA is preselected by default. To send your rewards to the address that you connected to the Portal instead, deselect the option. Click Claim All Rewards to claim all available rewards for the listed epochs. Follow the steps to confirm the transaction in your wallet. Your rewards are claimed, and your updated balance of native tokens is displayed.","title":"Managing Rewards"},{"location":"user/delegation/managing-rewards/#managing-rewards-using-the-flare-portal","text":"Rewards are accrued from your delegations to FTSO data providers whose submitted data is close to the calculated median value in a price epoch. Use this information to claim FTSO delegation rewards by using the Flare Portal. Alternatively, if you have used block explorers for other networks and are competent interacting with smart contracts without a user interface, you can use the block explorer , which provides more options but can be more complex. Using it is intended for advanced users. Open the Flare Portal . The home page is displayed. Flare Portal home. Click Connect to Wallet and log into your wallet. The interface to your Main Account opens. Ensure you are connected to the network you want. In the following image, the wallet is connected to the Flare network. Main Account on the Flare network. On the Main Account tab, locate the Claim your delegation rewards section to determine whether you have claimable rewards and whether those rewards can currently be claimed: If you have rewards to claim and the reward manager contains enough tokens, the Claim button is enabled and shows the amount of rewards you can claim. Go to Step 5. If you have rewards to claim, but the reward manager currently does not contain enough tokens, the Claim button shows the amount of rewards you can claim but is disabled. For security reasons, a limited amount of tokens is stored at a given time in the reward manager contract. Sometimes, all delegators claim their rewards in a short period of time immediately after the reward epoch ends, and the token storage is depleted. The storage is replenished periodically. If you are currently unable to claim your rewards because the storage is empty, try again the next day . If you don't have claimable rewards, the Claim button shows 0 and is disabled. The following image shows an account with claimable rewards: An account with claimable rewards. Click the Claim button. The Claim your delegation rewards window is displayed. Claim your delegation rewards. Optional : If you have enabled your personal delegation account , the option to send your rewards to the PDA is preselected by default. To send your rewards to the address that you connected to the Portal instead, deselect the option. Click Claim All Rewards to claim all available rewards for the listed epochs. Follow the steps to confirm the transaction in your wallet. Your rewards are claimed, and your updated balance of native tokens is displayed.","title":"Managing Rewards Using the Flare Portal"},{"location":"user/governance/","text":"Governance # This section contains information about participating in governance on the Flare and Songbird networks. Voting","title":"Governance"},{"location":"user/governance/#governance","text":"This section contains information about participating in governance on the Flare and Songbird networks. Voting","title":"Governance"},{"location":"user/governance/voting/","text":"Voting # An integral part of the governance process , voting is the way you influence decisions about how Flare and Songbird operate. This process can be performed directly through Flare's smart contracts, but the Flare Foundation has developed the Flare Portal to enable you to conveniently cast your vote. The following information is about voting on the Flare and Songbird networks. Ensure you have selected one of these networks in your wallet. Governance Process Summary # This section summarizes the voting process, which is explained in more detail in the Governance page . All changes to the Flare and Songbird networks are determined by the outcomes of votes on Flare Improvement Proposals and Songbird Testing Proposals . For now, all proposals are published by the Flare Foundation. On each network, each account can cast a number of votes equal to the amount of wrapped tokens it holds. Since this amount varies over time, a snapshot of all accounts is taken at a block randomly chosen before voting starts. This block is called the vote count block . Before snapshots are taken, a notice period occurs. If you need to wrap tokens before a voting, wrap them during this notice period so that they are always included in the snapshot . Tip It is worth noting that you can use the same wrapped tokens to simultaneously vote on proposals and delegate to FTSO data providers . Requirements # To vote on any proposal, you need an account that contains wrapped tokens. You can wrap your tokens by using the Flare Portal , as shown in the Getting Wrapped Tokens section below. Warning Only wrapped tokens held at the vote count block are considered towards your vote count. Tokens wrapped or received afterwards will not result in additional votes. If you need to wrap tokens, always do so during the notice period . Guide # 1. Connecting to the Portal # Copy the Flare Portal URL, since you will need it later: https://portal.flare.network The first step to use the portal is to connect your wallet to it, and the procedure is different for each wallet: Bifrost Wallet # Open Bifrost Wallet, log in, and click the web browser tab indicated by the four gray squares at the bottom of the screen. Paste the Flare Portal URL in the search field at the top of the window, and click Search . Click Connect to Wallet . Select Bifrost Wallet . Ensure either the Flare or Songbird network is selected in the pop-up window, and click Connect . Your wallet is now connected to the portal. MetaMask Mobile # Open MetaMask, and log in. Click the three-lines menu , and click Browser . Paste the Flare Portal URL in the search field at the top of the window, and click Go . Click Connect to Wallet , and click MetaMask . Your wallet is now connected to the portal. Ledger Nano S/X and Chrome # Connect to your Ledger device, and unlock it. Log into the MetaMask Chrome extension, and sync your Ledger device. Paste the Flare Portal URL in the search field at the top of the Chrome window, and click Enter . Click Connect to Wallet . Click MetaMask . Your wallet is now connected to the portal. MetaMask or Brave Wallet # Copy and paste the Flare Portal URL in the search bar at the top of your browser and press Enter . Click Connect to Wallet . Select MetaMask . Ensure the correct account address is selected and press Confirm . Your wallet is now connected to the portal. 2. Getting Wrapped Tokens # Wrapped tokens are required to vote. To wrap your tokens: On the Account tab in the Flare Portal, ensure you are connected to the network on which the proposal will be voted. Locate your token balance, and click Wrap . Specify the amount you want to wrap, and click Wrap . Never wrap all your tokens Always leave some unwrapped tokens to pay for transaction fees. Confirm the transaction in your wallet. Remember to wrap your tokens before voting starts, as explained in the Governance Process Summary section above. 3. Casting Your Vote # Important Wrapped tokens are required to vote. Depending on the network, ensure you have either $FLR or $SGB in the wallet you will use to vote. For more information, see Getting Wrapped Tokens . In the Flare Portal, select the Voting tab. The Governance Proposals page is displayed. Locate your current number of votes in the black box. If you have fewer votes than you expected, consider the warning in the Requirements section above. In the List of proposals , locate the proposal you want to vote on, and click on it . The selected proposal is displayed. Review the information in the Proposal info and Voting details sections. Cast your vote. All your available votes will be assigned to the option you specify: To vote in favor of the proposal, click Vote For . To vote for the proposal to be rejected, click Vote Against . After you sign the transaction, your vote is final and cannot be changed. To sign the transaction and lock your vote, click Confirm . Your contribution to this proposal is now complete. Transferring Votes # Votes can be transferred to another account while the wrapped tokens remain in your possession. This is useful, for example, if you have wrapped tokens in multiple self-custody wallets, since you can simplify your voting process by transferring all the votes to a single wallet. You can read all the details about transferring votes in the Governance page . By completing the following process, you are crediting another account with votes only; the tokens themselves stay in the original wallet. Copy the Flare or Songbird address you want to transfer votes to. On the Voting tab in the Flare Portal, locate your amount of current votes in the black box, and click Transfer votes . The Information about transferred votes window is displayed. Read the disclaimer, and click Transfer votes . The Transfer votes window is displayed. In the Transfer all my votes to field, paste the address from Step 1, and click Confirm . Click Confirm on your wallet to sign the transaction. Your votes are credited to the address you specified. The tokens themselves stay in the original address. Canceling vote transfers You can stop transferring your votes to another address, if you do so before the snapshot is taken. You can do so from the Transfer votes window using the Remove delegation button. This button is only available when you have previously transferred votes.","title":"Voting"},{"location":"user/governance/voting/#voting","text":"An integral part of the governance process , voting is the way you influence decisions about how Flare and Songbird operate. This process can be performed directly through Flare's smart contracts, but the Flare Foundation has developed the Flare Portal to enable you to conveniently cast your vote. The following information is about voting on the Flare and Songbird networks. Ensure you have selected one of these networks in your wallet.","title":"Voting"},{"location":"user/governance/voting/#governance-process-summary","text":"This section summarizes the voting process, which is explained in more detail in the Governance page . All changes to the Flare and Songbird networks are determined by the outcomes of votes on Flare Improvement Proposals and Songbird Testing Proposals . For now, all proposals are published by the Flare Foundation. On each network, each account can cast a number of votes equal to the amount of wrapped tokens it holds. Since this amount varies over time, a snapshot of all accounts is taken at a block randomly chosen before voting starts. This block is called the vote count block . Before snapshots are taken, a notice period occurs. If you need to wrap tokens before a voting, wrap them during this notice period so that they are always included in the snapshot . Tip It is worth noting that you can use the same wrapped tokens to simultaneously vote on proposals and delegate to FTSO data providers .","title":"Governance Process Summary"},{"location":"user/governance/voting/#requirements","text":"To vote on any proposal, you need an account that contains wrapped tokens. You can wrap your tokens by using the Flare Portal , as shown in the Getting Wrapped Tokens section below. Warning Only wrapped tokens held at the vote count block are considered towards your vote count. Tokens wrapped or received afterwards will not result in additional votes. If you need to wrap tokens, always do so during the notice period .","title":"Requirements"},{"location":"user/governance/voting/#guide","text":"","title":"Guide"},{"location":"user/governance/voting/#1-connecting-to-the-portal","text":"Copy the Flare Portal URL, since you will need it later: https://portal.flare.network The first step to use the portal is to connect your wallet to it, and the procedure is different for each wallet:","title":"1. Connecting to the Portal"},{"location":"user/governance/voting/#bifrost-wallet","text":"Open Bifrost Wallet, log in, and click the web browser tab indicated by the four gray squares at the bottom of the screen. Paste the Flare Portal URL in the search field at the top of the window, and click Search . Click Connect to Wallet . Select Bifrost Wallet . Ensure either the Flare or Songbird network is selected in the pop-up window, and click Connect . Your wallet is now connected to the portal.","title":"Bifrost Wallet"},{"location":"user/governance/voting/#metamask-mobile","text":"Open MetaMask, and log in. Click the three-lines menu , and click Browser . Paste the Flare Portal URL in the search field at the top of the window, and click Go . Click Connect to Wallet , and click MetaMask . Your wallet is now connected to the portal.","title":"MetaMask Mobile"},{"location":"user/governance/voting/#ledger-nano-sx-and-chrome","text":"Connect to your Ledger device, and unlock it. Log into the MetaMask Chrome extension, and sync your Ledger device. Paste the Flare Portal URL in the search field at the top of the Chrome window, and click Enter . Click Connect to Wallet . Click MetaMask . Your wallet is now connected to the portal.","title":"Ledger Nano S/X and Chrome"},{"location":"user/governance/voting/#metamask-or-brave-wallet","text":"Copy and paste the Flare Portal URL in the search bar at the top of your browser and press Enter . Click Connect to Wallet . Select MetaMask . Ensure the correct account address is selected and press Confirm . Your wallet is now connected to the portal.","title":"MetaMask or Brave Wallet"},{"location":"user/governance/voting/#2-getting-wrapped-tokens","text":"Wrapped tokens are required to vote. To wrap your tokens: On the Account tab in the Flare Portal, ensure you are connected to the network on which the proposal will be voted. Locate your token balance, and click Wrap . Specify the amount you want to wrap, and click Wrap . Never wrap all your tokens Always leave some unwrapped tokens to pay for transaction fees. Confirm the transaction in your wallet. Remember to wrap your tokens before voting starts, as explained in the Governance Process Summary section above.","title":"2. Getting Wrapped Tokens"},{"location":"user/governance/voting/#3-casting-your-vote","text":"Important Wrapped tokens are required to vote. Depending on the network, ensure you have either $FLR or $SGB in the wallet you will use to vote. For more information, see Getting Wrapped Tokens . In the Flare Portal, select the Voting tab. The Governance Proposals page is displayed. Locate your current number of votes in the black box. If you have fewer votes than you expected, consider the warning in the Requirements section above. In the List of proposals , locate the proposal you want to vote on, and click on it . The selected proposal is displayed. Review the information in the Proposal info and Voting details sections. Cast your vote. All your available votes will be assigned to the option you specify: To vote in favor of the proposal, click Vote For . To vote for the proposal to be rejected, click Vote Against . After you sign the transaction, your vote is final and cannot be changed. To sign the transaction and lock your vote, click Confirm . Your contribution to this proposal is now complete.","title":"3. Casting Your Vote"},{"location":"user/governance/voting/#transferring-votes","text":"Votes can be transferred to another account while the wrapped tokens remain in your possession. This is useful, for example, if you have wrapped tokens in multiple self-custody wallets, since you can simplify your voting process by transferring all the votes to a single wallet. You can read all the details about transferring votes in the Governance page . By completing the following process, you are crediting another account with votes only; the tokens themselves stay in the original wallet. Copy the Flare or Songbird address you want to transfer votes to. On the Voting tab in the Flare Portal, locate your amount of current votes in the black box, and click Transfer votes . The Information about transferred votes window is displayed. Read the disclaimer, and click Transfer votes . The Transfer votes window is displayed. In the Transfer all my votes to field, paste the address from Step 1, and click Confirm . Click Confirm on your wallet to sign the transaction. Your votes are credited to the address you specified. The tokens themselves stay in the original address. Canceling vote transfers You can stop transferring your votes to another address, if you do so before the snapshot is taken. You can do so from the Transfer votes window using the Remove delegation button. This button is only available when you have previously transferred votes.","title":"Transferring Votes"},{"location":"user/staking/","text":"Staking on Validators # This section contains information about staking Flare assets on validators and receiving rewards earned from your stake. Using FlareStake to Stake Using the Command Line to Stake List of validators Use any of the following tools to obtain the latest list of validators and their stats: FlareMetrics Flarescan flare.builders SolidiFi","title":"Staking on Validators"},{"location":"user/staking/#staking-on-validators","text":"This section contains information about staking Flare assets on validators and receiving rewards earned from your stake. Using FlareStake to Stake Using the Command Line to Stake List of validators Use any of the following tools to obtain the latest list of validators and their stats: FlareMetrics Flarescan flare.builders SolidiFi","title":"Staking on Validators"},{"location":"user/staking/staking-cli/","text":"Using the Command Line to Stake # Flare has a command-line interface (CLI) tool called FlareStake CLI, which allows performing stake operations on validator nodes from a terminal. A staking app with a graphical user interface (GUI) is also available to simplify the staking process. See the Using FlareStake to Stake guide to learn about it. Still, a CLI tool has other advantages, like allowing it to be part of automated processes. Table of Contents Staking Overview : What you need to know about staking. Installing the Flare Stake CLI : Install required tools. Staking Guide : How to perform staking. Claiming Guide : How to claim staking rewards. Troubleshooting : Addressing common issues. Staking Overview # If you already know how staking on validators works on the Flare network, skip this section. Note Proof of stake is being implemented on Flare in phases. Ensure that you have read the Validators page to learn about them. Staking works by locking funds for a period of time to support a specific network validator . When validator owners stake to their own nodes they self-bond , whereas all other participants are said to delegate their stake to that validator. Participants choose how much to stake and for how long their stake will be locked. The minimum values are: Self-bond Delegation Minimum amount 1M $FLR 50K $FLR Minimum duration 60 days 14 days At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period. The deployment phases summary shows other rewards that staked funds can still earn while they are locked. Given that the Flare network uses two independent underlying chains , there is one extra step that must be considered. Funds must be transferred from the C-chain, where smart contracts run, to the P-chain, where staking happens. After the staking period expires and funds are unlocked, they can be transferred back to the C-chain. This guide explains how to perform the above operations using the Flare Stake CLI tool. Installing the Flare Stake CLI # This tool is open source, so it can be installed from its source code . However, it is more convenient to use the prepackaged npm version . The Flare Stake CLI works on Windows, Mac, and Linux. Note It is not recommended to run this tool using the Windows Subsystem for Linux (WSL), as it might have issues accessing hardware wallets through USB ports. On Windows, use the standard Windows command prompt or terminal instead. Prerequisites # Install the npm package manager . This guide has been tested with Node.js v18.16.0 and npm v9.5.1 . Installation # After npm is available, type this command into a terminal to make the tool available from any folder: npm install @flarenetwork/flare-stake-tool -g Check that the tool has been correctly installed by running: flare-stake-tool The tool's banner is displayed: _____ _ ____ _ _ ____ _ ___ | ___| | __ _ _ __ ___ / ___|| |_ __ _| | _____ / ___| | |_ _| | |_ | |/ _` | '__/ _ \\ \\___ \\| __/ _` | |/ / _ \\ | | | | | | | _| | | (_| | | | __/ ___) | || (_| | < __/ | |___| |___ | | |_| |_|\\__,_|_| \\___| |____/ \\__\\__,_|_|\\_\\___| \\____|_____|___| Version: 3.0.2 Make sure at least version 3.0.0 has been installed. Configuration # You can specify the account from which staking will take place in different ways. Choose one of the following two options. Note that using a Ledger hardware wallet is the only recommended way. Ledger Configuration Your device must be configured before it can be used: Install the Avalanche application : Connect the device to your computer and unlock it using your PIN code. Open the Ledger Live application. Go to the My Ledger tab and make sure the device is using the latest firmware. In the App catalog tab, search for \"Avalanche\" and click on the Install button. Note that this app requires all available space on a Ledger Nano S device (138 KB). You might need to remove other apps first to free up space. Select your desired account : Exit the Ledger Live application and make sure the device is not connected to any other application like MetaMask. Open the Avalanche app on the Ledger. The screen should show \"Avalanche Ready\". From a terminal, enter: flare-stake-tool interactive This command starts the staking tool in interactive mode. In this mode the tool asks questions until it has enough information to execute a command. Then, after the welcome banner: ? How do you want to connect your wallet? (Use arrow keys) > Ledger Public Key Private Key (not recommended) Select Ledger with the cursor keys and press Enter . The next question is: ? Which network do you want to connect to? (Use arrow keys) > Flare (Mainnet) Coston2 (Testnet) LocalHost (for development only) Select Flare (Mainnet) and press Enter . This message shows for a few seconds: Fetching Addresses... Eventually a list of addresses is shown. These are the addresses that can be used from this device. Choose the one you want to stake from and press Enter . Keep in mind that this address needs to have a positive $FLR balance to pay for transaction fees and be able to stake. You can transfer funds to it later on. Finally the main menu appears: ? What do you want to do? (Use arrow keys) View chain addresses > Check on-chain balance Get network info Get validator info Move assets from C-chain to P-chain Move assets from P-chain to C-chain Add a validator node As an example, choose Check on-chain balance and press Enter . The balance of your selected account is shown for both the C-chain and the P-chain and the tool exits. At this point, a ctx.json file has been created in the current folder containing the selected account. When you run the tool from the same folder again, you will be given the option to use the same account. Using the same account saves you the inconvenience of repeating the above steps every time. Private Key Configuration If you have a Ledger device and you have already configured it, skip this step. If you do not have access to a Ledger device, you can still provide your account's private key in a plain text file, but this method is significantly less secure . Create a text file in a secure folder, i.e., one that is visible only to you. Give it any name you want. Inside, add one of the following two lines, depending on the format of your private key: PRIVATE_KEY_CB58=\"\" PRIVATE_KEY_HEX=\"\" If your key is in CB58 format, use the CB58 line. If your key is 64 hexadecimal characters, use the HEX line. Put the key inside the quotes. Enter this command on a terminal to check that the key works correctly: flare-stake-tool interactive This command starts the staking tool in interactive mode. In this mode the tool asks questions until it has enough information to execute a command. After the welcome banner you see: ? How do you want to connect your wallet? (Use arrow keys) Ledger Public Key > Private Key (not recommended) Select Private Key with the cursor keys and press Enter . The next question is: Warning: You are connecting using your private key which is not recommended ? Enter Path to Private Key file (E.g. /home/wallet/pvtKeyFile): Enter the name and path to the file you and created in step 1 and press Enter . Then: ? Which network do you want to connect to? (Use arrow keys) > Flare (Mainnet) Coston2 (Testnet) LocalHost (for development only) Select Flare (Mainnet) and press Enter . Finally the main menu appears: ? What do you want to do? (Use arrow keys) View chain addresses > Check on-chain balance Get network info Get validator info Move assets from C-chain to P-chain Move assets from P-chain to C-chain Add a validator node As an example, choose Check on-chain balance , and press Enter . The balance of your selected account is shown for both the C-chain and the P-chain and the tool exits. You can follow the rest of this guide by selecting the Private Key option when prompted. Staking Guide # To stake on a validator node, you need to: Check your current P-chain balance. Move funds from the C-chain to the P-chain. Stake them on a validator. Optionally, check that the request has been recorded. Optionally, move the staked funds back to the C-chain once they become unlocked. Before you start During the process you will need three pieces of information. Take note of them before you start so you can follow the rest of the steps uninterrupted. The node ID of the validator you want to stake to. If you created the validator, its nodeID was shown to you during the deployment process . If you want to stake to somebody else's validator, you can: Obtain a list of current validators from any of the tools listed in the Staking page . Remember to add the NodeID- prefix if it is missing from the listed ID. Use flare-stake-tool info validators to get a JSON list of all validators. The desired staking start time and end time . When staking to an existing validator, both these times must be inside the period when the validator is active, which you can find in the lists of any of the above tools, or using flare-stake-tool info validators . You need to provide these times as a UNIX timestamp , so you might need to use an online conversion tool like Epoch Converter or the Linux date command. As an example, the 1693185095 timestamp corresponds to Monday, August 28, 2023 1:11:35 AM. 1. Check your Balances # Check your balance by executing flare-stake-tool interactive and selecting the Check on-chain balance option: ? How do you want to connect your wallet? Ledger You already have an existing Ctx file with the following parameters - Public Key: \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf Network: flare Eth Address: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Do you wish to continue with this? yes ? What do you want to do? Check on-chain balance Using network: flare Balances on the network \"flare\" C-chain 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf: 100000.0 FLR P-chain P-flare\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf: 50000.0 FLR Your currently available funds on the C-chain and P-chain are shown in the last lines. Funds currently staked are locked and are not reflected in the P-chain balance. They will become automatically available when the staking period expires. 2. Move Funds to P-Chain # If your funds are already on the P-Chain, skip this step. Move the funds by executing flare-stake-tool interactive again and selecting the Move assets from C-chain to P-chain option. You are asked the amount of $FLR you want to transfer: ? What do you want to do? Move assets from C-chain to P-chain ? Enter amount (in FLR): 50000 Transaction Fees When transferring from the C-chain to the P-chain, transaction fees are wholly paid from the C-chain. Make sure you leave enough funds on the C-chain after the transfer, or it will fail. Transfers between chains are made of two operations: an export from the C-chain followed by an import to the P-chain. Therefore, you are asked to confirm TWO transactions on your hardware wallet. Please approve export transaction Using network: flare Fetching account from ledger... Creating export transaction... Using fee of 0.00028075 FLR Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Please approve import transaction Using network: flare Fetching account from ledger... Creating export transaction... Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Finished execution You can check your balances again to verify that the transfer was successful. If you encounter any problem, see the Troubleshooting section. 3. Stake # After you have funds on the P-chain, execute flare-stake-tool interactive again and select the appropriate option: If you are going to delegate to your own node (self-bonding), select Add a validator node . Otherwise, if you are going to stake to another node (delegation), select Delegate to a validator node . Press the down key a few times for this last option to show. First-time Address Registration The first time you use the Add a validator node or Delegate to a validator node options you are asked to sign an additional transaction. This step is required so that staking rewards accrued on the P-chain can be claimed on the C-chain and participate in the wider ecosystem. This procedure only needs to be done once per P-chain address and it progresses like this: Checking Address Registration... No address found for key 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf Note: You need to register your wallet address before you can delegate your funds Please complete this registration transaction to proceed Submitting txn to the chain Cryptographical Background Both your P-chain and C-chain addresses are derived from the same public key, but the process is not symmetrical: public keys cannot be derived from addresses. Therefore, smart contracts have no way of knowing the P-chain address that corresponds to a given C-chain address, unless they are both provided by their owner. This step performs exactly this operation, allowing a C-chain address to claim rewards that were accrued by its P-chain counterpart. Manual Address Registration Should automatic registration through the Flare Stake CLI tool fail, you can still register your addresses manually using the Block Explorer: Retrieve the public key that generated the accounts you want to use. From a terminal, run flare-stake-tool info addresses and copy the long hexadecimal string starting with 0x in the last line. Using network: flare Addresses on the network \"flare\" P-chain address: P-flare\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf C-chain address hex: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf secp256k1 public key: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf You need to interact with the AddressBinder smart contract, so you must retrieve its address from the FlareContractRegistry as explained in the retrieving Contract Addresses page . Enter the address of the AddressBinder contract in the Block Explorer , and go to the Write Contract tab. Click on Connect Wallet . You do not need to use the same account as the one you are binding. Locate the registerPublicKey method and paste the public key from step 1 into the _publicKey field. Click on Write and confirm the transaction from your wallet. If the transaction is successful, your account's P and C-chain addresses are now bound. You then need to provide the following information: Amount to stake : With the restrictions stated above . Amount must be provided in FLR units. Validator's NodeID : As explained in the Before you start section . Start time : As explained in the Before you start section . End time : As explained in the Before you start section . If you selected Add a validator node , you have one more question to answer: Delegation fee : This is the percentage of all rewards that the node owner keeps. The rest is split proportionally between the self-bond and all delegators that contributed stake. 10 means 10%, so the maximum value is 100. ? What do you want to do? Add a validator node ? Enter amount (in FLR): 50000 ? Enter Node NodeId (E.g. NodeID-FQKTLuZHEsjCxPeFTFgsojsucmdyNDsz1): NodeID-\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Enter start time(E.g. 1693185095): \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Enter end time(E.g. 1693185095): \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Enter delegation fee(E.g. 10): 10 You are then asked to confirm the staking transaction on your hardware wallet. Using network: flare Fetching account from ledger... Creating export transaction... Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Finished execution Your stake is now locked and will start accruing rewards after the configured start time arrives. When the end time arrives, the funds will be automatically unlocked. If you encounter any problem, see the Troubleshooting section. 4. Check Stake # You can double-check that the operation has been properly registered by looking at the current list of validators: flare-stake-tool info validators > validators.txt This creates a file called validators.txt . Open it and search for the line containing the P-chain address of your account. If you don't know it, use flare-stake-tool info addresses . If your account has stake on any node, you will find a section similar to: { \"txID\" : \"28Yf5yQ3xt9yaMvfZ1RP5jkCkT4y2pfD86UheZUHFVng2tFcWd\" , \"startTime\" : \"1688569201\" , \"endTime\" : \"1696345201\" , \"stakeAmount\" : \"16750000000000000\" , \"nodeID\" : \"NodeID-C6i8mruq11VdxGQ7tiUBgrRqoLBot86df\" , \"rewardOwner\" : { \"locktime\" : \"0\" , \"threshold\" : \"1\" , \"addresses\" : [ \"P-flare19c8zfml39x6efnw5j90nl85dmwdqhluwhrxz9g\" ] }, }, Check that the stakeAmount (in wei), nodeID , startTime , and endTime match the values you configured. If you have multiple active stakes, your address can show multiple times. 5. Move funds back to C-Chain # Finally, you also have the option to move your P-chain funds back to the C-chain where they can participate in the wider ecosystem. You can only transfer P-chain funds that are not currently locked in any stake. Execute flare-stake-tool interactive and select the Move assets from P-chain to C-chain option. You are asked the amount of $FLR you want to transfer: ? What do you want to do? Move assets from P-chain to C-chain ? Enter amount (in FLR): 50000 Transaction Fees When transferring from the P to the C-chain, transaction fees are paid from BOTH chains. Make sure you leave enough funds on both chains after the transfer, or it will fail. Again, the transfer between the two chains require you to confirm TWO transactions on your hardware wallet. Please approve export transaction Using network: flare Fetching account from ledger... Creating export transaction... Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Please approve import transaction Using network: flare Fetching account from ledger... Creating export transaction... Using fee of 0.00028075 FLR Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Finished execution You can check your balances again to verify that the transfer was successful. If you encounter any problem, see the Troubleshooting section. Reward Claiming Guide # At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period, but these rewards are not claimable yet. Every 4 reward epochs, rewards are accumulated in a dedicated smart contract and can then be claimed from the Flare Stake CLI tool: Execute flare-stake-tool interactive and select the Claim Rewards option. Press the down key a few times for this option to show. You are shown the amount of pending rewards (in wei) and are asked how much you want to claim (in FLR): ? What do you want to do? Claim Rewards Checking your Rewards status... You have unclaimed rewards worth 1000000000000000000 ? Enter amount to claim (in FLR): 1 Next, select Receive with another wallet and enter the C-chain address where you want the rewards to be sent. This can be the same address from where you are staking. ? Where do you want to receive your rewards? Receive with another wallet ? Please enter the C-address where you want to receive your rewards: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf You are then asked to confirm the staking transaction on your hardware wallet. Please sign the transaction on your ledger Submitting txn to the chain Rewards successfully claimed Finished execution Manual Reward Claiming Rewards can also be claimed directly from the ValidatorRewardManager contract that accumulates them: You need to interact with the ValidatorRewardManager smart contract, so you must retrieve its address from the FlareContractRegistry as explained in the retrieving Contract Addresses page . Enter the address of the ValidatorRewardManager contract in the Block Explorer , and go to the Write Contract tab. Click on Connect Wallet . You need to connect the account for which you are claiming. Locate the claim method and enter the following information: _rewardOwner : C-chain address that accrued the rewards. _recipient : Address where the rewards must be sent. _rewardAmount : Amount to claim. Find the pending amount using the getStateOfRewards method in the Read Contract tab. _wrap : Whether the rewards should be also wrapped, as a convenience. Click on Write and confirm the transaction from your wallet. If the transaction is successful, the reward is transferred to the specified recipient. Troubleshooting # Cannot connect to Ledger device, No Device, Cannot retrieve addresses, or similar Make sure: The device is connected, the Avalanche app is opened, and it shows the \"Avalanche Ready\" message. No other application like Ledger Live or MetaMask is connected to the device. The device is not in stand-by mode. You are not running on Windows from a Linux terminal (WSL). Use a native Windows console instead. Insufficient funds Make sure enough funds will remain after a transaction to pay for the transaction fees. If too much time has elapsed between the transaction's creation and its confirmation on the Ledger, the calculated fee might be incorrect. Try the operation again. The network might be congested and the calculated fees might not be high enough. Try the operation again after a while. Import transaction failed and the funds have vanished Transfer operations require an export and an import transaction . If the export succeeds, but then the import fails, it looks like the funds have disappeared from both chains, but they are still retrievable. Repeat the failed import operation manually: If you are moving funds from the C-chain to the P-chain: flare-stake-tool transaction importCP --ledger --blind If you are moving funds from the P-chain to the C-chain: flare-stake-tool transaction importPC --ledger --blind Unsupported digital routines If you get the following error message: E: Error: error:0308010C:digital envelope routines::unsupported Make sure you are using the correct Node.js version, as advised in the Prerequisites section . You can find out the version of Node.js you are running with the following command: node --version","title":"Using the Command Line"},{"location":"user/staking/staking-cli/#using-the-command-line-to-stake","text":"Flare has a command-line interface (CLI) tool called FlareStake CLI, which allows performing stake operations on validator nodes from a terminal. A staking app with a graphical user interface (GUI) is also available to simplify the staking process. See the Using FlareStake to Stake guide to learn about it. Still, a CLI tool has other advantages, like allowing it to be part of automated processes. Table of Contents Staking Overview : What you need to know about staking. Installing the Flare Stake CLI : Install required tools. Staking Guide : How to perform staking. Claiming Guide : How to claim staking rewards. Troubleshooting : Addressing common issues.","title":"Using the Command Line to Stake"},{"location":"user/staking/staking-cli/#staking-overview","text":"If you already know how staking on validators works on the Flare network, skip this section. Note Proof of stake is being implemented on Flare in phases. Ensure that you have read the Validators page to learn about them. Staking works by locking funds for a period of time to support a specific network validator . When validator owners stake to their own nodes they self-bond , whereas all other participants are said to delegate their stake to that validator. Participants choose how much to stake and for how long their stake will be locked. The minimum values are: Self-bond Delegation Minimum amount 1M $FLR 50K $FLR Minimum duration 60 days 14 days At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period. The deployment phases summary shows other rewards that staked funds can still earn while they are locked. Given that the Flare network uses two independent underlying chains , there is one extra step that must be considered. Funds must be transferred from the C-chain, where smart contracts run, to the P-chain, where staking happens. After the staking period expires and funds are unlocked, they can be transferred back to the C-chain. This guide explains how to perform the above operations using the Flare Stake CLI tool.","title":"Staking Overview"},{"location":"user/staking/staking-cli/#installing-the-flare-stake-cli","text":"This tool is open source, so it can be installed from its source code . However, it is more convenient to use the prepackaged npm version . The Flare Stake CLI works on Windows, Mac, and Linux. Note It is not recommended to run this tool using the Windows Subsystem for Linux (WSL), as it might have issues accessing hardware wallets through USB ports. On Windows, use the standard Windows command prompt or terminal instead.","title":"Installing the Flare Stake CLI"},{"location":"user/staking/staking-cli/#prerequisites","text":"Install the npm package manager . This guide has been tested with Node.js v18.16.0 and npm v9.5.1 .","title":"Prerequisites"},{"location":"user/staking/staking-cli/#installation","text":"After npm is available, type this command into a terminal to make the tool available from any folder: npm install @flarenetwork/flare-stake-tool -g Check that the tool has been correctly installed by running: flare-stake-tool The tool's banner is displayed: _____ _ ____ _ _ ____ _ ___ | ___| | __ _ _ __ ___ / ___|| |_ __ _| | _____ / ___| | |_ _| | |_ | |/ _` | '__/ _ \\ \\___ \\| __/ _` | |/ / _ \\ | | | | | | | _| | | (_| | | | __/ ___) | || (_| | < __/ | |___| |___ | | |_| |_|\\__,_|_| \\___| |____/ \\__\\__,_|_|\\_\\___| \\____|_____|___| Version: 3.0.2 Make sure at least version 3.0.0 has been installed.","title":"Installation"},{"location":"user/staking/staking-cli/#configuration","text":"You can specify the account from which staking will take place in different ways. Choose one of the following two options. Note that using a Ledger hardware wallet is the only recommended way. Ledger Configuration Your device must be configured before it can be used: Install the Avalanche application : Connect the device to your computer and unlock it using your PIN code. Open the Ledger Live application. Go to the My Ledger tab and make sure the device is using the latest firmware. In the App catalog tab, search for \"Avalanche\" and click on the Install button. Note that this app requires all available space on a Ledger Nano S device (138 KB). You might need to remove other apps first to free up space. Select your desired account : Exit the Ledger Live application and make sure the device is not connected to any other application like MetaMask. Open the Avalanche app on the Ledger. The screen should show \"Avalanche Ready\". From a terminal, enter: flare-stake-tool interactive This command starts the staking tool in interactive mode. In this mode the tool asks questions until it has enough information to execute a command. Then, after the welcome banner: ? How do you want to connect your wallet? (Use arrow keys) > Ledger Public Key Private Key (not recommended) Select Ledger with the cursor keys and press Enter . The next question is: ? Which network do you want to connect to? (Use arrow keys) > Flare (Mainnet) Coston2 (Testnet) LocalHost (for development only) Select Flare (Mainnet) and press Enter . This message shows for a few seconds: Fetching Addresses... Eventually a list of addresses is shown. These are the addresses that can be used from this device. Choose the one you want to stake from and press Enter . Keep in mind that this address needs to have a positive $FLR balance to pay for transaction fees and be able to stake. You can transfer funds to it later on. Finally the main menu appears: ? What do you want to do? (Use arrow keys) View chain addresses > Check on-chain balance Get network info Get validator info Move assets from C-chain to P-chain Move assets from P-chain to C-chain Add a validator node As an example, choose Check on-chain balance and press Enter . The balance of your selected account is shown for both the C-chain and the P-chain and the tool exits. At this point, a ctx.json file has been created in the current folder containing the selected account. When you run the tool from the same folder again, you will be given the option to use the same account. Using the same account saves you the inconvenience of repeating the above steps every time. Private Key Configuration If you have a Ledger device and you have already configured it, skip this step. If you do not have access to a Ledger device, you can still provide your account's private key in a plain text file, but this method is significantly less secure . Create a text file in a secure folder, i.e., one that is visible only to you. Give it any name you want. Inside, add one of the following two lines, depending on the format of your private key: PRIVATE_KEY_CB58=\"\" PRIVATE_KEY_HEX=\"\" If your key is in CB58 format, use the CB58 line. If your key is 64 hexadecimal characters, use the HEX line. Put the key inside the quotes. Enter this command on a terminal to check that the key works correctly: flare-stake-tool interactive This command starts the staking tool in interactive mode. In this mode the tool asks questions until it has enough information to execute a command. After the welcome banner you see: ? How do you want to connect your wallet? (Use arrow keys) Ledger Public Key > Private Key (not recommended) Select Private Key with the cursor keys and press Enter . The next question is: Warning: You are connecting using your private key which is not recommended ? Enter Path to Private Key file (E.g. /home/wallet/pvtKeyFile): Enter the name and path to the file you and created in step 1 and press Enter . Then: ? Which network do you want to connect to? (Use arrow keys) > Flare (Mainnet) Coston2 (Testnet) LocalHost (for development only) Select Flare (Mainnet) and press Enter . Finally the main menu appears: ? What do you want to do? (Use arrow keys) View chain addresses > Check on-chain balance Get network info Get validator info Move assets from C-chain to P-chain Move assets from P-chain to C-chain Add a validator node As an example, choose Check on-chain balance , and press Enter . The balance of your selected account is shown for both the C-chain and the P-chain and the tool exits. You can follow the rest of this guide by selecting the Private Key option when prompted.","title":"Configuration"},{"location":"user/staking/staking-cli/#staking-guide","text":"To stake on a validator node, you need to: Check your current P-chain balance. Move funds from the C-chain to the P-chain. Stake them on a validator. Optionally, check that the request has been recorded. Optionally, move the staked funds back to the C-chain once they become unlocked. Before you start During the process you will need three pieces of information. Take note of them before you start so you can follow the rest of the steps uninterrupted. The node ID of the validator you want to stake to. If you created the validator, its nodeID was shown to you during the deployment process . If you want to stake to somebody else's validator, you can: Obtain a list of current validators from any of the tools listed in the Staking page . Remember to add the NodeID- prefix if it is missing from the listed ID. Use flare-stake-tool info validators to get a JSON list of all validators. The desired staking start time and end time . When staking to an existing validator, both these times must be inside the period when the validator is active, which you can find in the lists of any of the above tools, or using flare-stake-tool info validators . You need to provide these times as a UNIX timestamp , so you might need to use an online conversion tool like Epoch Converter or the Linux date command. As an example, the 1693185095 timestamp corresponds to Monday, August 28, 2023 1:11:35 AM.","title":"Staking Guide"},{"location":"user/staking/staking-cli/#1-check-your-balances","text":"Check your balance by executing flare-stake-tool interactive and selecting the Check on-chain balance option: ? How do you want to connect your wallet? Ledger You already have an existing Ctx file with the following parameters - Public Key: \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf Network: flare Eth Address: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Do you wish to continue with this? yes ? What do you want to do? Check on-chain balance Using network: flare Balances on the network \"flare\" C-chain 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf: 100000.0 FLR P-chain P-flare\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf: 50000.0 FLR Your currently available funds on the C-chain and P-chain are shown in the last lines. Funds currently staked are locked and are not reflected in the P-chain balance. They will become automatically available when the staking period expires.","title":"1. Check your Balances"},{"location":"user/staking/staking-cli/#2-move-funds-to-p-chain","text":"If your funds are already on the P-Chain, skip this step. Move the funds by executing flare-stake-tool interactive again and selecting the Move assets from C-chain to P-chain option. You are asked the amount of $FLR you want to transfer: ? What do you want to do? Move assets from C-chain to P-chain ? Enter amount (in FLR): 50000 Transaction Fees When transferring from the C-chain to the P-chain, transaction fees are wholly paid from the C-chain. Make sure you leave enough funds on the C-chain after the transfer, or it will fail. Transfers between chains are made of two operations: an export from the C-chain followed by an import to the P-chain. Therefore, you are asked to confirm TWO transactions on your hardware wallet. Please approve export transaction Using network: flare Fetching account from ledger... Creating export transaction... Using fee of 0.00028075 FLR Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Please approve import transaction Using network: flare Fetching account from ledger... Creating export transaction... Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Finished execution You can check your balances again to verify that the transfer was successful. If you encounter any problem, see the Troubleshooting section.","title":"2. Move Funds to P-Chain"},{"location":"user/staking/staking-cli/#3-stake","text":"After you have funds on the P-chain, execute flare-stake-tool interactive again and select the appropriate option: If you are going to delegate to your own node (self-bonding), select Add a validator node . Otherwise, if you are going to stake to another node (delegation), select Delegate to a validator node . Press the down key a few times for this last option to show. First-time Address Registration The first time you use the Add a validator node or Delegate to a validator node options you are asked to sign an additional transaction. This step is required so that staking rewards accrued on the P-chain can be claimed on the C-chain and participate in the wider ecosystem. This procedure only needs to be done once per P-chain address and it progresses like this: Checking Address Registration... No address found for key 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf Note: You need to register your wallet address before you can delegate your funds Please complete this registration transaction to proceed Submitting txn to the chain Cryptographical Background Both your P-chain and C-chain addresses are derived from the same public key, but the process is not symmetrical: public keys cannot be derived from addresses. Therefore, smart contracts have no way of knowing the P-chain address that corresponds to a given C-chain address, unless they are both provided by their owner. This step performs exactly this operation, allowing a C-chain address to claim rewards that were accrued by its P-chain counterpart. Manual Address Registration Should automatic registration through the Flare Stake CLI tool fail, you can still register your addresses manually using the Block Explorer: Retrieve the public key that generated the accounts you want to use. From a terminal, run flare-stake-tool info addresses and copy the long hexadecimal string starting with 0x in the last line. Using network: flare Addresses on the network \"flare\" P-chain address: P-flare\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf C-chain address hex: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf secp256k1 public key: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf You need to interact with the AddressBinder smart contract, so you must retrieve its address from the FlareContractRegistry as explained in the retrieving Contract Addresses page . Enter the address of the AddressBinder contract in the Block Explorer , and go to the Write Contract tab. Click on Connect Wallet . You do not need to use the same account as the one you are binding. Locate the registerPublicKey method and paste the public key from step 1 into the _publicKey field. Click on Write and confirm the transaction from your wallet. If the transaction is successful, your account's P and C-chain addresses are now bound. You then need to provide the following information: Amount to stake : With the restrictions stated above . Amount must be provided in FLR units. Validator's NodeID : As explained in the Before you start section . Start time : As explained in the Before you start section . End time : As explained in the Before you start section . If you selected Add a validator node , you have one more question to answer: Delegation fee : This is the percentage of all rewards that the node owner keeps. The rest is split proportionally between the self-bond and all delegators that contributed stake. 10 means 10%, so the maximum value is 100. ? What do you want to do? Add a validator node ? Enter amount (in FLR): 50000 ? Enter Node NodeId (E.g. NodeID-FQKTLuZHEsjCxPeFTFgsojsucmdyNDsz1): NodeID-\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Enter start time(E.g. 1693185095): \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Enter end time(E.g. 1693185095): \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf ? Enter delegation fee(E.g. 10): 10 You are then asked to confirm the staking transaction on your hardware wallet. Using network: flare Fetching account from ledger... Creating export transaction... Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Finished execution Your stake is now locked and will start accruing rewards after the configured start time arrives. When the end time arrives, the funds will be automatically unlocked. If you encounter any problem, see the Troubleshooting section.","title":"3. Stake"},{"location":"user/staking/staking-cli/#4-check-stake","text":"You can double-check that the operation has been properly registered by looking at the current list of validators: flare-stake-tool info validators > validators.txt This creates a file called validators.txt . Open it and search for the line containing the P-chain address of your account. If you don't know it, use flare-stake-tool info addresses . If your account has stake on any node, you will find a section similar to: { \"txID\" : \"28Yf5yQ3xt9yaMvfZ1RP5jkCkT4y2pfD86UheZUHFVng2tFcWd\" , \"startTime\" : \"1688569201\" , \"endTime\" : \"1696345201\" , \"stakeAmount\" : \"16750000000000000\" , \"nodeID\" : \"NodeID-C6i8mruq11VdxGQ7tiUBgrRqoLBot86df\" , \"rewardOwner\" : { \"locktime\" : \"0\" , \"threshold\" : \"1\" , \"addresses\" : [ \"P-flare19c8zfml39x6efnw5j90nl85dmwdqhluwhrxz9g\" ] }, }, Check that the stakeAmount (in wei), nodeID , startTime , and endTime match the values you configured. If you have multiple active stakes, your address can show multiple times.","title":"4. Check Stake"},{"location":"user/staking/staking-cli/#5-move-funds-back-to-c-chain","text":"Finally, you also have the option to move your P-chain funds back to the C-chain where they can participate in the wider ecosystem. You can only transfer P-chain funds that are not currently locked in any stake. Execute flare-stake-tool interactive and select the Move assets from P-chain to C-chain option. You are asked the amount of $FLR you want to transfer: ? What do you want to do? Move assets from P-chain to C-chain ? Enter amount (in FLR): 50000 Transaction Fees When transferring from the P to the C-chain, transaction fees are paid from BOTH chains. Make sure you leave enough funds on both chains after the transfer, or it will fail. Again, the transfer between the two chains require you to confirm TWO transactions on your hardware wallet. Please approve export transaction Using network: flare Fetching account from ledger... Creating export transaction... Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Please approve import transaction Using network: flare Fetching account from ledger... Creating export transaction... Using fee of 0.00028075 FLR Please review and sign the transaction on your ledger device... Sending transaction to the node... Transaction with id \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf sent to the node Finished execution You can check your balances again to verify that the transfer was successful. If you encounter any problem, see the Troubleshooting section.","title":"5. Move funds back to C-Chain"},{"location":"user/staking/staking-cli/#reward-claiming-guide","text":"At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period, but these rewards are not claimable yet. Every 4 reward epochs, rewards are accumulated in a dedicated smart contract and can then be claimed from the Flare Stake CLI tool: Execute flare-stake-tool interactive and select the Claim Rewards option. Press the down key a few times for this option to show. You are shown the amount of pending rewards (in wei) and are asked how much you want to claim (in FLR): ? What do you want to do? Claim Rewards Checking your Rewards status... You have unclaimed rewards worth 1000000000000000000 ? Enter amount to claim (in FLR): 1 Next, select Receive with another wallet and enter the C-chain address where you want the rewards to be sent. This can be the same address from where you are staking. ? Where do you want to receive your rewards? Receive with another wallet ? Please enter the C-address where you want to receive your rewards: 0x\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf You are then asked to confirm the staking transaction on your hardware wallet. Please sign the transaction on your ledger Submitting txn to the chain Rewards successfully claimed Finished execution Manual Reward Claiming Rewards can also be claimed directly from the ValidatorRewardManager contract that accumulates them: You need to interact with the ValidatorRewardManager smart contract, so you must retrieve its address from the FlareContractRegistry as explained in the retrieving Contract Addresses page . Enter the address of the ValidatorRewardManager contract in the Block Explorer , and go to the Write Contract tab. Click on Connect Wallet . You need to connect the account for which you are claiming. Locate the claim method and enter the following information: _rewardOwner : C-chain address that accrued the rewards. _recipient : Address where the rewards must be sent. _rewardAmount : Amount to claim. Find the pending amount using the getStateOfRewards method in the Read Contract tab. _wrap : Whether the rewards should be also wrapped, as a convenience. Click on Write and confirm the transaction from your wallet. If the transaction is successful, the reward is transferred to the specified recipient.","title":"Reward Claiming Guide"},{"location":"user/staking/staking-cli/#troubleshooting","text":"Cannot connect to Ledger device, No Device, Cannot retrieve addresses, or similar Make sure: The device is connected, the Avalanche app is opened, and it shows the \"Avalanche Ready\" message. No other application like Ledger Live or MetaMask is connected to the device. The device is not in stand-by mode. You are not running on Windows from a Linux terminal (WSL). Use a native Windows console instead. Insufficient funds Make sure enough funds will remain after a transaction to pay for the transaction fees. If too much time has elapsed between the transaction's creation and its confirmation on the Ledger, the calculated fee might be incorrect. Try the operation again. The network might be congested and the calculated fees might not be high enough. Try the operation again after a while. Import transaction failed and the funds have vanished Transfer operations require an export and an import transaction . If the export succeeds, but then the import fails, it looks like the funds have disappeared from both chains, but they are still retrievable. Repeat the failed import operation manually: If you are moving funds from the C-chain to the P-chain: flare-stake-tool transaction importCP --ledger --blind If you are moving funds from the P-chain to the C-chain: flare-stake-tool transaction importPC --ledger --blind Unsupported digital routines If you get the following error message: E: Error: error:0308010C:digital envelope routines::unsupported Make sure you are using the correct Node.js version, as advised in the Prerequisites section . You can find out the version of Node.js you are running with the following command: node --version","title":"Troubleshooting"},{"location":"user/staking/staking-flarestake/","text":"Using FlareStake to Stake # FlareStake is a graphical user interface (GUI) that enables you to easily stake your funds to validators and earn rewards. Staking works by locking funds for a period of time to support a specific network validator . When validator owners stake to their own nodes they self-bond , whereas all other participants are said to delegate their stake to that validator. Note Proof of stake is being implemented on Flare in phases. Ensure that you have read the Validators page to learn about them. Participants choose how much to stake and for how long their stake will be locked. The minimum values are: Self-bond Delegation Minimum amount 1M $FLR 50K $FLR Minimum duration 60 days 14 days At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period. The deployment phases summary shows other rewards that staked funds can still earn while they are locked. Given that the Flare network uses two independent underlying chains , there is one extra step that must be considered. Funds must be transferred from the C-chain, where smart contracts run, to the P-chain, where staking happens. After the staking period expires and funds are unlocked, they can be transferred back to the C-chain. This guide explains how to stake Flare assets by using FlareStake, the GUI tool for staking . Another tool exists which uses the command line exclusively. See the Using the CLI to Stake guide to learn about it. Prerequisites # A Ledger hardware wallet set up to manage Flare assets . Knowledge of the available validators to which you want to delegate your funds. Obtain a list of current validators from any of the tools listed in the Staking page . Accessing Your Wallet # Open FlareStake . Click Access Wallet . Click Ledger . Make sure your Ledger device is plugged in, it is unlocked with your PIN, and the Avalanche app is running Installing the Avalanche application Connect the device to your computer and unlock it using your PIN code. Open the Ledger Live application. Go to the My Ledger tab and make sure the device is using the latest firmware. In the App catalog tab, search for \"Avalanche\" and click on the Install button. Version should be at least v0.6.5. Note that this app requires all available space on a Ledger Nano S device (138 KB). You might need to remove other apps first to free up space. Exit the Ledger Live application and make sure the device is not connected to any other application like MetaMask. Click the top dropdown menu to select whether the account containing the funds you want to stake was created using Ledger Live or some other wallet like MetaMask. Address selection dialog. Derivation Paths A single hardware wallet can generate an unlimited number of addresses by using a derivation path . By using the same derivation path, multiple wallets like MetaMask of Bifrost can retrieve the same addresses from a hardware wallet. You need to tell FlareStake the derivation path that was used to obtain the address containing the funds you want to stake. Fortunately, there are only two common paths: Ledger Live : If you created your account from the Ledger Live tool . BIPS-44 : If you used almost any other wallet. Click the bottom dropdown menu, and select the address you want to use from the list. The first time it takes a few seconds to obtain the list of addresses from the device. Click Access Wallet . The FlareStake dashboard is displayed. You can now continue to the Staking Guide or the Reward Claiming Guide . Staking Guide # To stake on a validator node, you need to: Bind your C-chain and P-chain addresses. Move your funds from the C-chain to the P-chain. Stake them on a validator. 1. Binding Your Addresses # To receive your staking rewards, you must bind your P-chain address to your C-chain address. This procedure only needs to be done once per P-chain address. See the command-line version of this guide for more information. On the FlareStake dashboard, click Staking . In the Bind Your Addresses section, click Register . Address binding menu. The Bind Your Addresses window is displayed. Click Bind Address . Confirm the action on your Ledger. Your P-chain address and your C-chain address are now bound to each other. 2. Move Funds to the P-Chain # To stake, your P-chain address must contain at least 50.000 native $FLR tokens. If your P-chain address is already properly funded, skip this step. Keep in mind that wrapped $WFLR tokens must be unwrapped before they can be transferred to the P-chain. On the FlareStake dashboard, click Cross Chain . Ensure the Source Chain field says C-chain and the Destination Chain field says P-chain. In the Amount field, specify the amount of $FLR to send to your P-chain address. Click Confirm . Click Transfer . Confirm the action on your Ledger. Transaction Fees When transferring from the C-chain to the P-chain, transaction fees are wholly paid from the C-chain. Make sure you leave enough funds on the C-chain after the transfer, or it will fail. Transfers between chains are made of two operations: an export from the C-chain followed by an import to the P-chain. Therefore, you are asked to confirm TWO transactions on your hardware wallet. The amount of funds you specified in step 3 is now at your P-chain address. 3. Stake Your Funds # To stake funds, you delegate them to an existing validator. On the FlareStake dashboard, click Staking . In the Add a Delegation section, click Add Delegation . Add a delegation menu. The Delegate window is displayed. In the Node ID column, locate the ID for the validator to which you want to delegate your staking funds. To select the validator, click Select . Information about the validator is displayed. In the Staking End Date field, specify the date and time when you want to stop staking your funds. In the Staking Amount field, specify the amount of $FLR you want to delegate to stake. Click Confirm . The staking information you specified is displayed. Review the staking information. If it is correct, click Submit to begin your delegation. Otherwise, click Cancel . Confirm the action on your Ledger. Your stake is now locked and will start accruing rewards immediately. When the selected end time arrives, the funds will be automatically unlocked. Reward Claiming Guide # At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period, but these rewards are not claimable yet. Every 4 reward epochs, rewards are accumulated in a dedicated smart contract and can then be claimed from the FlareStake tool: On the FlareStake dashboard, click Staking . In the Manage Rewards section, click Manage Rewards . Manage rewards menu. Information about your rewards is displayed. In the Rewards to claim field, specify all or part of your unclaimed rewards. Optional : To send your rewards to a different wallet, click Another Wallet , and specify the address in the C-Chain Address field. Click Claim Rewards . Confirm the action on your Ledger. Your rewards are claimed and added to your available balance.","title":"Using FlareStake"},{"location":"user/staking/staking-flarestake/#using-flarestake-to-stake","text":"FlareStake is a graphical user interface (GUI) that enables you to easily stake your funds to validators and earn rewards. Staking works by locking funds for a period of time to support a specific network validator . When validator owners stake to their own nodes they self-bond , whereas all other participants are said to delegate their stake to that validator. Note Proof of stake is being implemented on Flare in phases. Ensure that you have read the Validators page to learn about them. Participants choose how much to stake and for how long their stake will be locked. The minimum values are: Self-bond Delegation Minimum amount 1M $FLR 50K $FLR Minimum duration 60 days 14 days At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period. The deployment phases summary shows other rewards that staked funds can still earn while they are locked. Given that the Flare network uses two independent underlying chains , there is one extra step that must be considered. Funds must be transferred from the C-chain, where smart contracts run, to the P-chain, where staking happens. After the staking period expires and funds are unlocked, they can be transferred back to the C-chain. This guide explains how to stake Flare assets by using FlareStake, the GUI tool for staking . Another tool exists which uses the command line exclusively. See the Using the CLI to Stake guide to learn about it.","title":"Using FlareStake to Stake"},{"location":"user/staking/staking-flarestake/#prerequisites","text":"A Ledger hardware wallet set up to manage Flare assets . Knowledge of the available validators to which you want to delegate your funds. Obtain a list of current validators from any of the tools listed in the Staking page .","title":"Prerequisites"},{"location":"user/staking/staking-flarestake/#accessing-your-wallet","text":"Open FlareStake . Click Access Wallet . Click Ledger . Make sure your Ledger device is plugged in, it is unlocked with your PIN, and the Avalanche app is running Installing the Avalanche application Connect the device to your computer and unlock it using your PIN code. Open the Ledger Live application. Go to the My Ledger tab and make sure the device is using the latest firmware. In the App catalog tab, search for \"Avalanche\" and click on the Install button. Version should be at least v0.6.5. Note that this app requires all available space on a Ledger Nano S device (138 KB). You might need to remove other apps first to free up space. Exit the Ledger Live application and make sure the device is not connected to any other application like MetaMask. Click the top dropdown menu to select whether the account containing the funds you want to stake was created using Ledger Live or some other wallet like MetaMask. Address selection dialog. Derivation Paths A single hardware wallet can generate an unlimited number of addresses by using a derivation path . By using the same derivation path, multiple wallets like MetaMask of Bifrost can retrieve the same addresses from a hardware wallet. You need to tell FlareStake the derivation path that was used to obtain the address containing the funds you want to stake. Fortunately, there are only two common paths: Ledger Live : If you created your account from the Ledger Live tool . BIPS-44 : If you used almost any other wallet. Click the bottom dropdown menu, and select the address you want to use from the list. The first time it takes a few seconds to obtain the list of addresses from the device. Click Access Wallet . The FlareStake dashboard is displayed. You can now continue to the Staking Guide or the Reward Claiming Guide .","title":"Accessing Your Wallet"},{"location":"user/staking/staking-flarestake/#staking-guide","text":"To stake on a validator node, you need to: Bind your C-chain and P-chain addresses. Move your funds from the C-chain to the P-chain. Stake them on a validator.","title":"Staking Guide"},{"location":"user/staking/staking-flarestake/#1-binding-your-addresses","text":"To receive your staking rewards, you must bind your P-chain address to your C-chain address. This procedure only needs to be done once per P-chain address. See the command-line version of this guide for more information. On the FlareStake dashboard, click Staking . In the Bind Your Addresses section, click Register . Address binding menu. The Bind Your Addresses window is displayed. Click Bind Address . Confirm the action on your Ledger. Your P-chain address and your C-chain address are now bound to each other.","title":"1. Binding Your Addresses"},{"location":"user/staking/staking-flarestake/#2-move-funds-to-the-p-chain","text":"To stake, your P-chain address must contain at least 50.000 native $FLR tokens. If your P-chain address is already properly funded, skip this step. Keep in mind that wrapped $WFLR tokens must be unwrapped before they can be transferred to the P-chain. On the FlareStake dashboard, click Cross Chain . Ensure the Source Chain field says C-chain and the Destination Chain field says P-chain. In the Amount field, specify the amount of $FLR to send to your P-chain address. Click Confirm . Click Transfer . Confirm the action on your Ledger. Transaction Fees When transferring from the C-chain to the P-chain, transaction fees are wholly paid from the C-chain. Make sure you leave enough funds on the C-chain after the transfer, or it will fail. Transfers between chains are made of two operations: an export from the C-chain followed by an import to the P-chain. Therefore, you are asked to confirm TWO transactions on your hardware wallet. The amount of funds you specified in step 3 is now at your P-chain address.","title":"2. Move Funds to the P-Chain"},{"location":"user/staking/staking-flarestake/#3-stake-your-funds","text":"To stake funds, you delegate them to an existing validator. On the FlareStake dashboard, click Staking . In the Add a Delegation section, click Add Delegation . Add a delegation menu. The Delegate window is displayed. In the Node ID column, locate the ID for the validator to which you want to delegate your staking funds. To select the validator, click Select . Information about the validator is displayed. In the Staking End Date field, specify the date and time when you want to stop staking your funds. In the Staking Amount field, specify the amount of $FLR you want to delegate to stake. Click Confirm . The staking information you specified is displayed. Review the staking information. If it is correct, click Submit to begin your delegation. Otherwise, click Cancel . Confirm the action on your Ledger. Your stake is now locked and will start accruing rewards immediately. When the selected end time arrives, the funds will be automatically unlocked.","title":"3. Stake Your Funds"},{"location":"user/staking/staking-flarestake/#reward-claiming-guide","text":"At the end of every reward epoch , participants are rewarded according to how well their chosen validator performed in that period, but these rewards are not claimable yet. Every 4 reward epochs, rewards are accumulated in a dedicated smart contract and can then be claimed from the FlareStake tool: On the FlareStake dashboard, click Staking . In the Manage Rewards section, click Manage Rewards . Manage rewards menu. Information about your rewards is displayed. In the Rewards to claim field, specify all or part of your unclaimed rewards. Optional : To send your rewards to a different wallet, click Another Wallet , and specify the address in the C-Chain Address field. Click Claim Rewards . Confirm the action on your Ledger. Your rewards are claimed and added to your available balance.","title":"Reward Claiming Guide"},{"location":"user/wallets/","text":"Wallets # Choose your wallet: Bifrost Wallet Brave Wallet D'CENT Wallet Enkrypt Wallet Ledger Nano X and Nano S MetaMask SafePal S1 Wallet Trezor T If your wallet is not in the list, you might be able to configure it to connect to the Flare and Songbird networks by specifying the following configuration parameters in your wallet's settings: Flare Songbird Configuration Parameter Value Chain ID 14 Asset Ticker FLR RPC endpoint https://flare-api.flare.network/ext/C/rpc Block Explorer https://flare-explorer.flare.network Configuration Parameter Value Chain ID 19 Asset Ticker SGB RPC endpoint https://songbird-api.flare.network/ext/C/rpc Block Explorer https://songbird-explorer.flare.network","title":"Wallets"},{"location":"user/wallets/#wallets","text":"Choose your wallet: Bifrost Wallet Brave Wallet D'CENT Wallet Enkrypt Wallet Ledger Nano X and Nano S MetaMask SafePal S1 Wallet Trezor T If your wallet is not in the list, you might be able to configure it to connect to the Flare and Songbird networks by specifying the following configuration parameters in your wallet's settings: Flare Songbird Configuration Parameter Value Chain ID 14 Asset Ticker FLR RPC endpoint https://flare-api.flare.network/ext/C/rpc Block Explorer https://flare-explorer.flare.network Configuration Parameter Value Chain ID 19 Asset Ticker SGB RPC endpoint https://songbird-api.flare.network/ext/C/rpc Block Explorer https://songbird-explorer.flare.network","title":"Wallets"},{"location":"user/wallets/bifrost-wallet/","text":"Bifrost Wallet # Bifrost Wallet is a noncustodial mobile wallet available for both Android and iOS. You can view your portfolio of crypto assets, access decentralized applications through the in-app browser and perform operations on various blockchain networks, including sending, receiving, wrapping and delegating Flare ( $FLR ) and Songbird ( $SGB ). Getting Started # Start by downloading Bifrost Wallet from the Apple App Store or Google Play Store and either create a new wallet or import an existing one from a recovery phrase. The official guides in the Bifrost Wallet help center may be of assistance. Please make sure you have installed at least version 0.4.5 XRP Airdrop Note that, once $FLR distribution begins , users who imported their Ethereum-style claim address into Bifrost to access the XRP airdrop will automatically see their tokens in the Flare asset row in the COINS section. Adding Flare Tokens # When your balance of any native or wrapped token on the Flare network or Songbird network is more than 0, Bifrost Wallet automatically displays the balance. No additional action is required. Wrap and Delegate # When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. To wrap and delegate your $FLR or $SGB tokens using Bifrost Wallet, see Bifrost's guide for wrapping and delegating $FLR and guide for wrapping and delegating $SGB . Alternatively, wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Bifrost Wallet"},{"location":"user/wallets/bifrost-wallet/#bifrost-wallet","text":"Bifrost Wallet is a noncustodial mobile wallet available for both Android and iOS. You can view your portfolio of crypto assets, access decentralized applications through the in-app browser and perform operations on various blockchain networks, including sending, receiving, wrapping and delegating Flare ( $FLR ) and Songbird ( $SGB ).","title":"Bifrost Wallet"},{"location":"user/wallets/bifrost-wallet/#getting-started","text":"Start by downloading Bifrost Wallet from the Apple App Store or Google Play Store and either create a new wallet or import an existing one from a recovery phrase. The official guides in the Bifrost Wallet help center may be of assistance. Please make sure you have installed at least version 0.4.5 XRP Airdrop Note that, once $FLR distribution begins , users who imported their Ethereum-style claim address into Bifrost to access the XRP airdrop will automatically see their tokens in the Flare asset row in the COINS section.","title":"Getting Started"},{"location":"user/wallets/bifrost-wallet/#adding-flare-tokens","text":"When your balance of any native or wrapped token on the Flare network or Songbird network is more than 0, Bifrost Wallet automatically displays the balance. No additional action is required.","title":"Adding Flare Tokens"},{"location":"user/wallets/bifrost-wallet/#wrap-and-delegate","text":"When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. To wrap and delegate your $FLR or $SGB tokens using Bifrost Wallet, see Bifrost's guide for wrapping and delegating $FLR and guide for wrapping and delegating $SGB . Alternatively, wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Wrap and Delegate"},{"location":"user/wallets/brave-wallet/","text":"Brave Wallet # Brave Browser now offers a noncustodial software wallet on both Windows and macOS for Ethereum Virtual Machine (EVM) integrated chains such as Flare and Songbird. Getting Started # To use Brave Wallet with Flare or Songbird, ensure you have: Downloaded Brave Browser to your computer, version 1.42.88 or later. Initialized a Brave wallet or restored an existing one. Protected your Brave wallet with a password. Backed up your crypto wallet with a 12-word recovery phrase. Adding Flare Tokens # After your wallet is set up, you need to connect to Flare's networks, which will add each network's native token to your listed assets. Open Brave browser on your computer. Navigate to Settings , and select Web3 from the list of options. In the box on the right, click Wallet Networks , and then click Add . Complete the following steps to set up the Flare network and Songbird network: Flare Songbird In the Search network field , select 0xe(14) Flare Mainnet , and verify that the displayed values match the values in this table: Network Setting Value The id of chain 0xe The name of chain Flare Mainnet Chain's currency name Flare Chain's currency symbol FLR Chain's currency decimals 18 RPC URLs https://flare-api.flare.network/ext/C/rpc Icon URLs (leave blank) Block explorer URLs https://flare-explorer.flare.network Click Submit . In the Search network field , select 0x13(19) Songbird Canary-Network , and verify that the displayed values match the values in the following table. Important Make sure the RPC node URL is https://songbird-api.flare.network/ext/C/rpc . Network Setting Value The id of chain 0x13 The name of chain Songbird Canary-Network Chain's currency name Songbird Chain's currency symbol SGB Chain's currency decimals 18 RPC URLs https://songbird-api.flare.network/ext/C/rpc Icon URLs (leave blank) Block explorer URLs https://songbird-explorer.flare.network Click Submit . Click Wallet . Specify your password, and click Unlock . On the left side of the screen beside Balance , click the drop-down menu and select Flare or Songbird . Connection to the network is complete, and your balance of native tokens on the selected network is displayed. With the previous steps completed, you now have access to the Flare network and Songbird Network and each network's native token, but you must complete an extra step for the wallet to recognize wrapped tokens, which are needed in a lot of operations. Wrap and Delegate # When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. Wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Brave Wallet"},{"location":"user/wallets/brave-wallet/#brave-wallet","text":"Brave Browser now offers a noncustodial software wallet on both Windows and macOS for Ethereum Virtual Machine (EVM) integrated chains such as Flare and Songbird.","title":"Brave Wallet"},{"location":"user/wallets/brave-wallet/#getting-started","text":"To use Brave Wallet with Flare or Songbird, ensure you have: Downloaded Brave Browser to your computer, version 1.42.88 or later. Initialized a Brave wallet or restored an existing one. Protected your Brave wallet with a password. Backed up your crypto wallet with a 12-word recovery phrase.","title":"Getting Started"},{"location":"user/wallets/brave-wallet/#adding-flare-tokens","text":"After your wallet is set up, you need to connect to Flare's networks, which will add each network's native token to your listed assets. Open Brave browser on your computer. Navigate to Settings , and select Web3 from the list of options. In the box on the right, click Wallet Networks , and then click Add . Complete the following steps to set up the Flare network and Songbird network: Flare Songbird In the Search network field , select 0xe(14) Flare Mainnet , and verify that the displayed values match the values in this table: Network Setting Value The id of chain 0xe The name of chain Flare Mainnet Chain's currency name Flare Chain's currency symbol FLR Chain's currency decimals 18 RPC URLs https://flare-api.flare.network/ext/C/rpc Icon URLs (leave blank) Block explorer URLs https://flare-explorer.flare.network Click Submit . In the Search network field , select 0x13(19) Songbird Canary-Network , and verify that the displayed values match the values in the following table. Important Make sure the RPC node URL is https://songbird-api.flare.network/ext/C/rpc . Network Setting Value The id of chain 0x13 The name of chain Songbird Canary-Network Chain's currency name Songbird Chain's currency symbol SGB Chain's currency decimals 18 RPC URLs https://songbird-api.flare.network/ext/C/rpc Icon URLs (leave blank) Block explorer URLs https://songbird-explorer.flare.network Click Submit . Click Wallet . Specify your password, and click Unlock . On the left side of the screen beside Balance , click the drop-down menu and select Flare or Songbird . Connection to the network is complete, and your balance of native tokens on the selected network is displayed. With the previous steps completed, you now have access to the Flare network and Songbird Network and each network's native token, but you must complete an extra step for the wallet to recognize wrapped tokens, which are needed in a lot of operations.","title":"Adding Flare Tokens"},{"location":"user/wallets/brave-wallet/#wrap-and-delegate","text":"When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. Wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Wrap and Delegate"},{"location":"user/wallets/dcent-wallet/","text":"D'CENT Wallet # D'CENT Biometric Wallet is a noncustodial hardware wallet and is considered one of the most secure ways to manage your crypto assets. Getting Started # Purchase a D'CENT Biometric hardware wallet from the official D'CENT shop or download their software wallet/mobile app from the Apple App Store or Google Play Store . Then either initialize a new wallet or import an existing one from a recovery phrase. The official D'CENT device setup help guides can be found here: https://userguide.dcentwallet.com/biometric-wallet/setting-up . Adding Flare Tokens # After your device is set up and synced with the mobile app, complete the following procedure to add native tokens $FLR and $SGB to your listed assets. Although this procedure also explains how to add the wrapped tokens $WFLR and $WSGB to your listed assets, you can automatically add $WFLR and $WSGB using the Flare Portal . Ensure the D'CENT biometric wallet is updated with the latest firmware, v2.24.0 or later. Login to your D'CENT mobile app and have your device turned on, unlocked, and paired via Bluetooth. Click the + sign on the bottom right of the Account tab. In the Search box, search for one of the following tokens to add, and select the result: Token Result Flare Flare (FLR) Songbird Songbird Token (SGB) Wrapped Flare Wrapped Flare (WFLR) Wrapped Songbird Wrapped Songbird (WSGB) Name your new account, and click Create . Repeat steps 4 and 5 for each token you want to add to the list of assets in your wallet. Wrap and Delegate # When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. You can wrap and delegate your $SGB using D'CENT's native FTSO Portal: Delegation instructions for the Flare network are awaiting confirmation. Click the Discovery tab at the bottom middle of the screen. Select the FTSO Portal from the menu then click Go . Choose the Songbird account you wish to use and click Connect . You will need to wrap your $SGB by clicking SGB \u2194\ufe0f WSGB marked in green near the top middle of the screen. Input the $SGB amount you want to wrap and click the green SGB \u2194\ufe0f WSGB box. Click Confirm and follow the prompts to sign the transaction with your hardware device. You can now delegate your $WSGB by clicking Add delegation . Select a provider and input the percentage of your $WSGB holdings you want to delegate to their service and press Delegate . Note Providers listed as a Partner have additional security features integrated with D'cent. Click Confirm and follow the prompts to sign the transaction with your hardware device. To add a second provider (up to two), repeat steps 7 through 9. Alternatively, wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"D'CENT Wallet"},{"location":"user/wallets/dcent-wallet/#dcent-wallet","text":"D'CENT Biometric Wallet is a noncustodial hardware wallet and is considered one of the most secure ways to manage your crypto assets.","title":"D'CENT Wallet"},{"location":"user/wallets/dcent-wallet/#getting-started","text":"Purchase a D'CENT Biometric hardware wallet from the official D'CENT shop or download their software wallet/mobile app from the Apple App Store or Google Play Store . Then either initialize a new wallet or import an existing one from a recovery phrase. The official D'CENT device setup help guides can be found here: https://userguide.dcentwallet.com/biometric-wallet/setting-up .","title":"Getting Started"},{"location":"user/wallets/dcent-wallet/#adding-flare-tokens","text":"After your device is set up and synced with the mobile app, complete the following procedure to add native tokens $FLR and $SGB to your listed assets. Although this procedure also explains how to add the wrapped tokens $WFLR and $WSGB to your listed assets, you can automatically add $WFLR and $WSGB using the Flare Portal . Ensure the D'CENT biometric wallet is updated with the latest firmware, v2.24.0 or later. Login to your D'CENT mobile app and have your device turned on, unlocked, and paired via Bluetooth. Click the + sign on the bottom right of the Account tab. In the Search box, search for one of the following tokens to add, and select the result: Token Result Flare Flare (FLR) Songbird Songbird Token (SGB) Wrapped Flare Wrapped Flare (WFLR) Wrapped Songbird Wrapped Songbird (WSGB) Name your new account, and click Create . Repeat steps 4 and 5 for each token you want to add to the list of assets in your wallet.","title":"Adding Flare Tokens"},{"location":"user/wallets/dcent-wallet/#wrap-and-delegate","text":"When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. You can wrap and delegate your $SGB using D'CENT's native FTSO Portal: Delegation instructions for the Flare network are awaiting confirmation. Click the Discovery tab at the bottom middle of the screen. Select the FTSO Portal from the menu then click Go . Choose the Songbird account you wish to use and click Connect . You will need to wrap your $SGB by clicking SGB \u2194\ufe0f WSGB marked in green near the top middle of the screen. Input the $SGB amount you want to wrap and click the green SGB \u2194\ufe0f WSGB box. Click Confirm and follow the prompts to sign the transaction with your hardware device. You can now delegate your $WSGB by clicking Add delegation . Select a provider and input the percentage of your $WSGB holdings you want to delegate to their service and press Delegate . Note Providers listed as a Partner have additional security features integrated with D'cent. Click Confirm and follow the prompts to sign the transaction with your hardware device. To add a second provider (up to two), repeat steps 7 through 9. Alternatively, wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Wrap and Delegate"},{"location":"user/wallets/enkrypt-wallet/","text":"Enkrypt Wallet # Enkrypt is a multichain , open-source and noncustodial wallet that tracks no data. It interacts with Polkadot, Ethereum, Bitcoin and more, all directly in the browser. Getting Started # Install Enkrypt . Create a new wallet or import an existing wallet to Enkrypt. Securely back up your recovery phrase offline. Protect your Enkrypt wallet with a password. Adding Flare Tokens # After you set up your wallet, connect to Flare's networks, which will add each network's native token and wrapped token to your listed assets: Add Flare or Songbird as a custom network using these parameters: Flare Songbird From the main menu, click Manage networks . The Manage networks window is displayed. Click the sliders icon beside the Search networks field. Click Custom network . The Custom network window is displayed. Specify the following values: Network Setting Value Network Name Flare New RPC URL https://flare-api.flare.network/ext/C/rpc Chain ID 14 Currency Symbol FLR Block Explorer URL https://flare-explorer.flare.network Click Add network . Locate Flare Mainnet at the bottom of the list, and toggle the switch to enable your wallet to display your balance of $FLR . Follow these instructions for manually adding tokens to retrieve the WNat contract address, and copy it. Important The WNat contract address is different on each network. Ensure you copy the WNat contract address on the Flare network. With Flare Mainnet selected on the main menu in your Enkrypt wallet, click Add custom token . The Add a token window is displayed. In the Contract address field, paste the WNat contract address that you copied in step 6. Click Add token . The wrapped token $WFLR is added to your list of Flare assets. From the main menu, click Manage networks . The Manage networks window is displayed. Click the sliders icon beside the Search networks field. Click Custom network . The Custom network window is displayed. Specify the following values: Network Setting Value Network Name Songbird New RPC URL https://songbird-api.flare.network/ext/C/rpc Chain ID 19 Currency Symbol SGB Block Explorer URL https://songbird-explorer.flare.network Click Add network . Locate Songbird Canary-Network at the bottom of the list, and toggle the switch to enable your wallet to display your balance of $SGB . Follow these instructions for manually adding tokens to retrieve the WNat contract address, and copy it. Important The WNat contract address is different on each network. Ensure you copy the WNat contract address on the Songbird network. With Songbird Canary-Network selected on the main menu in your Enkrypt wallet, click Add custom token . The Add a token window is displayed. In the Contract address field, paste the WNat contract address that you copied in step 6. Click Add token . The wrapped token $WSGB is added to your list of Songbird assets. Wrap and Delegate # When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. Wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Enkrypt Wallet"},{"location":"user/wallets/enkrypt-wallet/#enkrypt-wallet","text":"Enkrypt is a multichain , open-source and noncustodial wallet that tracks no data. It interacts with Polkadot, Ethereum, Bitcoin and more, all directly in the browser.","title":"Enkrypt Wallet"},{"location":"user/wallets/enkrypt-wallet/#getting-started","text":"Install Enkrypt . Create a new wallet or import an existing wallet to Enkrypt. Securely back up your recovery phrase offline. Protect your Enkrypt wallet with a password.","title":"Getting Started"},{"location":"user/wallets/enkrypt-wallet/#adding-flare-tokens","text":"After you set up your wallet, connect to Flare's networks, which will add each network's native token and wrapped token to your listed assets: Add Flare or Songbird as a custom network using these parameters: Flare Songbird From the main menu, click Manage networks . The Manage networks window is displayed. Click the sliders icon beside the Search networks field. Click Custom network . The Custom network window is displayed. Specify the following values: Network Setting Value Network Name Flare New RPC URL https://flare-api.flare.network/ext/C/rpc Chain ID 14 Currency Symbol FLR Block Explorer URL https://flare-explorer.flare.network Click Add network . Locate Flare Mainnet at the bottom of the list, and toggle the switch to enable your wallet to display your balance of $FLR . Follow these instructions for manually adding tokens to retrieve the WNat contract address, and copy it. Important The WNat contract address is different on each network. Ensure you copy the WNat contract address on the Flare network. With Flare Mainnet selected on the main menu in your Enkrypt wallet, click Add custom token . The Add a token window is displayed. In the Contract address field, paste the WNat contract address that you copied in step 6. Click Add token . The wrapped token $WFLR is added to your list of Flare assets. From the main menu, click Manage networks . The Manage networks window is displayed. Click the sliders icon beside the Search networks field. Click Custom network . The Custom network window is displayed. Specify the following values: Network Setting Value Network Name Songbird New RPC URL https://songbird-api.flare.network/ext/C/rpc Chain ID 19 Currency Symbol SGB Block Explorer URL https://songbird-explorer.flare.network Click Add network . Locate Songbird Canary-Network at the bottom of the list, and toggle the switch to enable your wallet to display your balance of $SGB . Follow these instructions for manually adding tokens to retrieve the WNat contract address, and copy it. Important The WNat contract address is different on each network. Ensure you copy the WNat contract address on the Songbird network. With Songbird Canary-Network selected on the main menu in your Enkrypt wallet, click Add custom token . The Add a token window is displayed. In the Contract address field, paste the WNat contract address that you copied in step 6. Click Add token . The wrapped token $WSGB is added to your list of Songbird assets.","title":"Adding Flare Tokens"},{"location":"user/wallets/enkrypt-wallet/#wrap-and-delegate","text":"When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. Wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Wrap and Delegate"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/","text":"Ledger Nano X and Nano S # Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions. This guide explains how to configure your Ledger device to use it through the MetaMask wallet. One-Time Setup # You only need to perform the steps in this section once. Installing MetaMask # Follow the MetaMask guide to install and configure the MetaMask wallet. Make sure MetaMask can show $FLR and $SGB tokens, and their wrapped $WFLR and $WSGB versions. Installing Ledger # Follow the Ledger instructions to: Install Ledger Live and open it. Initialize your Ledger device with a recovery phrase. Protect your Ledger device with a PIN code. Install the latest Ledger device firmware. Installing the Ethereum App # Flare is EVM -compatible, so it uses the Ethereum app on Ledger. After meeting the requirements above, install the Ethereum app on the device with the following steps: Open the Manager in Ledger Live. Connect and unlock your Ledger device. Enable the manager on your Ledger device by pressing both buttons. Find Ethereum (ETH) in the app catalog. Click the Install button of the app. Your Ledger device displays Processing\u2026 . The app installation is complete. Creating Accounts # After enabling access to Songbird and Flare in MetaMask, create one or more accounts. In MetaMask: Select Flare or Songbird in the network dropdown. Connect your Ledger device using USB. Open the Ethereum app on your Ledger device. If Ledger Live is still running on your computer, you must quit the app. Locate MetaMask's Settings and then Advanced settings. Ensure that the Preferred Ledger Connection Type is set to WebHID in the drop-down menu (it should be the case by default). Click your account image and Connect Hardware Wallet . A pop up box opens listing paired Human Interface Devices (HID). Highlight your Ledger S or Ledger X and click Connect . A random set of addresses opens that are available for your use. To create one or more accounts (for example, for different tokens or different purposes), select any account number or multiple account numbers and click Unlock . You have created one or more Ledger accounts to which you can send $FLR or $SGB tokens. Your $FLR and $SGB balance will be displayed on the MetaMask overview. Once the accounts contain $WFLR or $WSGB their balances will be shown too if you followed the Wrapping Flare Tokens guide. Note The Ledger Live desktop application, as of version 2.55, can show your $FLR and $SGB balances but NOT the wrapped $WFLR and $WSGB versions. The tokens are still in the account, but Ledger Live does not show them. Using Ledger with MetaMask # Now that you have the one-time setup complete, here are a few things you can do to get started using your new accounts. Receive tokens . To receive tokens, copy your account address and share it with the sender. Send tokens . To send tokens, click Send and enter the recipient address. Then enter the desired amount and click Next . MetaMask will ask you to confirm the transaction from the Ledger device. Confirm transactions . To confirm or reject a transaction, follow the on-screen instructions on your Ledger device. Warning Always review all transaction details on your Ledger device before confirming any transaction! To learn how to use Ledger, including signing transactions, go to Ledger.com .","title":"Ledger Nano X and Nano S"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/#ledger-nano-x-and-nano-s","text":"Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions. This guide explains how to configure your Ledger device to use it through the MetaMask wallet.","title":"Ledger Nano X and Nano S"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/#one-time-setup","text":"You only need to perform the steps in this section once.","title":"One-Time Setup"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/#installing-metamask","text":"Follow the MetaMask guide to install and configure the MetaMask wallet. Make sure MetaMask can show $FLR and $SGB tokens, and their wrapped $WFLR and $WSGB versions.","title":"Installing MetaMask"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/#installing-ledger","text":"Follow the Ledger instructions to: Install Ledger Live and open it. Initialize your Ledger device with a recovery phrase. Protect your Ledger device with a PIN code. Install the latest Ledger device firmware.","title":"Installing Ledger"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/#installing-the-ethereum-app","text":"Flare is EVM -compatible, so it uses the Ethereum app on Ledger. After meeting the requirements above, install the Ethereum app on the device with the following steps: Open the Manager in Ledger Live. Connect and unlock your Ledger device. Enable the manager on your Ledger device by pressing both buttons. Find Ethereum (ETH) in the app catalog. Click the Install button of the app. Your Ledger device displays Processing\u2026 . The app installation is complete.","title":"Installing the Ethereum App"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/#creating-accounts","text":"After enabling access to Songbird and Flare in MetaMask, create one or more accounts. In MetaMask: Select Flare or Songbird in the network dropdown. Connect your Ledger device using USB. Open the Ethereum app on your Ledger device. If Ledger Live is still running on your computer, you must quit the app. Locate MetaMask's Settings and then Advanced settings. Ensure that the Preferred Ledger Connection Type is set to WebHID in the drop-down menu (it should be the case by default). Click your account image and Connect Hardware Wallet . A pop up box opens listing paired Human Interface Devices (HID). Highlight your Ledger S or Ledger X and click Connect . A random set of addresses opens that are available for your use. To create one or more accounts (for example, for different tokens or different purposes), select any account number or multiple account numbers and click Unlock . You have created one or more Ledger accounts to which you can send $FLR or $SGB tokens. Your $FLR and $SGB balance will be displayed on the MetaMask overview. Once the accounts contain $WFLR or $WSGB their balances will be shown too if you followed the Wrapping Flare Tokens guide. Note The Ledger Live desktop application, as of version 2.55, can show your $FLR and $SGB balances but NOT the wrapped $WFLR and $WSGB versions. The tokens are still in the account, but Ledger Live does not show them.","title":"Creating Accounts"},{"location":"user/wallets/how-to-access-flare-network-with-a-ledger-device/#using-ledger-with-metamask","text":"Now that you have the one-time setup complete, here are a few things you can do to get started using your new accounts. Receive tokens . To receive tokens, copy your account address and share it with the sender. Send tokens . To send tokens, click Send and enter the recipient address. Then enter the desired amount and click Next . MetaMask will ask you to confirm the transaction from the Ledger device. Confirm transactions . To confirm or reject a transaction, follow the on-screen instructions on your Ledger device. Warning Always review all transaction details on your Ledger device before confirming any transaction! To learn how to use Ledger, including signing transactions, go to Ledger.com .","title":"Using Ledger with MetaMask"},{"location":"user/wallets/how-to-access-flare-network-with-a-trezor-device/","text":"Trezor T # Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions. Getting Started # To use your Trezor device with Flare ( $FLR ) or Songbird ( $SGB ), first make sure that you have: Initialized your Trezor device with a recovery phrase. Protected your Trezor device with a PIN code. Trezor Suite is installed, open and ready to use. Enabled Ethereum under the Crypto tab in Trezor Suite. Installed the latest Trezor device firmware. Installed the latest version of Google Chrome . Installed the MetaMask browser extension . Use Trezor T Device with MetaMask # You can access Flare and Songbird by using your Trezor T with the MetaMask browser extension. Open the MetaMask browser extension in your browser. Click Custom RPC in the network dropdown. Songbird Flare Field Value Network Name Songbird New RPC URL https://songbird-api.flare.network/ext/C/rpc Chain ID 19 Currency Symbol SGB Block Explorer URL https://songbird-explorer.flare.network Field Value Network Name Flare New RPC URL https://flare-api.flare.network/ext/C/rpc Chain ID 14 Currency Symbol FLR Block Explorer URL https://flare-explorer.flare.network Click Save . Select Flare or Songbird in the network dropdown. Connect and unlock your Trezor device. Click your account image and Connect Hardware Wallet . Select Trezor and click Continue . Follow the on screen instructions to export your public key. Select your Account and click Unlock . Info Please note that the provided Flare RPC node is only for individuals and not for commercial use . Companies and developers may contact Flare Networks to arrange dedicated access. You will see your $FLR or $SGB balance on the overview. To receive tokens, copy your account address and share it with the sender. To send tokens, click Send and enter the recipient address, enter the desired amount and click Next . Follow the on screen instructions to confirm or reject the transaction on your Trezor device. Warning Always review all transaction details on your Trezor device before confirming any transaction! Wrap and Delegate # Once connected to a Flare network, enter the address of the website or dapp you wish to use to wrap and delegate in the MetaMask browser. A few FTSO data providers have developed dApps integrated with their websites that allow users to wrap, delegate and claim SGB and Flare rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Other providers have their own websites and are developing similar dapps. See the full list of active data providers on flaremetrics.io .","title":"Trezor T"},{"location":"user/wallets/how-to-access-flare-network-with-a-trezor-device/#trezor-t","text":"Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions.","title":"Trezor T"},{"location":"user/wallets/how-to-access-flare-network-with-a-trezor-device/#getting-started","text":"To use your Trezor device with Flare ( $FLR ) or Songbird ( $SGB ), first make sure that you have: Initialized your Trezor device with a recovery phrase. Protected your Trezor device with a PIN code. Trezor Suite is installed, open and ready to use. Enabled Ethereum under the Crypto tab in Trezor Suite. Installed the latest Trezor device firmware. Installed the latest version of Google Chrome . Installed the MetaMask browser extension .","title":"Getting Started"},{"location":"user/wallets/how-to-access-flare-network-with-a-trezor-device/#use-trezor-t-device-with-metamask","text":"You can access Flare and Songbird by using your Trezor T with the MetaMask browser extension. Open the MetaMask browser extension in your browser. Click Custom RPC in the network dropdown. Songbird Flare Field Value Network Name Songbird New RPC URL https://songbird-api.flare.network/ext/C/rpc Chain ID 19 Currency Symbol SGB Block Explorer URL https://songbird-explorer.flare.network Field Value Network Name Flare New RPC URL https://flare-api.flare.network/ext/C/rpc Chain ID 14 Currency Symbol FLR Block Explorer URL https://flare-explorer.flare.network Click Save . Select Flare or Songbird in the network dropdown. Connect and unlock your Trezor device. Click your account image and Connect Hardware Wallet . Select Trezor and click Continue . Follow the on screen instructions to export your public key. Select your Account and click Unlock . Info Please note that the provided Flare RPC node is only for individuals and not for commercial use . Companies and developers may contact Flare Networks to arrange dedicated access. You will see your $FLR or $SGB balance on the overview. To receive tokens, copy your account address and share it with the sender. To send tokens, click Send and enter the recipient address, enter the desired amount and click Next . Follow the on screen instructions to confirm or reject the transaction on your Trezor device. Warning Always review all transaction details on your Trezor device before confirming any transaction!","title":"Use Trezor T Device with MetaMask"},{"location":"user/wallets/how-to-access-flare-network-with-a-trezor-device/#wrap-and-delegate","text":"Once connected to a Flare network, enter the address of the website or dapp you wish to use to wrap and delegate in the MetaMask browser. A few FTSO data providers have developed dApps integrated with their websites that allow users to wrap, delegate and claim SGB and Flare rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Other providers have their own websites and are developing similar dapps. See the full list of active data providers on flaremetrics.io .","title":"Wrap and Delegate"},{"location":"user/wallets/how-to-access-flare-network-with-metamask/","text":"MetaMask # The MetaMask browser extension is a convenient way to access and interact with blockchains like Songbird or Flare. To do so, you need to first add a custom network to MetaMask, as explained in this guide. Make sure that you have securely backed up your recovery phrase before proceeding. Getting Started # To use MetaMask with Songbird or Flare, ensure you have: Installed the latest version of Google Chrome . Installed the MetaMask browser extension . Created a new wallet or imported an existing wallet to MetaMask. Securely backed up your recovery phrase offline. Protected your MetaMask with a password. Adding Flare Tokens # After you set up your wallet, add the native tokens $FLR and $SGB and the wrapped tokens $WFLR and $WSGB to your listed assets: Open the MetaMask browser extension. Unlock your MetaMask wallet with your password. Click the networks drop-down menu, and click Add network . In a browser tab, the Settings menu opens to the Networks section. Scroll to the bottom of the page, and click Add a network manually . Complete the following steps to set up the Flare network and Songbird network: Flare Songbird Specify the values from the following table to set up the Flare network, which will add the native $FLR token to your list of assets. Field Value Network Name Flare New RPC URL https://flare-api.flare.network/ext/C/rpc Chain ID 14 Currency Symbol FLR Block Explorer URL https://flare-explorer.flare.network Click Save . Follow these instructions to automatically add $WFLR to your listed assets. Specify the values from the following table to set up the Songbird network, which will add the native $SGB token to your list of assets. Field Value Network Name Songbird New RPC URL https://songbird-api.flare.network/ext/C/rpc Chain ID 19 Currency Symbol SGB Block Explorer URL https://songbird-explorer.flare.network Click Save . Follow these instructions to automatically add $WSGB to your listed assets. Warning Always review all transaction details in MetaMask before confirming any transaction! Wrap and Delegate # When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. Wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"MetaMask"},{"location":"user/wallets/how-to-access-flare-network-with-metamask/#metamask","text":"The MetaMask browser extension is a convenient way to access and interact with blockchains like Songbird or Flare. To do so, you need to first add a custom network to MetaMask, as explained in this guide. Make sure that you have securely backed up your recovery phrase before proceeding.","title":"MetaMask"},{"location":"user/wallets/how-to-access-flare-network-with-metamask/#getting-started","text":"To use MetaMask with Songbird or Flare, ensure you have: Installed the latest version of Google Chrome . Installed the MetaMask browser extension . Created a new wallet or imported an existing wallet to MetaMask. Securely backed up your recovery phrase offline. Protected your MetaMask with a password.","title":"Getting Started"},{"location":"user/wallets/how-to-access-flare-network-with-metamask/#adding-flare-tokens","text":"After you set up your wallet, add the native tokens $FLR and $SGB and the wrapped tokens $WFLR and $WSGB to your listed assets: Open the MetaMask browser extension. Unlock your MetaMask wallet with your password. Click the networks drop-down menu, and click Add network . In a browser tab, the Settings menu opens to the Networks section. Scroll to the bottom of the page, and click Add a network manually . Complete the following steps to set up the Flare network and Songbird network: Flare Songbird Specify the values from the following table to set up the Flare network, which will add the native $FLR token to your list of assets. Field Value Network Name Flare New RPC URL https://flare-api.flare.network/ext/C/rpc Chain ID 14 Currency Symbol FLR Block Explorer URL https://flare-explorer.flare.network Click Save . Follow these instructions to automatically add $WFLR to your listed assets. Specify the values from the following table to set up the Songbird network, which will add the native $SGB token to your list of assets. Field Value Network Name Songbird New RPC URL https://songbird-api.flare.network/ext/C/rpc Chain ID 19 Currency Symbol SGB Block Explorer URL https://songbird-explorer.flare.network Click Save . Follow these instructions to automatically add $WSGB to your listed assets. Warning Always review all transaction details in MetaMask before confirming any transaction!","title":"Adding Flare Tokens"},{"location":"user/wallets/how-to-access-flare-network-with-metamask/#wrap-and-delegate","text":"When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. Wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Wrap and Delegate"},{"location":"user/wallets/safepal-s1-wallet/","text":"SafePal S1 Wallet # SafePal S1 is a noncustodial hardware wallet that is considered one of the most secure ways to manage your crypto assets. Getting Started # Use of a SafePal S1 hardware wallet requires syncing the device with the mobile app. A step by step unboxing guide to initialize a new device/wallet, or import an existing one from a recovery phrase, can be found here: https://safepalsupport.zendesk.com/hc/en-us/articles/360046051752-How-to-Set-Up-a-S1-Hardware-Wallet . Adding Flare Tokens # After you set up your wallet, add the native tokens $FLR and $SGB and the wrapped token $WFLR to your listed assets. Important SafePal currently does not support the addition of wrapped Songbird ( $WSGB ) to wallets. Ensure the SafePal S1 is updated with the latest firmware, version V1.0.32 or later. Login to your SafePal mobile app and have your S1 device turned on and unlocked. Scroll to the bottom of your listed assets in the mobile app, and click Manage Coins . Click the Enter token or token contract address field. The Search window is displayed. Complete the following steps to add Flare and Songbird tokens to your wallet: Flare Songbird Scroll through the list of networks, and select Flare . In the Enter token or token contract address field, search for Flare . Click the plus sign (+) displayed beside FLR (Flare) . FLR (Flare) added to your list of assets, and the homepage is displayed. Scroll to the bottom of your listed assets in the mobile app, and click Manage Coins . Select Flare from the list of networks again, and search for Wrapped Flare . Click the plus sign (+) displayed beside WFLR (Flare) . WFLR (Flare) is added to your list of assets on the homepage. In the Enter token or token contract address field, search for Songbird . A list of Songbird tokens on various blockchains is displayed. Important Ignore all Songbird tokens categorized as BEP-20 and ERC-20. Click the plus sign (+) for this SGB (Songbird) token with the logo: SGB (Songbird) is added to your list of assets on the homepage. Wrap and Delegate # When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. You can use the SafePal mobile app to wrap and delegate your tokens: Open the SafePal mobile app and navigate to the built-in web browser by clicking the four squares at the bottom middle of the screen. Enter the address of the website or dapp you wish to use to wrap and delegate in the search bar at the top of the screen. Info These dapps are usually created by FTSO data providers , but some of them allow you to choose a different data provider to delegate to. Take a look at flaremetrics.io and pick the one you prefer. After copying and pasting the address, click the drop-down menu to the right of the search tab. Scroll down, select the Flare or Songbird networks, and click Go . A pop-up will appear notifying that you are being redirected to a third-party dapp. Press Confirm . Other data providers host similar websites or dapps for wrapping and delegation. See the full list of signal providers on Songbird at https://flaremetrics.io/ . Alternatively, wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"SafePal S1 Wallet"},{"location":"user/wallets/safepal-s1-wallet/#safepal-s1-wallet","text":"SafePal S1 is a noncustodial hardware wallet that is considered one of the most secure ways to manage your crypto assets.","title":"SafePal S1 Wallet"},{"location":"user/wallets/safepal-s1-wallet/#getting-started","text":"Use of a SafePal S1 hardware wallet requires syncing the device with the mobile app. A step by step unboxing guide to initialize a new device/wallet, or import an existing one from a recovery phrase, can be found here: https://safepalsupport.zendesk.com/hc/en-us/articles/360046051752-How-to-Set-Up-a-S1-Hardware-Wallet .","title":"Getting Started"},{"location":"user/wallets/safepal-s1-wallet/#adding-flare-tokens","text":"After you set up your wallet, add the native tokens $FLR and $SGB and the wrapped token $WFLR to your listed assets. Important SafePal currently does not support the addition of wrapped Songbird ( $WSGB ) to wallets. Ensure the SafePal S1 is updated with the latest firmware, version V1.0.32 or later. Login to your SafePal mobile app and have your S1 device turned on and unlocked. Scroll to the bottom of your listed assets in the mobile app, and click Manage Coins . Click the Enter token or token contract address field. The Search window is displayed. Complete the following steps to add Flare and Songbird tokens to your wallet: Flare Songbird Scroll through the list of networks, and select Flare . In the Enter token or token contract address field, search for Flare . Click the plus sign (+) displayed beside FLR (Flare) . FLR (Flare) added to your list of assets, and the homepage is displayed. Scroll to the bottom of your listed assets in the mobile app, and click Manage Coins . Select Flare from the list of networks again, and search for Wrapped Flare . Click the plus sign (+) displayed beside WFLR (Flare) . WFLR (Flare) is added to your list of assets on the homepage. In the Enter token or token contract address field, search for Songbird . A list of Songbird tokens on various blockchains is displayed. Important Ignore all Songbird tokens categorized as BEP-20 and ERC-20. Click the plus sign (+) for this SGB (Songbird) token with the logo: SGB (Songbird) is added to your list of assets on the homepage.","title":"Adding Flare Tokens"},{"location":"user/wallets/safepal-s1-wallet/#wrap-and-delegate","text":"When you delegate your vote power to FTSO data providers, you not only support the Flare ecosystem but also earn monetary rewards. You can use the SafePal mobile app to wrap and delegate your tokens: Open the SafePal mobile app and navigate to the built-in web browser by clicking the four squares at the bottom middle of the screen. Enter the address of the website or dapp you wish to use to wrap and delegate in the search bar at the top of the screen. Info These dapps are usually created by FTSO data providers , but some of them allow you to choose a different data provider to delegate to. Take a look at flaremetrics.io and pick the one you prefer. After copying and pasting the address, click the drop-down menu to the right of the search tab. Scroll down, select the Flare or Songbird networks, and click Go . A pop-up will appear notifying that you are being redirected to a third-party dapp. Press Confirm . Other data providers host similar websites or dapps for wrapping and delegation. See the full list of signal providers on Songbird at https://flaremetrics.io/ . Alternatively, wrap and delegate your $FLR or $SGB tokens using the Flare Portal . First, wrap your tokens , and then delegate them .","title":"Wrap and Delegate"}]}